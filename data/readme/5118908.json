{
  "README": "================================================================\nJohn Kerl\nJan. 20, 2010\n\n================================================================\nPURPOSE / RESEARCH QUESTIONS\n\nThis code serves two purposes.\n\n(1) In a spring 2008 independent study under Jan Wehr, I examined 2D\n    and 3D percolation on integer lattices.  The larger context involved\n    quantum entanglement swapping on lattices; however, the computational\n    questions reduced to the following:\n\n    * Given a lattice site A, what is the probability that the site is in the\n      (unique) infinite cluster on the infinite lattice?  For a computational\n      approximation with an MxN lattice, we estimate the probablity that A is\n      in the largest cluster.  This is an old question; see Grimmett's\n      _Percolation_ for more information.  I chose to examine this numerically,\n      even though the question is not new, to sanity-check my code against\n      known results.\n\n    * Following on the article \"Entanglement Distribution in Pure-State\n      Quantum Networks\", Perseguers, Cirac, Acin, Lewenstein, and Wehr,\n      arXiv:0708.1025v2, given two lattice sites at opposite corners of a unit\n      square, estimate the probablity that one of the two sites is in the\n      largest cluster.  This was treated by John LaPeyre in the Perseguers et\n      al. paper; again, I wanted to reproduce known results as a sanity check.\n\n    * Extending the Perseguers et al. paper, address a similar question for\n      3D lattices.  For more information about the research., please also see\n      frgslides.pdf in the same directory as this file.\n\n(2) This project satisfies the computational requirement for my PhD at the\n    University of Arizona, examined by Kevin Lin.  My dissertation work is\n    largely computational; however, I chose to use this side project for my\n    computing exam since it involves fewer lines of code.  Here, for brevity, I\n    am only presenting the 2D code.\n\n================================================================\nPROBABILITIES OF INTEREST FOR THE RESEARCH PROJECT\n\nLet A be the origin; let A1 be the point (1,0) and A2 be (0,1).  On the\ninfinite lattice (all of Z^2), there is a unique infinite cluster C with\nprobability 1 whenever p > p_c = 0.5.  On the finite MxN lattice, there is a\nlargest cluster C.  (As long as M and N are larger than the p-dependent\ncorrelation length, that largest cluster probably is contained in the infinite\ncluster.)\n\n* theta = P(A in C)\n\n* sigma = P(A1 in C or A2 in C)\n\n* tau   = P(A1 o--o A2), where A1 o--o A2 means there is some path\n  from A1 to A2.\n\n================================================================\nHOW TO COMPILE\n\nYou should be able to simply type \"make\" on any reasonably configured Linux\nsystem.\n\n* For debugging with gdb, please type \"make clean debug\".\n\n* For profiling with gprof, please type \"make clean profile\".  Then, execute\n  the perco2 program as described in the \"HOW TO EXECUTE\" section below.  Then,\n  type \"gprof ./perco2 gmon.out > profile.txt\" and view the file profile.txt to\n  see where the program is spending its time.\n\n* For efficient execution without support for gdb or gprof, please type \"make\n  clean opt\" or \"make clean; make\".\n\n================================================================\nHOW TO EXECUTE\n\nAfter compiling with \"make\", type \"./perco2\" with no arguments to get a usage\nreminder.\n\nExamples of invoking perco2 a single time, interactively:\n\n* ./perco2 print        p=0.6 MN=20\n  Plots a lattice to the screen using ASCII art.\n\n* ./perco2 plot         p=0.6 MN=200\n  Creates \"p2.ppm\", which is an image file.\n\n* ./perco2 nei          p=0.6 MN=20\n  Tests out the number-of-neighbors computation, using visual inspection.\n\n* ./perco2 cluster      p=0.6 MN=20\n  Tests out the single-cluster-marking computation, using visual inspection.\n\n* ./perco2 plotcluster  p=0.6 MN=200\n  Creates \"p2.ppm\", which is an image file.\n\n* ./perco2 meanC0size   p=0.6 MN=20 reps=10000\n\n* ./perco2 meanfC0size  p=0.6 MN=20 reps=10000\n\n* ./perco2 corrlen      p=0.6 MN=20\n\n* ./perco2 1o2          p=0.6 MN=20\n  Tests out the A1 o--o A2 computation, using visual inspection.\n\n* ./perco2 P1o2         p=0.6 MN=20 reps=10000\n  Estimates tau(p), i.e. P(A1 o--o A2).\n\n* ./perco2 clnos        p=0.6 MN=20\n  Tests out the all-cluster-marking computation, using visual inspection.\n\n* ./perco2 plotclusters p=0.6 MN=200\n  Creates \"p2.ppm\", which is an image file.\n\n* ./perco2 clszs        p=0.6 MN=20\n  Tests out the cluster-sizes computation, using visual inspection.\n\n* ./perco2 AinC         p=0.6 MN=20\n  Tests out the largest-cluster-membership computation, using visual\n  inspection.\n\n* ./perco2 PAinC        p=0.6 MN=20 reps=10000\n  Estimates theta(p), i.e. P(A in C).\n\n* ./perco2 U2inC        p=0.6 MN=20\n\n* ./perco2 PU2inC       p=0.6 MN=20 reps=10000\n\nExample of invoking perco2 in a shell script:  please see greeks.sh.\n\n================================================================\nABOUT THE CODE\n\nPlease see the comments in greeks.sh, which invokes the C program perco2\nrepeatedly, sweeping over the parameter space (M, N, p).\n\nTop-level comments about the C code may be found in perco2lib.h.\n", 
  "read_at": 1462551214, 
  "description": "C code for 2D/3D lattice percolation", 
  "README.txt": "================================================================\nJohn Kerl\nJan. 20, 2010\n\n================================================================\nPURPOSE / RESEARCH QUESTIONS\n\nThis code serves two purposes.\n\n(1) In a spring 2008 independent study under Jan Wehr, I examined 2D\n    and 3D percolation on integer lattices.  The larger context involved\n    quantum entanglement swapping on lattices; however, the computational\n    questions reduced to the following:\n\n    * Given a lattice site A, what is the probability that the site is in the\n      (unique) infinite cluster on the infinite lattice?  For a computational\n      approximation with an MxN lattice, we estimate the probablity that A is\n      in the largest cluster.  This is an old question; see Grimmett's\n      _Percolation_ for more information.  I chose to examine this numerically,\n      even though the question is not new, to sanity-check my code against\n      known results.\n\n    * Following on the article \"Entanglement Distribution in Pure-State\n      Quantum Networks\", Perseguers, Cirac, Acin, Lewenstein, and Wehr,\n      arXiv:0708.1025v2, given two lattice sites at opposite corners of a unit\n      square, estimate the probablity that one of the two sites is in the\n      largest cluster.  This was treated by John LaPeyre in the Perseguers et\n      al. paper; again, I wanted to reproduce known results as a sanity check.\n\n    * Extending the Perseguers et al. paper, address a similar question for\n      3D lattices.  For more information about the research., please also see\n      frgslides.pdf in the same directory as this file.\n\n(2) This project satisfies the computational requirement for my PhD at the\n    University of Arizona, examined by Kevin Lin.  My dissertation work is\n    largely computational; however, I chose to use this side project for my\n    computing exam since it involves fewer lines of code.  Here, for brevity, I\n    am only presenting the 2D code.\n\n================================================================\nPROBABILITIES OF INTEREST FOR THE RESEARCH PROJECT\n\nLet A be the origin; let A1 be the point (1,0) and A2 be (0,1).  On the\ninfinite lattice (all of Z^2), there is a unique infinite cluster C with\nprobability 1 whenever p > p_c = 0.5.  On the finite MxN lattice, there is a\nlargest cluster C.  (As long as M and N are larger than the p-dependent\ncorrelation length, that largest cluster probably is contained in the infinite\ncluster.)\n\n* theta = P(A in C)\n\n* sigma = P(A1 in C or A2 in C)\n\n* tau   = P(A1 o--o A2), where A1 o--o A2 means there is some path\n  from A1 to A2.\n\n================================================================\nHOW TO COMPILE\n\nYou should be able to simply type \"make\" on any reasonably configured Linux\nsystem.\n\n* For debugging with gdb, please type \"make clean debug\".\n\n* For profiling with gprof, please type \"make clean profile\".  Then, execute\n  the perco2 program as described in the \"HOW TO EXECUTE\" section below.  Then,\n  type \"gprof ./perco2 gmon.out > profile.txt\" and view the file profile.txt to\n  see where the program is spending its time.\n\n* For efficient execution without support for gdb or gprof, please type \"make\n  clean opt\" or \"make clean; make\".\n\n================================================================\nHOW TO EXECUTE\n\nAfter compiling with \"make\", type \"./perco2\" with no arguments to get a usage\nreminder.\n\nExamples of invoking perco2 a single time, interactively:\n\n* ./perco2 print        p=0.6 MN=20\n  Plots a lattice to the screen using ASCII art.\n\n* ./perco2 plot         p=0.6 MN=200\n  Creates \"p2.ppm\", which is an image file.\n\n* ./perco2 nei          p=0.6 MN=20\n  Tests out the number-of-neighbors computation, using visual inspection.\n\n* ./perco2 cluster      p=0.6 MN=20\n  Tests out the single-cluster-marking computation, using visual inspection.\n\n* ./perco2 plotcluster  p=0.6 MN=200\n  Creates \"p2.ppm\", which is an image file.\n\n* ./perco2 meanC0size   p=0.6 MN=20 reps=10000\n\n* ./perco2 meanfC0size  p=0.6 MN=20 reps=10000\n\n* ./perco2 corrlen      p=0.6 MN=20\n\n* ./perco2 1o2          p=0.6 MN=20\n  Tests out the A1 o--o A2 computation, using visual inspection.\n\n* ./perco2 P1o2         p=0.6 MN=20 reps=10000\n  Estimates tau(p), i.e. P(A1 o--o A2).\n\n* ./perco2 clnos        p=0.6 MN=20\n  Tests out the all-cluster-marking computation, using visual inspection.\n\n* ./perco2 plotclusters p=0.6 MN=200\n  Creates \"p2.ppm\", which is an image file.\n\n* ./perco2 clszs        p=0.6 MN=20\n  Tests out the cluster-sizes computation, using visual inspection.\n\n* ./perco2 AinC         p=0.6 MN=20\n  Tests out the largest-cluster-membership computation, using visual\n  inspection.\n\n* ./perco2 PAinC        p=0.6 MN=20 reps=10000\n  Estimates theta(p), i.e. P(A in C).\n\n* ./perco2 U2inC        p=0.6 MN=20\n\n* ./perco2 PU2inC       p=0.6 MN=20 reps=10000\n\nExample of invoking perco2 in a shell script:  please see greeks.sh.\n\n================================================================\nABOUT THE CODE\n\nPlease see the comments in greeks.sh, which invokes the C program perco2\nrepeatedly, sweeping over the parameter space (M, N, p).\n\nTop-level comments about the C code may be found in perco2lib.h.\n", 
  "id": 5118908
}