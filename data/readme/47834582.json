{
  "read_at": 1462549981, 
  "description": "", 
  "README.md": "# Lasagne implementation of Deep Residual Networks\n\nRecreating Deep Residual Learning for Image Recognition\n\nhttp://arxiv.org/abs/1512.03385\n\nRecreating Identity Mappings in Deep Residual Networks (only pre-activation)\n\nhttp://arxiv.org/abs/1603.05027\n\n\n## Dependancies\n\nNote: CUDA and CuDNN might require root privileges.\n- Ubuntu 14.04\n- CUDA 6.5 (might work with lower, have not tested lower)\n- Follow the lasagne installation lasagne.readthedocs.org/en/latest/user/installation.html\n  - Python2.7\n  - Numpy\n  - Theano (NOT pip install)\n  - Lasagne (should only require 0.1 from pip install, but have only tested on 0.2dev)\n- CuDNN (only tested with v2)\n\n## CuDNN\n\nCuDNN is now disabled by default, to enable see below\n\n## Set-up and run\n\nThe code is based on lasagne's own mnist example: github.com/Lasagne/Lasagne/blob/master/examples/mnist.py\n\nThe data is placed in the main folder for ease of use, but if you do not have the data Deep_Residual_Network_mnist.py will automatically download it.\n\nTo get an overview of commandline inputs, run\n\n>>python Deep_Residual_Network_mnist.py -h\n\nAn example of running with num_blocks/res_units per layer=3, num_filters=8, num_epochs=500 and CuDNN=no\n\n>>python Deep_Residual_Network_mnist.py 3 8 500 no\n\n## BatchNormLayer\n\nUsing lasagnes implementation of BatchNormLayer which is the CuDNNv4 style implementation. See  github.com/Lasagne/Lasagne/pull/467 for more information.\n\n## NOTE\n\nIf any of the provided steps does not work for you please let me know and report an issue/PR, thanks!\n", 
  "id": 47834582
}