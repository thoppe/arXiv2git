{
  "read_at": 1462546029, 
  "description": "Not a blog", 
  "README.md": "# This is not a blog\n\n## Fri Apr 29 14:14:16 MSK 2016\n\nAt this moment I believe that good code is determined by three qualities.\n\n1. Code must solve the user's problem. If you don't know what user story will\nbreak if you delete a particular chunk of code, delete this chunk of code, it\ndoes not add any value.\n\n2. Code must be simple. Programming is hard. Humans tend to make errors. There\nis no solution for this problem. The only remedy is to write obviously correct\ncode. If you think SOLID, you are wrong. If you think YAGNI, it's better.\n\n3. Code must be discussed by at least to people. People like to make stupid\nmistakes, and even moreso, people like to solve the wrong problems. This is not\nthe thing you can correct by beeing smarter. You need another pair of eyes and\nanother perspective.\n\n## On coverage\n## Tue Mar 15 19:38:03 MSK 2016\n\nAt least at the moment I prefer system and integrated tests to unit tests. You\nget what you reward, and unit tests \"reward\" code while system tests \"reward\"\nuser visible functionality.\n\nSo, if you can't tell what business requirement is compromised if the test fails, it\nis probably a useless test.\n\nLine coverage is meaningless, look for feature coverage.\n\nReference: http://www.rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf\n\n## Lesser known refactorings\n\n* Convert comment to function name.\n* Convert unit test to assertion.\n* Convert assertion to type error.\n\n## Thu Feb 25 18:09:48 MSK 2016\n\nParsing is considered a solved problem. Unfortunately, this view is naive, rooted in the widely believed myth that programming languages exist.\nhttp://cacm.acm.org/magazines/2010/2/69354-a-few-billion-lines-of-code-later/fulltext\n\n## Mon Feb 15 00:22:27 MSK 2016\n\nErrors lead to failures https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-yuan.pdf\n\n\n## Thu Jan 28 11:45:45 MSK 2016\n\nIt dawned on me that\n\n1. GCC is implemented in C++\n2. Clang is implemented in C++\n3. HotSpot is implemented in C++\n4. Python is implemented in C\n5. Ruby is implemented in C\n6. V8 is implemented in C++\n7. PHP is implemented in C\n\nI don't know what language is .NET implemented in, but I guess that significant\npart of it is C++.\n\nI hope Rust will change it in several decades =)\n\n## Mon Jan 11 17:43:03 MSK 2016\n\nI think one of the most compelling features of Emacs is its universal text\nuser interface. And one of the main features of the interface is the absence of\nmodal dialogs. Seriously, modal dialogs kill the flow, because their placement\nis totally unpredictable.\n\n\n## Fri Jan  8 00:52:59 MSK 2016\n\nI've just realized that to become a daemon, one should kill one's father and\ngrandfather. Makes perfect sense :)\n\n\n## Sun Jan  3 04:17:56 MSK 2016\n\nHaving spend two weaks debugging a strange TCP performance degradation and\ndiscovering Nagle's algorithms at the end, I can't recommend this strongly\nenough: http://gafferongames.com/networking-for-game-programmers/. I wish I've\nread it two months ago (or when I first stumbled upon a Go series couple of\nyears ago) :)\n\n\n## Fri Dec 25 02:03:28 MSK 2015\n\nA bad photo of an exceptional data visualisation: https://imgur.com/usWXmhM\n\nA. k. a latency numbers every programmer must know.\n\n## Sat Dec 12 17:20:11 MSK 2015\n\nThe amount of work I do is absolutely independent of the amount of time I\nallocate for it.\n\n\n## Fri Dec 11 17:44:11 MSK 2015\n\nhttp://www.staff.science.uu.nl/~gadda001/goodtheorist/\n\n## Sat Nov 21 05:34:47 MSK 2015\n\nLate night compiler errors: There is no `mio` in `mio`.\n\n## Wed Nov  4 17:03:50 MSK 2015\n\nThis is really close to what I think about programming languages\nhttp://bruceeckel.github.io/2015/08/29/what-i-do/\n\n## Sun Nov  1 02:45:04 MSK 2015\n\n[Glium](https://github.com/tomaka/glium) is an awesome Rust OpenGL library. It\nhas a nice [tutorial](http://tomaka.github.io/glium/book/) (wip) but\nunfortunately it does not yet include a section on using linear algebra\nlibraries such as [cgmath](https://github.com/bjz/cgmath-rs) or\n[nalgebra](https://github.com/sebcrozet/nalgebra).\n\n\nI've spent quite some time trying to figure out how to use nalgebra with glium,\nand I don't want you to do the same. So here is a small [example](https://github.com/matklad/bunny).\n\n\n## Thu Oct 29 22:26:14 MSK 2015\n\nAchievement unlocked, I am officially a contributor to Rust 1.4 release:\nhttp://blog.rust-lang.org/2015/10/29/Rust-1.4.html :)\n\nRust is awesome. Rust community is awesome.\n\n\n## Thu Oct 29 16:29:58 MSK 2015\n\nSuper duper Emacs plugin for Intellij IDEA:\nhttps://plugins.jetbrains.com/plugin/7906\n\nIt fixes window switching (C-g, C-x 1, C-x 0 work as expected), fixes navigation\nin tree menus (project structure), makes Switcher (C-x b) absolutely awesome and\nadds a ton of editing commands (M-c finally!).\n\n\nJust don't forget to activate Emacs+ keymap after installation :)\n\nHooray!!\n\n## Tue Oct 27 22:51:33 MSK 2015\n\nDon't fear the --force push.\n\nA clean git history with targeted small commits and meaningful commit messages\nis a great help for understanding the code. You will be able to use `git blame`\nas `show docs` shortcut.\n\nHowever it is impossible to produce a nice history right away, you'll have to\nuse `git rebase -i` or over history rewriting mechanisms. But with history\nrewriting you won't be able to publish your work without `--force` ...\n\nOne way out of the trap is to use local branches and never `push` your work\nuntil you are satisfied with the history. There are huge drawbacks with this\napproach:\n\n  * you changes are stored only on local computer,\n  * your teammates don't know what you are doing,\n  * you **will** change your mind about a good history after the push.\n\n\nThe alternative of using `git push --force`, while scary for the beginners, is\nmuch better in my opinion. Here are a few tips about the `force`:\n\n  * `force` cannot destroy information. All the commits are still on server, so\n    even if you have done something wrong, it is readily revertable.\n\n  * Don't use `--force`, use `--force-with-lease`. It will make sure that you\n    are not accidentally dropping others work.\n\n  * Force push only the branches you own. That is, don't force push to the\n    master branch without the team announcement and agreement and, if your are\n    using an old version of `git`, make sure you are pushing only the current\n    branch (in the old days, git pushed all branches by default).\n\n\nWhen using force push with pull requests remember that the comments to the\ncommits will be lost. So it is better to update PR only once, just before the\nmerge, or even to open a follow up PR with a nice history.\n\n\nTo recap:\n\n  * Create your branch.\n  * Write a ton of dirty commits, pushing them to the server ASAP so that your\n    teammates know what you are working on and give early feedback.\n  * Rewrite history with `git rebase -i`, push with `git push\n    --force-with-lease` and make a PR.\n  * Fix the PR.\n  * Force push again.\n  * Merge and rejoice.\n\n\nAnd may the `--force-with-lease` be with you.\n\n\n## Fri Oct 23 20:44:12 MSK 2015\n\nOne more TODO: http://blog.phil-opp.com/rust-os/2015/08/18/multiboot-kernel/\n\n\n## Fri Oct 23 02:41:48 MSK 2015\n\nThe wu wei of programming: https://github.com/servo/servo/commit/8c301c291a210fb75b1b5c4eba928a146578e3e4\n\n\n## Sat Oct 17 00:28:34 MSK 2015\n\nShould definitely try this: https://littleosbook.github.io/\n\nReminded me a lot of http://nand2tetris.org/\n\n\n## Thu Oct 15 18:54:51 MSK 2015\n\nJust wow! https://github.com/alex/what-happens-when/blob/master/README.rst\n\n## Tue Oct  6 22:18:52 MSK 2015\n\nGit is awesome:\nhttp://perl.plover.com/yak/git/\nhttp://ftp.newartisans.com/pub/git.from.bottom.up.pdf\n\n\n## Sat Sep 12 01:36:05 MSK 2015\n\nPure evil:\n\n```python\ndef eval(expr, var):\n    lam = lambda arg, body: lambda val: eval(\n        body, lambda x: val if x == arg else var(x))\n    app = lambda f, arg: eval(f, var)(eval(arg, var))\n    return locals()[expr['type']](*expr['children'])\n\nprint(eval({'type': 'app',\n            'children': [\n                {'type': 'lam',\n                 'children': ['x', {'type': 'var', 'children': ['x']}]},\n                {'type': 'var',\n                 'children': ['y']}]},\n           {'y': 92}.get))\n\n```\n\n## Fri Sep  4 16:07:09 MSK 2015\n\nParsing is still a hard task:\nhttp://tratt.net/laurie/blog/entries/parsing_the_solved_problem_that_isnt\n\n\n## Thu Aug 20 10:53:44 MSK 2015\n\nA real paper about servo's experience with Rust\nhttp://arxiv.org/pdf/1505.07383.pdf\n\n\n##Tue Aug 18 10:48:43 MSK 2015\n\nA good intro talk about the Rust programming language, with brilliant Q&A\nsection: https://www.youtube.com/watch?v=d1uraoHM8Gg\n\nBut two things are missing:\n  * Ergonomics, usability and quality of implementation of the language. They\n    are really high with rust (for example, a story about stability:\n    http://blog.rust-lang.org/2014/10/30/Stability.html)\n  * It's really hard to grasp the rust ownership model from the slides, because it\n    is not what is found in mainstream languages (although C++11 with move\n    semantics goes in this direction). You'll have to write some code to\n    appreciate the borrow checker =)\n\n\n##Sat Aug 15 00:06:43 MSK 2015\n\nA really nice talk by Crockford: https://www.youtube.com/watch?v=bo36MrBfTk4#t=1135\n\n\n##Thu Aug 13 13:17:42 MSK 2015\n\nFound knowledge: always prefer `git push --force-with-lease` to  `git push\n--force`. Nice [explanation](https://developer.atlassian.com/blog/2015/04/force-with-lease/).\n\nThank you, Magit!\n\n\n##Tue Aug 11 00:49:03 MSK 2015\n\nAn awesome collection of small visual game related algorithms:\n[http://www.redblobgames.com/](http://www.redblobgames.com/).\n\nThe [hexgrid](http://www.redblobgames.com/grids/hexagons/) post was really helpful\nfor this year's [icpf contest](https://github.com/lambda-llama/icfpc2015).\n\n\n##Mon Aug  3 22:59:42 MSK 2015\n\nA nice DB talk: [http://www.youtube.com/watch?t=10&v=fU9hR3kiOK0](http://www.youtube.com/watch?t=10&v=fU9hR3kiOK0)\n", 
  "id": 40145148
}