{
  "read_at": 1462555711, 
  "description": "Hazel Tree management for PHP", 
  "README.md": "Sweelix Node management\n=======================\n\nSweelix node management is an implementation of Rational numbers to key nested sets\nby Dan Hazel (http://arxiv.org/abs/0806.3115).\n\n\n[![Latest Stable Version](https://poser.pugx.org/sweelix/tree/v/stable)](https://packagist.org/packages/sweelix/tree)\n[![Build Status](https://travis-ci.org/pgaultier/tree.svg?branch=master)](https://travis-ci.org/pgaultier/tree)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/pgaultier/tree/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/pgaultier/tree/?branch=master)\n[![Code Coverage](https://scrutinizer-ci.com/g/pgaultier/tree/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/pgaultier/tree/?branch=master)\n[![License](https://poser.pugx.org/sweelix/tree/license)](https://packagist.org/packages/sweelix/tree)\n\n[![Latest Development Version](https://img.shields.io/badge/unstable-devel-yellowgreen.svg)](https://packagist.org/packages/sweelix/tree)\n[![Build Status](https://travis-ci.org/pgaultier/tree.svg?branch=devel)](https://travis-ci.org/pgaultier/tree)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/pgaultier/tree/badges/quality-score.png?b=devel)](https://scrutinizer-ci.com/g/pgaultier/tree/?branch=devel)\n[![Code Coverage](https://scrutinizer-ci.com/g/pgaultier/tree/badges/coverage.png?b=devel)](https://scrutinizer-ci.com/g/pgaultier/tree/?branch=devel)\n\n\nInstallation\n------------\n\nIf you use Packagist for installing packages, then you can update your composer.json like this :\n\n``` json\n{\n    \"require\": {\n        \"sweelix/tree\": \"*\"\n    }\n}\n```\n\nHowto use it\n------------\n\nCreate a Node class and attach the NodeTrait to it. You can look at the class ```Node```.\n\n``` php\nuse sweelix\\tree\\NodeTrait;\n\nclass MyNode {\n    use NodeTrait;\n}\n```\n\nNow you can create a node :\n\n``` php\n$node = new MyNode();\n$node->setPath('1.2.1');\n\n$leftBorder = $node->getLeft();\n\n$rightBorder = $node->getRight();\n\n$treeInfo = $node->getMatrix()->toArray();\n\n// insert your node in DB using leftBorder and rightBorder\n// do not forget to also store the tree info\n\n```\n\nNow you can search the node in your DB using regular nested set methods :\n\n```sql\n# find all the children\nselect * from nodes where left > :nodeLeft and right < :nodeRight order by nodeLeft;\n\n# find all the parents\nselect * from nodes where left < :nodeLeft and right > :nodeRight order by nodeRight;\n\n```\n\n\nContributing\n------------\n\nAll code contributions - including those of people having commit access -\nmust go through a pull request and approved by a core developer before being\nmerged. This is to ensure proper review of all the code.\n\nFork the project, create a [feature branch ](http://nvie.com/posts/a-successful-git-branching-model/), and send us a pull request.\n", 
  "id": 54404801
}