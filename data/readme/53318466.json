{
  "read_at": 1462555443, 
  "description": "TTC: A high-performance Compiler for Tensor Transpositions", 
  "README.md": "# Tensor Transpose Compiler #\n\nThe Tensor Transpose Compiler (TTC) generates high-performance parallel and vectorized C++ code for multidimensional tensor transpositions.\n\nTTC supports arbitrarily dimensional, out-of-place tensor transpositions of the general form:\n\n![ttc](https://github.com/HPAC/TTC/blob/master/misc/equation.png)\n\nwhere A and B respectively denote the input and output tensor;\n<img src=https://github.com/HPAC/TTC/blob/master/misc/pi.png height=16px/> represents the user-specified\ntransposition, and \n<img src=https://github.com/HPAC/TTC/blob/master/misc/alpha.png height=14px/> and\n<img src=https://github.com/HPAC/TTC/blob/master/misc/beta.png height=16px/> being scalars\n(i.e., setting <img src=https://github.com/HPAC/TTC/blob/master/misc/beta.png height=16px/> != 0 enables the user to update the output tensor B).\n\n# Key Features\n--------------\n\n* Generates parallelized and vectorized code\n* Support for multiple instruction sets: **AVX, AVX2, AVX512, KNC, CUDA**\n* Support for all datatypes (i.e., single, double, single-complex and double-comlex)\n* Support for **mixed precision** (i.e., different data types for A and B)\n    * For instance, this feature can be used to generate a mixed-precision BLAS\n* Support for multiple leading dimensions in both A and B\n    * This enables the user to extract (and transpose) a smaller subtensor out of a larger tensor\n* TTC allows the user to guide the code generation process:\n    * E.g., specifying the --maxImplementations=N argument will limited the number of generated implementations to N\n\n\n# Install\n---------\n\nCreate a directory where you want to install TTC:\n\n    mkdir /path/to/ttc\n\nMake sure that you export the TTC_ROOT environment variable (add to your .bashrc):\n\n    export TTC_ROOT=/path/to/ttc\n\nClone the repository into the newly created directory:\n\n    git clone https://github.com/HPAC/TTC.git $TTC_ROOT\n\nInstall TTC:\n\n    cd $TTC_ROOT\n    python setup.py install --user\n\nMake sure that the installed script can be found in your path. You might have to\n   \n    export PATH=$PATH:~/.local/bin\n\nto make TTC available.    \n\n\n\n# Getting Started\n-----------------\n\nPlease run **ttc --help** to get an overview of TTC's parameters.\n\nHere is one exemplary input to TTC: \n\n    ttc --perm=1,0,2 --size=1000,768,16 --dataType=s --alpha=1.0 --beta=1.0 --numThreads=20\n\n# Requirements\n--------------\n\nYou have to have a working C compiler. I have tested TTC with:\n\n* GCC (>= 4.8)\n* Intel's ICC (>= 15.0)\n\n# Benchmark\n-----------\n\nTTC provides a [benchmark for tensor transpositions](https://github.com/HPAC/TTC/blob/master/benchmark/benchmark.py).\n\n    python benchmark.py <num_threads>\n\nThis will generate the input strings for TTC for each of the test-cases within the benchmark. \nThe benchmark uses a default tensor size of 200 MiB (see _sizeMB variable)\n\n\n# Citation\n-----------\nIn case you want refer to TTC as part of a research paper, please cite the following\narticle [(pdf)](http://arxiv.org/pdf/1603.02297v1):\n```\n@article{ttc2016a,\n   author      = {Paul Springer and Jeff R. Hammond and Paolo Bientinesi},\n   title       = {{TTC}: TTC: A high-performance Compiler for Tensor Transpositions},\n   archivePrefix = \"arXiv\",\n   eprint = {1603.02297},\n   primaryClass = \"quant-ph\",\n   journal     = {CoRR},\n   year        = {2016},\n   issue_date  = {March 2016},\n   url         = {http://arxiv.org/abs/1603.02297}\n}\n``` \n\n\n# Feedback & Contributions\n-----------\nWe are happy for any feedback or feature requests. Please contact springer@aices.rwth-aachen.de.\n\nWe also welcome any contributions to the code base.\n", 
  "id": 53318466
}