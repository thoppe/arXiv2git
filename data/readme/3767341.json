{
  "README": "%%% README %%%%\n\nThis repository contains the code associated with the application of idempotent/COD-free methods to robust filtering\nThe research article corresponding to this code is: \nhttp://arxiv.org/abs/1203.5289\n\nThe project in its current form  is meant to demonstrate the application of curse of dimensionality free methods \nto a particular nonlinear example (albeit in a form where the codebase can be reused easily).   It uses\na specific output function x^3/40. Although the theory is valid for  a large class of functions, the\nfitting routines in the implementation are for a specific system.  Future extensions \nwould generalize this, by enabling a user to specify their own system and output functions. Note that at present\nthe system dynamics can be changed but must be linear.  This restriction can be removed by suitable \nmodifications (and the underlying  theory is in place on how to do this, ref paper above). \n\nNote: The code listing has a non-optimal formatting on github. It was \ncoded in vim and using vim and code folding modes would be clearer in helping to see the general flow of the algorithm.\n\n\n\nA description of the files in this project is as follows\n\n- codFreeFilterClass: this is the constructor for the robust filter.  Users will not have to modify this file.\n- fitForFn, fitForFnSq: these functions generate min-plus quadratic expansions for the output function and its square respectively. Users would not have to \nmodify either of these files.\n- mainFile: this is the file to run in order to observe the results of filtering on the system with the nonlinear output function (x^3/40)\n\n! To  make changes:\nThe main places where future development would require altering this code are :\n\n- the mainFile:  for different systems , the parameters that could be changed are:\n\t- system dynamics: (currently uses linear systems ... can be generalized, \n\tthe theory is in place  on how to do this).\n\t- output function (changes to this would also require changes to the \n\t\tfitting routines)\n\t- time step for the simulation, and total time.\n\t- discretization approach from converting the  continuous system to \n\t\tdiscrete form for the given time step.\n\t- filename management for storing plots/ information regarding them.\n\n- fitting routines: These contain initial guesses to the quadratic forms used to fit the measurement function. Currently these guesses are based \non the form of the output.  These would be made more general to accomodate general output functions. \n\t\n\n", 
  "read_at": 1462547175, 
  "description": "This repo contains the code for robust filtering using min-plus methods", 
  "id": 3767341
}