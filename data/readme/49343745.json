{
  "read_at": 1462552985, 
  "description": "Inference of couplings in proteins and RNA from sequence variation", 
  "README.md": "# plmc\nplmc infers pairwise undirected graphical models for families of biological sequences. It implements a penalized, maximum-pseudolikelihood approach and supports custom alphabets as well as various forms of regularization. With a multiple sequence alignment as an input, plmc can quantify inferred coupling strengths between all pairs of positions (couplingsfile output) or infer a generative model of the sequences for predicting the effects of mutations (paramfile output).\n\n## Usage\n      plmc [options] alignmentfile\n      plmc -c couplingsfile alignmentfile\n      plmc -o paramfile -c couplingsfile alignmentfile\n      plmc [-h | --help]\n      \n    Required input:\n      alignmentfile                    Multiple sequence alignment in FASTA format\n\n    Options, output:\n      -c  --couplings  couplingsfile   Save coupling scores to file (text)\n      -o  --output     paramfile       Save estimated parameters to file (binary)\n\n    Options, alignment processing:\n      -s  --scale      <value>         Sequence weights: neighborhood weight [s > 0]\n      -t  --theta      <value>         Sequence weights: neighborhood divergence [0 < t < 1]\n\n    Options, Maximum a posteriori estimation (L-BFGS, default):\n      -lh --lambdah    <value>         Set L2 lambda for fields (h_i)\n      -le --lambdae    <value>         Set L2 lambda for couplings (e_ij)\n      -lg --lambdag    <value>         Set group L1 lambda for couplings (e_ij)\n\n    Options, general:\n      -a  --alphabet   alphabet        Alternative alphabet (default 21: -ACDEFGHIKLMNPQRSTVWY)\n      -f  --focus      identifier      Select only uppercase, non-gapped sites from a focus sequence\n      -g  --gapignore                  Exclude first alphabet character from potential calculations\n      -m  --maxiter                    Maximum number of iterations\n      -n  --ncores    [<number>|max]   Maximum number of threads to use in OpenMP\n      -h  --help                       Usage\n\n## Compilation\nplmc can be compiled to single-core without external libraries, but requires OpenMP for multi-core compilation. On Mac OS X, `clang` does not yet support OpenMP, but versions of `GCC` that do can be found as precompiled binaries [here](http://hpc.sourceforge.net/) or downloaded through package managers like homebrew or macports.\n\n**Multicore**. To compile with `gcc` and OpenMP: \n\n    make all-openmp\n\n**Single core, Linux**. To compile with `gcc`: \n\n    make all\n\n**Single core, Mac OS X**. To compile with `clang`:\n\n    make all-mac\n\n**Single precision**. All of the above targets compile to double precision (64 bit), but reducing the precision to single (32 bit) increases speed and decreases memory requirements by approximately a factor of two. The fastest compile settings are then:\n\n    make all-openmp32\n\n## Output\n\n**Coupling scores**. The `couplingsfile` is a flat text file containing scores quantifying the inferred strength of the coupling between every pair of positions. It has 6 columns: `RES_I FOCUS_AI RES_J FOCUS_AJ 0 SCORE`, where `SCORE` is the coupling score between positions `RES_I` and `RES_J`, `FOCUS_AI` and `FOCUS_AJ` are the letters in the focus sequence (optional, `-` if no focus), `0` is a placeholder. The `SCORE` values are APC-corrected Frobenius norm scores, but alternative scores can be computed from the raw parameter values.\n\n**Parameter estimates**. The model includes sequence-specific parameters for all possible pairs of amino acids at all possible pairs of postions, which is about 10<sup>6</sup>-10<sup>8</sup> parameters for protein families of lengths ~70-700. If a `paramfile` is specified with `-o`, `plmc` will store all inferred parameter values in binary. The MATLAB script `scripts/read_eij.m` can load this binary file format into computable data structures.\n\n## Examples\n**Protein alignments**. The example directory includes an alignment of the protein [dihdyrofolate reductase](https://en.wikipedia.org/wiki/Dihydrofolate_reductase) (DHFR). To infer a model for this family, we can type the following in the base directory:\n\n    bin/plmc -o example/DHFR/DHFR.eij -le 16.0 -lh 0.01 -m 100 -g -f DYR_ECOLI example/DHFR/DHFR.a2m\nThe numeric options set a strong L2 regularization for the couplings, l<sub>e</sub> = 16.0, a weak L2 regularization for the sites, l<sub>h</sub> = 0.01, and the maximum number of iterations at 100. The focus `-f` option tells plmc to only model columns that are present in the E. coli sequence DYR_ECOLI, and the  `-g` gap-ignoring option ignores gaps by modeling only the coding portions of each sequence. To read the binary paramfile `DHFR.eij` and visualize the couplings, we can type the following in MATLAB from the `scripts` directory:\n\n    plot_corrected_couplings('../example/DHFR/DHFR.eij')\n\nThis computes and plots the same (APC-corrected) coupling strengths that would be output to couplingfile, revealing many strongly coupled pairs of positions in the long-term evolution of DHFR:\n<p align=\"center\"><img src=\"example/DHFR/DHFR.png\" width=\"400\"></p>\n\n**RNA alignments**. To override the default alphabet (\"-ACDEFGHIKLMNPQRSTVWY\" for proteins) use the option `-a ALPHABET`. An example RNA alignment is included for the [SAM riboswitch](https://en.wikipedia.org/wiki/SAM_riboswitch_(S_box_leader)). To infer the couplings with an RNA alphabet (\".ACGU\") type the following in the base directory:\n\n    bin/plmc -c example/RNA/RF00162.EC -o example/RNA/RF00162.eij -a .ACGU -le 20.0 -lh 0.01 -m 50 example/RNA/RF00162.fasta\n\nTo plot we type the following in MATLAB from the `scripts` directory:\n\n    plot_corrected_couplings('../example/RNA/RF00162.eij')\n<p align=\"center\"><img src=\"example/RNA/RF00162.png\" width=\"500\"></p>\n\n**Physical systems**. As an example, simulated draws from a 3-state, 1-dimensional Potts model are provided in the examples folder and encoded by the characters _, *, and ^. The following command would estimate the parameters by running to convergence with l<sub>e</sub> = 1.0, l<sub>h</sub> = 1.0 and sequence reweighting disabled:\n\n    bin/plmc -c example/potts/potts3.txt -a _*^ -t -1 -le 1.0 -lh 1.0 example/potts/potts3.a2m\nA 1D Potts model will only have interactions between i -> i + 1, which should be evident in the coupling summary scores output to example/potts/potts3.txt \n\n## References\nThe use of pseudolikelihood approximations for approximate inference of spin models for sequence families was established in the compsci/bioinformatics literature by\n\nBalakrishnan, S., Kamisetty, H., Carbonell, J. G., Lee, S. I., & Langmead, C. J. (2011). [Learning generative models for protein fold families](http://onlinelibrary.wiley.com/doi/10.1002/prot.22934/abstract). Proteins: Structure, Function, and Bioinformatics, 79(4), 1061-1078.\n\nand in the biophysics literature by\n\nEkeberg, M., Lovkvist, C., Lan, Y., Weigt, M., & Aurell, E. (2013). [Improved contact prediction in proteins: using pseudolikelihoods to infer Potts models](http://journals.aps.org/pre/abstract/10.1103/PhysRevE.87.012707). Physical Review E, 87(1), 012707.\n\n`plmc` implements a joint optimization version of inference described in these and subsequent works (i.e. the 'symmetric' pseudolikelihood). If you'd like to use `plmc` in your own work, please cite one of the following papers that uses `plmc`. Also, please let us know if you have any comments or questions!\n\nHopf, T. A., Ingraham, J. B., Poelwijk, F. J., Springer, M., Sander, C., & Marks, D. S. (2015). [Quantification of the effect of mutations using a global probability model of natural sequence variation](http://arxiv.org/abs/1510.04612). arXiv:1510.04612.\n\nWeinreb, C., Riesselman, A. J., Ingraham, J. B., Gross, T., Sander, C., & Marks, D. S. (2016). [3D RNA and Functional Interactions from Evolutionary Couplings](http://www.sciencedirect.com/science/article/pii/S0092867416303282). Cell.\n\n## Author\nplmc was written by [John Ingraham](mailto:john.ingraham@gmail.com) in [Debora Marks' lab](https://marks.hms.harvard.edu/) at Harvard Medical School\n\n## Credits\nThe MAP-based inference uses a [C implementation of L-BFGS by Naoaki Okazaki](https://github.com/chokkan/liblbfgs \"libLBFGS\"), which is included in this repo\n\n\n", 
  "id": 49343745
}