{
  "read_at": 1462511476, 
  "description": "Simulation software for the Molecular Foundry Coarse-grained Model for Peptoids.", 
  "README.txt": "\nINTRODUCTION\n------------\n\nMF-CG-TOID-MC is software to initialize, simulate, and analyze Monte Carlo\nsimulations of the Molecular Foundry Coarse-grained Model for Peptoids\n(MF-CG-TOID).\n\nLICENSE\n-------\n\nMF-CG-TOID-MC is free software: you can redistribute it and/or modify it under \nthe terms of the GNU General Public License as published by the Free Software \nFoundation, either version 3 of the License, or (at your option) any later \nversion.\n\nMF-CG-TOID-MC is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \nPARTICULAR PURPOSE.  See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with\nMF-CG-TOID-MC.  If not, see <http://www.gnu.org/licenses/>.\n\nPUBLICATION\n-----------\n\nDetails of the MF-CG-TOID model and simulation algorithms appear in our paper:\n\n[1] T. K. Haxton, R. V. Mannige, R. N. Zuckermann, and S. Whitelam, \"Modeling\nsequence-specific polymers using anisotropic coarse-grained sites allows\nquantitative comparison with experiment,\" submitted (available online at \narxiv.org/abs/1409.8644).\n\nAUTHORS, CITATION, AND CONTACT INFORMATION\n-------------------------------------------\n\nMF-CG-TOID-MC was developed by Thomas Haxton at the Molecular Foundry, Lawrence \nBerkeley National Laboratory.\n\nWe ask that users please cite our publication [1] in any publication presenting \nresults produced with MF-CG-TOID.\n\nThe latest version of MF-CG-TOID-MC can be found at \nnanotheory.lbl.gov/peptoid_code.\n\nContacts: \nThomas Haxton (tomhaxton@gmail.com)\nStephen Whitelam (swhitelam@lbl.gov) \n\nPLATFORM\n--------\n\nMF-CG-TOID-MC has been tested on Linux and OS X.\n\nREQUIREMENTS\n------------\n\n1. C compiler (e.g. gcc) to compile source code\n2. VMD to view movies of molecular trajectories\n3. Plotting software (e.g. gnuplot) to plot output data\n\nINSTALLATION\n------------\n\nRun \"make\" in the directory \"code\".\n\nCONTENTS/USAGE\n--------------\n\nmonolayer\n\n   Performs a Monte Carlo search over 44 degrees of freedom to find a low-energy\n   monolayer configuration\n\n   Selected options:\n      -inputfile (optional): Monolayer configuration file (if no inputfile is\n         given, the code first solves for a low-energy configuration of a single\n         peptoid chain)\n      -base: Directory for output files\n      -chemistry: Series of integers denoting the sequence(s) of the peptoids.\n         For a monodisperse collection of N block-4n peptoids, the syntax is:\n            -chemistry 1 1 N 2 1 2 n 3 n\n      -interchainspacing: Initial spacing between parallel chains in angstroms\n      -temperature: Fictitious temperature in K used in the Monte Carlo search\n      -cycles: Number of Monte Carlo cycles\n\n   Inputs:\n      <inputfile> (optional)\n\n   Outputs:\n      <base>/c<cycles>.cg.xyz: Time series of coarse-grained coordinates in XYZ\n         format, recorded each time the Monte Carlo search finds a new lowest\n         energy configuration.  Load in VMD Tk Console with \n         \"mol new c<cycles>.cg.xyz\".\n      <base>/c<cycles>.cg.vmd.source: VMD Tcl script for loading bonds, colors,\n         and radii of coarse-grained coordinates.  After loading XYZ file, run\n         Tcl script with \"source c<cycles>.cg.source\".\n      <base>/c<cycles>.allatom.xyz: Time series of all-atom coordinates\n      <base>/c<cycles>.allatom.source: VMD Tcl script for all-atom coordinates\n      <base>/c<cycles>.best.energy: Time series of total energy and components\n         of the energy, recorded each time the search finds a new lowest energy\n      <base>/c<cycles>.best.config: Monolayer configuration file (time series of\n         the 44 degrees of freedom, recorded each time the search finds a new\n         lowest energy)\n\n   Example script: monolayer_search.sh (32 sec on 2.9 GHz processor)\n\nbilayer_from_monolayer_enumerate\n\n   Calculates energies of bilayers formed by sandwiching two monolayers\n   together, iterating over a rectilinear grid of separations\n\n   Selected options:\n      -inputfile: Monolayer configuration file\n      -outputfile: Output file for printing separations and energies\n      -chemistry: Series of integers denoting the sequence(s) of the peptoids.\n         For a monodisperse collection of N block-4n peptoids, the syntax is:\n            -chemistry 1 1 N 2 1 2 n 3 n\n         Note that N must account for both leaves of the monolayer, but the\n         system size does not have to match the system size of <inputfile>\n      -firstx -lastx -xspace -firsty -lasty -yspace -firstz -lastz -zspace:\n         Parameters defining the rectilinear grid.  x parameters are in units of\n         the residue spacing, y parameters are in units of the polymer spacing,\n         and z parameters are in angstroms.\n\n   Inputs:\n      <inputfile>\n\n   Outputs:\n      <outputfile>\n\n   Example script: bilayer_sandwich.sh (15 sec on 2.9 GHz processor)\n\nbilayer_from_monolayer\n\n   Performs a Monte Carlo search over 84 degrees of freedom to find a low-energy\n   bilayer configuration, starting from a monolayer configuration (e.g. one\n   minimized by \"monolayer\") and given a starting leaf separation (e.g. found\n   with \"bilayer_from_monolayer_enumerate\")\n\n   Selected options:\n      -inputfile: Monolayer configuration file\n      -base: Directory for output files\n      -chemistry: Series of integers denoting the sequence(s) of the peptoids.\n         For a monodisperse collection of N block-4n peptoids, the syntax is:\n            -chemistry 1 1 N 2 1 2 n 3 n\n      -leafxoffsetfrac -leafyoffsetfrac -leafspacing: Starting leaf separation,\n         in units of the residuespacing (x), polymer spacing (7), and angstroms\n      -temperature: Fictitious temperature in K used in the Monte Carlo search\n      -cycles: Number of Monte Carlo cycles\n\n   Inputs:\n      <inputfile>\n\n   Outputs:\n      <base>/c<cycles>.cg.xyz: Time series of coarse-grained coordinates in XYZ\n         format, recorded each time the Monte Carlo search finds a new lowest\n         energy configuration.  Load in VMD Tk Console with \n         \"mol new c<cycles>.cg.xyz\".\n      <base>/c<cycles>.cg.vmd.source: VMD Tcl script for loading bonds, colors,\n         and radii of coarse-grained coordinates.  After loading XYZ file, run\n         Tcl script with \"source c<cycles>.cg.source\".\n      <base>/c<cycles>.allatom.xyz: Time series of all-atom coordinates\n      <base>/c<cycles>.allatom.source: VMD Tcl script for all-atom coordinates\n      <base>/c<cycles>.best.energy: Time series of total energy and components\n         of the energy, recorded each time the search finds a new lowest energy\n      <base>/c<cycles>.best.config: Bilayer configuration file (time series of\n         the 84 degrees of freedom, recorded each time the search finds a new\n         lowest energy)\n\n   Example script: bilayer_search.sh (1 min 3 sec on 2.9 GHz processor)\n\npeptoid\n\n   Performs Monte Carlo simulations of the MF-CG-TOID model\n\n   Selected options:\n      -interface: Denotes whether (1) or not (0) the simulation has an air-water\n         interface\n      -ictype: Initial condition type\n      -interface, -ictype:\n         0, 0: Simulation coordinate file (continuing a simulation without an\n            interface)\n         0, 1: Dilute 2d lattice (or single chain) in low-energy configuration\n         0, 3: Bilayer configuration from file\n         0, 4: Dilute, random, non-overlapping solution (or single chain)\n            replicated from single-chain conformation from file\n         0, 5: Free-floating (non-periodic) bilayer configuration from file\n         0, 6: Bilayer made from low-energy single-chain conformations\n         0, 7: Stack of bilayers made from replicating a single bilayer\n         1, 0: Simulation coordinate file (continuing a simulation with an\n            interface)\n         1, 2: Monolayer configuration from file\n         1, 3: Bilayer configuration from file\n         1, 4: Prescribed monolayer configuration\n         1, 6: Dilute 2d lattice (or single chain) in low-energy configuration\n         1, 7: Single chain from file\n      -inputfile: Simulation coordinate file, monolayer configuration file,\n         bilayer configuration file, or N/A, depending on <interface> and\n         <ictype>\n      -base: Directory for output files\n      -chemistry: Series of integers denoting the sequence(s) of the peptoids.\n         For a monodisperse collection of N block-4n peptoids, the syntax is:\n            -chemistry 1 1 N 2 1 2 n 3 n\n      -xchains: Number of chains in the x (chain backbone) direction (for \n         monolayers and bilayers initialized from configuration files or low-\n         energy configurations)\n      -temperature: Temperature in K (default 300)\n      -surfacepressure: Surface pressure in kcal/mol/angstrom^2 (default 0)\n      -density: Concentration in residues/angstrom^3 (used only for 2d lattice\n         initial conditions)\n      -molarity: Concentration in moles/L (used only for dilute, random solution\n         and free-floating bilayers)\n      -wholebilayertranslatefreq: Frequency per chain to translate entire \n         bilayer (used for stack of bilayers)\n      -shiftbilayergapfreq: Frequency per chain to attempt \"evaporation moves,\"\n         changing the gap between bilayers (used for stack of bilayers)\n      -stackx, -stacky, -stackz: Separation between stacked bilayers, in \n         angstroms \n      -reset: Denotes whether (1) or not (0; default) to reset time stamp\n      -cycles: Number of Monte Carlo cycles\n      -maxhours: Maximum numer of hours before exiting the simulation\n\n   Inputs:\n      <inputfile>: Simulation coordinate file, monolayer configuration file,\n         bilayer configuration file, or N/A, depending on <interface> and \n         <ictype>\n\n   Outputs:\n      <base>/vmd.cg.xyz: Time series of coarse-grained coordinates in XYZ\n         format.  Load in VMD Tk Console with \"mol new c<cycles>.cg.xyz\".\n      <base>/vmd.cg.source: VMD Tcl script for loading bonds, colors, and radii \n         of coarse-grained coordinates.  After loading XYZ file, run Tcl script \n         with \"source c<cycles>.cg.source\".\n      <base>/vmd.allatom.xyz: Time series of all-atom coordinates\n      <base>/vmd.allatom.source: VMD Tcl script for all-atom coordinates\n      <base>/timeseries: Time series of energy components and simulation box\n         dimensions\n      <base>/trajectory: Time series of coarse-grained site coordinates\n      <base>/com: Time series of center-of-mass position (when simulation\n         contains only one chain)\n      <base>/coord: Simulation coordinate file containing coordinates at the end\n         of the simulation\n\n   Example scripts:\n      single_chain.sh (1 min 39 sec on 2.9 GHz processor)\n      single_chain_interface.sh (2 min 6 sec on 2.9 GHz processor)\n      monolayer.sh (2 hr 19 min on 2.9 GHz processor)\n      bilayer.sh (4 hr 30 min on 2.9 GHz processor)\n      bilayer_stack.sh (54 min on 2.9 GHz processor)\n      bilayer_stack_evaporate.sh (4 hr 48 min on 2.9 GHz processor)\n\npost_analysis\n\n   Calculates X-ray and neutron scattering from estimated all-atom positions and\n   pair distribution functions between coarse-grained sites\n\n   Selected options:\n      -chainlength: Number of residues in peptoid chains (assumes a monodisperse\n         system)\n      -Nchains: Number of chains\n      -mincycle: Minimum Monte Carlo cycle used for averaging\n      -nframes: Maximum number of frames used for averaging (Simulations output\n         1 frame per 100000 cycles by default)\n      -trajectoryfile: Input time series of coarse-grained site coordinates\n      -xrdcode: Code denoting whether scattering calculation should use\n         periodicity in x and y (-xrdcode 2; appropriate for monolayers and\n         free-floating bilayers) or x, y, and z (-xrdcode 3; appropriate for\n         stacks of bilayers)\n      -directory: Directory for output files\n\n   Inputs:\n      <trajectoryfile>\n\n   Outputs:\n      <directory>/gr.<firstframe>-<lastframe>.oppositeleaf.2dnorm\n      <directory>/gr.<firstframe>-<lastframe>.oppositeleaf.3dnorm\n      <directory>/gr.<firstframe>-<lastframe>.sameleaf.2dnorm\n      <directory>/gr.<firstframe>-<lastframe>.sameleaf.3dnorm\n      <directory>/gr.<firstframe>-<lastframe>.samepoly.2dnorm\n      <directory>/gr.<firstframe>-<lastframe>.samepoly.3dnorm\n         Radial distribution functions between coarse-grained sites, separated\n         by sites on the same polymer, different polymer but same leaf, and\n         different leaves, and normalized to compare to a uniform distribution\n         in two or three dimensions\n      <directory>/histo.<firstframe>-<lastframe>.normr\n      <directory>/histo.<firstframe>-<lastframe>.normr.rleftdotn\n      <directory>/histo.<firstframe>-<lastframe>.normr.rrightdotn\n      <directory>/histo.<firstframe>-<lastframe>.rleftdotn\n      <directory>/histo.<firstframe>-<lastframe>.rrightdotn\n      <directory>/histo.<firstframe>-<lastframe>.tripleproduct\n      <directory>/histo.<firstframe>-<lastframe>.tripleproduct.rleftdotn\n      <directory>/histo.<firstframe>-<lastframe>.tripleproduct.rrightdotn\n         One- and two-dimensional histograms of the scalar coordinates appearing\n         in the backbone bonded interaction\n      <directory>/phenhisto.<firstframe>-<lastframe>\n      <directory>/phenmixedhisto.<firstframe>-<lastframe>\n      <directory>/phenmixedsubtracthisto.<firstframe>-<lastframe>\n         Histograms for the scalar coordinates appearing in the Gay-Berne\n         potential for the phenylethyl-phenylethyl nonbonded interaction\n      <directory>/sidehisto.<firstframe>-<lastframe>.ndotn\n      <directory>/sidehisto.<firstframe>-<lastframe>.rdotn\n      <directory>/sidehisto.<firstframe>-<lastframe>.rparallel\n      <directory>/sidehisto.<firstframe>-<lastframe>.rperp\n         Histograms for the scalara coordinates appearing in the sidechain\n         bonded interaction\n      <directory/xrd.allatom.<firstframe>-<lastframe>.faceon.raw\n         Two-dimensional scattering spectrum in the x-y plane, broken down by \n         atom type and before multiplying by an atomic scattering factor\n      <directory/xrd.allatom.<firstframe>-<lastframe>.faceon.weighted\n      <directory/xrd.allatom.<firstframe>-<lastframe>.faceon.neutron.weighted\n         Two-dimensional (x-y) scattering spectra by atom type after multiplying  \n         by the appropriate scattering factors for X-ray and neutron scattering\n      <directory/xrd.allatom.<firstframe>-<lastframe>.faceon.total\n      <directory/xrd.allatom.<firstframe>-<lastframe>.faceon.neutron.total\n         Total x-y X-ray and neutron scattering spectra\n      <directory/xrd.allatom.<firstframe>-<lastframe>.faceon.radav.raw\n      <directory/xrd.allatom.<firstframe>-<lastframe>.faceon.radav.weighted\n      <directory/xrd.allatom.<firstframe>-<lastframe>.faceon.radav.neutron.\n         weighted\n      <directory/xrd.allatom.<firstframe>-<lastframe>.faceon.total\n      <directory/xrd.allatom.<firstframe>-<lastframe>.faceon.neutron.total\n         Radial averages (one dimensional spectra) in the x-y plane\n      <directory/xrd.allatom.<firstframe>-<lastframe>.transverse.raw\n      <directory/xrd.allatom.<firstframe>-<lastframe>.transverse.weighted\n      <directory/xrd.allatom.<firstframe>-<lastframe>.transverse.neutron.\n         weighted\n      <directory/xrd.allatom.<firstframe>-<lastframe>.transverse.total\n      <directory/xrd.allatom.<firstframe>-<lastframe>.transverse.neutron.total\n         Transverse (z) scattering spectra\n\n   Example scripts:\n      post_analysis_monolayer.sh (3 min 6 sec on 2.9 GHz processor)\n      post_analysis_bilayer.sh (6 min 18 sec on 2.9 GHz processor)\n      post_analysis_stack.sh (1 min 53 sec on 2.9 GHz processor)\n\nEXAMPLE SCRIPTS\n---------------\n\nExample scripts are in the directory \"example_scripts.\"  Output generated from\nthese scripts are in the directory \"output.\"\n\nEXAMPLE GNUPLOT SCRIPTS\n-----------------------\n\nExample scripts for plotting data from the example output files are in the\ndirectory \"example_gnuplot_scripts.\"  To run them, use \"load <script>\" in\ngnuplot.", 
  "id": 24855601
}