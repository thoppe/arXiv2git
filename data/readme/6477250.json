{
  "README": "libmpdata++ - a library of parallel MPDATA-based solvers \nfor systems of generalised transport equations \n=======================================================================\n\nTo get more information on libmpdata++, please check: \n  - http://libmpdataxx.igf.fuw.edu.pl/\n  - http://arxiv.org/abs/1407.1309\n  - http://www.geosci-model-dev.net/8/1005/2015/\n\nIn short, libmpdata++ is a header-only C++ library. \nCompilation of programs that use libmpdata++ requires:\n- a C++11 compliant compiler (optionally with OpenMP support)\n- Blitz++ and Boost C++ libraries\n- HDF5 and gnuplot-iostream libraries \n  (optional, depending on the type of output mechanism chosen)\n\nDuring development of libmpdata++, we are continuously testing\nthe code on Linux using GCC and LLVM/Clang as well as on OSX\nusing Apple/Clang - these are considered the supported platforms.\n\nCompilation and execution of the examples shipped with libmpdata++ \nis easiest done using CMake, and the following instructions assume\nyou're using CMake. Some hints on CMake usage are included at the\nend of this file.\n\nThe .travis.yml file shipped with the library contains a complete\nset of commands needed to build and execute all tests programs\nshipped with libmpdata++ on fresh Ubuntu and OSX installations -\nit may contain useful information on obtaining the dependencies.\n\n1. To verify if all dependencies are met, please start with:\n  $ cd libmpdata++\n  $ mkdir build\n  $ cd build\n  $ cmake ..\n  $ cd ../..\n  \nThe next two steps are optional test. Running the tests is highly\nrecommended to verify if the library works correctly in your \nenvironment. Nevertheless, in principle you can skip to step four\nand install the library right away.\n  \n2. To perform unit tests, please try:\n  $ cd tests/unit\n  $ mkdir build\n  $ cd build\n  $ cmake ..\n  $ make\n  $ make test\n  $ cd ../../..\n\nThe unit tests should complete in a dozen of seconds.\n\n3. To reproduce all results from the GMD paper, please try:\n  $ cd tests/paper_2015_GMD\n  $ mkdir build \n  $ cd build\n  $ cmake ..\n  $ make\n  $ make test     \n  $ cd ../../..\n\nThis takes ca. 15 minutes on a quad-core laptop. The \"make test\"\ncommand performs simulations, checks the output against reference \ndata (tests/paper_2015_GMD/*/refdata/*) and plots all figures \nincluded in the paper. The subfolders of paper_2015_GMD correspond \nto consecutive chapters in the GMD paper. Some of the scripts run\nby \"make test\" require additional packages including Python, Python\nlibraries (NumPy, SciPy, matplotlib) and Paraview.\n\n4. To install the library system-wide, please try:\n  $ cd libmpdata++/build\n  $ sudo make install\n\nThis will copy the libmpdata++ headers into the system include path\n(e.g. /usr/include/libmpdata++) and copy the libmpdata++-config.cmake \nfile into the system share directory (e.g. /usr/share/libmpdata++) \nwhat will allow CMake users to do find_package(libmpdata++).\n\nSome CMake hints:\n- to point CMake to a non-default C++ compiler (e.g. clang++):\n  $ cmake .. -DCMAKE_CXX_COMPILER=clang++ \n\n- to alter the installation prefix (e.g. /usr/ instead of /usr/local):\n  $ cmake .. -DCMAKE_INSTALL_PREFIX:PATH=/usr\n\n- to switch between debug and release (default) compilation modes \n  (has to be done after compiler choice):\n  $ cmake .. -DCMAKE_BUILD_TYPE=Debug\n  $ cmake .. -DCMAKE_BUILD_TYPE=Release\n  \n- two alternative ways of cleaning leftovers from a previous build \n  (including CMake cache files):\n  $ rm -rf build/CMakeCache.txt build/CMakeFiles\n  $ rm -rf build; mkdir build\n\n- the output of commands executed by \"make test\" can be viewed with:\n  $ less Testing/Temporary/LastTest.log\n", 
  "read_at": 1462558176, 
  "description": "libmpdata++ - a library of parallel MPDATA-based solvers for systems of generalised transport equations", 
  "id": 6477250
}