{
  "read_at": 1462547423, 
  "description": "", 
  "README.md": "SteganographyKit\r\n================\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/picamator/steganographykit/v/stable.svg)](https://packagist.org/packages/picamator/steganographykit)\r\n[![License](https://poser.pugx.org/picamator/steganographykit/license.svg)](https://packagist.org/packages/picamator/steganographykit)\r\n[![Build Status](https://travis-ci.org/picamator/SteganographyKit.svg?branch=master)](https://travis-ci.org/picamator/SteganographyKit)\r\n[![Coverage Status](https://img.shields.io/coveralls/picamator/SteganographyKit.svg)](https://coveralls.io/r/picamator/SteganographyKit?branch=master)\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/e71d0e53-1709-4449-9ae0-9cb1a838a63b/mini.png)](https://insight.sensiolabs.com/projects/e71d0e53-1709-4449-9ae0-9cb1a838a63b)\r\n\r\nSteganographyKit is a package with implementation several algorithms for image Steganography.\r\n\r\nSteganography is the art and science of hiding information by embedding messages within other, seemingly harmless messages [1].\r\nGeneral overview of Steganography can be found in [3], [7].\r\nSteganographyKit is used terminology described by Christian Cachin [1].\r\n\r\nSteganographyKit contains:\r\n\r\n* Least Significant Bit (LSB) \r\n  * Pure Steganography \r\n  * Secret Key Steganography \r\n\r\nRequirements\r\n------------\r\n* PHP 5.4+\r\n* GDLib\r\n* ZLib\r\n* Only for Suhosin patch special configuration should be added:\r\n```\r\n  suhosin.srand.ignore = Off\r\n  suhosin.mt_srand.ignore = Off\r\n```\r\n\r\nInstallation\r\n------------\r\nThe best way to install SteganographyKit is use composer:\r\n\r\n* Update your `composer.json`\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"picamator/steganographykit\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n\r\n* Run `composer update`\r\n\r\nUsage\r\n-----\r\n### Encode\r\n```php\r\n<?php\r\n\r\nrequire __DIR__ . '/vendor/autoload.php';\r\n\r\n$stegoContainer = new Picamator\\SteganographyKit\\StegoContainer();\r\n\r\n// cover-image.png|.jpg|.gif - path to existing image to cover secretText\r\n// stego-image.png  - path where new stegoImage should be saved\r\n$stegoContainer->encode('/path/to/cover-image.png', \r\n    '/path/to/stego-image.png', 'secret test');\r\n\r\n// output raw image \r\n$stegoContainer->renderImage();\r\n\r\n```\r\n\r\n### Decode\r\n```php\r\n<?php\r\n\r\nrequire __DIR__ . '/vendor/autoload.php';\r\n\r\n$stegoContainer = new Picamator\\SteganographyKit\\StegoContainer();\r\n\r\n// stego-image.png\r\n$secretText = $stegoContainer->decode('/path/to/stego-image.png');\r\n\r\necho $secretText;\r\n\r\n```\r\n\r\n### Use other stegoSystem\r\n``` php\r\n<?php\r\n\r\nrequire __DIR__ . '/vendor/autoload.php';\r\n\r\n$stegoContainer = new Picamator\\SteganographyKit\\StegoContainer();\r\n$stegoSystem    = new Picamator\\SteganographyKit\\StegoSystem\\SecretLsb();\r\n\r\n// configure secret key\r\n$secretKey = 123456;\r\n$stegoKey  = new Picamator\\SteganographyKit\\StegoKey\\RandomKey($secretKey);\r\n\r\n$stegoSystem->setStegoKey($stegoKey);\r\n$stegoContainer->setStegoSystem($stegoSystem);\r\n\r\n// it's not necessary to set second parameter if result will put in stream \r\n$stegoContainer->encode('/path/to/cover-image.png', '', 'secret test');\r\n\r\n// output raw image\r\nheader('Content-Type: image/png');\r\n$stegoContainer->renderImage();\r\n\r\n```\r\n\r\nLeast Significant Bit (LSB)\r\n---------------------------\r\nLSB method is modified least significant bit of coverText to get stegoText. \r\nDetailed description with example can be found in [4] or in \"Steganography in Depth\" section [5].\r\n\r\nSteganographyKit has implementation of LSB with such conditions:\r\n* png, jpg or gif images as coverText,\r\n* text as a secretText.\r\n\r\n### Pure Steganography\r\nPure Steganography is a Steganography system that doesn't require prior exchange of some secret information before sending message [2].\r\n \r\nAdditionally it's possible to configurate channels that will be used in algorithm. \r\nFor instance secretText can use only Red or Green and Blue or Red, Green, Blue. Moreover order in witch channels are used is important.\r\nSo channels can be interpreted as Secret Key. \r\n\r\n*Note*:\r\nSome researches use only Blue channel for steganography because that color is less perceived by human eye. \r\nSuch conclusion is based on experiment [6]. But it should be taken critically because first of all stegoanalyze use computer technique to identify picture \r\nwith hidden information, the second digital picture is displayed on a screen that has enough light.\r\n\r\n### Secret Key Steganography\r\nFor Secret Key Steganography is similar with Pure Steganography but Secret Key is used for encode-decode process [2].\r\n\r\nSteganographyKit is used approach described in [2], accordingly them Secret Key is a seed for pseudo-random generator [8]. \r\nSuch seed is used to create sequences of coordinates of coverText's pixels for covering secretText. \r\n\r\nSteganogrpahyKit implements Secret Key Steganography with such conditions:\r\n* SecretKey has limit: from 4 to 8 numbers. It uses as a seed for `mt_srand` function.\r\n\r\nEncode/Decode algorithm is differ from Pure Steganography by:\r\n* Method of choosing pixels in CoverText. In Pure Steganography it gets one by one but in Secret Key Steganography gets accordingly pseudo-random algorithm.\r\n* Method of use RGB channels. In Pure Steganography order is the same as user set but for Secret Key Steganography is changes accordingly pixel's coordinates. \r\n\r\nIf pixel coordinates `X` and `Y` and array of channels is `['red', 'green', 'blue']` then 'red' will have `(X + Y) % 3` index in channel array the \r\nchannel that had `(X + Y) % 3` would be moved to old red's place. For instance `X = 4, Y = 10` them `(2 + 10) % 3 = 2` then new channels array is\r\n`['blue', 'green', 'red']`. So using such approach secretText will be randomly spread through coverText bits but also through channels. \r\n \r\nUML Diagram\r\n-----------\r\nUML diagrams can be found in `/doc/uml` folder:\r\n\r\n* Class diagram was created by [ArgoUML](http://argouml.tigris.org)\r\n* Workflow diagram was written by Google Drawing \r\n\r\nLicense\r\n-------\r\nBSD-3-Clause\r\n\r\nReferences\r\n----------\r\n1. Christian Cachin \"Digital Steganography\". IBM Research, 17 February 2005, \r\n   https://www.zurich.ibm.com/~cca/papers/encyc.pdf\r\n\r\n2. Zaidoon Kh. AL-Ani, A.A.Zaidan, B.B.Zaidan and Hamdan.O.Alanaz \"Overview: Main Fundamentals for Steganography\"//\r\n   Journal of computing, vol. 2, issue 3, March 2010\r\n   http://arxiv.org/pdf/1003.4086.pdf\r\n\r\n3. Sean-Philip Oriyano \"Using steganography to avoid observation Hiding in plain sight.\" IBM Research, 02 June 2009,\r\n   http://www.ibm.com/developerworks/web/library/wa-steganalysis/index.html?ca=dat\r\n\r\n4. Vijay Kumar Sharma, Vishal Shrivastava \"A steganography algorithm for hiding image in image by improved lsb substitution by minimize detection\" // \r\n   Journal of Theoretical and Applied Information Technology, vol. 36 issue 1, 15th February 2012\r\n   http://www.jatit.org/volumes/Vol36No1/1Vol36No1.pdf\r\n\r\n5. Gregory Kipper \"Investigator's Guide to Steganography\", CRC Press, Oct 27, 2003, 240 pages\r\n   http://books.google.com.ua/books?id=qGcum1ZWkiYC&pg=PA37&source=gbs_toc_r&cad=3#v=onepage&q&f=false\r\n\r\n6. Seling Hecht, Simon Shlaer, Maurice Henri Pirenne \"Energy, quanta and vision\"// JGP vol.25 no. 6, 819-840, July 20, 1942\r\n   http://rieke-server.physiol.washington.edu/People/Fred/Classes/532/Hecht1942.pdf\r\n\r\n7. Ali K. Hmood, B.B. Zaidan, A.A. Zaidan and Hamid A. Jalab \"An Overview on Hidden Information Technique in Images\"// Journal of Applied Science vol.10, issue 18, pages 2094-2100, 2010\r\n   http://scialert.net/abstract/?doi=jas.2010.2094.2100\r\n\r\n8. Craig Buckler \"How to Create Your Own Random Number Generator in PHP\", February 8, 2012\r\n   http://www.sitepoint.com/php-random-number-generator/\r\n", 
  "id": 20575581
}