{
  "id": 48731499, 
  "read_at": 1462550347, 
  "readme.rst": "Introduction\n============\n\nExtension of chainer. ChainList for the purpose of network\nscalability/congirablity/Pre-training executablity for deep leaning.\n(You need to get deep learning framework \"chainer\" from\nhttp://chainer.org/)\n\nfeature:\n========\n\n1) You can define network structure by list or tuple such as [784, 250, 200, 160, 10].\n--------------------------------------------------------------------------------------\n\nThis feature accelerate your deep network development. If you call this\nclass by ChainClassfier([784, 250, 200, 160, 10]), you can generate\nChainList-> (F.Linear(784, 250), F.Linear(250, 200), F.Linear(200, 160),\nF.Linear(160, 10)) You can change network structure without any hard\ncoding.\n\n2) Pre-training executable.\n---------------------------\n\nYou can execute pre-training only by calling\nAbstractChain.pre\\_training(train\\_data). Pretraining is executed by\nusing Bengio method. (http://arxiv.org/pdf/1206.5538.pdf) If length of\ntrain\\_Data is zero, Pre-training is skipped.\n\n3)Usage as scikit-learn library, and correpond to GridSearch parameter tuning.\n------------------------------------------------------------------------------\n\nYou can use PreTraining\\_chain as scikit-learn library, So\nChainClassfier.fit, ChainClassfier.predict, ChainClassfier.score is\nusable. Also you can use sklearn.gridsearchCV. Please see\n`GridSearchExample.py. <https://github.com/fukatani/PreTrainingChain/blob/master/PreTrainingChain/GridSearchExample.py>`__\n\nSoftware Requirements\n=====================\n\n-  Python (2.7)\n-  chainer >= 1.8.0\n-  scikit-learn\n\nInstallation\n============\n\n::\n\n    $ pip install PreTrainingChain\n\nor\n\n::\n\n    $ git clone https://github.com/fukatani/PreTrainingChain.git\n\nExample\n=======\n\nImplement example is here\nhttps://github.com/fukatani/PreTrainingChain/blob/master/PreTrainingChain/Example.py\nYou have to override add\\_last\\_layer method and loss\\_function method.\n\nExample.py is implement for mnist classification.\n\n::\n\n    $ python Example.py\n\n    fetch MNIST dataset\n    Successed data fetching\n    Pre-training test loss: 0.0895392745733\n    Pre-training test loss: 0.000182752759429\n    Pre-training test loss: 5.92054857407e-05\n    Pre-training test loss: 1.82532239705e-05\n    test_loss: 2.30244994164\n    test_accuracy: 0.0799999982119\n    test_loss: 2.30086517334\n    test_accuracy: 0.189999997616\n    test_loss: 2.28533029556\n    test_accuracy: 0.27500000596\n    test_loss: 2.25788879395\n    test_accuracy: 0.294999986887\n    test_loss: 2.21044063568\n    test_accuracy: 0.284999996424\n    test_loss: 2.13255786896\n    test_accuracy: 0.280000001192\n    test_loss: 2.09592270851\n    test_accuracy: 0.305000007153\n    test_loss: 2.05419230461\n    test_accuracy: 0.294999986887\n    test_loss: 2.04007315636\n    test_accuracy: 0.294999986887\n    test_loss: 2.01762104034\n    test_accuracy: 0.289999991655\n\nLicense\n=======\n\nApache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n\nCopyright\n=========\n\nCopyright (C) 2015, Ryosuke Fukatani\n\nRelated Project and Site\n========================\n\nchainer http://docs.chainer.org/en/stable/index.html\n\nBlog entry(Japanese)\nhttp://segafreder.hatenablog.com/entry/2015/12/30/183319\n", 
  "Readme.md": "\n##Introduction\n\n\nExtension of chainer.\nChainList for the purpose of network scalability/congirablity/Pre-training executablity for deep leaning.\n(You need to get deep learning framework \"chainer\" from http://chainer.org/)\n\n## feature:\n####1) You can define network structure by list or tuple such as [784, 250, 200, 160, 10].\n   This feature accelerate your deep network development.\n   If you call this class by ChainClassfier([784, 250, 200, 160, 10]),\n   you can generate ChainList->\n   (F.Linear(784, 250),\n   F.Linear(250, 200),\n   F.Linear(200, 160),\n   F.Linear(160, 10))\n   You can change network structure without any hard coding.\n\n####2) Pre-training executable.\n   You can execute pre-training only by calling AbstractChain.pre_training(train_data).\n   Pretraining is executed by using Bengio method.\n   (http://arxiv.org/pdf/1206.5538.pdf)\n   If length of train_Data is zero, Pre-training is skipped.\n   \n####3)Usage as scikit-learn library, and correpond to GridSearch parameter tuning.\nYou can use PreTraining_chain as scikit-learn library, So ChainClassfier.fit, ChainClassfier.predict, ChainClassfier.score is usable.\nAlso you can use sklearn.gridsearchCV.\nPlease see [GridSearchExample.py.](https://github.com/fukatani/PreTrainingChain/blob/master/PreTrainingChain/GridSearchExample.py)\n\n\n##Software Requirements\n\n* Python (2.7)\n* chainer >= 1.8.0\n* scikit-learn\n\n##Installation\n\n\n```\n$ pip install PreTrainingChain\n```\n\nor\n\n```\n$ git clone https://github.com/fukatani/PreTrainingChain.git\n```\n\n##Example\n\nImplement example is here\nhttps://github.com/fukatani/PreTrainingChain/blob/master/PreTrainingChain/Example.py\nYou have to override add_last_layer method and loss_function method.\n\nExample.py is implement for  mnist classification.\n\n```\n$ python Example.py\n\nfetch MNIST dataset\nSuccessed data fetching\nPre-training test loss: 0.0895392745733\nPre-training test loss: 0.000182752759429\nPre-training test loss: 5.92054857407e-05\nPre-training test loss: 1.82532239705e-05\ntest_loss: 2.30244994164\ntest_accuracy: 0.0799999982119\ntest_loss: 2.30086517334\ntest_accuracy: 0.189999997616\ntest_loss: 2.28533029556\ntest_accuracy: 0.27500000596\ntest_loss: 2.25788879395\ntest_accuracy: 0.294999986887\ntest_loss: 2.21044063568\ntest_accuracy: 0.284999996424\ntest_loss: 2.13255786896\ntest_accuracy: 0.280000001192\ntest_loss: 2.09592270851\ntest_accuracy: 0.305000007153\ntest_loss: 2.05419230461\ntest_accuracy: 0.294999986887\ntest_loss: 2.04007315636\ntest_accuracy: 0.294999986887\ntest_loss: 2.01762104034\ntest_accuracy: 0.289999991655\n```\n\n\n##License\n\nApache License 2.0\n(http://www.apache.org/licenses/LICENSE-2.0)\n\n\n##Copyright\n\nCopyright (C) 2015, Ryosuke Fukatani\n\n##Related Project and Site\n\nchainer\nhttp://docs.chainer.org/en/stable/index.html\n\nBlog entry(Japanese)\nhttp://segafreder.hatenablog.com/entry/2015/12/30/183319\n", 
  "description": "Pre-training DNN by using chainer."
}