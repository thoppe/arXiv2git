{
  "read_at": 1462556795, 
  "description": "High-Performance Graph Primitives on GPUs", 
  "README.md": "Gunrock documentation\n=====================\n\nNews!\n=====\n\nGunrock v0.3 released! Check out the [release notes](http://gunrock.github.io/gunrock/doc/latest/release_notes.html)!\n\nIntroduction\n============\n\nGunrock is a CUDA library for graph-processing designed specifically for the\nGPU. It uses a high-level, bulk-synchronous, data-centric abstraction focused\non operations on a vertex or edge frontier. Gunrock achieves a balance between\nperformance and expressiveness by coupling high performance GPU computing\nprimitives and optimization strategies with a high-level programming model\nthat allows programmers to quickly develop new graph primitives with small\ncode size and minimal GPU programming knowledge. For more details, please read\n[Why Gunrock](http://gunrock.github.io/gunrock/doc/latest/why-gunrock.html),\nour paper on arXiv:\n[Gunrock: A High-Performance Graph Processing Library on the GPU](http://arxiv.org/abs/1501.05387),\nand check out the\n[Publications](#Publications) section.\n\nHomepage\n---------\n\nHomepage for Gunrock: <http://gunrock.github.io/>\n\nGetting Started with Gunrock\n----------------------------\n- For Frequently Asked Questions, see the\n[FAQ](http://gunrock.github.io/gunrock/doc/latest/faq.html).\n\n- For information on building Gunrock, see\n[Building Gunrock](http://gunrock.github.io/gunrock/doc/latest/building_gunrock.html)\nand refer to\n[Operating System Support and Requirements](#OS_Support).\n\n- The \"tests\" subdirectory included with Gunrock has a comprehensive test\napplication for most the functionality of Gunrock.\n\n- For the programming model we use in Gunrock, see\n[Programming Model](http://gunrock.github.io/gunrock/doc/latest/programming_model.html).\n\n- To use our stats logging and performance chart generation pipeline, please check\nout [Gunrock-to-JSON](http://gunrock.github.io/gunrock/doc/latest/gunrock_to_json.html).\n\n- We have also provided code samples for how to use\n[Gunrock's C interface](https://github.com/gunrock/gunrock/tree/master/shared_lib_tests)\nand how to\n[call Gunrock primitives from Python](https://github.com/gunrock/gunrock/tree/master/python),\nas well as [annotated code](http://gunrock.github.io/gunrock/doc/annotated_primitives/annotated_primitives.html)\nfor two typical graph primitives.\n\nReporting Problems\n==================\n\nTo report Gunrock bugs or request features, please file an issue\ndirectly using [Github](https://github.com/gunrock/gunrock/issues).\n\n<!-- TODO: Algorithm Input Size Limitations -->\n\n<a name=\"OS_Support\"></a>\nOperating System Support and Requirements\n=========================================\n\nThis release (0.3) has been tested on Linux Mint 15 (64-bit), Ubuntu\n12.04, 14.04 and 15.10 with CUDA 7.5 installed. We expect Gunrock to build\nand run correctly on other 64-bit and 32-bit Linux distributions, Mac OS,\nand Windows.\n\nRequirements\n------------\n\nCUDA version 7.5 (or greater) and compute capability 3.0 (or greater) is\nrequired.\n\nSeveral graph primitives' CPU validation code uses Boost Graph Library.\nWe are also using Boost Spirit, filesystem, and timer in our utility code.\nA boost version > 1.56.0 is required (1.58.0 is recommended).\n\nCUDA\n====\n\nGunrock is implemented in [CUDA C/C++](http://developer.nvidia.com/cuda).  It\nrequires the CUDA Toolkit. Please see the NVIDIA\n[CUDA](http://developer.nvidia.com/cuda-downloads) homepage to download CUDA as\nwell as the CUDA Programming Guide and CUDA SDK, which includes many CUDA code\nexamples. Please refer to [NVIDIA CUDA Getting Started Guide for\nLinux](http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-linux) for\ndetailed information.\n\n\n<a name=\"Publications\"></a>\nPublications\n============\nYuduo Wu, Yangzihao Wang, Yuechao Pan, Carl Yang, and John D. Owens.\n**Performance Characterization for High-Level Programming Models for GPU Graph\nAnalytics.** In IEEE International Symposium on Workload Characterization,\nIISWC2015, October 2015. [[DOI](http://dx.doi.org/10.1109/IISWC.2015.13) | [http](http://web.ece.ucdavis.edu/~wyd855/iiswc-submission-2015.pdf)]\n\nYuechao Pan, Yangzihao Wang, Yuduo Wu, Carl Yang, and John D. Owens.\n**Multi-GPU Graph Analytics.** CoRR, abs/1504.04804(1504.04804v2), April 2016.\n[[arXiv](http://arxiv.org/abs/1504.04804)]\n\nYangzihao Wang, Andrew Davidson, Yuechao Pan, Yuduo Wu, Andy Riffel, and John D. Owens.\n**Gunrock: A High-Performance Graph Processing Library on the GPU.**\nIn Proceedings of the 21st ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, PPoPP '16, Article No. 11, March 2016. [[DOI](http://dx.doi.org/10.1145/2851141.2851145) | [http](http://escholarship.org/uc/item/6xz7z9k0)]\n\nCarl Yang, Yangzihao Wang, and John D. Owens.\n**Fast Sparse Matrix and Sparse Vector Multiplication Algorithm on the GPU.**\nIn Graph Algorithms Building Blocks, GABB 2015, May 2015.\n[[DOI](http://dx.doi.org/10.1109/IPDPSW.2015.77) | [http](http://www.escholarship.org/uc/item/1rq9t3j3)]\n\nAfton Geil, Yangzihao Wang, and John D. Owens.\n**WTF, GPU! Computing Twitter's Who-To-Follow on the GPU.**\nIn Proceedings of the Second ACM Conference on Online Social Networks,\nCOSN '14, pages 63-68, October 2014.\n[[DOI](http://dx.doi.org/10.1145/2660460.2660481) | [http](http://escholarship.org/uc/item/5xq3q8k0)]\n\nPresentations\n-------------\nGTC 2016, Gunrock: A Fast and Programmable Multi-GPU Graph Processing Library [[slides](http://on-demand.gputechconf.com/gtc/2016/presentation/s6374-yangzihao-wang-gunrock.pdf)]\n\nGPU Technology Theater at SC15, Gunrock: A Fast and Programmable Multi-GPU Graph processing Library [[slides](http://images.nvidia.com/events/sc15/pdfs/SC5139-gunrock-multi-gpu-processing-library.pdf) | [video](http://images.nvidia.com/events/sc15/SC5139-gunrock-multi-gpu-processing-library.html)]\n\nGTC 2014, High-Performance Graph Primitives on the GPU: design and Implementation of Gunrock [[slides](http://on-demand.gputechconf.com/gtc/2014/presentations/S4609-hi-perf-graph-primitives-on-gpus.pdf) | [video](http://on-demand.gputechconf.com/gtc/2014/video/S4609-hi-perf-graph-primitives-on-gpus.mp4)]\n\n\nRoad Map\n========\n\n - Framework: In v0.3 we have integrated single-GPU and multi-GPU frameworks\n   into a unified framework. We are exploring more operators such as\n   Gather-Reduce and matrix operators. Generally we want to find the right set\n   of operators that can abstract most graph primitives while delivering high\n   performance.\n\n - Primitives: Our near-term goal is to implement maximal independent set\n   and graph matching algorithms, build better support for bipartite\n   graph algorithms, and explore community detection algorithms. Our long term\n   goals include algorithms on dynamic graphs, priority queue support, graph\n   partitioning, and more flexible and scalable multi-GPU algorithms.\n\nCredits\n=======\n\nGunrock Developers\n------------------\n\n- [Yangzihao Wang](http://www.idav.ucdavis.edu/~yzhwang/),\n  University of California, Davis\n\n- [Yuechao Pan](https://sites.google.com/site/panyuechao/home), University of California, Davis\n\n- [Yuduo Wu](http://www.yuduowu.com),\n  University of California, Davis\n\n- [Carl Yang](http://web.ece.ucdavis.edu/~ctcyang/),\n  University of California, Davis\n\n- Andy Riffel, University of California, Davis\n\n- [Huan Zhang](http://www.huan-zhang.com/),\n  University of California, Davis\n\n\n- [John Owens](http://www.ece.ucdavis.edu/~jowens/),\n  University of California, Davis\n\nAcknowledgements\n----------------\n\nThanks to the following developers who contributed code: The\nconnected-component implementation was derived from code written by\nJyothish Soman, Kothapalli Kishore, and P. J. Narayanan and described\nin their IPDPSW '10 paper *A Fast GPU Algorithm for Graph\nConnectivity* ([DOI](http://dx.doi.org/10.1109/IPDPSW.2010.5470817)).\nThe breadth-first search implementation and many of the utility\nfunctions in Gunrock are derived from the\n[b40c](http://code.google.com/p/back40computing/) library of\n[Duane Merrill](https://sites.google.com/site/duanemerrill/). The\nalgorithm is described in his PPoPP '12 paper *Scalable GPU Graph\nTraversal* ([DOI](http://dx.doi.org/10.1145/2370036.2145832)). Thanks\nto Erich Elsen and Vishal Vaidyanathan from\n[Royal Caliber](http://www.royal-caliber.com/) and the [Onu](http://www.onu.io/) Team for their discussion on\nlibrary development and the dataset auto-generating code. Thanks to\nAdam McLaughlin for his technical discussion. Thanks to Oded Green\non his technical discussion and an optimization in CC primitive.\n\nThis work was funded by the DARPA XDATA program under AFRL Contract\nFA8750-13-C-0002, by NSF awards CCF-1017399 and OCI-1032859, and by\nDARPA STTR award D14PC00023. Our\nXDATA principal investigator is Eric Whyne of\n[Data Tactics Corporation](http://www.data-tactics.com/) and our DARPA\nprogram managers are Dr. Christopher White (2012--2014) and [Mr. Wade\nShen](http://www.darpa.mil/staff/mr-wade-shen) (2015--now).\n\nGunrock Copyright and Software License\n======================================\n\nGunrock is copyright The Regents of the University of\nCalifornia, 2015. The library, examples, and all source code are\nreleased under\n[Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n", 
  "id": 14079956
}