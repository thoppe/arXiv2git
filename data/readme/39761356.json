{
  "read_at": 1462546118, 
  "description": "Rowhammer.js - A Remote Software-Induced Fault Attack in JavaScript", 
  "README.md": "# Program for testing for the DRAM \"rowhammer\" problem using eviction\n\nSee https://github.com/google/rowhammer-test - this is an adaption of the\n''double_sided_rowhammer'' program from their repository.\n\nAlso see our paper ''Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript''\non Arxiv: http://arxiv.org/abs/1507.06955\n\n## How to run the native eviction-based rowhammer test\n\n```\ncd native\nmake\n./double_sided_rowhammer_ivy -d 1 # -d number of dimms\n# or\n./double_sided_rowhammer_haswell -d 1 # -d number of dimms\n```\n\nThe test should work on x86-64 Linux.\n\nIf you have found a reproducible bitflip, look for the ''Print this for the\nwatch_firefox tool'' comment.\n\n## Find the array indices for specific physical addresses\n\nEdit tools/watch_firefox.cc to contain the addresses from your native\neviction-based rowhammer test.\n\nStart firefox with rowhammer.html\n\n```\ncd tools\nmake\n./watch_firefox\n```\n\nThe program outputs physical address mappings and the time since\nthe last allocation. Based on this and the virtual address printed you\ncan determine where the array starts.\n\nAllocate memory in a large array in JavaScript.\nIf using ''rowhammer.html'': Click the ''Allocate'' button.\n\nIf you have much noise before you press the button, just restart\n''watch_firefox'' and try again.\n\nAs soon as it has found the indices it asks you to enter the virtual address\nof the array start. This is not yet automated.\n\nThe program prints the array indices to use in JavaScript.\nIn case of ''rowhammer.html'' just copy them into the editbox and click ''Parse''.\nThen you can start Hammering.\n\n## rowhammer.html / rowhammer.js\nIn the ''javascript'' folder you find the Rowhammer.js version\nfor Haswell CPUs with a 16-way L3 cache and no L4 cache ''rowhammer.html''. It will probably not\nwork on other CPUs without modifications.\n\nOpen ''rowhammer.html'' in a browser, paste the hammering array indices in the\neditbox (you can use the ''watch_firefox'' program for this).\n\nYou can modify ''rowhammer.js'' while the page is still loaded and click the\n''Refresh'' button to only reload the ''rowhammer.js'' file. This way you keep\nthe array and the array indices and you can experiment with different settings\nwhile not having to search for the array indices anew.\n\n## Javascript-only Variant\nAlso, in the ''javascript'' folder you will find the ''rowhammer_scan.html''.\nIt is the pure JavaScript proof-of-concept for Haswell CPUs with a 16-way L3 cache and no L4 cache, memory in single-channel mode (this is the case if you have only one DIMM). Furthermore, it assumes that JavaScript memory is physically contiguous in blocks of 2 megabytes - this is the case if your OS allocates 2M anonymous pages (all our Linux systems do) or if it allocates physically contiguous 4K pages. It will probably not work on other systems without modifications.\n\nOpen ''rowhammer_scan.html'' in a browser. Click the ''Allocate'' button. Wait a second to let Firefox allocate memory and click ''Hammer'' to start the hammering.\n\nFor reference we have added a screenshot:\n![Screenshot of rowhammer_scan.html](/javascript/screenshot.png)\n\nYou can modify ''rowhammer_scan.js'' while the page is still loaded and click the\n''Refresh'' button to only reload the ''rowhammer.js'' file. This way you keep\nthe array and the array indices and you can experiment with different settings\nwhile not having to allocate the array anew.\n\nThis version is not adaptive to all CPUs. As we said in the paper, the eviction strategy finding algorithm is very slow. We still try different optimizations and we will evaluate it's performance.\nHowever, there is not much use in doing this search in JavaScript as it takes hours and there is not much benefit once you know the strategy. A more realistic adaptive approach would be to try different strategies that are already known to work on some CPUs. This way you can find the right strategy adaptively without having to execute the generic eviction strategy finding algorithm.\nHowever, if you like to try, you will find the ''cached'' function already implemented in the ''rowhammer_scan.js''.\n\n## Warnings\n\nSame warnings as in the original https://github.com/google/rowhammer-test repository:\n\n**Warning #1:** We are providing this code as-is.  You are responsible\nfor protecting yourself, your property and data, and others from any\nrisks caused by this code.  This code may cause unexpected and\nundesirable behavior to occur on your machine.  This code may not\ndetect the vulnerability on your machine.\n\nBe careful not to run this test on machines that contain important\ndata.  On machines that are susceptible to the rowhammer problem, this\ntest could cause bit flips that crash the machine, or worse, cause bit\nflips in data that gets written back to disc.\n\n**Warning #2:** If you find that a computer is susceptible to the\nrowhammer problem, you may want to avoid using it as a multi-user\nsystem.  Bit flips caused by row hammering breach the CPU's memory\nprotection.  On a machine that is susceptible to the rowhammer\nproblem, one process can corrupt pages used by other processes or by\nthe kernel.\n\nAdditionally, if your computer is susceptible to the rowhammer bug,\ndisable JavaScript in your browser! Attackers could exploit this bug\nthrough JavaScript and take control over your machine.\n\n", 
  "id": 39761356
}