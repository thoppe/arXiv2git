{
  "read_at": 1462552191, 
  "description": "Framework for botting", 
  "README.md": "GR Botting Library\n==================\nThis projects contains parts of an automated gameplay (ie. botting) framework. It has been used for various problems and games, such as Poker, Backgammon, Blackjack and \"house games\". Parts of the code has been used by the author to create bots for fun for Bejeweled and Tetris Battle as well.\n\nLarge part of the code has been last time in use in 2010 and hasn't been maintained or tested after that.\n\nExamples\n--------\n\nInitial steps before each example:\n\n- Create a new C# console application\n- Add the dependencies to the project\n\n### Hello world example\nWrites 'hello world' to a running notepad. Dependencies: GR.Interop.Win32 and GR.Input.\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing GR.Input;\nusing GR.Win32;\nusing System.Threading;\nusing System.Diagnostics;\n\nnamespace notepadtest {\n    class Program {\n        static void Main(string[] args) {\n            Window window = Window.FindWindow(\"Untitled - Notepad\");\n\n            for (int tries = 0; tries < 2 && window == null; tries++) {\n                Console.WriteLine(\"Notepad not found.. launching notepad.\");\n                Process.Start(\"notepad.exe\");\n                Thread.Sleep(1000); // Give 1 second for the notepad to launch and appear in the process list\n                window = Window.FindWindow(\"Untitled - Notepad\");\n            }\n\n            if (window == null) {\n                Console.WriteLine(\"Couldn't launch notepad or wasn't able to find it. :(\");\n                return;\n            }\n\n            window.SetForeground(); // Set the Notepad window to foreground\n\n            Thread.Sleep(2000); // Wait for 2 seconds before typing\n\n            Keyboard.Write(\"hello world!\");\n        }\n    }\n}\n```\n\nDescription of the projects\n---------------------------\n\n### Bopycat\nPlay against the AI and the program learns your playstyle: how long it takes you to make moves, how often and when you make undos, etc.\n\n### GR.Common.Logging\nConsoleCapturer can be used to capture the application's console's STDOUT and STDERROR.\n\n### GR.Cryptography\nMD5 has a helper method for generating a checksum from a stream.\n\n### GR.Data\nPersistantStorage is a simple key-value storage.\n\n### GR.Gambling\nContains abstract classes, VenueClient and GameWindow, which serve as a base for building an automated bot.\n\nVenueClient serves as an abstraction between whatever is managing the overall gameplay and the actual venue program.\n\n### GR.Gambling.Backgammon\nFramework for representing and analysing backgammon games.\n\nHintModule abstracts solvers for backgammon. There's a concrete implementation for GnuBg.\n\n### GR.Gambling.Backgammon.Analysis\nBoardStatistics can calculate how many rolls a player needs to win.\n\n### GR.Gambling.Backgammon.Conversion\nBGConverter converts game state to GnuBg ASCII format and imports from FIBS id string.\n\n### GR.Gambling.Backgammon.HCI\nDifferent models to represent human-like gameplay with time pauses and undos.\n\nNeuralThinker lears from a defined set of actions, which can be recorded with Bopycat.\n\n### GR.Gambling.Backgammon.Utils\nGameStateRenderer renders a backgammon position to a Bitmap.\n\n### GR.Gambling.Backgammon.Venue\nClasses for abstracting interaction with online backgammon gambling venues.\n\n### GR.Gambling.Blackjack.Simulator\nFull-blown framework for computing (optimal) strategies for Blackjack gameplay.\n\nParts of the code used heavily in computations are implemented in C/C++ for speed.\n\nSome ideas came from http://arxiv.org/PS_cache/math/pdf/0412/0412311v1.pdf\n\n### GR.Gambling.Bot\nMisc classes useful for botting purposes. Allows to create and queue jobs (uses Quartz).\n\n### GR.Imaging\nContains various classes for dealing with image data.\n\nBitmapAnalyzer: methods for analyzing, comparing and modifying FastBitmaps.\n\nBitmapIO: save and load FastBitmaps to and from disk.\n\nBitmapMask: sometimes you need to test if an image is inside another image. BitmapMask stores the image and the location and can test whether it is inside another image.\n\nBucketImage: used to create multiple buckets from a FastBitmap. This is used by an OCR engine.\n\nColorRange: range of colors from one to another.\n\nFastBitmap: the default Bitmap's .GetPixel() and .SetPixel() methods are very slow because .Net locks the entire Bitmap data on each call. FastBitmap locks the Bitmap data from a regular Bitmap object once, thus pixel manipulation is extremely fast.\n\nImageFilter: contains a binary filter which converts image data to black and white pixels depending on lumenance.\n\nPixelMask: same as BitmapMask but with a single color as the match data instead.\n\nPixelMaskCollection: a collection of PixelMask to hold and match multiple PixelMasks at once.\n\nScreenshot: for taking screenshots of the entire desktop. It can also capture the mouse cursor.\n\n### GR.Imaging.OCR\nOCR engine for pixel-perfect text recognition. It generates its internal matching library on the fly from the given font names and font sizes.\n\n### GR.Input\nFor simulating keyboard and mouse actions. Mouse can be set to use a click distribution to emulate human like click distribution inside a region. ScarMouse tries to emulate more human-like mouse paths by deviating from a straight line.\n\n### GR.Interop.Win32\nExternalProcess is used for managing external process's memory: reading, writing, allocating and releasing.\n\nUser32 and Interop just contain a bunch of imports from different Windows DLLs, mainly User32.dll and gdi32.dll.\n\nWindow is wrapper class that can interact with windows through window handles, hWnds. It can query window's properties like title and rectangle,\ntake a screenshot, bring the window to foreground, move it around, etc. There are also a way to find windows based on their titles.\n\n### GR.IO\nPathHelper generates auto-incrementing unique filename in a given folder.\n\n### GR.Net.Mail\nContains a simple GMail client for sending emails.\n\n### GR.Math\nCombin and Perm allow enumerating combinations and permutations with integers.\n\nCombinBuilder<T> and PermBuilder<T> allow enumerating combinations and permutations of any type of collection using generics.\n\nCombin, Perm, CombinBuiler and PermBuilder all remember the current state of the enumeration and compute the next combination or permutation based on the current one. PermBuilder uses lexicographic ordering.\n\nGaussian implements the Box-Muller algorithm for generating normal distribution numbers.\n\nPrime contains very naive and slow method for checking primeness of a number. It also can generate prime numbers.\n\n### GR.Rootkit\nUses a rootkit to hide a running process.", 
  "id": 2150124
}