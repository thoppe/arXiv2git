{
  "README-alt.md": "## For the Impatient\n\n```sh\n# Download bwakit (or from <http://sourceforge.net/projects/bio-bwa/files/bwakit/> manually)\nwget -O- http://sourceforge.net/projects/bio-bwa/files/bwakit/bwakit-0.7.11_x64-linux.tar.bz2/download \\\n  | gzip -dc | tar xf -\n# Generate the GRCh38+ALT+decoy+HLA and create the BWA index\nbwa.kit/run-gen-ref hs38DH   # download GRCh38 and write hs38DH.fa\nbwa.kit/bwa index hs38DH.fa  # create BWA index\n# mapping\nbwa.kit/run-bwamem -o out -H hs38DH.fa read1.fq read2.fq | sh  # skip \"|sh\" to show command lines\n```\n\nThis generates `out.aln.bam` as the final alignment, `out.hla.top` for best HLA\ngenotypes on each gene and `out.hla.all` for other possible HLA genotypes.\nPlease check out [bwa/bwakit/README.md][kithelp] for details.\n\n## Background\n\nGRCh38 consists of several components: chromosomal assembly, unlocalized contigs\n(chromosome known but location unknown), unplaced contigs (chromosome unknown)\nand ALT contigs (long clustered variations). The combination of the first three\ncomponents is called the *primary assembly*. It is recommended to use the\ncomplete primary assembly for all analyses. Using ALT contigs in read mapping is\ntricky.\n\nGRCh38 ALT contigs are totaled 109Mb in length, spanning 60Mbp of the primary\nassembly. However, sequences that are highly diverged from the primary assembly\nonly contribute a few million bp. Most subsequences of ALT contigs are nearly\nidentical to the primary assembly. If we align sequence reads to GRCh38+ALT\nblindly, we will get many additional reads with zero mapping quality and miss\nvariants on them. It is crucial to make mappers aware of ALTs.\n\nBWA-MEM is ALT-aware. It essentially computes mapping quality across the\nnon-redundant content of the primary assembly plus the ALT contigs and is free\nof the problem above.\n\n## Methods\n\n### Sequence alignment\n\nAs of now, ALT mapping is done in two separate steps: BWA-MEM mapping and\npostprocessing. The `bwa.kit/run-bwamem` script performs the two steps when ALT\ncontigs are present. The following picture shows an example about how BWA-MEM\ninfers mapping quality and reports alignment after step 2:\n\n![](http://lh3lh3.users.sourceforge.net/images/alt-demo.png)\n\n#### Step 1: BWA-MEM mapping\n\nAt this step, BWA-MEM reads the ALT contig names from \"*idxbase*.alt\", ignoring\nthe ALT-to-ref alignment, and labels a potential hit as *ALT* or *non-ALT*,\ndepending on whether the hit lands on an ALT contig or not. BWA-MEM then reports\nalignments and assigns mapQ following these two rules:\n\n1. The mapQ of a non-ALT hit is computed across non-ALT hits only. The mapQ of\n   an ALT hit is computed across all hits.\n\n2. If there are no non-ALT hits, the best ALT hit is outputted as the primary\n   alignment. If there are both ALT and non-ALT hits, non-ALT hits will be\n   primary and ALT hits be supplementary (SAM flag 0x800).\n\nIn theory, non-ALT alignments from step 1 should be identical to alignments\nagainst the reference genome with ALT contigs. In practice, the two types of\nalignments may differ in rare cases due to seeding heuristics. When an ALT hit\nis significantly better than non-ALT hits, BWA-MEM may miss seeds on the\nnon-ALT hits.\n\nIf we don't care about ALT hits, we may skip postprocessing (step 2).\nNonetheless, postprocessing is recommended as it improves mapQ and gives more\ninformation about ALT hits.\n\n#### Step 2: Postprocessing\n\nPostprocessing is done with a separate script `bwa-postalt.js`. It reads all\npotential hits reported in the XA tag, lifts ALT hits to the chromosomal\npositions using the ALT-to-ref alignment, groups them based on overlaps between\ntheir lifted positions, and then re-estimates mapQ across the best scoring hit\nin each group. Being aware of the ALT-to-ref alignment, this script can greatly\nimprove mapQ of ALT hits and occasionally improve mapQ of non-ALT hits. It also\nwrites each hit overlapping the reported hit into a separate SAM line. This\nenables variant calling on each ALT contig independent of others.\n\n### On the completeness of GRCh38+ALT\n\nWhile GRCh38 is much more complete than GRCh37, it is still missing some true\nhuman sequences. To make sure every piece of sequence in the reference assembly\nis correct, the [Genome Reference Consortium][grc] (GRC) require each ALT contig\nto have enough support from multiple sources before considering to add it to the\nreference assembly. This careful and sophisticated procedure has left out some\nsequences, one of which is [this example][novel], a 10kb contig assembled from\nCHM1 short reads and present also in NA12878. You can try [BLAT][blat] or\n[BLAST][blast] to see where it maps.\n\nFor a more complete reference genome, we compiled a new set of decoy sequences\nfrom GenBank clones and the de novo assembly of 254 public [SGDP][sgdp] samples.\nThe sequences are included in `hs38DH-extra.fa` from the [BWA binary\npackage][res].\n\nIn addition to decoy, we also put multiple alleles of HLA genes in\n`hs38DH-extra.fa`. These genomic sequences were acquired from [IMGT/HLA][hladb],\nversion 3.18.0 and are used to collect reads sequenced from these genes.\n\n### HLA typing\n\nHLA genes are known to be associated with many autoimmune diseases, infectious\ndiseases and drug responses. They are among the most important genes but are\nrarely studied by WGS projects due to the high sequence divergence between\nHLA genes and the reference genome in these regions.\n\nBy including the HLA gene regions in the reference assembly as ALT contigs, we\nare able to effectively identify reads coming from these genes. We also provide\na pipeline, which is included in the [BWA binary package][res], to type the\nseveral classic HLA genes. The pipeline is conceptually simple. It de novo\nassembles sequence reads mapped to each gene, aligns exon sequences of each\nallele to the assembled contigs and then finds the pairs of alleles that best\nexplain the contigs. In practice, however, the completeness of IMGT/HLA and\ncopy-number changes related to these genes are not so straightforward to\nresolve. HLA typing may not always be successful. Users may also consider to use\nother programs for typing such as [Warren et al (2012)][hla4], [Liu et al\n(2013)][hla2], [Bai et al (2014)][hla3] and [Dilthey et al (2014)][hla1], though\nmost of them are distributed under restrictive licenses.\n\n## Preliminary Evaluation\n\nTo check whether GRCh38 is better than GRCh37, we mapped the CHM1 and NA12878\nunitigs to GRCh37 primary (hs37), GRCh38 primary (hs38) and GRCh38+ALT+decoy\n(hs38DH), and called small variants from the alignment. CHM1 is haploid.\nIdeally, heterozygous calls are false positives (FP). NA12878 is diploid. The\ntrue positive (TP) heterozygous calls from NA12878 are approximately equal\nto the difference between NA12878 and CHM1 heterozygous calls. A better assembly\nshould yield higher TP and lower FP. The following table shows the numbers for\nthese assemblies:\n\n|Assembly|hs37   |hs38   |hs38DH|CHM1_1.1|  huref|\n|:------:|------:|------:|------:|------:|------:|\n|FP      | 255706| 168068| 142516|307172 | 575634|\n|TP      |2142260|2163113|2150844|2167235|2137053|\n\nWith this measurement, hs38 is clearly better than hs37. Genome hs38DH reduces\nFP by ~25k but also reduces TP by ~12k. We manually inspected variants called\nfrom hs38 only and found the majority of them are associated with excessive read\ndepth, clustered variants or weak alignment. We believe most hs38-only calls are\nproblematic. In addition, if we compare two NA12878 replicates from HiSeq X10\nwith nearly identical library construction, the difference is ~140k, an order\nof magnitude higher than the difference between hs38 and hs38DH. ALT contigs,\ndecoy and HLA genes in hs38DH improve variant calling and enable the analyses of\nALT contigs and HLA typing at little cost.\n\n## Problems and Future Development\n\nThere are some uncertainties about ALT mappings - we are not sure whether they\nhelp biological discovery and don't know the best way to analyze them. Without\nclear demand from downstream analyses, it is very difficult to design the\noptimal mapping strategy. The current BWA-MEM method is just a start. If it\nturns out to be useful in research, we will probably rewrite bwa-postalt.js in C\nfor performance; if not, we may make changes. It is also possible that we might\nmake breakthrough on the representation of multiple genomes, in which case, we\ncan even get rid of ALT contigs for good.\n\n\n\n[res]: https://sourceforge.net/projects/bio-bwa/files/bwakit\n[sb]: https://github.com/GregoryFaust/samblaster\n[grc]: http://www.ncbi.nlm.nih.gov/projects/genome/assembly/grc/\n[novel]: https://gist.github.com/lh3/9935148b71f04ba1a8cc\n[blat]: https://genome.ucsc.edu/cgi-bin/hgBlat\n[blast]: http://blast.st-va.ncbi.nlm.nih.gov/Blast.cgi?PROGRAM=blastn&PAGE_TYPE=BlastSearch&LINK_LOC=blasthome\n[sgdp]: http://www.simonsfoundation.org/life-sciences/simons-genome-diversity-project/\n[hladb]: http://www.ebi.ac.uk/ipd/imgt/hla/\n[grcdef]: http://www.ncbi.nlm.nih.gov/projects/genome/assembly/grc/info/definitions.shtml\n[hla1]: http://biorxiv.org/content/early/2014/07/08/006973\n[hlalink]: http://www.hladiseaseassociations.com\n[hlatools]: https://www.biostars.org/p/93245/\n[hla2]: http://nar.oxfordjournals.org/content/41/14/e142.full.pdf+html\n[hla3]: http://www.biomedcentral.com/1471-2164/15/325\n[hla4]: http://genomemedicine.com/content/4/12/95\n[kithelp]: https://github.com/lh3/bwa/tree/master/bwakit\n", 
  "read_at": 1462551846, 
  "description": "An attempt to parallelise the Burrows-Wheeler Aligner.", 
  "README.md": "[![Build Status](https://travis-ci.org/lh3/bwa.svg?branch=dev)](https://travis-ci.org/lh3/bwa)\n[![Build Status](https://drone.io/github.com/lh3/bwa/status.png)](https://drone.io/github.com/lh3/bwa/latest)\n##Getting started\n\n\tgit clone https://github.com/lh3/bwa.git\n\tcd bwa; make\n\t./bwa index ref.fa\n\t./bwa mem ref.fa read-se.fq.gz | gzip -3 > aln-se.sam.gz\n\t./bwa mem ref.fa read1.fq read2.fq | gzip -3 > aln-pe.sam.gz\n\n##Introduction\n\nBWA is a software package for mapping DNA sequences against a large reference\ngenome, such as the human genome. It consists of three algorithms:\nBWA-backtrack, BWA-SW and BWA-MEM. The first algorithm is designed for Illumina\nsequence reads up to 100bp, while the rest two for longer sequences ranged from\n70bp to a few megabases. BWA-MEM and BWA-SW share similar features such as the\nsupport of long reads and chimeric alignment, but BWA-MEM, which is the latest,\nis generally recommended as it is faster and more accurate. BWA-MEM also has\nbetter performance than BWA-backtrack for 70-100bp Illumina reads.\n\nFor all the algorithms, BWA first needs to construct the FM-index for the\nreference genome (the **index** command). Alignment algorithms are invoked with\ndifferent sub-commands: **aln/samse/sampe** for BWA-backtrack,\n**bwasw** for BWA-SW and **mem** for the BWA-MEM algorithm.\n\n##Availability\n\nBWA is released under [GPLv3][1]. The latest source code is [freely\navailable at github][2]. Released packages can [be downloaded][3] at\nSourceForge. After you acquire the source code, simply use `make` to compile\nand copy the single executable `bwa` to the destination you want. The only\ndependency required to build BWA is [zlib][14].\n\nSince 0.7.11, precompiled binary for x86\\_64-linux is available in [bwakit][17].\nIn addition to BWA, this self-consistent package also comes with bwa-associated\nand 3rd-party tools for proper BAM-to-FASTQ conversion, mapping to ALT contigs,\nadapter triming, duplicate marking, HLA typing and associated data files.\n\n##Seeking helps\n\nThe detailed usage is described in the man page available together with the\nsource code. You can use `man ./bwa.1` to view the man page in a terminal. The\n[HTML version][4] of the man page can be found at the [BWA website][5]. If you\nhave questions about BWA, you may [sign up the mailing list][6] and then send\nthe questions to [bio-bwa-help@sourceforge.net][7]. You may also ask questions\nin forums such as [BioStar][8] and [SEQanswers][9].\n\n##Citing BWA\n\n* Li H. and Durbin R. (2009) Fast and accurate short read alignment with\n Burrows-Wheeler transform. *Bioinformatics*, **25**, 1754-1760. [PMID:\n [19451168][10]]. (if you use the BWA-backtrack algorithm)\n\n* Li H. and Durbin R. (2010) Fast and accurate long-read alignment with\n Burrows-Wheeler transform. *Bioinformatics*, **26**, 589-595. [PMID:\n [20080505][11]]. (if you use the BWA-SW algorithm)\n\n* Li H. (2013) Aligning sequence reads, clone sequences and assembly contigs\n with BWA-MEM. [arXiv:1303.3997v2][12] [q-bio.GN]. (if you use the BWA-MEM\n algorithm or the **fastmap** command, or want to cite the whole BWA package)\n\nPlease note that the last reference is a preprint hosted at [arXiv.org][13]. I\ndo not have plan to submit it to a peer-reviewed journal in the near future.\n\n##Frequently asked questions (FAQs)\n\n1. [What types of data does BWA work with?](#type)\n2. [Why does a read appear multiple times in the output SAM?](#multihit)\n3. [Does BWA work on reference sequences longer than 4GB in total?](#4gb)\n4. [Why can one read in a pair has high mapping quality but the other has zero?](#pe0)\n5. [How can a BWA-backtrack alignment stands out of the end of a chromosome?](#endref)\n6. [Does BWA work with ALT contigs in the GRCh38 release?](#altctg)\n7. [Can I just run BWA-MEM against GRCh38+ALT without post-processing?](#postalt)\n\n####<a name=\"type\"></a>1. What types of data does BWA work with?\n\nBWA works with a variety types of DNA sequence data, though the optimal\nalgorithm and setting may vary. The following list gives the recommended\nsettings:\n\n* Illumina/454/IonTorrent single-end reads longer than ~70bp or assembly\n  contigs up to a few megabases mapped to a closely related reference genome:\n\n\t\tbwa mem ref.fa reads.fq > aln.sam\n\n* Illumina single-end reads shorter than ~70bp:\n\n\t\tbwa aln ref.fa reads.fq > reads.sai; bwa samse ref.fa reads.sai reads.fq > aln-se.sam\n\n* Illumina/454/IonTorrent paired-end reads longer than ~70bp:\n\n\t\tbwa mem ref.fa read1.fq read2.fq > aln-pe.sam\n\n* Illumina paired-end reads shorter than ~70bp:\n\n\t\tbwa aln ref.fa read1.fq > read1.sai; bwa aln ref.fa read2.fq > read2.sai\n\t\tbwa sampe ref.fa read1.sai read2.sai read1.fq read2.fq > aln-pe.sam\n\n* PacBio subreads or Oxford Nanopore reads to a reference genome:\n\n\t\tbwa mem -x pacbio ref.fa reads.fq > aln.sam\n\t\tbwa mem -x ont2d ref.fa reads.fq > aln.sam\n\nBWA-MEM is recommended for query sequences longer than ~70bp for a variety of\nerror rates (or sequence divergence). Generally, BWA-MEM is more tolerant with\nerrors given longer query sequences as the chance of missing all seeds is small.\nAs is shown above, with non-default settings, BWA-MEM works with Oxford Nanopore\nreads with a sequencing error rate over 20%.\n\n####<a name=\"multihit\"></a>2. Why does a read appear multiple times in the output SAM?\n\nBWA-SW and BWA-MEM perform local alignments. If there is a translocation, a gene\nfusion or a long deletion, a read bridging the break point may have two hits,\noccupying two lines in the SAM output. With the default setting of BWA-MEM, one\nand only one line is primary and is soft clipped; other lines are tagged with\n0x800 SAM flag (supplementary alignment) and are hard clipped.\n\n####<a name=\"4gb\"></a>3. Does BWA work on reference sequences longer than 4GB in total?\n\nYes. Since 0.6.x, all BWA algorithms work with a genome with total length over\n4GB. However, individual chromosome should not be longer than 2GB.\n\n####<a name=\"pe0\"></a>4. Why can one read in a pair has high mapping quality but the other has zero?\n\nThis is correct. Mapping quality is assigned for individual read, not for a read\npair. It is possible that one read can be mapped unambiguously, but its mate\nfalls in a tandem repeat and thus its accurate position cannot be determined.\n\n####<a name=\"endref\"></a>5. How can a BWA-backtrack alignment stands out of the end of a chromosome?\n\nInternally BWA concatenates all reference sequences into one long sequence. A\nread may be mapped to the junction of two adjacent reference sequences. In this\ncase, BWA-backtrack will flag the read as unmapped (0x4), but you will see\nposition, CIGAR and all the tags. A similar issue may occur to BWA-SW alignment\nas well. BWA-MEM does not have this problem.\n\n####<a name=\"altctg\"></a>6. Does BWA work with ALT contigs in the GRCh38 release?\n\nYes, since 0.7.11, BWA-MEM officially supports mapping to GRCh38+ALT.\nBWA-backtrack and BWA-SW don't properly support ALT mapping as of now. Please\nsee [README-alt.md][18] for details. Briefly, it is recommended to use\n[bwakit][17], the binary release of BWA, for generating the reference genome\nand for mapping.\n\n####<a name=\"postalt\"></a>7. Can I just run BWA-MEM against GRCh38+ALT without post-processing?\n\nIf you are not interested in hits to ALT contigs, it is okay to run BWA-MEM\nwithout post-processing. The alignments produced this way are very close to\nalignments against GRCh38 without ALT contigs. Nonetheless, applying\npost-processing helps to reduce false mappings caused by reads from the\ndiverged part of ALT contigs and also enables HLA typing. It is recommended to\nrun the post-processing script.\n\n\n\n[1]: http://en.wikipedia.org/wiki/GNU_General_Public_License\n[2]: https://github.com/lh3/bwa\n[3]: http://sourceforge.net/projects/bio-bwa/files/\n[4]: http://bio-bwa.sourceforge.net/bwa.shtml\n[5]: http://bio-bwa.sourceforge.net/\n[6]: https://lists.sourceforge.net/lists/listinfo/bio-bwa-help\n[7]: mailto:bio-bwa-help@sourceforge.net\n[8]: http://biostars.org\n[9]: http://seqanswers.com/\n[10]: http://www.ncbi.nlm.nih.gov/pubmed/19451168\n[11]: http://www.ncbi.nlm.nih.gov/pubmed/20080505\n[12]: http://arxiv.org/abs/1303.3997\n[13]: http://arxiv.org/\n[14]: http://zlib.net/\n[15]: https://github.com/lh3/bwa/tree/mem\n[16]: ftp://ftp.ncbi.nlm.nih.gov/genbank/genomes/Eukaryotes/vertebrates_mammals/Homo_sapiens/GRCh38/seqs_for_alignment_pipelines/\n[17]: http://sourceforge.net/projects/bio-bwa/files/bwakit/\n[18]: https://github.com/lh3/bwa/blob/master/README-alt.md\n", 
  "id": 30035183
}