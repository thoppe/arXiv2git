{
  "read_at": 1462553453, 
  "description": "Malware diversity", 
  "README.md": "MalDiv\n======\n\nAuthors\n-------\n\n* Mathias Payer <mathias.payer@nebelwelt.net>\n* Stefan Brunthaler\n* Per Larsen\n* Stephen Crane\n* Richard Wartell\n* Michael Franz\n\n\nAbstract\n--------\n\nSignature-based similarity metrics are the primary mechanism to detect malware\non current systems. Each file is scanned and compared against a set of\nsignatures. This approach has several problems: (i) all possible detectable\nmalware must have a signature in the database and (ii) it might take a\nsubstantial amount of time between initial spread of the malware and the time\nanti-malware companies generate a signature to protect from the malware. \n\nOn the other hand, the malware landscape is changing: there are only few\nmalware families alive at a certain point in time. Each family evolves along\na common software update and maintenance cycle. Individual malware instances\nare repacked or obfuscated whenever they are detected by a large set of\nanti-malware products, basically resulting in an arms race between malware\nauthors and anti-malware products.\n\nAnti-malware products are not efficient if they follow this arms race and we\nshow how it is possible to maximize the advantage for malware distributors.\nWe present MalDiv, an automatic diversification mechanism that uses\ncompiler-based transformations to generate an almost infinite amount of\nbinaries with the same functionality but very low similarity, resulting in\ndifferent signatures. Malware diversity builds on software diversity and uses\nopen decisions in the compiler to reorder and change code and data. In\naddition, static data is encrypted using a set of transformations. Such a tool\nallows malware distributors to generate an almost unlimited amount of binaries\nthat cannot be detected using signature-based matching.\n\n\nContents\n--------\n\nThe following subdirectories and files are in this repository:\n- README.md: you guessed it\n- INSTALL: use this file to build a diversifying LLVM and clang\n- src: will keep the sources for the LLVM and clang compiler\n- bin: will keep the compiled binaries\n- test: contains a set of simple examples, test cases, and analysis scripts\n- paper: contains both the SyScan and the arXiv paper (and sources)\n- presentation: contains the two MalDiv presentations\n", 
  "id": 18112609
}