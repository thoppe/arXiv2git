{
  "read_at": 1462511934, 
  "description": "Calculates transport across a CNT quantum dot in the Coulomb blockade regime via reduced density matrix approach.", 
  "README.txt": "\ntmr3 Readme\n~~~~~~~~~~~\n\ntmr3 is the third version of a tool to calculate the conductance and the\nTMR of CNT quantum dot contacted to ferromagnetic leads at (almost) zero bias.\nThe program was used to perform the numerical calculations for this paper:\n\n[1] http://arxiv.org/abs/1502.02005  \n\nIts structure arises, like most physic simulations, from needs of everyday\nparameter scans and its \"history\", so many things might not be structured \nin a straightforward way. We added a section to this file to explain the \nbuilding blocks and their interconnections.\n\n\nInstallation\n------------\n\nThe runtime-critical part of the simulation is written in Fortran95.\nFrom the source file geval2.f95 a python object file is compiled\nvia f2py. The parameters in the Makefile work for my system but\nmay have to be adjusted to compile correctly.\nCompile the module via\n\n  make geval2.so\n\nand check for errors. \nThe program depends on the digamma function routine\n\nCPSI\n\nprovided by the SLATEC (http://www.netlib.org/slatec/).\n\nUsage\n-----\n\nLet us first explain some simple use cases:\n\n+ To reproduce the main result of the paper, i.e., Fig. 11 in [1], \n  execute the following line\n  (given that you have 4 cores available, see numberofcores in lookup.py):\n\n  python lookup.py\n\n  All parameters should be set accordingly in the current version.\n\n+ If you want to change some parameters, open lookup.py and search for the \n  definition of pdict. Here, you can specify parameter ranges for \n  different parameters.\n  Executing lookup.py then generates all possible combinations of\n  these parameters and starts to calculate it one by one using 4 cores \n  (number can be specified just below pdict).\n  The current state of the calcaltion is saved in table.dat \n  (contains the list of parameter permutations) and \n  lnum.dat (contains the linenumber of the current parameterset in table.dat).\n\n  IMPORTANT: If you start a new calculation, always remove lnum.dat\n             and table.dat, otherwise the program tries to continue with \n             the previous calculations.\n\n+ If you want to understand the program, read the paper and/or the\n  thesis and then study the file cfg.py. \n  The important objects are generated there and if you understand\n  them, the rest is quite simple.\n  Then study geval.f95. It is written in Fortran and the actual rate \n  calculation, which is the most expensive part, is done there.\n\n\nStructure:\n----------\n\nThe structure of the simulation is as follows:\n\n[lookup.py]\n+ an interface for parameter scans\n+ creates the job dir ./dat/jobname\n   |\n   |calls\n   |\n[make] (\"Makefile\")\n+ triggers rate calculations \n+ when rates are ready, tmr is calculated\n+ make is used to spawn multiple threads across the local cores\n  basically it can also be replaced by a interface to a cluster\n  qsub script. To this end, overwrite or extend the function\n  submitJob in lookup.py\n   |                                                |\n   |calls                                           |\n   |                                                |\n[rates.py]                                          |calls\n+ to calculate the rates.                           |\n+ one run spawns 8 rates.py threads: 2 per lead,    |\n  2 per config and 2 per in- or out-tunneling       |\n   |                                 |              |\n   |calls                            |provides      |\n   |                                 |data          |\n[geval2.f95]                         |for           | \n+ fortran module for rate integral   |              |\n+ the \"actual\" computation           |              |\n                                     |              |\n                                     |              |\n[tmr.py]\n+ reads rates from ./dat/jobname/running_calc.h5\n+ calculates density matrix and steady state solution for populations\n+ current, conductance and tmr\n+ generates plot ./dat/jobname.pdf\n+ writes conductance and config to ./dat/simdata_new.h5\n        |\n        |uses\n        |\n[pop.py]\n+ the module to calculate the populations \n\n\nLicence:\n--------\n\nthe simulation is released under GNU GPLv3.\nSee LICENCE.txt.\n\n\nAuthor:\n-------\n\nAlois Dirnaichner\nalo.dir@gmail.com\n", 
  "id": 34380162
}