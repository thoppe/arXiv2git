{
  "read_at": 1462551480, 
  "description": "CUDA SSL Boltzmann Eq. Solver", 
  "README.md": "Superlattice 2D Boltzmann Solver\n================================\n\nOverview\n--------\nCode in this repository implements finite differences method for solution of Boltzmann \nequation for electron transport in two dimensional semiconductor super lattices. \nFor reference see this article http://arxiv.org/abs/1401.6047 that contains mathematical \nmodel for this system and description of the paramaters.\nIt contains several implementations. Two implementations in targeted \nto common CPU. One single threaded (bin/boltzmann_c_solver) and another one uses naive \nOpenMP (bin/boltzmann_openmp_solver). Other\nimplementations are in CUDA and where tested on GTX680 (bin/boltzmann_solver). \nThey are distinguished \nby different versions of kernel. To activate one or another kernel they have to\nbe re-complied with environment variable BLTZM_KERNEL indicated kernel version.\nBLTZM_KERNEL may take one of the following values\n\n* 1\t     - One thread per lattice point.\n* 2          - One thread per lattice point. Uses shared memory.\n\nIn all following kernels each thread computes lattice values for each <em>n</em>.\n* 310\t     - One thread per <em>n</em>.\n* 311 \t     - -//- and removed divergent flows.\n* 321 \t     - -//- and loops unrolled twice.\n* 341\t     - -//- and loops unrolled four times.\n* 342\t     - --------------//---------------- and elements partially reused.\n* 4\t     - Loops are staggered and elemenets reused. Not unrolled.\n\nUsage\n-----\nFollowing parameters can be specified when executing boltzmann_solver.\nAll parameters valuess are passed through use '=' sign. For example display=77\n\n* **display**    - indicates type of the output generated. Possible values are\n\n    - 4           - compute instantaneous and averaged over external a/c emf. period drift velocities and absorption. Output file will contain detailed description of each field.\n\n    - 7           - generate sequence of frame data files (files frame%08d.data) starting from time 'frame-start', which can be used to create movie sequences. \n\n    - 8           - at the end of simulation generate single shot frame data file frame.data\n\n    - 77          - similar to case of display=7 but instead of frame data produce output similar to display=4 containing time evolution of instantaneous drift velocities etc.\n\n* **n-harmonics** - Maximum number of harmonics in expansion along the $\\phi_x$ axis.\n\n* **PhiYmin**     - $\\phi_y$ region is infinite, but to be able to numerically solve this problem we have to limit it to values from PhiYmin to PhiYmax\n\n* **PhiYmax**     - $\\phi_y$ region is infinite, but to be able to numerically solve this problem we have to limit it to values from PhiYmin to PhiYmax\n\n* **t-max**       - computation runs from time t=0 to (t-max)+2*PI/omega\n\n* **frame-start** - if you are making movie (display=7) frame data (files frame%08d.data) files start generating from time 'frame-start'\n\n* **dt**          - time step \n\n* **g-grid**      - number of cells alone the $\\phi_y$ axis, with step size (PhiYmax - PhiYmin)/g-grid\n\n* **quiet**       - suppress progress output\n\n* **device**      - if you have more that one video card you may choose a specific one to run on by using this parameter, they are numbered starting from 0 (default value)\n\n* **o**           - output file. You can also use '+' sign to append to the existing file, like so o=+output.data\n\nFollowing parameters have exact corresponance in http://arxiv.org/abs/1401.6047 \nHere we are showing to what LaTeX source each one corresponds to\n\n* **E_dc**       - corresponds to $E_{dc}$\n\n* **E_omega**    - corresponds to $E_{\\omega}$\n\n* **omega**      - corresponds to $\\omega$\n\n* **mu**         - corresponds to $\\m$\n\n* **alpha**      - corresponds to $\\alpha$\n\n* **B**          - corresponds to $B$\n\n", 
  "id": 14936102
}