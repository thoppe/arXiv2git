{
  "read_at": 1462548768, 
  "description": "Torch implementation for Robust convolutional neural networks under adversarial noise", 
  "README.md": "## Convolutional neural networks with stochastic input\n\nDespite of the success of deep networks, they could be easily fooled by few pixels of noise so as to output incorrect answers.\nOur feedforward model utilizes uncertainty information and achieves high robustness against strong noise on a large-scale dataset.\nThis package contains implementations of stochastic feedforward operators that were mostly modified and derived from `nn` and `cunn` packages.\n\nThe video summarizes our work http://youtube.com/watch?v=9cP06jFpxt0 .\nMore details are in the paper http://arxiv.org/abs/1511.06306 .\n\n\n### Install\n\nChoose both or either of `nn`/`cunn` backend packages depending on your computing environment.\n\n```bash\nluarocks install https://raw.githubusercontent.com/jhjin/stochastic-cnn/master/stnn-scm-1.rockspec    # cpu\nluarocks install https://raw.githubusercontent.com/jhjin/stochastic-cnn/master/stcunn-scm-1.rockspec  # cuda\n```\n\n\n### Available modules\n\nThis is a list of available modules.\n\n```lua\nnn.StochasticCAddTable()\nnn.StochasticConcatTable()\nnn.StochasticDropout()\nnn.StochasticIdentity()\nnn.StochasticLinear()\nnn.StochasticLogSoftMax()\nnn.StochasticReLU()\nnn.StochasticSoftMax()\nnn.StochasticSpatialAveragePooling()\nnn.StochasticSpatialBatchNormalization()\nnn.StochasticSpatialConvolution()\nnn.StochasticSpatialConvolutionMM()\nnn.StochasticSpatialMaxPooling()\nnn.StochasticSpatialSampling()\nnn.StochasticSpatialSoftMax()\nnn.StochasticThreshold()\nnn.StochasticView()\n```\n\n\n### Example\n\nRefer to the following code or check the `demo` directory.\n\n```lua\nrequire('stnn')\n\n-- set dummy input and input variance\nlocal x = torch.randn(1,1,4,4)\nlocal x_var = x:clone():fill(0.1)\n\n-- standard feedforward\nlocal model = nn.Sequential()\nmodel:add(nn.SpatialConvolution(1,8,3,3))\nmodel:add(nn.SpatialMaxPooling(2,2,2,2))\nlocal y_standard = model:forward(x)\n\n-- stochastic feedforward\nlocal model_st = nn.toStochasticModel(model)\nlocal y_stochastic  = model_st:forward(x, x_var)\n\n-- compare results\nprint(y_standard:view(-1))\nprint(y_stochastic:view(-1))\n```\n", 
  "id": 42637515
}