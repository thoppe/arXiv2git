{
  "read_at": 1462556490, 
  "description": "Lists Top files for each Repo using topic model created by Tassal", 
  "README.md": "TASSAL: Tree-based Autofolding Software Summarization ALgorithm [![Build Status](https://travis-ci.org/mast-group/tassal.svg?branch=master)](https://travis-ci.org/mast-group/tassal)\n================\n \nTASSAL is a tool for the automatic summarization of source code using autofolding. Autofolding automatically creates a summary of a source code file by folding non-essential code and comment blocks. \n\nThis is an implementation of the code summarizer from our paper:  \n[*Autofolding for Source Code Summarization*](http://arxiv.org/abs/1403.4503)  \nJ. Fowkes, R. Ranca, M. Allamanis, M. Lapata and C. Sutton. arXiv preprint 1403.4503, 2015.   \n\nThere are two main variants of the algorithm:\n\n* **TASSAL VSM** which uses a [Vector Space Model](https://en.wikipedia.org/wiki/Vector_space_model) for source code - less accurate but very fast (real-time)\n* **TASSAL** which uses a [Topic Model](https://en.wikipedia.org/wiki/Topic_model) for source code - more accurate but slower (requires training)\n\nboth are described below.\n\nInstallation \n------------\n\n#### Installing in Eclipse\n\nSimply import as a maven project into [Eclipse](https://eclipse.org/) using the *File -> Import...* menu option (note that this requires [m2eclipse](http://eclipse.org/m2e/)). \n\nIt's also possible to export a runnable jar from Eclipse using the *File -> Export...* menu option.\n\n#### Compiling a Runnable Jar\n\nTo compile a standalone runnable jar, simply run\n\n```\nmvn package\n```\n\nin the main tassal directory (note that this requires [maven](https://maven.apache.org/)).\n\nThis will create the standalone runnable jar ```tassal-1.1-SNAPSHOT.jar``` in the tassal/target subdirectory.\n\nRunning TASSAL VSM\n------------------\n\nTASAAL VSM uses a Vector Space Model of source code tokens to determine which are the least relevent code regions to autofold. \nTASSAL VSM can run in real-time. \n\n#### Autofolding a source file\n\n*codesum.lm.tui.FoldSourceFileVSM* folds a specified source file. It has the following command line options:\n\n* **-f**    souce file to autofold\n* **-c**    desired compression ratio for the file\n* **-o**   (optional)  where to save the folded file\n\nSee the individual file javadocs in *codesum.lm.tui* for information on the Java interface.\nIn Eclipse you can set command line arguments for the TASSAL interface using the *Run Configurations...* menu option. \n\n#### Example Usage\n\nA complete example using the command line interface on a runnable jar.\n\nFirst clone the ActionBarSherlock project into /tmp/java_projects/\n\n  ```sh \n  $ mkdir /tmp/java_projects/\n  $ cd /tmp/java_projects/\n  $ git clone https://github.com/JakeWharton/ActionBarSherlock.git \n  ```\n\nWe can then fold a specific file \n\n  ```sh \n  $ java -cp tassal-1.1-SNAPSHOT.jar codesum.lm.tui.FoldSourceFileVSM     \n   -c 50\n   -f /tmp/java_projects/ActionBarSherlock/actionbarsherlock/src/com/actionbarsherlock/app/SherlockFragment.java \n   -o /tmp/SherlockFragmentFolded.java \n  ```\n\nwhich will output the folded file to /tmp/SherlockFragmentFolded.java. \n\nRunning TASSAL\n--------------\n\nTASAAL uses a scoped Topic Model of source code tokens to determine which are the least relevent code regions to autofold. \nTASSAL requires the topic model to be trained on a dataset (the larger the better) before it can fold files in the dataset. \nWhile this is slower than using a VSM model, it is considerably more accurate. \n\n#### Training the source code topic model\n\n*codesum.lm.tui.TrainTopicModel* trains the underlying topic model. It has the following command line options:\n\n* **-d**   directory containing java projects\n* **-w**   working directory where the topic model creates necessary files\n* **-i**   (optional)  no. iterations to train the topic model for.\n\nThis will output a summary of the top 25 tokens in some of the discovered topics. \n\n#### Autofolding a source file\n\n*codesum.lm.tui.FoldSourceFile* folds a specified source file. It has the following command line options:\n\n* **-w**   working directory where the topic model creates necessary files (same as above)\n* **-f**   souce file to autofold\n* **-p**   project containing the file to fold\n* **-c**   desired compression ratio for the file\n* **-b**   (optional)  background topic to back off to (0-2, default=2) \n* **-o**   (optional)  where to save the folded file\n\nSee the individual file javadocs in *codesum.lm.tui* for information on the Java interface.\nIn Eclipse you can set command line arguments for the TASSAL interface using the *Run Configurations...* menu option. \n\n#### Example Usage\n\nA complete example using the command line interface on a runnable jar.\n\nFirst clone the ActionBarSherlock project into /tmp/java_projects/\n\n  ```sh \n  $ mkdir /tmp/java_projects/\n  $ cd /tmp/java_projects/\n  $ git clone https://github.com/JakeWharton/ActionBarSherlock.git\n  ```\n\nNow you can train the topic model on the java projects in /tmp/java_projects/\n\n  ```sh \n  $ java -cp tassal-1.1-SNAPSHOT.jar codesum.lm.tui.TrainTopicModel   \n   -d /tmp/java_projects/  -w /tmp/ -i 100 \n  ```\n\nThis trains the topic model for 100 iterations and outputs the model to /tmp/. We can then fold a specific file \n\n  ```sh \n  $ java -cp tassal-1.1-SNAPSHOT.jar codesum.lm.tui.FoldSourceFile     \n   -w /tmp/  -c 50 -p ActionBarSherlock \n   -f /tmp/java_projects/ActionBarSherlock/actionbarsherlock/src/com/actionbarsherlock/app/SherlockFragment.java \n   -o /tmp/SherlockFragmentFolded.java \n  ```\n\nwhich will output the folded file to /tmp/SherlockFragmentFolded.java. \n\nBugs\n----\n\nPlease report any bugs using GitHub's issue tracker.\n\nLicense\n-------\n\nThis tool is released under the new BSD license.\n", 
  "id": 45165801
}