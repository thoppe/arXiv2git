{
  "README": "====================================================================\nJohn P. Cunningham, Columbia University\nCopyright (C) 2011 John P. Cunningham, Philipp Hennig, and Simon Lacoste-Julien\n\nExpectation propagation for multivariate gaussian probabilities\n(code for the basic routines from Cunningham, Hennig, and Lacoste-Julien, ArXiv, 2011. http://arxiv.org/abs/1111.6832)\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.\n====================================================================\n\nPlease cite http://arxiv.org/abs/1111.6832 in any relevant publications.  You may also find this work useful, from my collaborators at Columbia: arxiv.org/pdf/1208.4118 . \n\n(0) All code requires truncNormMoments.  This is a very numerically stable way to use matlab to calculate the moments of truncated univariate normals.  I recommend you use it.  Otherwise, you will probably run into underflow issues in tail probabilities, which are important test cases for Gaussian integrals.  It is one of my 'utils' functions that gets shared reasonably often.\n\n(1) Based on your application, you may only want axis-aligned hyperrectangles... if so, use axisepmgp.m.  It's a straightforward EP implementation, and quicker than the arbitrary polyhedron version.\n\n(2) Calculate some arbitrary polyhedral integrals...  For that, use epmgp.m, which is \"EP for Multivariate Gaussian Probabilities\".  It's pretty well commented, so you should be able to use it no sweat.  (you can ignore maxSteps and alphaCorrection, which are some ways we are tweaking  the algorithm... see the latter sections of our ArXiv paper).\n\n(3) Also I include genzmgp.m, which is the numerical guy that we compare against.  It is the state of the art and the best proxy to ground truth.  See our ArXiv paper for more details of that, if you are not clear on that accuracy point already.  genzmgp.m is a wrapper for qsclatmvn.m, the latter of which is horribly written.  But for any accuracy test, I would use genz also.\n\n(4) I include a quick sample of how I might run these things.  The 'run_example.m' file will get you started.\n\n(5) Note: I have extended this EP code to work for arbitrary rank one likelihoods (given a function of that form); contact me if you would like to use that code.\n\nImportant: if you are using only axis aligned hyperrectangles, epmgp and axisepmgp give precisely the same result.   If they don't, it's a likely user error.  A common mistake is to specify halfspaces instead of box functions.  Use box functions.\n", 
  "read_at": 1462554295, 
  "description": "expectation propagation for multivariate gaussian probabilities", 
  "id": 46194860
}