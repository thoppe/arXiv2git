{
  "read_at": 1462549566, 
  "description": "Source code and data for the paper \"Quasi-Newton particle Metropolis-Hastings applied to intractable likelihood models\"", 
  "README.md": "# qpmh2-sysid2015\n\nThis code was downloaded from < https://github.com/compops/qpmh2-sysid2015 > or from < http://liu.johandahlin.com/ > and contains the code used to produce the results in the paper\n\nJ. Dahlin, F. Lindsten and T. B. Schon, **Quasi-Newton particle Metropolis-Hastings**. Proceedings of the 17th IFAC Symposium on System Identification, Beijing, China, October 2015. \n\nThe papers are available as a preprint from < http://arxiv.org/pdf/1502.03656 > and < http://liu.johandahlin.com/ >.\n\nRequirements\n--------------\nThe code is written and tested for Python 2.7.6. The implementation makes use of NumPy 1.9.2, SciPy 0.15.1, Matplotlib 1.4.3 and Pandas 0.13.1. On Ubuntu, these packages can be installed/upgraded using \"sudo pip install --upgrade package-name \".\n\nIncluded files\n--------------\n**RUNME-kalman.py**\nCompares the pPMH0, pPMH1 and qPMH2 algorithms using the Kalman smoother to estimate the required gradient and log-likelihood. This is an simplified example of the LGSS model in the paper that runs fairly quickly. The code presents the trace plots, the resulting posterior estimates and computes an approximate value of the IACT (IF in the paper) for the different proposals and parameters. Note that the IACT calculation is carried out in R for the paper but the code is written to resemble the R implementation as close as possible. The plots and data from a run of this file is attached in the results folder.\n\n**RUNME-particles.py**\nMakes the same comparison as in *RUNME-kalman.py* but by using the fully adapted particle filter instead as done in the paper. This code takes a bit longer to run but generates similar results as in the Kalman case. \n\nSupporting files\n--------------\n**models/lgss_4parameters.py**\nDefines the state space model that we use together with the expressions required to simulate from the model and estimate the gradient. \n\n**models/models_dists.py**\nSubroutines for evaluating distributions, their derivatives and Hessians.\n\n**models/models_helpers.py**\nSubroutines for data generation and for importing data.\n\n**para/pmh.py**\nThe main routine for the PMH algorithm and for estimating the Hessian using the quasi-Newton scheme.\n\n**para/pmh_helpers.py**\nSubroutines for exporting the data generated by the PMH algorithm.\n\n**results/**\nData and plots from running the two RUNME-files.\n\n**state/kalman.py**\nThe routines for Kalman filtering and smoothing to estimate the log-likelihood and gradients of the log-posterior.\n\n**state/smc.py**\nThe routines for particle filtering and particle fixed-lag smoothing to estimate the log-likelihood and gradients of the log-posterior.\n", 
  "id": 37065229
}