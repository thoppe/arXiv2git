{
  "read_at": 1462549405, 
  "description": "hdnet - Hopfield denoising network", 
  "README.md": "hdnet\n=====\n\n`hdnet` stands for Hopfield denoising network. It is a Python package\nfor analysis of neural population spiking data, i.e. parallel spike trains.\n\nIn particular, it provides a novel method for finding and extracting\nsalient low-dimensional representations of the dynamics of populations\nof spiking neurons based on a denoising approach to spatiotemporal\npatterns (STP) contained in the data.\n\nFinding STP is classical problem in data analysis of parallel spike\ntrains, and quite a number of approaches to detect and classify\nrecurring spatiotemporal patterns (STP) of neural population activity\nwere proposed [1].\n\nYet, most published methods so far either focus solely on synchrony\ndetection [2, 3, 4] or assume a more or less noiseless scenario, seeking to\nclassify exactly recurring STP in neuronal activity (apart from allowing\nsome jitter in spike timing), see e.g. [5]. Some furthermore suffer from\neffects of combinatorial explosion [3, 5], making their application to\nhighly parallel neural recordings a hard computational problem.\n\nGiven the usually high variability of population responses to stimuli,\nthe re-occurrence of such exactly repeating STP becomes more and more\nunlikely with increasing population size, though. Assuming that despite\nthis variability, network activity is not random per se (under the\nexperimentally well-supported hypothesis [6, 7] that the population has\nto code information about stimuli in some form of STP), a much more\nplausible situation is that some underlying STP appears in several\n\"corrupted\" variants,  both expressing jitter in spike times and differing\nin a few missing or excess spikes (characterized by a low Hamming distance\nto a true, underlying STP).\n\nOur method takes a different aproach. Using Hopfield networks trained\nwith *minimum probability flow* (MPF), the occuring raw spatiotemporal\npatterns are grouped into clusters of similar patterns in an unsupervised\nway, assigning to each cluster a *memory* (the fixed point of the\nHopfield dynamics in each cluster).\n\nThe proposed method is robust to this variability in the signal and able to\nextract the underlying recurring patterns, even for seldomly occurring STP\nand large population sizes.\n\nThe package ships with a tutorial and is extensively documented.\n\nReferences\n----------\n[1] S. Grun and S. Rotter. Analysis of parallel spike trains. Springer, 2010  \n[2] G. Pipa, D. W. Wheeler, W. Singer, and D. Nikolic. NeuroXidence: reliable \nand efficient analysis of an excess or deficiency of joint-spike events. \nJournal of Computational Neuroscience, 25(1):64-88, 2008.  \n[3] D. Picado-Muino, C. Borgelt, D. Berger, G. Gerstein, and S. Grun. Finding\nneural assemblies with frequent item set mining.\nFrontiers in neuroinformatics, 7(May):9, 2013.  \n[4] V. Lopes-dos-Santos, S. Ribeiro, and A. B. L. Tort. Detecting cell assemblies\nin large neuronal populations. Journal of Neuroscience Methods, 220(2):149-66, 2013.  \n[5] K. S. Gansel and W. Singer. Detecting multineuronal temporal patterns in \nparallel spike trains. Frontiers in Neuroinformatics, 6(May):18, 2012.  \n[6] M. Abeles and H. Bergman. Spatiotemporal firing patterns in the frontal cortex \nof behaving monkeys. Journal of Neurophysiology, 1993.  \n[7] A. Arieli and D. Shoham. Coherent spatiotemporal patterns of ongoing activity\nrevealed by real-time optical imaging coupled with single-unit recording in the cat\nvisual cortex. Journal of Neurophysiology, 1995.\n\n\nInstalling\n----------\n\nUntil we provide an official release, please install hdnet directly from Github using `pip`.\n\nTo install / update to the latest version use:\n\n`pip install git+ssh://git@github.com/team-hdnet/hdnet.git`\n\nTo install a specific version, use:\n\n`pip install git+ssh://git@github.com/team-hdnet/hdnet@VERSION`,\n\nwhere `VERSION` is `v0.1` for example. See releases tab above for released versions.\n \n\nDocumentation\n-------------\n\n[View the documentation (online and PDF version available).](http://team-hdnet.github.io/hdnet) \n\n\nCiting hdnet\n------------\n\nIf you use `hdnet` in your work please cite it using the following BibTeX entry.\n\n```\n@online{hdnet,\n    author      = {Hillar, Christopher  and Effenberger, Felix},\n    title       = {\\texttt{hdnet} -- a Python package for parallel spike train analysis},\n    volume      = {abs/XXX},\n    year        = {2015},\n    eprinttype  = {arxiv},\n    eprint      = {math/0307200v3}\n    url         = {https://github.com/team-hdnet/hdnet}\n    //ee        = {http://arxiv.org/abs/XXX},\n}\n```\n\n\nAuthors\n-------\n\n[Christopher Hillar](http://www.msri.org/people/members/chillar/)  \nRedwood Center for Theoretical Neuroscience  \nUC Berkeley, Berkeley, CA, USA  \nE-mail: chillar@berkeley.edu\n\n[Felix Effenberger](http://personal-homepages.mis.mpg.de/effen/)  \nMax-Planck-Institute for Mathematics in the Sciences  \nLeipzig, Germany  \nE-mail: Felix.Effenberger@mis.mpg.de\n\n\nLicense\n-------\n\nFor non-commercial use, `hdnet` is licensed under the GNU GPLv3, see file LICENSE.\nFor use in commercial projects please contact the authors for licensing options. \n\nContributing\n------------\n\nWe are looking for contributors! If you are interested in contributing \nor find a bug, please contact us personally or via a pull request!\n\n\nBuilding the documentation\n--------------------------\n\n* Install required modules\n  pip install sphinx sphinx_rtd_theme sphinxcontrib-napoleon sphinxcontrib-bibtex sphinxjp.themes.basicstrap\n\n* Build documentation:\n  HTML: make html\n  LaTeX: make latexpdf\n\n* Built documentation can be found in doc/_build/html and doc/_build/latex\n\n", 
  "id": 36891615
}