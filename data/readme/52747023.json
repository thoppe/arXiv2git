{
  "read_at": 1462557879, 
  "description": "A Pseudo-random Number Generator Class in C++", 
  "README.md": "# RandGenCPP\r\nA Pseudo-random Number Generator Class in C++\r\n\r\nThis class implements a pseudo-random number generator (PRNG), and a number of\r\nclass member functions providing useful probability distribuions. The core PRNG \r\nalgorithm adopted here is xorshift1024*. \r\n\r\nThis algorithm is described here: http://xorshift.di.unimi.it/\r\n\r\nxorshift1024* uses an internal state which is 1024 bits and has a maximal period\r\nof (2 ^ 1024 - 1). It is a fast and high-quality PRNG, which passes the BigCrush \r\ntest in U01 test suite. It is studied and evaluated in this paper:   \r\n\r\nSebastiano Vigna, \"An experimental exploration of Marsaglia's xorshift generators, \r\nscrambled\" (2014). http://arxiv.org/abs/1402.6246v4\r\n\r\nA RandGen object is seeded once only when a 'RandGen' it is constructed. If multiple\r\n'RandGen' objects are instantiated in a program, they can have a different seed and \r\nhence can produce a different pseudo-random number stream.\r\n\r\nThis class provides the following set of public member functions:\r\n\r\nbool rand_bool(void);\r\n\r\nint uniform_int(int a, int b);\r\n\r\ndouble rand_double(void);\r\n\r\ndouble uniform_double(double a, double b);\r\n\r\ndouble exponential(double lambda);\r\n\r\nint bernoulli(double p);\r\n\r\ndouble normal(void);\r\n\r\ndouble normal(double mu, double sigma);\r\n\r\ndouble weibull(double a, double lambda);\r\n\r\ndouble erlang(int n, double lambda);\r\n\r\nint geometric(double p);\r\n\r\nint binomial(int n, double p);\r\n\r\nint negativebinomial(int n, double p);\r\n\r\nint poisson(double lambda);\r\n", 
  "id": 52747023
}