{
  "read_at": 1462511022, 
  "description": "Very fast consistent hashing ring based on the Jump Hashing paper: http://arxiv.org/pdf/1406.2294v1.pdf", 
  "README.md": "# Ring [![Coverage Status](https://coveralls.io/repos/eliquious/ring/badge.png)](https://coveralls.io/r/eliquious/ring) [![Build Status](https://travis-ci.org/eliquious/ring.svg?branch=master)](https://travis-ci.org/eliquious/ring)\n\n\n    import \"github.com/swiftkick-io/ring\"\n\nPackage ring is a very fast consistent hashing module. It is based on a [paper](http://arxiv.org/pdf/1406.2294v1.pdf) by John\nLamping and Eric Veach called \"A Fast, Minimal Memory, Consistent Hash Algorithm\".\n\n## Usage\n\n#### type Node\n\n```go\ntype Node interface {\n\n\t// Returns the host for the node.\n\tGetHost() string\n\n\t// Returns the capacity of the node. This number determines how many virtual nodes belong to the host.\n\tGetSize() int\n\n\t// Returns the hash of the node. This 64-bit number symbolizes where a node falls on the ring.\n\tGetHash() uint64\n}\n```\n\nNode is an interface representing a physical host. Each node has a host, a\ncapacity and a hash.\n\n#### func  NewNode\n\n```go\nfunc NewNode(host string, size int) Node\n```\nNewNode creates a new Node with a hostname and a capacity.\n\n#### type Ring\n\n```go\ntype Ring interface {\n\n\t// Adds a host to the ring. The first arg\n\tAdd(host string, size int)\n\n\t// Determines the bucket of an unsigned 64-bit integer\n\tFindBucket(key uint64) int\n\n\t// Hashes the bytes given with FNV and then returns the result of FindBucket(key uint64)\n\tFindBucketWithBytes(data []byte) int\n\n\t// Hashes the string given with FNV and then returns the result of FindBucket(key uint64)\n\tFindBucketWithString(data string) int\n\n\t// Finds a bucket for a given key based on the size of the ring given.\n\tFindBucketGivenSize(key uint64, size int) int\n\n\t// Hashes the data using FNV\n\tHash(data []byte) uint64\n\n\t// Returns the size of the ring. Virtual nodes are included.\n\tSize() int\n\n\t// Returns a node for the given bucket number\n\tGetNode(index int) Node\n}\n```\n\nRing is the main interface for this package. It comprises of methods used to\nhash keys into buckets which will be evenly divided among all virtual nodes in\nthe ring. All values are hashed using the FNV algorithm into an unsigned 64-bit\ninteger. The Jump Hash algorithm then determines which bucket a hash falls into.\n\n#### func  NewHashRing\n\n```go\nfunc NewHashRing() Ring\n```\nNewHashRing creates a new hash ring.\n\n## Benchmarks\n\nThe number implies the total virtual nodes in the hash ring.\n\n```\nBenchmark_5_NodeHashRing\t100000000\t        23.7 ns/op\nBenchmark_25_NodeHashRing\t50000000\t        45.0 ns/op\nBenchmark_100_NodeHashRing\t50000000\t        58.4 ns/op\nBenchmark_1000_NodeHashRing\t20000000\t        81.4 ns/op\n```\n", 
  "id": 25403595
}