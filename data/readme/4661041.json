{
  "id": 4661041, 
  "read_at": 1462546847, 
  "README.rst": "========\n evoMPS \\|. \\|.:\\|::>\n========\n---------------------------------------------------------------\nQuantum many-particle dynamics in 1D with matrix product states\n---------------------------------------------------------------\n\nTutorial videos:\n\n* Installation <http://vimeo.com/user19042101/evomps-tutorial-installation>\n* Find ground state <http://vimeo.com/user19042101/evomps-tutorial-ground>\n* Find excitations <http://vimeo.com/user19042101/evomps-tutorial-excitations>\n\nIntroduction\n------------\n\nevoMPS simulates time-evolution (real or imaginary) of one-dimensional \nmany-particle quantum systems using matrix product states\n(MPS) and the time dependent variational principle (TDVP).\n\nIt can be used to efficiently find ground states and simulate dynamics.\n\nThe evoMPS implementation assumes a nearest-neighbour or next-nearest-neighbour\nHamiltonian and one of the following situations:\n\n* states on a finite chain with open boundary conditions\n* spatially uniform states on an infinite chain\n* otherwise uniform states with a localized nonuniformity on an infinite chain (only nearest-neighbour at present)\n\nIt is based on algorithms published by: \n\n* Jutho Haegeman\n* \\J. Ignacio Cirac\n* Tobias J. Osborne\n* Iztok Pizorn\n* Henri Verschelde\n* Frank Verstraete\n\nand available on arxiv.org under arXiv:1103.0936v2 [cond-mat.str-el]\n<http://arxiv.org/abs/1103.0936v2>. The algorithm for handling localized\nnonuniformities on infinite chains was developed by:\n\n* Ashley Milsted\n* Tobias J. Osborne\n* Frank Verstraete\n* Jutho Haegeman\n\nand is detailed in arXiv:1207.0691 <http://arxiv.org/abs/1207.0691>.\nFor details, see doc/implementation_details.pdf and the source code itself,\nwhich I endeavour to annotate thoroughly.\n\nevoMPS is implemented in Python using Scipy <http://www.scipy.org> and\nbenefits from optimized linear algebra libraries being installed (BLAS and LAPACK).\nFor more details, see INSTALL.\n\nevoMPS was originally developed as part of an MSc project by Ashley Milsted,\nsupervised by Tobias Osborne at the Institute for Theoretical Physics of\nLeibniz Universitat Hannover <http://www.itp.uni-hannover.de/>.\n\nUsage\n-----\n\nThe evoMPS algorithms are presented as python classes to be used in a script.\nSome example scripts can be found in the \"examples\" directory.\nTo run an example script without installing the evoMPS modules, copy it to the base \ndirectory first e.g. under Windows::\n    \n    copy examples\\transverse_ising_uniform.py .\n    python transverse_ising_uniform.py\n\nEssentially, the user defines a spin chain Hilbert space\nand a nearest-neighbour Hamiltonian and then carries out a series of small \ntime steps (numerically integrating the \"Schrodinger equation\" for the MPS parameters)::\n\n    sim = EvoMPS_TDVP_Uniform(bond_dim, local_hilb_dim, my_hamiltonian)\n    \n    for i in range(max_steps):\n        sim.update()\n        \n        my_exp_val = sim.expect_1s(my_op)\n        \n        sim.take_step_RK4(dtau)\n\nOperators, including the Hamiltonian, are defined as arrays like this::\n\n    pauli_z = numpy.array([[1, 0],\n                           [0, -1]])\n                     \nor as python callables (functions) like this::\n\n    def pauli_z(s, t):\n        if s == t:\n            return (-1.0)**s\n        else:\n            return 0\n\nCalculating expectation values or other quantities can be done after each step \nas desired.\n\nSwitching between imaginary time evolution (for finding the ground state)\nand real time evolution is as easy as multiplying the time step size by a factor of i!\n\n\nContact\n-------\n\nPlease send comments to:\n\nashmilsted at <google's well-known email service>\n\nTo submit ideas or bug reports, please use the GitHub Issues system <http://github.com/amilsted/evoMPS/>.\n", 
  "description": "evoMPS"
}