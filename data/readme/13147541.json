{
  "read_at": 1462549911, 
  "description": "python sampling routines", 
  "README.txt": "Example Nested sampling and affine-invariant\nsampling routines used by\nR. Allison & J. Dunkley in\nhttp://arxiv.org/abs/1308.2675\n\n========\n\nThis repository contains 3 files:\n\n1. affine.py\n2. nestsamp.py\n3. README.txt (this document)\n\n========\n\n\t************\n\t1. affine.py\n\t************\n\nRun affine.py from a terminal with\n\npython affine.py\n\nA plot of the evolution of the mean walker position \nwill be generated and also an output file \n(by default 'outputAI.txt') containing the walker postions. \n\nWithin the affine.py file one can vary the form of the likelihood\n(by default a multi-variate Gaussian with user-defined mean \nand covariance). One can easily modify the script \nto call an externally defined likelihood function. \n\nOne may alter prior ranges and initial walker positions\n(all this should be clear when looking at affine.py)\n\nTo read in a chain of points from an output \nfile (e.g. 'outputAI.txt') generated by affine.py,\nopen a python session and import some standard modules \n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nThen read in the file\n\nchain = np.loadtxt('outputAI.txt')\n\nNow reshape the array to shape (nmoves, nwalkers, D):\n\nnwalkers = 50  ## Change this to match nwalkers in affine.py\nnmoves = chain.shape[0]/nwalkers\nD = chain.shape[1]\nchain = np.reshape(chain, (nmoves, nwalkers, D))\n\nNow chain[0] holds the positions of all the \nwalkers at the first step, chain[1] the positions\nof all the walkers at the second step, and so on.\n\nLet's plot the mean position at each step:\n\nmean = np.mean(chain, axis = 1)\nplt.scatter(mean.T[0], mean.T[1])\nplt.show()\n\n========\n\n\t**************\n\t2. nestsamp.py\n\t**************\n\nRun nestsamp.py form the terminal with\n\npython nestsamp.py\n\nThis will return the inferred mean and covariance of the posterior \ndistribution. The weights, likelihoods and sample points\nare written to an output file (by default 'outputNS.txt'), in the form\n\nweight  log(likelihood)  param1  param2  ... \n\nWithin nestsamp.py the user may vary many settings such as \nthe form of the likelihood, the input mean and covariance in the\ncase of a Gaussian likelihood, and the prior ranges for\neach parameter. This should be apparent when looking in nestsamp.py\n\nLet's plot the weights p_i as a function of iteration number:\n\npython\nimport numpy as np\nimport matplotlib.pyplot as plt\nchain = np.loadtxt('outputNS.txt')\nplt.plot(chain.T[0])\nplt.xlabel(r'$i$')\nplt.ylabel(r'$p_i$')\nplt.show()\n\n========\n", 
  "id": 13147541
}