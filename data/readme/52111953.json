{
  "read_at": 1462557345, 
  "description": "Implementation of the Vanilla CNN described in the paper: Yue Wu and Tal Hassner, \"Facial Landmark Detection with Tweaked Convolutional Neural Networks\", arXiv preprint arXiv:1511.04031, 12 Nov. 2015. See project page for more information about this project. http://www.openu.ac.il/home/hassner/projects/tcnn_landmarks/  Written by Ishay Tubi : ishay2b [at] gmail [dot] com       https://www.l", 
  "readme.md": "Implementation of the Vanilla CNN described in the paper\nYue Wu and Tal Hassner, \"Facial Landmark Detection with Tweaked Convolutional Neural Networks\", arXiv preprint arXiv:1511.04031, 12 Nov. 2015. See project page for more information about this project.\nhttp://www.openu.ac.il/home/hassner/projects/tcnn_landmarks/\n\nWritten by Ishay Tubi : ishay2b [at] gmail [dot] com       https://www.linkedin.com/in/ishay2b\n\nThis software is provided as is, without any warranty, with no legal constraints.\nThe data is provided to allow easy deployment, is it not mine, a link to the original owners of the data is provided.\n\n===============================================\nPrerequisites:\n===============================================\nCaffe, Python, Numpy, dlib\n\n\n===============================================\nEnvironment variables\n===============================================\nTo run the code on OSX (i.e. anaconda python), where ROOT means repository main folder\nexport PYTHONPATH=$(ROOT):$PYTHONPATH\nexport PYTHONHOME=/Applications/anaconda # To resolve issues running python layers from command line.\n\n===============================================\nPaths needed in PYTHONPATH\n===============================================\nCAFFE_ROOT the path to the caffe distribute folder. CAFFE_ROOT+\"/python\" will be added to PYTHONPATH\nDLIB_ROOT - Dlib's python module - if not already in PYTHONPATH.\nROOT is the git main path.\n\n===============================================\nHow to run this script? use mainLoop.py\n===============================================\nTo run all steps assign STEPS with FULL_STEPS:\nSTEPS   = FULL_STEPS\n\nOr run a partial script like this:\nSTEPS   = ['testset']\n\nThe steps needed to run:\n===============================================\n1. Calculate train data mean matrix or load already calculated trainMean.png.\n2. Calculate train data std matrix or load already calculated trainSTD.png.\n3. Create train set hdf.\n4. Create test set hdf.\n5. Train from random initialization by running this command from ROOT path, dump both stdout and error to log.txt: \n    caffe.bin train -caffeData/solver solver_adam_vanilla.prototxt >>log.txt 2>&1\n6. Plot the error by parsing the log (from ROOT directory):\n    python python/parseLog.py log.txt\n7. Create benchmarks once using STEPS=['createAFLW_TestSet', 'createAFW_TestSet']     \n8. Run benchmarks test by: STEPS=['testAFW_TestSet', 'testAFLW_TestSet'] \n\n    \n===============================================\nMain functions used\n===============================================\nBBox - generic box class with helpers.\nErrorAcum - accumulates the error\nDataRow is a class with landmarks, image and parsed from CSV. Can accept bounding box and crop/scale to desired size. \ncreateDataRowsFromCSV - translates CSV file into a list of DataRow. Passing the CSV parser as a parameter for each format. \nPredictor - a wrapper for caffe network.  Call predictor.preprocess() to get image subtracted by mean and divided by std image. Also returns the landmarks scaled -0.5..+0.5.\n\n\n\n\n\n\n\n\n\n", 
  "id": 52111953
}