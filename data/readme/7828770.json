{
  "read_at": 1462551349, 
  "description": "In Silico Genotyper pipeline", 
  "README.txt": "--------------------------------------------------------------------------------\n--DOWNLOAD--\n--------------------------------------------------------------------------------\nCompiled JAR files can be downloaded from:\n\nhttps://sourceforge.net/projects/insilicogenotyp/\n\n--------------------------------------------------------------------------------\n--DESCRIPTION--\n--------------------------------------------------------------------------------\n\nISG (In-Silico Genotyper) creates a matrix of SNPs across multiple taxa. At its core, ISG \nmerges single sample variant calls (i.e., SNPs and indels in vcf format) for a shared \nsequence region into a matrix. Because not every sample has genotype information for a \nparticular locus and not every genotyped locus is necessarily correct, ISG expects that \nmany of the variants called are false positives in order to prevent incorrectly assuming the \nreference state. Therefore, two important steps have been added to the merging process. \nFirst, variants from each sample are analyzed for ambiguity and marked as such before \nfurther processing. Second, samples without genotype information for a locus are genotyped \nin an intelligent way.\n\nISG uses BWA to align NGS reads against the reference (creating bam files), and it uses \nMUMmer to align fasta-formatted, sequenced genomes and call SNPs. It then uses the GATK \nUnified Genotyper to call and determine ambiguity of SNPs from the bam files, and puts \nthem into VCF format.  ISG performs \"intelligent\" alignment, using data at whatever stage \nthey are provided (e.g., reads, bams, vcfs, fastas). Adding further sample files and \nrerunning will process the new additions and create a new variant matrix. All previously \ncalled variant loci are checked in the new samples, and any newly found variant positions \nare checked/verified in the earlier samples.\n \nThe ISG Tools are a collection of java command line utilities that manipulate/annotate the \nresults of ISGPipeline More details for each of the tools, including arguments, are found in \nREADME_TOOLS.txt. Their basic functions are summarized below:\n  CalculateMismatch.jar -calculate smallest mismatch distance between adjacent SNPs\n  CalculatePattern.jar - calculate pattern of SNP states among samples for each locus\n  CalculateStatistics.jar - calculate overall variant statistics for each sample in matrix \n  ClassifyMatrix.jar - classify SNPs in matrix as (non)synonymous, intergenic, etc.\n  CleanMatrix.jar - remove matrix loci containing ambiguous or missing alleles \n  DetermineStatus.jar - marks status of each locus (e.g., clean, ambiguous, missing, \n   duplicated, etc.)\n  FilterMatrix.jar - filter a matrix based on specific parameters\n  FindParalogs.jar - find and mark duplicated regions in matrix based on self comparisons \n   of reference and other individual whole genomes\n  RemoveGenomes.jar - removes user-specified genomes from a matrix\n  ISGToolsBatchRunner.jar - runs a user-specified set of ISG Tools sequentially in batch mode\n\n--------------------------------------------------------------------------------\n--RELEASE NOTES--\n--------------------------------------------------------------------------------\n\nv0.16.10-3\n\n    - Fixed memory leak when creating pattern number. Pattern number is no longer produced.\n\nv0.16.10-2\n\n    - Filtering of duplicate loci in query genomes is optionally selected using \"--filterdups\" flag.\n    - Fixed memory leak when writing large pseudo-fasta files of SNPs for each taxon.\n\nv0.16.10-1\n\n    - The reference FASTA file must be placed in the INPUT directory with all other input files. \nThe -R flag must be used to designate the reference file, which will be ignored as a sample file in the comparisons.\n\nv0.16.10\n\n    -Added SnpEff for annotating SNPs. Refer to \"ANNOTATIONS\" section for details.\n\nv0.16.9-1\n\n    -Added \"clean.unique.variants\" to output directory.\n    -Fixed issue when the reference fasta is included in the input directory.\n    -Display meaningful error message when the \"-R\" required option is omitted.\n\nv0.16.9\n\n    -New, easier way of running ISG. Refer to \"RUNNING ISGPipeline\" section for details.\n    -Include fasta representation for each output matrix.\n    -Improved error handling for validating input files.\n    -Optionally include calculation of pattern number fields.\n    -Display argument defaults on splash screen.\n    -Calculate allele frequency from AD field instead of pre-calculated AF field.\n    -Modified output directory structure. Refer to \"OUTPUT FILES\" section for details.\n\n\n--------------------------------------------------------------------------------\n--RUNNING ISGPipeline--\n--------------------------------------------------------------------------------\n\n-Prior to running ISG, make sure that your system ULIMIT is set to handle multiple\n processes.  You can add this command to your \".bashrc\" or \".profile\":\n \nulimit -u 4096\n\nFirst, make sure that you have all the dependencies installed on your machine. \nPlease review the \"DEPENDENCIES\" section of this README to find out what programs \nare required and where to get them.\n\nTo get a listing of optional/required arguments type the following:\n\njava -jar ISGPipeline.jar -S ISGPipelineQScript.scala -h\n\n\nSteps to run an analysis:\n\nStep 1:  \n    \n    Organize all of your input files (i.e. fastas, fastqs, etc) into a single \n    directory. If you're not sure what file types are acceptable please refer to \n    the \"INPUT FILES\" section of this README. \n\nStep 2:\n  \n    Run ISGPipeline. An example is provided below:\n\n    java -jar ISGPipeline.jar -S ISGPipelineQScript.scala \\\n    -I /path/to/input_dir \\\n    -O /path/to/output_dir \\\n    -R /path/to/reference.fasta \\\n    -bwa /path/to/bwa \\\n    -mummer /path/to/mummer_dir \\\n    -gatk /path/to/gatk.jar \\\n    -nt 1 \\\n    --allow_potentially_misencoded_quality_scores\n    -run\n\nStep 3:\n\n    Wait for the analysis to finish. See \"OUTPUT\" section of the README for a \n    discussion on the output files and directory structure.\n\n--------------------------------------------------------------------------------\n--RUNNING OPTIONS--\n--------------------------------------------------------------------------------\n\nTo get a listing of optional/required arguments type the following:\n\njava -jar ISGPipeline.jar -S ISGPipelineQScript.scala -h\n\nOptions:\n\n -I,--input_dir <input_dir>                       \n\n    Directory containing input files (fastqs, fastas, bams, etc). Refer to \"INPUT FILES\"\n    section for details.\n\n -O,--output_dir <output_dir>                    \n\n    Directory where output files will be written. Refer to \"OUTPUT FILES\" section for \n    details.\n\n -R,--reference_sequence <reference_sequence>    \n\n    Reference sequence fasta file. If you have genbank annotations for this reference \n    refer to \"ANNOTATIONS\" section for details.\n\n -gatk,--gatkjarfile <gatkjarfile>               \n\n    Path to GATK jar file. Requires version 2.5+ (Many newer versions of GATK are not compatible with Java 1.8.x).\n    The current GATK version (11/2015) of v3.4-46 seems to work with Java 1.8.0.\n\n -bwa,--pathtobwa <pathtobwa>                    \n\n    Path to bwa executable. Requires version 0.6.2+\n\n -mummer,--pathtomummer <pathtomummer>           \n\n    Path to directory containing mummer executables. Requires version 3.23+\n\n -eff,--snp_eff <snp_eff>                                       \n\n    Path to SnpEff jar file. Requires version 3.3h+\n\n -db,--snp_eff_database <snp_eff_database>                      \n\n    SnpEff database ID.\n\n -chr_tbl,--chrom_translation_table <chrom_translation_table>\n\n    Path to chromosome translation table. Refere to \"ANNOTATIONS\" section for \n    details.\n\n --optionsfile <optionsfile>                     \n\n    Path to options file. Refere to \"OPTIONS FILE\" section for details.\n\n --minaf <minaf>                                 \n\n    The minimum allele frequency of an alternative base needed to call a SNP. \n    Default value: 0.75\n\n --minqual <minqual>                             \n\n    The minimum Phred scaled probability needed to call a SNP. \n    Default value: 30\n\n --mingq <mingq>                                 \n\n    The minimum genotype quality needed to call a variant. \n    Default value: 4\n\n --mindp <mindp>                                 \n\n    The minimum depth of reads needed to call a variant. \n    Default value: 3\n\n --allow_potentially_misencoded_quality_scores   \n\n    Do not fail when encountering base qualities that are too high and that seemingly \n    indicate a problem with the base quality encoding of the BAM file.\n\n --usebwamem                                     \n\n    Run bwa mem algorithm. Setting this flag requires bwa version 0.7.5a+\n\n --includepattern                                \n\n    Include pattern fields in output matrix.\n\n -nt,--num_threads <num_threads>\n   \n    How many CPU threads should be allocated?\n \n -pbs\n \n \tUse PBS queueing system for job scheduling\n \t \n--------------------------------------------------------------------------------\n--INPUT FILES--\n--------------------------------------------------------------------------------\n\nAll input files must reside at the root of a single directory to be included in an ISG analysis. \nWithin the input directory, ISG uses file extensions to determine the type of file. \nBelow is a list of file types and supported extensions. \nAny file with an extension not listed below will be ignored by ISG.\n\nBAM     - .bam (NGS reads aligned against a reference)\nFASTQ   - .fastq, .fastq.gz, sequence.txt, sequence.txt.gz (NGS reads)\nVCF     - .vcf (variants from bams and/or fastas)\nGENBANK - .gbk, .gb (GenBank annotations of reference)\nFASTA   - .fasta, .fa (contigs or whole genomes in fasta format)\n\n--------------------------------------------------------------------------------\n--SAMPLE NAMES--\n--------------------------------------------------------------------------------\n\nISG uses sample names to identify a particular input genome. As such, the \nsample name must be unique across all input genomes. Any duplicated sample name \nwill cause ISG to terminate with an error. Sample names are used throughout the \npipeline as well as in the output matrix files, thus it is imperative that you \ndesignate meaningful sample names to each input genome when possible. \n\nISG uses filenames and, in some cases, file headers to determine the sample name. \nIn the simplest case, the sample name is the filename less the extension. This is \ntrue for any FASTA input files and single-end FASTQs. For example, if an input \nfile had the name \"ABC.fasta\" ISG would use \"ABC\" as the sample name to identify \nthe genome.\n\nDetermining the sample name of a paired-end fastq separated into two distinct files \nis more challenging because the sample name as well as the pairing information is \ncontained within the filename. For example, if two input files named \"XYZ_1.fastq\" \nand \"XYZ_2.fastq\" were included in the input directory, ISG would recognize the \ntwo files as a pair and use \"XYZ\" as the sample name to identify it. If ISG recognizes \nan input file as paired and cannot locate the mate file, it will terminate with \nan error. ISG determines if an input FASTQ is paired by using the following \nregular expression:\n\n(.*)_[0-9]+_([12])_sequence\\\\..\n(.*)_[ATCG]+_L[0-9]+_R([12])_[0-9]+\\\\..*\n(.*)_S[0-9]+_L[0-9]+_R([12])_[0-9]+\\\\..*\n(.*)_R([12])[_\\\\.].*\n(.*)_([12])\\\\..*\n\nIf a BAM or VCF is included in the input directory, ISG will read the file's header \nto determine what sample name to identify the genome by. For BAMs, ISG will look at \nthe ReadGroup's SM field while for VCFs, ISG will look at the listed genotypes. \nIn both cases, if more than one sample name is found, ISG will exit immediately \nand display an error.\n\n--------------------------------------------------------------------------------\n--ANNOTATIONS--\n--------------------------------------------------------------------------------\n\nISG will annotate SNPs in the output matrix files using SnpEff. In order for \nSnpEff to run, you must specify the location of the SnpEff jar file (-eff) and the \nSnpEff database identifier (-db) of the genome you are using as the reference. To see \na list of all SnpEff databases you can run the following command:\n\njava -jar SnpEff.jar databases\n\nOnce you have found the SnpEff database that corresponds to your reference sequence \nmake sure that the sequence headers match with the chromosome names found in the \nSnpEff database. If you do not know the chromosome names used by SnpEff, you can \ndo a 'dry run' of ISG by running the ISG command without the \"-run\" option. If the \n'dry run' completes successfully then you are good to go. However, if \nyou see an error message referring to mismatching chromosome names then you will \nneed to fix the chromosome names in your reference fasta or provide a translation \ntable before continuing. \n\n Translation Table\n\nA translation table is a file of key-value pairs that lists the sequence names of \nyour reference fasta file and the corresponding SnpEff database chromosome names.\nFor example, if your reference fasta had the names \"AmesA,AmesApX01,AmesApX02\" and \nthe SnpEff database had the chromosome names \",pX01,pX02\" (the first name is \nintentionally left blank) then your translation table would look like this:\n\nAmesA=\nAmesApX01=px01\nAmesApX02=px02\n  \n\n--ISG annotation\n\nISG will annotate SNPs in the output matrix files if GenBank file(s) are provided \nin the input directory. ISG matches a sequence in the reference fasta file with \na GenBank file by using the GenBank filename. For example, consider the following \nreference fasta file:\n\n>gi|16120353|ref|NC_003143.1| Yersinia pestis CO92 chromosome, complete genome\nATCGA....ATGC\n\nISG will use the sequence headers to find the corresponding GenBank\nfiles (gi|16120353|ref|NC_003143.1|.gbk) in the input directory. Thus, it is important that \nthere is a GenBank file for each sequence in the reference fasta and that each \nGenBank file is named identically to the header of the corresponding sequence in \nthe reference fasta file.  \n\n--------------------------------------------------------------------------------\n--OUTPUT FILES--\n--------------------------------------------------------------------------------\n\nDepending on what input files are specified, ISG may generate a lot of files in \nthe output directory. These files are organized in a directory structure that \nfacilitates finding the files by sample name.\n\nThere are two subdirectories of the output directory that ISG creates for every \nanalysis: \"samples\" and \"ref\". The \"samples\" directory contains a subdirectory for each \nsample. Inside each individual sample directory exists all the intermediate files ISG \ngenerated for that particular sample. For example, let's say that your analysis \nincludes a raw reads file named \"ABC.fastq\". ISG will create a directory named \n\"ABC\" (for a discussion on how ISG determines sample names see \"SAMPLE NAMES\"). \nInside that directory are the following files (listed by extension): bam, \nbai, bed, summary, and vcf. \n\nThe \"ref\" directory is created to store duplicated regions found in the reference as \nwell as any duplicated regions found in completely sequenced genomes. As such,\nthere will always be a file named \"ref.interval_list\" that contains the repeated \nregions found in the reference. Additionally, if other completely sequenced genomes \nexist, there will be files corresponding to the repeats found in those genomes.\n\nThe rest of the output files reside at the root of the output directory and fall \ninto one of three categories: \"all\", \"dups\", and \"unique\". Each category contains \na SNP matrix file and a file representing the SNP matrix in a fasta format. \n\nThe \"all\" category contains variants detected by the pipeline where at least one sample \ncontains a \"real\" variant (i.e., not called the reference state, missing, or ambiguous). \nIn addition to the SNP matrix and fasta file, the \"all\" category contains an annotated \nSNP matrix (all.variants.final.txt) and a statistics file (all.variants.final.txt.stats).\n\nThe \"unique\" category contains a subset of variants from the \"all\" category that \ndo not overlap a duplicated (repeated) region.\n\nThe \"dups\" category contains a subset of variants from the \"all\" category that \nfall within any duplicated region(s).\n\nAmbiguous variants (ambiguous.variants.txt) are variants detected by the pipeline, \nbut which were marked as ambiguous. None of the samples contain a \"real\" variant in this file.\n \n\n--------------------------------------------------------------------------------\n--OPTIONS FILE--\n--------------------------------------------------------------------------------\n\nISGPipeline allows the user to customize how each external program is run using \nan options file provided when running ISGPipeline. An options file with default \nvalues is provided in the dist/ directory of an ISGPipeline build. Below is an \nexample of using the --optionsfile argument:\n\njava -jar ISGPipeline.jar -S ISGPipelineQScript.scala \\\n     -I in \\\n     -O out \\\n     --optionsfile path/to/optionsfile.txt\n     -run\n\nThis file is a key/value properties file where each key represents \nan argument to one of the programs ISGPipeline runs and the value corresponds to \nhow that argument is to be used. The key is formatted as follows \n<program identifier>.<argument name>, where the program identifier is a unique id \ninternal to ISGPipeline that identifies the program this argument applies to. \nThe \"argument name\" is the name of the argument for the program. For example, \nthe following two lines are found in the options file:\n\nUnifiedGenotyper.outMode=EMIT_VARIANTS_ONLY\n#UnifiedGenotyper.contamination_fraction_to_filter=<double>\n\nIn this example \"UnifiedGenotyper\" is the unique program identifier specifying \nthe UnifiedGenotyper program in the GATK. The first line specifies the \"outMode\"\nargument and its value \"EMIT_VARIANTS_ONLY\". Since this line is uncommented \n(doesn't begin with a '#') it is active and will be used whenever Unified Genotyper\nis executed by ISGPipeline. The second line specifies the argument\n\"contamination_fraction_to_filter\" with a placeholder value <double>. This argument \nis not active because it begins with '#' and will be ignored by ISGPipeline. If \nyou would like to set the \"contamination_fraction_to_filter\" argument, simply \nuncomment that line by removing the '#' character and replace the <double> with \na numeric value within the range specified in GATK's documentation.\n\n--------------------------------------------------------------------------------\n--DEPENDENCIES--\n--------------------------------------------------------------------------------\n\nISGPipeline requires several external programs (dependencies) to run properly. \nEach dependency must be installed on the machine where ISGPipeline is run. \nYou can specify the path to each dependency using the options from the command line.\n\n-MUMmer - tested version is 3.23 (http://sourceforge.net/projects/mummer/)\n citation:Delcher, A.L., Salzberg, S.L. and Phillippy, A.M. Using MUMmer to identify \n similar regions in large sequence sets. Curr Protoc Bioinformatics 2003;Chapter 10:Unit 10 13.\n-GATK - tested version is 2.7.2 (issues have been observed with GATK 3+) (https://www.broadinstitute.org/gatk/)\n citation: McKenna, A., et al. The Genome Analysis Toolkit: a MapReduce framework for \n analyzing next-generation DNA sequencing data. Genome Res 2010;20(9):1297-1303.\n-BWA - tested version if 0.7.5 (http://bio-bwa.sourceforge.net/)\n citation:Li, H. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM.\n arXiv.org 2013(arXiv:1303.3997 [q-bio.GN]).\n-SnpEff - tested version is 3.3 (http://snpeff.sourceforge.net/) (optional)\n citation: Cingolani P, Platts A, Wang le L, Coon M, Nguyen T, Wang L, Land SJ, Lu X, \n Ruden DM. A program for annotating and predicting the effects of single nucleotide \n polymorphisms, SnpEff: SNPs in the genome of Drosophila melanogaster strain w1118;\n iso-2; iso-3. Fly. 2012;6(2):80-92. Epub 2012/06/26. doi: 10.4161/fly.19695. \n PubMed PMID: 22728672; PubMed Central PMCID: PMC3679285.\n\n---------------------------------------------------------------------------------\n--TEST DATA--\n---------------------------------------------------------------------------------\n\nTo test that ISG and all dependencies are installed correctly, test data is included\nwith the distribution.  The files consist of:\n\n-Reference chromosome (Yersinia pestis Colorado 92)\n-Short, paired-end reads from Yersinia pestis EV76 (SRR069197).  Reads have been\n sub-sampled to a reasonable level\n-Binary alignment map (BAM) file.  BAM file was generated with BWA-MEM from short\n reads from Y. pestis EV76\n-Variant call format (VCF) file.  VCF was generated with GATK from BAM file included qabove.\n-Genome assembly in FASTA format.  Short reads were from EV76 were assembled with SPAdes.\n-GenBank file for CO92.  This will be used for annotation\n\nAll of these files, except for the reference genome are in test_data/ISG_in.  To run, enter\nthe ISG folder and do:\n\njava -jar ISGPipeline.jar -S ISGPipelineQScript.scala -I test_data/ISG_in/ -O isg_out \\\n-R test_data/YP_CO92.fasta -bwa PATH_TO/bwa -gatk PATH_TO/GenomeAnalysisTK.jar \n--usebwamem -mummer PATH_TO/MUMmer3.23\n\nIf this completes without incident, add \"-run\" to the end of the script and re-run.  This\ndataset should finish, even on a laptop, in a reasonable time frame\n\n", 
  "id": 7828770
}