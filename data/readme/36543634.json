{
  "README": "\n\n    _/_/_/  _/_/_/    _/_/_/                  _/_/_/  _/  _/_/  _/  _/_/    _/_/_/  _/    _/\n _/        _/    _/  _/    _/  _/_/_/_/_/  _/    _/  _/_/      _/_/      _/    _/  _/    _/    \n_/        _/    _/  _/    _/              _/    _/  _/        _/        _/    _/  _/    _/     \n _/_/_/  _/_/_/    _/_/_/                  _/_/_/  _/        _/          _/_/_/    _/_/_/      \n        _/        _/                                                                  _/       \n       _/        _/                                                              _/_/\n\n        A C++ interface to the BLAS library using arbitrary-rank arrays\n                        Alejandro Marcos Aragon, Ph.D.\n\n\n\nVersion   1.1\nPreprint  http://arxiv.org/abs/1209.1003\nLanguage  C++11\nLicense   GNU Lesser GPL\n\n\n________\nOVERVIEW\n\n The cpp-array project aims at creating a library of algebraic objects that interfaces to\n the BLAS set of functions to maintain high performance. The main aim of the library is to\n provide the end user with an easy to use syntax, where mathematical expressions can be used\n and the library takes care of calling the BLAS routines behind the scenes. This is done \n through the use of expression templates and features provided by the new standard library\n (C++11) so performance is not affected at all. Because cpp-array is an interface to the\n BLAS set of routines, a working BLAS implmenentation is needed.\n\n_____________\nPREREQUISITES\n\nThe compilation of cpp-array requires the following packages:\n\n   - CMake build system,\n   - GNU make,\n   - a C++ compiler that supports the C++11 set of requirements (tested on gcc 4.7 and \n     clang 4.2, or newer versions of them),\n   - An implementation of the BLAS set of routines (Fortran compiler needed) or its C\n     interface (CBLAS),\n   - Doxygen (for the documentation).\n\n_____________\nCONFIGURATION\n\n Unzip the cpp-array .zip package file. Change to the unzipped directory using the command\n cd. The library can be configured in three different ways from the command line. If a \n Fortran compiler is given by using the fc parameter, the code tries to find a working \n Fortran BLAS implementation: \n \n     $ make config fc=gfortran\n\n If the user wants to use the Nvidia CUBLAS implementation instead to run the code in GPUs,\n the library can be configured as follows:\n\n     $ make config cuda=1\n\n If none of these parameters are given, the configure program will try to find a C \n interface to the BLAS library:\n\n     $ make config\n\n The following table lists all the parameters that can be used to configure the library:\n\n   - cxx=[compiler]        The C++ compiler to use, default: c++\n   - fc=[compiler]         The Fortran compiler to use, there is no default as the library\n                           can be built without Fortran support\n   - cuda=[bool]           Enable GPU computing\n   - prefix=[path]         Installation path, default: /usr/local\n   - doc=[bool]            Configure to build the documentation, default: true\n   - latex=[bool]          Enable LaTeX documentation, default: false\n   - build=[string]        Build types: Debug, Release, RelWithDebInfo, MinSizeRel, \n                           default: None\n\n The variables resulting from the configuration can be edited direcly by typing\n     $ make edit_cache\n\n This may prove useful, e.g., in the case CMake fails to find the CBLAS library because it\n is located on a non-standard directory.\n\n___________\nCOMPILATION\n\n To compile the library once the configuration has taken place, type\n\n     $ make\n\n All programs are stored within the directory build/<architecture>/, where <architecture> is\n machine dependent (e.g., Linux-x86_64, or Darwin-x86_64).\n\n____________\nINSTALLATION\n \n Install the library by typing\n\n     $ make install \n \n_____\nOTHER\n \n To remove the installed files, type\n\n     $ make uninstall \n \n To remove all object files while retaining the configuration, type\n\n     $ make clean \n \n To remove the build directory, type\n\n     $ make distclean \n \n The documentation for the library can be built by running\n\n     $ make doc\n     \n assuming that doxygen is installed in the system. The documentation is also generated\n within the directory build/<architecture>/.\n \n \n The examples/ folder shows how to use the library with a set of examples. Check the source\n files in this folder for a correct usage of the library. To build the examples, type\n\n     $ make examples\n  \n To run the examples, change to the directory build/<architecture>/examples and execute the\n corresponding program.\n \n The tests in the tests/ directory are run to make sure that the library is built correctly.\n If any of the tests fails, check the difference between the .lastout and the .verified \n files for that particular test in order to find the problem. The tests are executed by the\n CTest framework, by typing\n\n     $ make check\n  \n______________\nFOR DEVELOPERS\n \n The CMake build system can be accessed directly to have better control on the build\n options. By running the command\n  \n     $ make edit_cache\n\n the user can customize many more options than those presented above.\n_______\nCONTACT\n\nAlejandro M. Aragon, Ph.D.\nemail:\talejandro.aragon@fulbrightmail.org\n\n", 
  "read_at": 1462559007, 
  "description": "Automatically exported from code.google.com/p/cpp-array", 
  "id": 36543634
}