{
  "read_at": 1462543064, 
  "description": "libcloudphysics++ - a library of algorithms for representing cloud microphysics in numerical models", 
  "Readme.md": "libcloudph++ - a cloud (micro)physics library \n=======================================================================\n\nTo get more information on libcloudph++, please check: \n  - http://libcloudphxx.igf.fuw.edu.pl/\n  - http://arxiv.org/abs/1310.1905\n  - http://www.geosci-model-dev-discuss.net/7/8275/2014/\n\nCompilation of libcloudph++ requires:\n- a C++11 compliant compiler (optionally with OpenMP support)\n- a CUDA compiler (optional)\n- Thrust C++ library\n- Boost C++ libraries\n\nCompilation of the Python bindings for libcloudph++ (enabled\nby default) further requires:\n- Python interpretter and development files\n- NumPy Python package\n- Boost.Python C++ library\n- Blitz++ C++ library\n\nCompilation of the ``icicle'' test program described in the \n2015 GMD paper on libcloudph++ (and generation of all results\npresented in the paper) further requires:\n- libmpdata++ C++ library and its dependencies including:\n  - HDF5 library with its optional C++ bindings\n  - gnuplot-iostream C++ library and gnuplot\n\nDuring development of libcloudph++, we are continuously testing\nthe code on Linux using GCC and LLVM/Clang as well as on OSX\nusing Apple/Clang - these are considered the supported platforms.\n\nCompilation and execution of the examples shipped with libcloudph++ \nis easiest done using CMake, and the following instructions assume\nyou're using CMake. Some hints on CMake usage are included at the\nend of this file.\n\nThe .travis.yml file shipped with the library contains a complete\nset of commands needed to build and execute all tests programs\nshipped with libcloudph++ on fresh Ubuntu and OSX installations -\nit may contain useful information on obtaining the dependencies.\n\n1. To check the dependencies and compile the library, please try:\n  $ mkdir build\n  $ cd build\n  $ cmake ..\n  $ make\n  $ cd ..\n  \nThe next two steps are optional test. Running the tests is highly\nrecommended to verify if the library works correctly in your \nenvironment. Nevertheless, in principle you can skip to step four\nand install the library right away.\n  \n2. To perform unit and some other quick tests, please try:\n  $ cd build/tests\n  $ make test\n  $ cd ../..\n\nThese tests should complete in a few minutes.\n\n3. To reproduce all results from the GMD paper, please try:\n  $ cd tests/paper_2015_GMD\n  $ mkdir build \n  $ cd build\n  $ cmake ..\n  $ make\n  $ make test     \n  $ cd ../../..\n\nThis can take over an hour if a GPU is available or longer if using\nCPU only. \n\n4. To install the library system-wide, please try:\n  $ cd build\n  $ sudo make install\n\nThis will copy the libcloudph++ headers into the system include path\n(e.g. /usr/include/libcloudph++), copy the libcloudph++-config.cmake \nfile into the system share directory (e.g. /usr/share/libcloudph++) \nand install the shared library file (e.g. /usr/lib).\n\nSome CMake hints:\n- to point CMake to a non-default C++ compiler (e.g. clang++):\n  $ cmake .. -DCMAKE_CXX_COMPILER=clang++ \n\n- to alter the installation prefix (e.g. /usr/ instead of /usr/local):\n  $ cmake .. -DCMAKE_INSTALL_PREFIX:PATH=/usr\n\n- to switch between debug and release (default) compilation modes \n  (has to be done after compiler choice):\n  $ cmake .. -DCMAKE_BUILD_TYPE=Debug\n  $ cmake .. -DCMAKE_BUILD_TYPE=Release\n  \n- two alternative ways of cleaning leftovers from a previous build \n  (including CMake cache files):\n  $ rm -rf build/CMakeCache.txt build/CMakeFiles\n  $ rm -rf build; mkdir build\n\n- the output of commands executed by \"make test\" can be viewed with:\n  $ less Testing/Temporary/LastTest.log\n\n", 
  "id": 9598913
}