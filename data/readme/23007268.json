{
  "read_at": 1462553328, 
  "description": "A set of tools to generate synthetic graphs embedded into a hyperbolic space and to test the greedy routing.", 
  "README": "### Hyperbolic-Graph-Generator\n\n\nThe Hyperbolic-Graph-Generator is a package of tools to generate\ngraphs embedded in the hyperbolic plane, and to compute the efficiency\nof greedy forwarding in these graphs.\n\nMore details on the graph models implemented in the package are available\nat http://arxiv.org/abs/1503.05180/.\n\nThis standalone package is also a core component of the hyperbolic\nrouting package that is going to be integrated into the NDNSim (http://ndnsim.net).\nHyperbolic routing is greedy geometric routing in a\nhyperbolically embedded network. Hyperbolic routing has attractive\nscalability and efficiency characteristics. In particular, applied to\nthe AS Internet, hyperbolic routing is nearly optimal, i.e., maximally\nscalable (http://dx.doi.org/10.1038/ncomms1063/). The NDN testbed has\nbeen recently mapped to the hyperbolic plane yielding similar routing\nefficiency (http://www.caida.org/research/routing/greedy_forwarding_ndn/).\nBecause of its exceptional scalability and efficiency characteristics,\nhyperbolic routing is one of the routing strategies in the NDN\narchitecture.\n\nThe software package includes three tools (see README_INSTALL for\ninformation on installation details):\n- hyperbolic_graph_generator\n- graph_properties\n- greedy_routing\n\n\n\n\n### Description:\n\n1) hyperbolic_graph_generator: a tool to generate synthetic graphs embedded\n   into a hyperbolic space.\n\nNAME: \n\thyperbolic_graph_generator -- generate an hyperbolic graph compatible with user parameters \n\nSYNOPSIS: \n\thyperbolic_graph_generator [parameters]  \n\nDESCRIPTION:\n\tThe program generates a file (graph.hg is the default file name) that\n\tdescribes the geometric coordinates and the links of a hyperbolic graph\n\tcompatible with the parameters provided by the user. The program generates\n\trandom hyperbolic graphs according to the models in:\n\t            http://dx.doi.org/10.1103/PhysRevE.82.036106\n\tA description of how the hyperbolic graph generator works can be found at:\n\t            http://arxiv.org/abs/1503.05180\n\nPARAMETERS:\n\t-n\tgraph size (number of nodes)\n\t\tdefault value is 1000\n\t-k\texpected average degree\n\t\tdefault value is 10\n\t-g\texpected power-law exponent gamma\n\t\tdefault value is 2 (infinite gamma = 10)\n\t-t\ttemperature\n\t\tdefault value is 0 (infinite temperature = 10)\n\t-z\tsquare root of curvature zeta=sqrt(-K)\n\t\tor ratio eta=zeta/T in Soft Configuration Model\n\t\tdefault value is 1\n\t-s\trandom seed\n\t\tdefault value is 1\n\t-o\toutput folder\n\t\tdefault value is current folder\n\t-f\tgraph file name\n\t\tdefault value is graph (.hg extension is always added)\n\t-h\tprint help menu\n\t-q\tquiet (no information print on standard output)\n\nOUTPUT:\n\tThe program generates a file (./graph.hg unless the -o or -f options are turned on)\n\tthat lists the coordinates of each node in the hyperbolic space as well as the \n\tadjacency list. The file format is the following:\n\n\t# The first line describes the main graph parameters:\n\tN <num nodes> T <temperature> G <gamma> K <avg.degree> Z <zeta> S <seed> I <initial_node_id>\n\n\t# A line for each node and its polar coordinates:\n\t<node_id>\t<radial coordinate>\t<angular coordinate>\n\n\t# A line for each link:\n\t<node_id>\t<node id> \n\n\tExample:\n\tN\t100\tT\t0\tG\t2\tK\t10\tZ\t2\tS\t1    I  1\n\t1\t0.000301382\t0.826476\n\t2\t0.093611\t2.88178\n\t3\t0.0786131\t1.37576\n\t... \n\t99\t0.10503\t3.97561\n\t100\t0.0713906\t5.18173\n\t1\t2\n\t1\t3\n\t1\t4\n\t...\n\t97\t98\n\t98\t99\n\nEXAMPLE:\n\n\t# Generate a graph of 10,000 nodes with average degree 10,\n \t# whose degrees follow a power-law distribution P(k) ~ k^{-2.5}\n\t# The graph is written in graph_example.hg\n \t# All other parameters take default values\n \n\thyperbolic_graph_generator -n 10000 -k 10 -g 2.5 -f graph_example\n\n\n\n\n2) graph_properties: a tool to compute some basic graph properties of the generated\n   hyperbolic graphs.\n\nNAME: \n\tgraph_properties -- compute properties of hyperbolic graphs\n\nSYNOPSIS: \n\tgraph_properties [parameters] \n\nDESCRIPTION:\n\tThe program computes some graph  properties associated with nodes of the\n\thyperbolic graph provided as input (./graph.hg is default), in detail: \n\tthe polar coordinates of each node, its degree, its average neighbor\n\tdegree, and its clustering coefficient.\n\nPARAMETERS:\n\t-i\tgraph file (in hg format)\n\t\tdefault value is ./graph.hg\n\t-o\toutput folder\n\t\tdefault value is current folder\n\t-h\tprint help menu\n\nOUTPUT:\n\tThe program generates five text files having the following format:\n\n\tradial.txt\n\t\t\t<node id> <radial coordinate>\n\tangular.txt\n\t\t\t<node id> <angular coordinate>\n\tdegree.txt\n\t\t\t<node id> <node degree>\n\tknn.txt\n\t\t\t<node id> <node avg. neigh. degree>\n\tcc.txt\n\t\t\t<node id> <node clustering coefficient>\n\n\nEXAMPLE:\n\t\n\tgraph_properties -i graph_example.hg\n\n\n\n\n\n3) greedy_routing: a tool to test the greedy routing on hyperbolic graphs.\n\nNAME: \n\tgreedy_routing -- compute the greedy routing success ratio \n\nSYNOPSIS: \n\tgreedy_routing [parameters] \n\nDESCRIPTION:\n\tThe program loads in memory a hyperbolic graph (./graph.hg by default),\n\tit simulates the greedy routing on a set of random source-destination node\n\tpairs belonging to the same connected component (default is 10,000  random\n\tpairs), and finally outputs the success ratio (i.e. the percentage of times\n\tthe information sent by the source node would have reached the destination\n\tif each node would adopt the greedy routing rules.\n\nPARAMETERS:\n\t-i\tinput graph file (in hg format)\n\t\tdefault value is ./graph.hg\n\t-a\tnumber of attempts\n\t\tdefault value is 10000\n\t-s\trandom seed\n\t\tdefault value is 1\n\t-h\tprint help menu\n\nOUTPUT:\n\tThe program print the success ratio to standard output.\n\nEXAMPLE:\n\n\t# Test geometric greedy routing in the graph located in graph_example.hg\n\t# using 20,000 random pairs of nodes.\n\t# The seed for the random generator is 12345\n\t\n\tgreedy_routing -i graph_example.hg -a 20000 -s 12345\n\n\n", 
  "README_INSTALL": "### Installation:\n\nRequirements:\n- boost libraries 1.46.1 or higher\n- gsl libraries 1.16 or higher\n- libtool\n\nIn order to install the Hyperbolic Graph Generator you need to follow the list of instructions below:\n\n$ sh ./bootstrap.sh  # non-release versions\n$ ./configure\n$ make\n$ (sudo) make install\n\nThe procedure above builds three tools:\n- hyperbolic_graph_generator\n- graph_properties\n- greedy_routing\n\n\nAlso, it installs the hggraphs library (public interface is described in hg_graphs_lib.h). \nFor more information about the installation process, please see the Installation FAQs.\n\n\n\n\n\n###  Installation FAQs:\n\nWhere are the executables?\nBy default, `make install` installs the package's commands under  `/usr/local/bin`, copies the header files under `/usr/local/include`, while the compiled libraries are available at `/usr/local/lib`. \nYou can specify an installation prefix other than `/usr/local` by giving `configure` the option `--prefix=PREFIX`, where PREFIX must be an absolute path.\n\n\nCan I install the Hyperbolic Graph Generator in my HOME directory?\nYes, all you need is to run `configure` using the `--prefix` option:\n\n   \t./configure --prefix=/home/user/my_hg_generator\n\n\nTools will be available in:\n\n\t`/home/user/my_hg_generator/bin`\n\nLibrary files will be available in:\n\n\t`/home/user/my_hg_generator/include`\n\n\t`/home/user/my_hg_generator/lib`\n\n\nThe boost libraries are not found, how can I fix this problem?\nIf the boost libraries are not installed, then install them using your package management system, or:\n   1) download them at http://www.boost.org/\n   2) extract boost_**.tar.bz2 in a convenient location e.g. /home/user/\n   Then run again the configure command in the Hyperbolic Graph Generator\n   as follows:\n\n        ./configure CPPFLAGS='-I/home/user/myboost'\n\n   Note: boost are header-only libraries, no installation process is required\n\n\nThe gsl libraries are not found, how can I fix this problem\nIf the gsl libraries are not installed, then install them using your package management system or follow the instructions at http://www.gnu.org/software/gsl/.\n\n\nMy boost libraries are not installed in a standard path, how can I build the Hyperbolic Graph Generator?\nIf the boost libraries are installed in a custom path, e.g. they are in `/home/user/myboost`, then the configure command must be run with the CPPFLAGS set:\n\n\t./configure CPPFLAGS='-I/home/user/myboost'\n\nBoost are header-only libraries, then no LDFLAGS are required.\n\n\nMy gsl libraries are not installed in a standard path, how can I install the Hyperbolic Graph Generator?\nIf the gsl libraries are installed in a custom path, e.g.  they are in `/home/user/mygsl`, then the configure command must be run with both the CPPFLAGS and LDFLAGS set:\n\n\t./configure CPPFLAGS='-I/home/user/mygsl/include' LDFLAGS=\"-L/home/user/mygsl/lib\"\n   \nIf gsl are installed, the following command return the information to be put in the CPPFLAGS and LDFLAGS:\n    \n   $ gsl-config --cflags --libs\n      -I/opt/local/include\n      -L/opt/local/lib -lgsl -lgslcblas\n    \n\nBoth boost and gsl libraries are installed in non standard paths, how can I install the Hyperbolic Graph Generator?\nA combination of the previous answers can be used.\n\n   ./configure CPPFLAGS='-I/home/user/myboost -I/home/user/mygsl/include' LDFLAGS=\"-L/home/user/mygsl/lib\"\n\n\nerror while loading shared libraries: libhggraphs.so.0: cannot open\nhared object file: No such file or directory. How do I fix this problem?\nRun the following command (or put that line in your profile\nconfiguration file for your current shell, e.g. ~/.profile for Mac\nOS X,  ~/.bash_profile for FreeBSD, ~/.bash_rc for Ubuntu):\n\nexport LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\n\nThis works if your library is installed in /usr/local/lib. Otherwise\nsubstitute that with you lib installation directory.\n\n\nIs there a way to improve the speed of the library?\nIt is possible to set a different optimization level at configuration\ntime, using the following option: \n\n   ./configure CXXLAGS='-O3'\n\nThe default optimization level is -O2.\n\n\nCan I use the hggraphs library to develop new tools?\nThe libhggraphs public interface is described in the hg_graphs_lib.h file that is installed in `include/hg_graphs_lib.h`. In order to link the library to your tool you need to provide the -lhggraphs option as well as the path to the lib folder containing the library at linking time.\nLet's suppose that the Hyperbolic Graph Generator installed in the default path `/usr/local`, in order to build a new tool the following operations have to be performed:\n\n\tg++ -I/usr/local/include -c my_new_tool.o my_new_tool.cpp\n\tg++ -o my_new_tool my_new_tool.o -L/usr/local/lib -lhggraphs\n\n", 
  "id": 23007268, 
  "README.md": "## Hyperbolic-Graph-Generator\n\n\nThe Hyperbolic-Graph-Generator is a package of tools to generate\ngraphs embedded in the hyperbolic plane, and to compute the efficiency\nof greedy forwarding in these graphs.\n\nMore details on the graph models implemented in the package are available\nat http://arxiv.org/abs/1503.05180/.\n\nThis standalone package is also a core component of the hyperbolic\nrouting package that is going to be integrated into the NDNSim (http://ndnsim.net).\nHyperbolic routing is greedy geometric routing in a\nhyperbolically embedded network. Hyperbolic routing has attractive\nscalability and efficiency characteristics. In particular, applied to\nthe AS Internet, hyperbolic routing is nearly optimal, i.e., maximally\nscalable (http://dx.doi.org/10.1038/ncomms1063). The NDN testbed has\nbeen recently mapped to the hyperbolic plane yielding similar routing\nefficiency (http://www.caida.org/research/routing/greedy_forwarding_ndn/).\nBecause of its exceptional scalability and efficiency characteristics,\nhyperbolic routing is one of the routing strategies in the NDN\narchitecture.\n\nMore information are available at http://named-data.github.io/Hyperbolic-Graph-Generator/\n\n\n### Installation:\n\nRequirements:\n- *boost libraries 1.46.1* or higher\n- *gsl libraries 1.16* or higher\n- *libtool* \n\nIn order to install the Hyperbolic Graph Generator you need to follow the list of instructions below:\n```sh\n$ sh ./bootstrap.sh  # non-release versions\n$ ./configure\n$ make\n$ (sudo) make install\n```\nThe procedure above builds three tools:\n- *hyperbolic_graph_generator*\n- *graph_properties*\n- *greedy_routing*\n\n\nAlso, it installs the *hggraphs library* (public interface is described in *hg_graphs_lib.h*). \nFor more information about the installation process, please see the Installation FAQs.\n\n### Description:\n\n#### **hyperbolic_graph_generator**\n\nA tool to generate synthetic graphs embedded into a hyperbolic space.\n\n```\nNAME: \nhyperbolic_graph_generator -- generate an hyperbolic graph compatible with user parameters \n\nSYNOPSIS: \nhyperbolic_graph_generator [parameters]  \n\nDESCRIPTION:\nThe program generates a file (graph.hg is the default file name) that\ndescribes the geometric coordinates and the links of a hyperbolic graph\ncompatible with the parameters provided by the user. The program generates\nrandom hyperbolic graphs according to the models in:\nhttp://dx.doi.org/10.1103/PhysRevE.82.036106\nA description of how the hyperbolic graph generator works can be found at:\nhttp://arxiv.org/abs/1503.05180\n\nPARAMETERS:\n-n\tgraph size (number of nodes)\n        default value is 1000\n-k\texpected average degree\n        default value is 10\n-g\texpected power-law exponent gamma\n        default value is 2 (infinite gamma = 10)\n-t\ttemperature\n        default value is 0 (infinite temperature = 10)\n-z\tsquare root of curvature zeta=sqrt(-K)\n        or ratio eta=zeta/T in Soft Configuration Model\n        default value is 1\n-s\trandom seed\n        default value is 1\n-o\toutput folder\n        default value is current folder\n-f\tgraph file name\n        default value is graph (.hg extension is always added)\n-h\tprint help menu\n-q\tquiet (no information print on standard output)\n\nOUTPUT:\nThe program generates a file (./graph.hg unless the -o or -f options are turned on)\nthat lists the coordinates of each node in the hyperbolic space as well as the \nadjacency list. The file format is the following:\n\n# The first line describes the main graph parameters:\nN <num nodes> T <temperature> G <gamma> K <avg.degree> Z <zeta> S <seed> I <initial_node_id>\n\n# A line for each node and its polar coordinates:\n<node_id>\t<radial coordinate>\t<angular coordinate>\n\n# A line for each link:\n<node_id>\t<node id> \n\nExample:\nN\t100\tT\t0\tG\t2\tK\t10\tZ\t2\tS\t1    I  1\n1\t0.000301382\t0.826476\n2\t0.093611\t2.88178\n3\t0.0786131\t1.37576\n... \n99\t0.10503\t3.97561\n100\t0.0713906\t5.18173\n1\t2\n1\t3\n1\t4\n...\n97\t98\n98\t99\n\nEXAMPLE:\n\n# Generate a graph of 10,000 nodes with average degree 10,\n# whose degrees follow a power-law distribution P(k) ~ k^{-2.5}\n# The graph is written in graph_example.hg\n# All other parameters take default values\n\nhyperbolic_graph_generator -n 10000 -k 10 -g 2.5 -f graph_example\n\n```\n\n\n#### **graph_properties**\nA tool to compute some basic graph properties of the generated hyperbolic graphs.\n\n```\nNAME: \ngraph_properties -- compute properties of hyperbolic graphs\n\nSYNOPSIS: \ngraph_properties [parameters] \n\nDESCRIPTION:\nThe program computes some graph  properties associated with nodes of the\nhyperbolic graph provided as input (./graph.hg is default), in detail: \nthe polar coordinates of each node, its degree, its average neighbor\ndegree, and its clustering coefficient.\n\nPARAMETERS:\n-i\t   graph file (in hg format)\n       default value is ./graph.hg\n-o   output folder\n       default value is current folder\n-h   print help menu\n\nOUTPUT:\nThe program generates five text files having the following format:\n\nradial.txt\n    <node id> <radial coordinate>\nangular.txt\n    <node id> <angular coordinate>\ndegree.txt\n    <node id> <node degree>\nknn.txt\n    <node id> <node avg. neigh. degree>\ncc.txt\n    <node id> <node clustering coefficient>\n\n\nEXAMPLE:\n\ngraph_properties -i graph_example.hg\n```\n\n\n### greedy_routing\nA tool to test the greedy routing on hyperbolic graphs.\n\n```\nNAME: \ngreedy_routing -- compute the greedy routing success ratio \n\nSYNOPSIS: \ngreedy_routing [parameters] \n\nDESCRIPTION:\nThe program loads in memory a hyperbolic graph (./graph.hg by default),\nit simulates the greedy routing on a set of random source-destination node\npairs belonging to the same connected component (default is 10,000  random\npairs), and finally outputs the success ratio (i.e. the percentage of times\nthe information sent by the source node would have reached the destination\nif each node would adopt the greedy routing rules.\n\nPARAMETERS:\n-i\t    input graph file (in hg format)\n        default value is ./graph.hg\n-a\tnumber of attempts\n        default value is 10000\n-s\trandom seed\n        default value is 1\n-h\tprint help menu\n\nOUTPUT:\nThe program print the success ratio to standard output.\n\nEXAMPLE:\n\n# Test geometric greedy routing in the graph located in graph_example.hg\n# using 20,000 random pairs of nodes.\n# The seed for the random generator is 12345\n\ngreedy_routing -i graph_example.hg -a 20000 -s 12345\n```\n\n###  Installation FAQs:\n\n**Where are the executables?**\n\nBy default, `make install` installs the package's commands under  `/usr/local/bin`, copies the header files under `/usr/local/include`, while the compiled libraries are available at `/usr/local/lib`. \nYou can specify an installation prefix other than `/usr/local` by giving `configure` the option `--prefix=PREFIX`, where PREFIX must be an absolute path.\n\n\n**Can I install the Hyperbolic Graph Generator in my HOME directory?**\n\nYes, all you need is to run `configure` using the `--prefix` option:\n\t```\n   \t./configure --prefix=/home/user/my_hg_generator\n\t```\n\nTools will be available in:\n\n\t`/home/user/my_hg_generator/bin`\n\nLibrary files will be available in:\n\n\t`/home/user/my_hg_generator/include`\n\n\t`/home/user/my_hg_generator/lib`\n\n\n**The boost libraries are not found, how can I fix this problem?**\n\nIf the boost libraries are not installed, then install them using your package management system, or:\n\n   1) download them at http://www.boost.org/\n\n   2) extract boost_xxx.tar.bz2 in a convenient location e.g. /home/user/\n\n   Then run again the configure command in the Hyperbolic Graph Generator\n   as follows:\n\n```\n        ./configure CPPFLAGS='-I/home/user/myboost'\n```\n\n   Note: boost are header-only libraries, no installation process is required\n\n\n**The gsl libraries are not found, how can I fix this problem**\n\nIf the gsl libraries are not installed, then install them using your package management system or follow the instructions at http://www.gnu.org/software/gsl/.\n\n\n**My boost libraries are not installed in a standard path, how can I build the Hyperbolic Graph Generator?**\n\nIf the boost libraries are installed in a custom path, e.g. they are in `/home/user/myboost`, then the configure command must be run with the CPPFLAGS set:\n\n```\n\t./configure CPPFLAGS='-I/home/user/myboost'\n```\n\nBoost are header-only libraries, then no LDFLAGS are required.\n\n\n**My gsl libraries are not installed in a standard path, how can I install the Hyperbolic Graph Generator?**\n\nIf the gsl libraries are installed in a custom path, e.g.  they are in `/home/user/mygsl`, then the configure command must be run with both the CPPFLAGS and LDFLAGS set:\n\n\t```\n\t./configure CPPFLAGS='-I/home/user/mygsl/include' LDFLAGS=\"-L/home/user/mygsl/lib\"\n   \t```\t\n\nIf gsl are installed, the following command return the information to be put in the CPPFLAGS and LDFLAGS:\n\n```\n   $ gsl-config --cflags --libs\n      -I/opt/local/include\n      -L/opt/local/lib -lgsl -lgslcblas\n```\n\n\n**Both boost and gsl libraries are installed in non standard paths, how can I install the Hyperbolic Graph Generator?**\n\nA combination of the previous answers can be used.\n\n```\n   ./configure CPPFLAGS='-I/home/user/myboost -I/home/user/mygsl/include' LDFLAGS=\"-L/home/user/mygsl/lib\"\n```\n\n**error while loading shared libraries: libhggraphs.so.0: cannot open shared object file: No such file or directory. How do I fix this problem?**\n\nRun the following command (or put that line in your profile\n   configuration file for your current shell, e.g. ~/.profile for Mac\n   OS X,  ~/.bash_profile for FreeBSD, ~/.bash_rc for Ubuntu):\n\n```\nexport LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\n```\n\nThis works if your library is installed in /usr/local/lib. Otherwise,\nsubstitute that with you lib installation directory.\n\n\n**Is there a way to improve the speed of the library?**\n\nIt is possible to set a different optimization level at configuration\ntime, using the following option: \n\n```\n   ./configure CXXLAGS='-O3'\n```\n\nThe default optimization level is -O2.\n\n\n**Can I use the hggraphs library to develop new tools?**\n\nThe libhggraphs public interface is described in the hg_graphs_lib.h file that is installed in `include/hg_graphs_lib.h`. In order to link the library to your tool you need to provide the -lhggraphs option as well as the path to the lib folder containing the library at linking time.\nLet's suppose that the Hyperbolic Graph Generator installed in the default path `/usr/local`, in order to build a new tool the following operations have to be performed:\n\n```\n\tg++ -I/usr/local/include -c my_new_tool.o my_new_tool.cpp\n\tg++ -o my_new_tool my_new_tool.o -L/usr/local/lib -lhggraphs\n```\n\n\n"
}