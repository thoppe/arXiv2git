{
  "read_at": 1462546411, 
  "description": "Random link selector", 
  "README.md": "# link-select\nSmall application to get used to Go (http://golang.org/) - so don't blame me for mistakes as this is my first time using Go in practice.\n\n# Description\nSmall command-line tool to select links randomly and store them.  \nLinks are stored in JSON files.  \n\n## Link storage format\nLink storage is kept simple: just an array of (title, link) pairs in which the title may be omitted (the link may be omitted as well but this makes no sense at all and thus is not checked by now).  \n\nSample JSON files (see also the *files* folder of this repository):  \n*read.json*\n```\n[\n\t{\n\t\t\"title\": \"Vim After 11 Years\",\n\t\t\"link\": \"https://statico.github.io/vim.html\"\n\t},\n\t{\n\t\t\"title\": \"The Kernel Boot Process\",\n\t\t\"link\": \"http://duartes.org/gustavo/blog/post/kernel-boot-process/\"\n\t},\n\t\t{\n\t\t\"title\": \"Code Injection Attacks on HTML5-based Mobile Apps\",\n\t\t\"link\": \"http://arxiv.org/ftp/arxiv/papers/1410/1410.7756.pdf\"\n\t},\n\t{\n\t\t\"title\": \"Cache is the new RAM - MemSQL\",\n\t\t\"link\": \"http://blog.memsql.com/cache-is-the-new-ram/\"\n\t}\n]\n```\n*watch.json*\n```\n[\n \t{\n\t\t\"title\": \"Donald Knuth's 20th Annual Christmas Tree Lecture: (3/2)-ary Trees\",\n\t\t\"link\": \"https://www.youtube.com/watch?v=P4AaGQIo0HY\"\n\t},\n\t{\n\t\t\"title\": \"Is it really Complex? Or did we just make it Complicated?\",\n\t\t\"link\": \"https://www.youtube.com/watch?v=ubaX1Smg6pY&=\"\n\t},\n\t{\n\t\t\"title\": \"The F# Path to Relaxation\",\n\t\t\"link\": \"https://www.youtube.com/watch?v=W-D6W7EA8gw\"\n\t}\n]\n```\n*book.json*\n```\n[\n\t{\n\t\t\"title\": \"How to Design Programs, Second Edition\",\n\t\t\"link\": \"http://www.ccs.neu.edu/home/matthias/HtDP2e/\"\n\t},\n\t{\n\t\t\"title\": \"The Rust Programming Language\",\n\t\t\"link\": \"https://doc.rust-lang.org/book/\"\n\t}\n]\n```\n\n## Configuration\nThe `config.json` file has two main purposes by now:  \n1. Configure the paths to the files to select from.  \n2. Configure the command to be used to open the link (most likely a browser, e.g. chromium-browser).  \n\nThis configuration file has to be present in the folder from which `link-select` is called. The file paths have to be absolute or relative from the configuration file.\n\nSample configuration JSON file:  \n*config.json*\n```\n{\n\t\"files\": {\n\t\t\"read\": \"files/read.json\",\n\t\t\"watch\": \"files/watch.json\",\n\t\t\"book\": \"files/book.json\"\n\t},\n\t\"system\": {\n\t\t\"browser\": \"chromium-browser\"\n\t}\n}\n```\n\n# Usage\nAssuming a Go environment set up as described on golang.org (also the `bin` folder added to `PATH`).  \n```\ngo install link-select\n```\n```\nlink-select OPTION\n\nAt least one mandatory argument.\n -a=read|watch|book, --add-link=read|watch|book\n    Add a link to the list provided (read, watch or book).\n -s=read|watch|book, --sel-link=read|watch|book\n    Select a link from the list provided (read, watch or book).\n```\n\n\n# Some useful references\n* http://golang.org/doc/code.html\n* https://golang.org/doc/effective_go.html\n* https://golang.org/pkg/encoding/json\n* http://spf13.com/post/is-go-object-oriented/\n* http://blog.golang.org/godoc-documenting-go-code\n", 
  "id": 39744084
}