{
  "read_at": 1462546749, 
  "description": "", 
  "README.md": "Lattice-Liouville\n=================\n\nThe code generates a discrete Gaussian free field on a periodic square lattice. From this field a discrete Liouville measure can be constructed, using a regularization method if desired. Geodesic distances can be computed w.r.t. the Liouville measure using either a simple Dijkstra algorithm or a Fast Marching solution to the Eikonal equation. \n\nFor more information check:\n* J. Ambjorn, T. Budd, *Geodesic distances in quantum Liouville gravity*, [arXiv:1405.3424](http://arxiv.org/abs/1405.3424)\n* [Timothy Budd's academic webpage](http://www.nbi.dk/~budd/)\n\nPre-requisites\n--------------\n\n* BOOST C++ libraries (tested with versions 1.41 and 1.55)\n* FFTW 3 (see http://www.fftw.org/)\n* FFTW++ (tested with version 1.13, see http://fftwpp.sourceforge.net/)\n* g++ or Visual C++ compiler \n\nTo compile with g++ on linux:\n\ng++ shortest_cycle.cpp liouville.cpp fftw++.cc -lfftw3 -o CYCLE\n\nUsage\n-----\n\nWhen running ./CYCLE a several of inputs are requested. All inputs can also be given as command line arguments.\nFor example:\n\n```\nwidth = 512           // 512 x 512 lattice\ngamma = 1.412         // scaling exponent \naveraging method (0=BOX_DIVISION,1=BOX_AVERAGING,2=DISK_AVERAGING,3=DISK_DIFFUSION) = 2\ndelta min = 0.0001    // perform measurements for values delta = 0.0001, 0.0002, ..., 0.0064\ndelta max = 0.0064\ndelta factor = 2.0\nnormalize volume (1=yes,0=no) = 0 \nmeasurements per delta per output = 50   // determines how often the program writes its output\noutput path = output                     // puts the data in folder ./output/\n```\n\nLicense\n-------\n\nThis source code may be reused without limitations according to the MIT license. If you use this code in your scientific publication, please cite the accompanying paper:\n\nJ. Ambjorn, T. Budd, *Geodesic distances in quantum Liouville gravity*, preprint, [arXiv:1405.3424](http://arxiv.org/abs/1405.3424)\n", 
  "id": 19608216
}