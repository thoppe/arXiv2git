{
  "read_at": 1462551849, 
  "description": "Demonstrating concept drifts in Amazon book reviews", 
  "README.md": "Demonstrating concept drifts in Amazon book reviews\n===================================================\n\nThe aim of this project is to analyse semantic consistency using emergent self-organizing maps and study how consistency changes over time. The results are detailed in this manuscript:\n\nP. Wittek, S. Daranyi, E. Kontopoulos, T. Moysiadis and I. Kompatsiaris. Monitoring term drift based on semantic consistency in an evolving vector field. [arXiv:1502.01753](http://arxiv.org/abs/1502.01753), 2015.\n\nWe use a corpus spanning eighteen years and consisting of 12.5 million entries. \n\nFirst, obtain the [data set](http://snap.stanford.edu/data/amazon/amazon_readme.txt), and clone this repository. The outline of the processing steps is as follows:\n\n1. Index the subsequent time periods by Lucene.\n2. Build random indices.\n3. Train emergent self-organizing maps.\n\nThe rest of this readme details these steps. The dependencies for the Java tools are lucene-core-4.10.3.jar, lucene-analyzers-common-4.10.3.jar, and edu.mit.jwi_2.3.3.jar, and [SemanticVectors development version](https://code.google.com/p/semanticvectors/source/checkout), in which the random seed is set to a fixed value. It is assumed that the jars are in the ``CLASSPATH``.\n\nIndexing\n--------\nThe class ``concepDrifts.AmazonReviewIndexer`` with setting the parameters in the ``main()`` function. The ``runIndexer`` static method takes an integer cut-off value. This defines the end of the time period in Unix time until which the documents should be indexed (not inclusive). To obtain a roughly even cut in three periods, we used 1043884800, 1217721600 and ``Integer.MAX_VALUE``.\n\nIndexing takes a few hours. At the end of it, we should have three folders: ``data/index{1,2,3}``.\n\nGenerating the random indices\n---------------------------------------\nWe build the random indices in the data folder. This is a memory-bound step and it requires about 30GByte of RAM.\n\n    cd data\n    java -Xmx40000m pitt.search.semanticvectors.BuildIndex -luceneindexpath index1\n    mv termvectors2.bin termvectorsperiod1.bin\n    mv docvectors2.bin docvectorsperiod1.bin\n\n    java -Xmx40000m pitt.search.semanticvectors.BuildIndex -luceneindexpath index2\n    mv termvectors2.bin termvectorsperiod2.bin\n    mv docvectors2.bin docvectorsperiod2.bin\n\n    java -Xmx40000m pitt.search.semanticvectors.BuildIndex -luceneindexpath index3\n    mv termvectors2.bin termvectorsperiod3.bin\n    mv docvectors2.bin docvectorsperiod3.bin\n\nWe need to convert the term vectors to text format:\n\n    java pitt.search.semanticvectors.VectorStoreTranslater -lucenetotext termvectorsperiod1.bin termvectorsperiod1.txt\n    java pitt.search.semanticvectors.VectorStoreTranslater -lucenetotext termvectorsperiod2.bin termvectorsperiod2.txt\n    java pitt.search.semanticvectors.VectorStoreTranslater -lucenetotext termvectorsperiod3.bin termvectorsperiod3.txt\n    \nThen we transform the random index to suitable input files for Somoclu and ESOM Tools:\n\n    cd ..\n    java conceptDrifts.SvDense2Sparse data/termvectorsperiod1.txt data/termvectorsperiod1.svm data/termvectorsperiod1.names\n    java conceptDrifts.SvDense2Sparse data/termvectorsperiod2.txt data/termvectorsperiod2.svm data/termvectorsperiod2.names\n    java conceptDrifts.SvDense2Sparse data/termvectorsperiod3.txt data/termvectorsperiod3.svm data/termvectorsperiod3.names\n\nTraining the emergent self-organizing maps\n------------------------------------------\nFor [Somoclu](https://peterwittek.github.io/somoclu/) versions prior to 1.4.1, change the function ``getWeight`` in mapDistanceFunctions.cpp of Somoclu to remove the compact support. This will yield smoother maps:\n\n```cpp\nfloat getWeight(float distance, float radius, float scaling)\n{\n//    if (distance <= radius)\n//    {\n        return scaling * gaussianNeighborhood(distance, radius, 2);\n//    }\n//    else\n//    {\n//        return 0.0;\n//    }\n}\n```\n\nRelease 1.4.1 defaults to this behaviour. Compile Somoclu and train the emergent self-organizing maps:\n\n```bash\nsomoclu -k 2 -m toroid -s 1 -x 253 -y 143 data/termvectorsperiod1.svm data/termvectorsperiod1\nsomoclu -k 2 -m toroid -c data/termvectorsperiod1.wts -s 1 -x 253 -y 143 data/termvectorsperiod2.svm data/termvectorsperiod2\nsomoclu -k 2 -m toroid -c data/termvectorsperiod2.wts -s 1 -x 253 -y 143 data/termvectorsperiod3.svm data/termvectorsperiod3\n```\n\nAnalysing drifts on the toroid surface\n--------------------------------------\nThe Python script ``trackBmus.py`` helps finding evolving clusters. The script identifies words which shift only a little (``threshold1``) between the first two periods -- this a candidate set. Then it tries to find\nclusters in the candidate set, that is, words that are close according to some ``threshold2``. The output is as follows:\n\nFirst column: word in the candidate set (word1)\n\nSecond column: another word in the candidate set close to the first one\n(word2)\n\nThird column: position of word1 in ESOM period 1.\n\nFourth column: position of word2 in ESOM period 1.\n\nFifth column: position of word1 in ESOM period 2.\n\nSixth column: position of word1 in ESOM period 3.\n\n\nAcknowledgment\n===\nThis work was supported by the European Commission Seventh Framework Programme under Grant Agreement Number FP7-601138 PERICLES.\n", 
  "id": 29357852
}