{
  "README": "\nThis is a minimalist version of SMC, a combustion code that solves\ncompressible Navier-Stokes equations for viscous multi-component\nreacting flows.  SMC is developed at the Center for Computational\nSciences and Engineering (CCSE) at Lawrence Berkeley National\nLaboratory.  It uses the BoxLib library\n(https://ccse.lbl.gov/BoxLib/), also developed at CCSE.  This\nminimalist version of SMC includes a stripped down version of BoxLib.\nTherefore, the full version of BoxLib is not needed.\n\nThe code is mainly written in Fortran 90, with some parts in C.\nParallelization is implemented with hybrid MPI/OpenMP.  However, SMC\ncan also be built with pure MPI, or pure OpenMP, or neither.\n\nGNU make is used to build the code.  The following options can be\nspecified in the GNUmakefile:\n\n* MPI := t \n  This determines whether we are using the Message Passing\n  Interface (MPI) library.  Leaving this option empty will disable\n  MPI.  If MPI is enabled, you need to specify how to link to the MPI\n  library.  You can set USE_MPI_WRAPPERS := t, then mpif90 will be\n  used.  Or you can set \"mpi_include_dir\", \"mpi_lib_dir\", and\n  \"mpi_libraries\" to appropriate values in GNUmakefile.\n\n* OMP := \n  This determines whether we are using OpenMP.  Leaving this option\n  empty disables OpenMP.\n\n* NDEBUG := \n  This option determines whether we compile with support for debugging\n  (usually also enabling some runtime checks). Setting NDEBUG := t\n  turns off debugging.\n\n* COMP := GNU\n  Set this to your compiler of choice (e.g., GNU).  Specific options\n  for a certain compiler are stored in the comps/$(COMP).mak file.   \n\n* MIC :=\n  Set this if compiling for Intel Xeon Phi.\n\n* K_USE_AUTOMATIC := t\n  This determines whether some arrays in kernels.F90 will be automatic\n  or allocatable.  Automatic arrays are usually on the stack.\n  When OpenMP is used, allocating memory on the stack is usually\n  faster than on the heap.  However, one must make sure there is\n  adequate space on the stack; otherwise a segmentation fault might\n  occur.  Note that the size of the stack for threads can be adjusted\n  by the OMP_STACKSIZE environment variable and the shell might also\n  impose a limit on stack size.\n\n* MKVERBOSE := t\n  This determines the verbosity of the building process.\n\nTo build an executable, type \"make\" in the SMC directory.  The\nexecutable will have a name like main.GNU.debug.mpi.exe depending\non the compiler and some other options specified in the GNUmakefile.\nThere are some other options provided by the GNUmakefile.  You can\ntype \"make TAGS\" or \"make tags\" to generate tag file for Email or vi.\nYou can type \"make clean\" or \"make realclean\" to remove files\ngenerated during the make process.\n\nRuntime parameters can be specified in the inputs_SMC file, which must\nbe placed in the directory where the executable is run.  Below are a\nlist of selected runtime parameters and default values.\n\n* n_cellx = -1\n* n_celly = -1\n* n_cellz = -1\n\n  Number of cells in the x, y, and z-directions.  They must be greater than 4.\n\n* max_grid_size = 64 \n\n  This determines the largest grid size of a box.  If max_grid_size is\n  too big, there might be fewer boxes than MPI tasks, and then some\n  processors will be idle.  However, if it is too small, each MPI task\n  may have too many small boxes, and the performance will be affected.\n  Thus, max_grid_size must be chosen according to the number of cells\n  and the number of MPI tasks.  Ideally, you would like to have one\n  box for each MPI task to minimize the communication cost.\n\n* tb_split_dim = 2\n\n  This determines how domain decomposition in some subroutines is done\n  for threads.  When OpenMP is used, each box is \"virtually\" divided\n  into \"nthreads\" boxes and each OpenMP thread works on one\n  thread-box.  This parameter can be either 2 or 3. When it is 2, the\n  domain decomposition is in y and z-directions; when it is 3, the\n  domain decomposition is in 3D.\n\n* tb_blocksize_x = -1\n* tb_blocksize_y = 16\n* tb_blocksize_z = 16\n\n  SMC uses a blocking strategy.  These parameters determines blocking\n  size in x, y and z-directions.  The value should be either greater\n  than or equal to 4, or less than 0.  If it is less than 0, no\n  blocking is used in that direction.\n\n* verbose = 0\n\n  This determines verbosity.\n\n* stop_time = -1.d0\n\n  Simulation stop time.\n\n* max_step = 1\n\n  Maximum number of timesteps in the simulation.\n\nNote that there are a number of OMP COLLAPSE clauses in the code.\nThese tend to trigger compiler bugs.  If the code crashes, try to run\nit without \"COLLAPSE\". \n\nMore information about SMC can be found in the paper \"High-Order\nAlgorithms for Compressible Reacting Flow with Complex Chemistry\" by\nM. Emmett, W. Zhang, and J.B. Bell\n(http://arxiv.org/abs/1309.7327). If you have any questions, please\ncontact Weiqun Zhang (WeiqunZhang@lbl.gov).\n", 
  "read_at": 1462553365, 
  "description": "DNS code solving compressible Navier-Stokes equations for viscous multi-component reacting flows", 
  "id": 23308003
}