{
  "read_at": 1462547647, 
  "description": "Solving capacitated vehicle routing problem with Genetic Algorithm", 
  "README.md": "CVRP\n====\n\nSolving capacitated vehicle routing problem with Genetic Algorithm.\n\nThis Java code base solves a Capacitated Vehicle Routing problem using Genetic Algorithm\n\nFor selectors it uses RouletteWheel and Stochastic Universal Sampling (http://ifigenia.org/w/images/2/2c/IWGN-2009-01-07.pdf)\n\nFor Cross Over it uses Sequential Constructive Crossover (http://www.cscjournals.org/csc/manuscript/Journals/IJBB/volume3/Issue6/IJBB-41.pdf)\n\nSCC was found to be far more effective compared to Neighbourhood Search, SubRoute Insertion, Insertion and Saving heuristics,PMX cross over, K Means Clustering, Intra Route Exchange relocate etc.\n\nIt uses a custom - flip mutation(flips the whole solution), and the framework supports Shuffle SubTours and Shuffle Tour mutations.\n\nIt also uses Elitism and a Circle Sweep Optimization\n\nThe framework should work with any Genetic Algorithm with some minor changes.\n\nThe framework also solves Travelling SalesMan problems as a subset of CVRP problem and\nshows how to solve the OneMax problem\n\nPseudo Code for CVRP\n\ngenerate random new generation* of predefined population size\n\ninitialize last generation from random new generation\n\ntill termination condition reached\n\n  store and cache last generation fitness and costs\n  \n  increase iteration count\n  \n  if reset condition reached\n    \n    generate new random generation* of half population size\n    \n    retrieve best of elite chromosomes** of half population size\n    \n    reinitialize last generation as a shuffle of the two above\n  \n  end\n  \n  check valid solutions and store elite chromosomes from last population****\n  \n  dispose current generation\n  \n  if reset condition was reached in this run\n    \n    choose mating population as last generation\n  \n  else\n    \n    choose mating population from last generation based on fitness\n  \n  end\n  \n  apply crossover to mating population to get current generation***\n  \n  apply mutation on current generation\n  \n  dispose last generation\n  \n  get current generation into last generation*****\n\noptimize final elite chromosomes\n\n*(chromosomes with random sequence of all nodes with depos inserted at equal sequential lengths)\n\n**(conditionally optimize elite chromosomes before reintroduction)\n\n***(conditionally generate 4 children from each two parents)\n\n**** to a max of population size in a FIFO queue\n\n***** choose best set if size is more than population size\n\n\n\nMore Information on this topic:\n1)http://www.geatbx.com/docu/algindex-02.html#P416_20744\n2)http://ifigenia.org/w/images/2/2c/IWGN-2009-01-07.pdf\n3)http://www.cs.york.ac.uk/rts/docs/GECCO_2003/papers/2723/27230646.pdf\n4)http://reference.kfupm.edu.sa/content/g/v/gvr__a_new_genetic_representation_for_th_56873.pdf\n5)http://www.ima.umn.edu/talks/workshops/9-9-13.2002/savelsbergh/VRP_part1.pdf\n6)http://www.youtube.com/watch?v=A1wsIFDKqBk\n7)http://www.youtube.com/watch?v=LjvdXKsvUpU\n8)http://www.youtube.com/watch?v=hjZDDz3r1es&feature=relmfu\n9)http://arxiv.org/ftp/arxiv/papers/1001/1001.4197.pdf\n10)http://www.rubicite.com/Tutorials/GeneticAlgorithms/CrossoverOperators/PMXCrossoverOperator.aspx\n11)http://www.cscjournals.org/csc/manuscript/Journals/IJBB/volume3/Issue6/IJBB-41.pdf\n12)http://bib.irb.hr/datoteka/433524.Vehnicle_Routing_Problem.pdf\n13)http://www.ijest.info/docs/IJEST11-03-10-091.pdf\n14)http://www.iba.t.u-tokyo.ac.jp/~jaku/pdf/rindoku101109_slide.pdf\n\n\n\n", 
  "id": 9870760
}