{
  "read_at": 1462543893, 
  "description": "Implementation of the constrained deconvolution spike inference algorithm in Matlab", 
  "README.md": "# constrained-foopsi\nImplementation of the constrained deconvolution spike inference algorithm in Matlab.\n\n spike inference using a constrained foopsi approach:   <br />\n      min      | sum(sp)    <br />\n    c,sp,b,c1  |            <br />\n      subject to:  sp|  >= 0     <br />\n                  b| >= 0         <br />\n                   G*c| = sp        <br />\n                    c1| >= 0          <br />\n                  ||y-b-c - c_in|| | <= sn*sqrt(T)   <br />\n\n\nFile constained_foopsi.m\n   Variables: |   <br />\n---------------|-----------------\n   y:    |  raw fluorescence data (vector of length(T))     <br />\n   c:    |  denoised calcium concentration (Tx1 vector)     <br />\n   b:    |  baseline concentration (scalar)                   <br />\n  c1:    |  initial concentration (scalar)                    <br />\n   g:    |  discrete time constant(s) (scalar or 2x1 vector) <br />\n  sn:    |  noise standard deviation (scalar)                 <br />\n  sp:    |   spike vector (Tx1 vector)                        <br />\n\n   USAGE:  <br />\n   [c,b,c1,g,sn,sp] = constrained_foopsi(y,b,c1,g,sn,OPTIONS)     <br />\n   The parameters b,cin,g,sn can be given or else are estimated from the data\n\n   OPTIONS: (stuct for specifying options)   <br />\n         p: order for AR model, used when g is not given (default 2)   <br />\n    method: methods for performing spike inference  <br />\n   available methods: 'dual' uses dual ascent  <br />\n                       'cvx' uses the cvx package available from cvxr.com (default)  <br />\n                      'lars' uses the least regression algorithm   <br />\n                     'spgl1' uses the spgl1 package available from math.ucdavis.edu/~mpf/spgl1/  (usually fastest)  <br />\n   bas_nonneg:   flag for setting the baseline lower bound. if 1, then b >= 0 else b >= min(y)   <br />\n   noise_range:  frequency range over which the noise power is estimated. Default [Fs/4,Fs/2]  <br />\n   noise_method: method to average the PSD in order to obtain a robust noise level estimate  <br />\n   lags:         number of extra autocovariance lags to be considered when estimating the time constants  <br />\n   resparse: number of times that the solution is resparsened (default 0). Currently available only with methods 'cvx', 'spgl'  <br />\n   \n\nThe noise is estimated with a power spectral density approach and the time constants from the signal autocovariance. \n\nThe algorithm can also handle missing data (appearing as NaNs in y) due to motion artifacts or for super-resolution approaches\n\nThe algorithm is presented in more detail in\n\nPnevmatikakis, E. A., Gao, Y., Soudry, D., Pfau, D., Lacefield, C., Poskanzer, K., ... & Paninski, L. (2014). A structured matrix factorization framework for large scale calcium imaging data analysis. arXiv preprint arXiv:1409.2903. http://arxiv.org/abs/1409.2903\n\nToolbox Dependencies\n=======\nThe signal processing toolbox is optional. If present it is used for computing the power spectral density and the autocovariance function.\n\nLicense\n=======\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n", 
  "id": 31875950
}