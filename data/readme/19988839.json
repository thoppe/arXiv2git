{
  "read_at": 1462546678, 
  "description": "General information and documents about the trusty URI approach", 
  "README.md": "![Trusty URI logo](logo/trustyuri.png)\n\n\nTrusty URIs\n===========\n\n\nHere you find general information and documents about the trusty URI approach.\n\n\nImportant Documents\n-------------------\n\nThe [trusty URI specification](https://github.com/trustyuri/trustyuri-spec)\nformally defines the structure and meaning of trusty URIs.\n\nThe following article introduces the trusty URI approach:\n\n> Tobias Kuhn and Michel Dumontier. Trusty URIs: Verifiable, Immutable, and\n> Permanent Digital Artifacts for Linked Data. In _Proceedings of the 11th\n> Extended Semantic Web Conference (ESWC)_. Springer, 2014.\n> http://arxiv.org/abs/1401.5775\n\nCheck out the [wiki](https://github.com/trustyuri/trustyuri/wiki) for posting\nyour wish-list features, giving feedback, brainstorming, etc.\n\n\nExample\n-------\n\nGenerally, trusty URIs are URIs that contain a certain kind of hash value that\ncan be used to verify the respective resource. This is an example of a\ntrusty URI:\n\n    http://example.org/r1.RAcbjcRIQozo2wBMq4WcCYkFAjRz0AX-Ux3PquZZrC68s\n\nThe last 45 characters of this URI (everything that comes after `r1.`) are the\nartifact code of the trusty URI. The first two characters of the artifact code\n(`RA` in this example) define the type and version of the module. (Only `FA`\nfor plain file content and `RA` for sets of RDF graphs are supported at this\npoint.) The remaining 43 characters are the actual hash value. This hash can\nbe used to check the content of the resource this URI represents.\n\n\nImplementations\n---------------\n\nThere are currently three (partial) implementations:\n\n- trustyuri-java: https://github.com/trustyuri/trustyuri-java\n- trustyuri-perl: https://github.com/trustyuri/trustyuri-perl\n- trustyuri-python: https://github.com/trustyuri/trustyuri-python\n\n", 
  "id": 19988839
}