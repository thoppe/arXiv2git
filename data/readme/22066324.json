{
  "README": "#\n#  This B-Link tree code is based on research published by Kark Malbrain ([KM]).\n#  The code is derived and re-written from original 'C' source code placed\n#  in the public domain by Karl Malbrain.  See:\n#\n#    http://arxiv.org/ftp/arxiv/papers/1009/1009.2764.pdf\n#    https://code.google.com/p/high-concurrency-btree/\n#\n#  The [KM] code makes reference to research published by Ibrahim Jaluta ([IJ]):\n#\n#    \"B-tree Concurrency Control and Recovery in a Client-Server Database\n#    Management System\", Dissertation for the degree of Doctor of Science\n#    in Technology, Helsinki University (2002).\n#\n#  The original proposal for B-Link trees is due to Lehman and Yao ([LY]):\n#\n#    \"Efficient locking for concurrent operations in B-trees\", ACM Transactions\n#    Database Systems 6 (1981).\n#\n#  See the bibliography of [IJ] for numerous additional useful references.\n\n# compile everything\ng++ -O3 -o random_keys random_keys.cpp\ng++ -DSTANDALONE -O3 -o logger logger.cpp logger_test.cpp\ng++ -DSTANDALONE -O3 -o page page.cpp page_test.cpp\ng++ -DSTANDALONE -O3 -o latchmgr logger.cpp page.cpp latchmgr.cpp latchmgr_test.cpp\ng++ -DSTANDALONE -O3 -o bufmgr logger.cpp bltval.cpp latchmgr.cpp bufmgr.cpp bufmgr_test.cpp\ng++ -DSTANDALONE -O3 -o bltree logger.cpp bltval.cpp latchmgr.cpp bufmgr.cpp bltree.cpp bltree_test.cpp -lpthread\n\n# create a file of random keys\n./random_keys >keys.txt\n\n# unit test page manager code (only makes sense for an existing index)\n#    ./page FNAME PAGE_BIT_SIZE\n./page testdb 15\n\n# unit test thread-safe logging\n./logger\n\n# unit test latch manager\n./latchmgr\n\n# unit test buffer pool manager (only makes sense for an existing index)\n#    ./bufmgr FNAME PAGE_BIT_SIZE\n./bufmgr testdb 15\n\n# test BLink Tree \n#    ./bltree\n#        -f dbname            - the name of the index file(s)\n#        -c cmd,cmd,..        - list of: Audit, Write, Delete, Find, Scan, Count, one per thread\n#        -k k_1,k_2,..        - matching list of source key files k_i, one per thread\n#        -p PageBits          - page size in bits\n#        -n PoolSize          - number of buffer pool mmapped page segments\n#        -s SegBits           - segment size in pages in bits\n#\n# (e.g.) 32KB pages, 8192 segments of 32 pages each = 8GB total storage\n\nrm -f testdb\n./bltree -f testdb -c Write -k keys.txt -p 15 -n 8192 -s 5\n./bltree -f testdb -c Scan,Find,Find -k keys.txt,keys.txt,keys.txt -p 15 -n 8192 -s 5\n\n", 
  "read_at": 1462550978, 
  "description": "BLInk Tree logic - storage and locking experiment", 
  "id": 22066324
}