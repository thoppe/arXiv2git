{
  "read_at": 1462545644, 
  "description": "Python implementation of a source extraction and spike inference algorithm for large scale calcium imaging data analysis, based on a constrained matrix factorization approach.", 
  "README.md": "\n\nPython translation of Constrained Non-negative Matrix Factorization algorithm for source extraction from calcium imaging data.\n\n[![Join the chat at https://gitter.im/agiovann/SOURCE_EXTRACTION_PYTHON](https://badges.gitter.im/agiovann/SOURCE_EXTRACTION_PYTHON.svg)](https://gitter.im/agiovann/SOURCE_EXTRACTION_PYTHON?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n<a href='https://travis-ci.org/agiovann/Constrained_NMF'><img src='https://secure.travis-ci.org/agiovann/Constrained_NMF.png?branch=testing'></a>\n\n# Deconvolution and demixing of calcium imaging data\n\nThe code implements a method for simultaneous source extraction and spike inference from large scale calcium imaging movies. The code is suitable for the analysis of somatic imaging data. Implementation for the analysis of dendritic/axonal imaging data will be added in the future.\n\nThe algorithm is presented in more detail in\n\nPnevmatikakis, E.A., Soudry, D., Gao, Y., Machado, T., Merel, J., ... & Paninski, L. (2016). Simultaneous denoising, deconvolution, and demixing of calcium imaging data. Neuron 89(2):285-299, http://dx.doi.org/10.1016/j.neuron.2015.11.037\n\nPnevmatikakis, E.A., Gao, Y., Soudry, D., Pfau, D., Lacefield, C., ... & Paninski, L. (2014). A structured matrix factorization framework for large scale calcium imaging data analysis. arXiv preprint arXiv:1409.2903. http://arxiv.org/abs/1409.2903\n\n# Contributors\n\nAndrea Giovannucci and\nEftychios Pnevmatikakis\n\nCenter for Computational Biology, Simons Foundation, New York, NY\n\n\nCode description and related packages\n=======\n\nThis repository contains a Python implementation of the spatio-temporal demixing, i.e., (source extraction) code for large scale calcium imaging data. Related code can be found in the following links:\n\n## Python\n- [Source extraction with CNMF (this package)](https://github.com/agiovann/SOURCE_EXTRACTION_PYTHON)\n- [Group LASSO initialization and spatial CNMF](https://github.com/danielso/ROI_detect)\n\n## Matlab\n- [Constrained deconvolution and source extraction with CNMF](https://github.com/epnev/ca_source_extraction)\n- [MCMC spike inference](https://github.com/epnev/continuous_time_ca_sampler)\n- [Group LASSO initialization and spatial CNMF](https://github.com/danielso/ROI_detect)\n\n## Integration with other libraries\n- [SIMA](http://www.losonczylab.org/sima/1.3/): The [constrained deconvolution](https://github.com/losonczylab/sima/blob/master/sima/spikes.py) method has been integrated with SIMA, a Python based library for calcium imaging data analysis.\n- [Thunder](http://thunder-project.org/): The [group LASSO initialization and spatial CNMF](https://github.com/j-friedrich/thunder/tree/LocalNMF) method has been integrated with Thunder, a library for large scale neural data analysis with Spark.\n\nInstallation\n===================================================\n\nInstallation on MAC OS\n----------------------\n\nDownload and install Anaconda (Python 2.7) <http://docs.continuum.io/anaconda/install>\n\n1. EASY WAY. type:\n    ```\n    conda create -n CNMF  ipython\n    source activate CNMF\n    conda install -c https://conda.anaconda.org/agiovann constrained_nmf\n    conda install  spyder\n    conda install  atlas (only Ubuntu)\n    pip install 'tifffile>=0.7'\n    pip install picos\n    pip install cvxpy\n    ```\n\n2. ADVANCED WAY (with access to source code).\n    ```\n    git clone --recursive https://github.com/agiovann/Constrained_NMF.git\n    conda create -n CNMF ipython\n    source activate CNMF\n    conda install numpy scipy spyder openblas ipyparallel matplotlib bokeh jupyter scikit-image scikit-learn cvxopt             conda install  atlas (only Ubuntu)\n    pip install 'tifffile>=0.7'\n    pip install picos\n    pip install cvxpy\n\n    ```\n    This second option will not allow to import the package from every folder but only from within the Constrained_NMF folder. You can access it globally by setting the environment variable PYTHONPATH\n    ```\n    export PYTHONPATH=\"/path/to/Constrained_NMF:$PYTHONPATH\"\n    ```\n\n\n\nTroubleshooting\n----------------\n**SCS**:\n\nif you get errors compiling scs when installing cvxpy you probably need to create a link to openblas or libgfortran in\n/usr/local/lib/, for instance:\n\n`sudo ln -s  /Library/Frameworks/R.framework/Libraries/libgfortran.3.dylib  /usr/local/lib/libgfortran.2.dylib`\n\n\n\n**debian fortran compiler problems:**\nif you get the error  gcc: error trying to exec 'cc1plus': execvp: No such file or directory in ubuntu run\nor issues related to SCS type\n\n ```\n sudo apt-get install g++ libatlas-base-dev gfortran  libopenblas-dev\n conda install openblas atlas\n ```\n\n if still there are issues try\n\n  `export LD_LIBRARY_PATH=/path_to_your_home/anaconda2/lib/`\n\nTest the system\n----------------------\nIn case you used installation af point 1 above you will need to download the test files from\n<https://github.com/agiovann/Constrained_NMF/releases/download/v0.3/Demo.zip>\n\nA. Go into the cloned folder, type `python demo.py`\n\nB. Using the Spyder (type `conda install spyder`) IDE.\n\n    1. Unzip the file Demo.zip (you do not need this step if you installed dusing method 2 above, just enter the Constrained_NMF folder and you will find all the required files there).\n    2. Open the file demo.py with spyder\n    3. Change the current folder of the console to the 'Demo' folder\n    3. Run the cells one by one inspecting the output\n    4. Remember to stop the cluster (last three lines of file). You can also stop it manually by typing in a terminal\n    'ipcluster stop'\n\nC. Using notebook.\n\n    1. Unzip the file Demo.zip (you do not need this step if you installed dusing method 3 above, just enter the Constrained_NMF folder and you will find all the required files there).\n    2. type `ipython notebook`\n    3. open the notebook called demoCNMF.ipynb and run cell by cell inspecting the result\n    4. Remember to stop the cluster (last three lines of file). You can also stop it manually by typing in a terminal\n    'ipcluster stop'\n\nDocumentation\n========\n\nDocumentation of the code can be found [here](http://agiovann.github.io/Constrained_NMF)\n\nDependencies\n========\nThe code uses the following libraries\n- [NumPy](http://www.numpy.org/)\n- [SciPy](http://www.scipy.org/)\n- [Matplotlib](http://matplotlib.org/)\n- [Scikit-Learn](http://scikit-learn.org/stable/)\n- [Tifffile](https://pypi.python.org/pypi/tifffile) For reading tiff files. Other choices can work there too.\n- [cvxpy](http://www.cvxpy.org/) for solving optimization problems\n- [ipyparallel](http://ipyparallel.readthedocs.org/en/latest/) for parallel processing\n\nExternal Dependencies\n============\n\nFor the constrained deconvolution method (```deconvolution.constrained_foopsi```)  various solvers can be used, each of which requires some additional packages:\n\n1. ```'cvxpy'```: (default) For this option, the following packages are needed:\n  * [CVXOPT](http://cvxopt.org/) Required.\n  * [CVXPY](http://www.cvxpy.org/) Required.\n2. ```'cvx'```: For this option, the following packages are needed:\n  * [CVXOPT](http://cvxopt.org/) Required.\n  * [PICOS](http://picos.zib.de/) Required.\n  * [MOSEK](https://www.mosek.com/) Optional but strongly recommended for speed improvement, free for academic use.\n3. ```'spgl1'```: For this option, the SPGL1 python implementation is required. It is by default imported as a submodule. The original implementation can be found at (https://github.com/mpf/spgl1).  \n\nIn general ```'cvxpy'``` can be faster, when using the 'ECOS' or 'SCS' sovlers, which are included with the CVXPY installation. ```'spgl1'``` can also be very fast but the python implementation is not as fast as in Matlab and not thoroughly tested.\n\nQuestions, comments, issues\n=======\nPlease use the gitter chat room (use the button above) for questions and comments and create an issue for any bugs you might encounter.\n\nImportant note\n======\nThe implementation of this package is based on the matlab implementation which can be found [here](https://github.com/epnev/ca_source_extraction). Some of the Matlab features are currently lacking, but will be included in future releases.\n\nLicense\n=======\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nExperimental\n=============\n\nThe package comes with a toolbox to manipulate movies written in Python, Calblitz. If you want to give it a try use the demo_pipeline.py file. Before that you need to install some packages:\n\n```\npip install pims\nconda install opencv\nconda install h5py\n```\n", 
  "id": 40307735
}