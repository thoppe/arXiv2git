{
  "read_at": 1462549578, 
  "description": "A uni project on openstack autoscaling with forecasting", 
  "README.md": "# Dead\n\nThis project died in favor of another one.\n\n\n# Scenario\n\nAutoscaling openstack instances dependent on demand\n\n# Motivation\n\nFor stakeholders it is cheaper to just buy ressources when needed and free them when not needed.\nFor the user it is convenient if there are enough instances for the requested service always (as well on high load), to not have to wait for the service.\n\n# Problem\n\nWe don't know when we have to scale up or down. That means our cloud might be surprised to be tackled by a lot of requests at once when there are only few instance up and running. Reacting on this might and bringing up new instances might take some minutes which means, that in that time, the requesting users would suffer from bad performance and high delays.\nTo overcome this issue, the idea is to bring up instances based on the knowledge of earlier times (e.g. the last week). As an example, if we know that we had a peak of requests on monday from 14:00 to 15:00 we could use this knowledge to bring up enough instances on the next monday to handle that peak.\nThe premise here is that the number of requests(that hit the server) over time resembles a periodic function (with deviations of course). \n\n# Measurments/Simulations/Learning\n\nFor generating different loads we use Poisson distribution with a period of 30 seconds.\n\nhttp://docs.scipy.org/doc/scipy-0.15.1/reference/generated/scipy.stats.poisson.html\nhttp://www.gnu.org/software/gsl/manual/html_node/The-Poisson-Distribution.html\n\nJustify 30 seconds.\nJustify poisson.\n\nRun make to compile the poisson generator\n\n# Setup\n\nsudo apt-get install libgsl0-dev\nTo bring up the test dev env, do the following steps\n\n- Create a Ubuntu(!!) VM\n- Get devstack (e.g. git)\n- change /opt/stack/ceilometer/etc/pipeline.conf and change the periods to a shorter time (easier for testing, 30 seconds is good)\n- run stack.sh to build the openstack environment\n\n\n# Dev notes \n\n- Alarm period should be higher than the other periods\n- Use something like this: \nmatching_metadata: {'metadata.user_metadata.stack': {get_param: \"OS::stack_id\"}}\n  Note. This is not working yet\n\n\n# Todos\n\n- Use poisson to emulate CPU load\n\n- Fix cpu_util in ceilometer (is ~25% should be ~100%): https://bugs.launchpad.net/ceilometer/+bug/1421584\n- For Ceilometer Alarm add the metadata parameter to just take values related to the given stack\n\n# Related Work/Links\n\n## Related Work\n\n- http://arxiv.org/pdf/1403.6918.pdf\n- http://www.computer.org/csdl/proceedings/ncca/2012/4943/00/4943a137.pdf\n- http://www.academia.edu/7611895/A_Load_Balancing_Based_Cloud_Computing_Techniques_and_Challenges\n- http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=6045063&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D6045063\n\n## Contribution\n\n- http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=6123530&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D6123530\n- http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=5715067&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D5715067\n", 
  "id": 36764557
}