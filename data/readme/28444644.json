{
  "read_at": 1462557234, 
  "description": "Tool suite for the agricultural industry + Predictive Engine", 
  "README.md": "Overview - What can we do for you...\n====================================\n\nWith our platform you will be able to communicate with agricultural workers around the world helping you getting better in what you do.\n\nYou will be able to perform retinal image analysis by uploading an image from your cow's retina and see what diseas will or will not show up. \n\nOur solution is connected with all your farm devices, collecting all the produced information and will provide you strategies and plans for the future.\n\nIt will get possible to find the best solutions for your harvesting machines.\n\nIn combination with sensors around your acre, weather forecast and predictive analysis our platform will provide you with the information you need.\n\nTechnical Overview (First draft)\n=====================================================\n\n- Tomcat\n\n- MySQL\n\n- HAProxy\n\n- Nginx\n\n- Memcached\n\n- EHCache\n\n- Apache\n\n- Elasticsearch\n\n- Redis\n\n- RabbitMQ\n\n- CentOS\n\n- Puppet\n\n- New Relic\n\n- AppDynamics\n\n- ZooKeeper\n\n- LDAP\n\n- Nagios\n\n- Graphite\n\n- Cacti\n\n- Apache FTP server\n\n- OpenTSDB\n\n- Google BigQuery\n\n- Google BigTable\n\n- Google analytics\n\n- MixPanel\n\n- Tableau\n\n- ReactJS/Backbone/Marionette/JQuery/npm/nighwatch\n\n- Rsync\n\n- PowerDNS\n\n- Mashery\n\n- SOA architecture based on REST apis.\n\n- Java used to power core file system code\n\n- Native Android/iOS apps\n\n- Desktop and server sync client for various platforms\n\n- GCE\n\n- GCS/S3/Azure\n\nRetinal Image Analysis\n======================\n\nA big part of our application will be computer aided diagnosis for your animals.\n\nIt's easy as pie: \n\n- Take an image of your animals retina with your smart phone.\n- Upload it to your MyPredectiveFarm retinal image analysis application\n- Get the results in a few seconds\n- You will see if your animals are in a good health condition or what diseas you will have to expect.\n \n\nTry it out\n==========\n\nPlease have a look at your first release: http://jbossvertx-easyfarming.rhcloud.com/\n\nWe are maintaining a blog to keep you up to date:  http://mypredectivefarm.blogspot.co.at/\n\nGreat! We are on Google+: https://plus.google.com/u/0/communities/118045655178910862948\n\nMyPredectiveFarm uses a set of technologies that interact between them to implement these layers:\n\nApache Kafka: this is our data stream. Different devices will be generating messages in Kafka topics.\n\nSchema registry - We will use Avro-schemas for Kafka topics.\nREST proxy which will allow us to consume Kafka topics.\nCamus, a Map-Reduce-Job to store messages from Kafka into HDFS.\n\nHDFS: this is where our main dataset is stored.\n\nMapReduce: This is how our batch layer recomputes batch views. Mapreduce is also used for a batch ETL process that dumps data from Kafka to HDFS.\n\nApache Storm: This is what we use as our speed layer. Events are consumed from Kafka and processed into \"realtime views\"\n\nHBase: This is where we store the \"realtime biddings\" generated by Storm topologies (Publisher).\n\nUpcoming Features\n=================\n\n - Retina image upload via tracking.js\n - Rainfall forecast\n - Bidding platform for agricultural devices\n - Decision dashboards for buying devices\n \nPredictive analysis\n===================\n\nWith our predictive engine we will let you know what will happen in the future.\nWe will provide you easy to read predictive analysis charts. (Based on d3.js)\n\nOverview - Technical layout of retinal image analysis\n=====================================================\n\nPrediction Network\n\nAn input vector sequence x = (x1, . . . , xT ) is passed through weighted connections to a stack of N recurrently connected hidden layers to compute first the hidden vector sequences h.\n\nAnd then the output vector sequence y = (y1, . . . , yT ). Each output vector yt is used to\nparameterise a predictive distribution Pr(xt+1|yt) over the possible next inputs\nxt+1. The first element x1 of every input sequence is always a null vector whose\nentries are all zero; the network therefore emits a prediction for x2, the first\nreal input, with no prior information. The network is 'deep' in both space\nand time, in the sense that every piece of information passing either vertically\nor horizontally through the computation graph will be acted on by multiple\nsuccessive weight matrices and nonlinearities.\n\ncopyright by http://arxiv.org/pdf/1308.0850v5.pdf - Alex Graves\n\nFrontend architecture overview\n==============================\n\n- Browserify\n- Babel(ES6)\n- Handlebars\n- Gulp\n- Mocha + Chai\n- Sinon\n- Pioneer\n\nand on top it's Backbone.js running.\n\n\n \n\n", 
  "id": 28444644
}