{
  "read_at": 1462543886, 
  "description": "Regularized kernel canonical correlation analysis in Python", 
  "README.md": "pyrcca\n======\n\nRegularized kernel canonical correlation analysis in Python.\n\nTo view a static Jupyter notebook containing the example below, as well as analyses and the figures for a Pyrcca analysis on a natural movie fMRI dataset, please visit <a href=\"http://nbviewer.ipython.org/github/gallantlab/pyrcca/blob/master/Pyrcca_analysis.html\">this page</a>. An interactive version of the notebook can be found in this repository.\n\nFor more information, consult the following e-print publication:\nBilenko, N.Y. and Gallant, J.L. (2015). Pyrcca: regularized kernel canonical correlation analysis in Python and its applications to neuroimaging. <a href=\"http://arxiv.org/abs/1503.01538\">arXiv:1503.01538</a> [q-bio.QM]\n\n\nIn this startup example, we create two random datasets with two latent variables, and use Pyrcca to implement CCA between them. The datasets are broken up into two halves. First, we use the first half of the datasets to train a CCA mapping. Then, we test the found mapping we found by validating it on the second half of the datasets. This procedure assures that the found canonical variates are generalizable and are not overfitting to the training data.\n\n```python\nimport numpy as np\nimport rcca\n\nnObservations = 1000\n\n# Define two latent variables\nlat_var1 = np.random.randn(nObservations,)\nlat_var2 = np.random.randn(nObservations,)\n\n# Define independent signal components\nindep1 = np.random.randn(nObservations, 4)\nindep2 = np.random.randn(nObservations, 4)\n\n# Define two datasets as a combination of latent variables\n# and independent signal components\ndata1 = indep1 + np.vstack((lat_var1, lat_var1, lat_var2, lat_var1)).T\ndata2 = indep2 + np.vstack((lat_var1, lat_var1, lat_var2, lat_var1)).T\n\n# Divide data into two halves: training and testing sets\ntrain1 = data1[:nObservations/2]\ntest1 = data1[nObservations/2:]\ntrain2 = data2[:nObservations/2]\ntest2 = data2[nObservations/2:]\n\n# Set up Pyrcca\ncca = rcca.CCA(kernelcca=False, numCC=2, reg=0.)\n\n# Find canonical components\ncca.train([train1, train2])\n\n# Test on held-out data\ncorrs = cca.validate([test1, test2])\n```", 
  "id": 31689124
}