{
  "read_at": 1462511727, 
  "description": "Implementations of several algorithms for proportional apportionment by divisor methods", 
  "README.md": "## Algorithms for Divisor Methods of Apportionment\n\nThis repository contains implementations of algorithms for proportional \napportionment with divisor methods. Inspect and use at your own risk.\n\n * File\n     [`SandwichSelect.java`](https://github.com/reitzig/2015_apportionment/blob/master/src/de/unikl/cs/agak/appportionment/methods/SandwichSelect.java)\n   contains an implementation of the algorithm `SandwichSelect` we have presented in\n\n   > Wild, S. and Reitzig, R.  \n   > A Practical and Worst-Case Efficient Algorithm for Divisor Methods of Apportionment  \n   > submitted  \n   > [[preprint](http://arxiv.org/abs/1504.06475) (v2,2015)]\n\n * In\n    [`ChengEppsteinSelect.java`](https://github.com/reitzig/2015_apportionment/blob/master/src/de/unikl/cs/agak/appportionment/methods/ChengEppsteinSelect.java)\n   we provide an implementation of the algorithm proposed in\n\n   > Cheng, Z. and Eppstein, D.  \n   > [Linear-time Algorithms for Proportional  Apportionment](http://link.springer.com/chapter/10.1007/978-3-319-13075-0_46)  \n   > In: International Symposium on Algorithms and Computation (ISAAC) 2014.  \n   > Springer (2014)  \n   > [[preprint](http://arxiv.org/abs/1409.2603) (v1,2014)]\n\n * Furthermore, we implement the jump-and-step algorithm from\n\n   > Pukelsheim, F.  \n   > Proportional Representation  \n   > Springer, 2014\n\n   in\n     [`PukelsheimPQ.java`](https://github.com/reitzig/2015_apportionment/blob/master/src/de/unikl/cs/agak/appportionment/methods/PukelsheimPQ.java)\n   with priority queues for determining the next party to modify, and in\n     [`PukelsheimLS.java`](https://github.com/reitzig/2015_apportionment/blob/master/src/de/unikl/cs/agak/appportionment/methods/PukelsheimLS.java)\n   using linear scan.\n\n * Finally, we give implementations of the naive iterative algorithms using\n   priority queues resp. a linear scan for finding maxima in\n     [`IterativeDMPQ.java`](https://github.com/reitzig/2015_apportionment/blob/master/src/de/unikl/cs/agak/appportionment/methods/IterativeDMPQ.java)\n   and\n     [`IterativeDMLS.java`](https://github.com/reitzig/2015_apportionment/blob/master/src/de/unikl/cs/agak/appportionment/methods/IterativeDMLS.java),\n   respectively.\n\nThe core algorithms start in the respective implementations of method `unitSize` resp. `apportion`.\n\nThe remaining files provide interfaces, shared algorithmic parts and utility code.\nSome files are taken or adapted from [Sedgewick/Wayne](http://algs4.cs.princeton.edu)\nwith our thanks; we re-release their files in agreement with their \nlicense statement (see Q + A [here](http://algs4.cs.princeton.edu/code/)).\n\n### Compilation\n\nExecute `ant compile`; you will need [`stdlib-package.jar`](http://algs4.cs.princeton.edu/code/stdlib-package.jar)\n(in folder `lib`) from the [book website of Sedgewick/Wayne](http://algs4.cs.princeton.edu/code/).\n\n### Usage\n\nRun `ant test` for testing correctness of the implementations.\nBesides rudimentary sanity checks, the test basically check Pukelsheim's \nMax-Min Inequality for *all* computed assignments, i.e. for all ways to resolve ties.\n\nCommand `ant run` executes a sample runtime experiment.\n\nRun your own experiments by defining the parameters in a space-separated file\n(see e.g. [arxiv.experiment](https://github.com/reitzig/2015_apportionment/blob/master/arxiv.experiment); those are the ones from the article)\nand passing it as parameter to [`run_experiments.rb`](https://github.com/reitzig/2015_apportionment/blob/master/run_experiments.rb).\nThat is, \n\n    ruby run_experiments.rb arxiv.experiments \n    \nruns the exact experiments used in [our article](http://arxiv.org/abs/1504.06475).\n\nIn case you can not get this to work, here is a workaround.\n\n 1. Open a terminal resp. command line in th repository and\n \texecute `ant compile`.\n\n 2. Create the following folder structure within the code respository:\n \n        my_experiment\n        |- data\n        |- plots\n        |   |- times\n        |   |- counters\n        |   |- scatter\n        |   |- averages\n        |- tmp\n        \n 3. Change directory to folder `my_experiment`.\n \n 4. For each non-comment line from `arxiv.experiment` (or your file), execute\n      \n        java -cp ../build de.unikl.csgak.appportionment.experiments.RunningTimeMain [line]\n \n 5. Execute `gnuplot tmp/*.gp`.\n \n*Hint:* For plotting purposes,\nyou can use script `separate_by_alg` to split the `.tab`-files in `data` by algorithm. \nIf you need one file per input size, you can split *these* file using `separate_by_n`.\n", 
  "id": 34340680
}