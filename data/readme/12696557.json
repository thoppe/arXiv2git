{
  "README": "SOLO: Saturation physics at One Loop Order\n---------------\n\nThis is the program used to calculate the complete next-to-leading cross section\nfor inclusive hadron production in pA collisions, described in the paper\n\n Anna M. Stasto, Bo-Wen Xiao, David Zaslavsky\n \"Towards the Test of Saturation Physics Beyond Leading Logarithm\"\n Phys. Rev. Lett. 112, 012302 (2014)\n arXiv:1307.4057 [hep-ph]\n\nPlease cite this paper if you use the results of the code in a publication.\n\n\nQuick start\n---------------\n\n                              With git and CMake\n\nThe quickest and intended way to compile the code is as follows: first, ensure\nthat git, GSL, MuParser, and CMake are properly installed (as well as a C++\ncompiler; GCC is recommended). Then run the following commands:\n\n    git clone https://github.com/diazona/SOLO.git\n    cd SOLO\n    git submodule init\n    git submodule update\n\nSkip to the section entitled \"Additional downloads and compilation\" below.\n\n                             Without git and CMake\n\nIf you are on a computer without git or CMake available, you can download the\nsource code manually. Go to\n\n    https://github.com/diazona/SOLO/releases\n\nClick on the link to download the latest release as either a ZIP or GZIP TAR\nfile. When you extract it, you will see (among other things) empty directories\nnamed `gsl-muparser`, `interp2d`, `quasimontecarlo`. These will need to be\nfilled with the source files for the gsl-muparser, interp2d, and quasimontecarlo\nlibraries respectively.\n\nTo obtain interp2d, go to\n\n    https://github.com/diazona/interp2d/releases\n\nand download the latest release. The archive contains a folder named something\nlike `interp2d-0.1` which contains the source files for the library; move all\nthose files into the `interp2d` folder from the extracted SOLO download.\nSimilarly, to obtain quasimontecarlo, go to\n\n    https://github.com/diazona/quasimontecarlo/releases\n\nand download the latest release, then move the files that are in the directory\n`quasimontecarlo-0.1` or similar to the `quasimontecarlo` folder from the SOLO\ndownload. And the same for `gsl-muparser`: go to\n\n    https://github.com/diazona/gsl-muparser/releases\n\nand download the latest release, then move the files from `gsl-muparser-0.1` or\nsimilar to `gsl-muparser` in SOLO.\n\n                     Additional downloads and compilation\n\nAt this point you will need to manually download the MSTW PDF interface from\nhttp://mstwpdf.hepforge.org/code/code.html. Extract the files `mstwpdf.cc` and\n`mstwpdf.h` from the tarball and place them in SOLO's `src/` directory. (We are\nnot authorized to distribute the MSTW PDF interface as part of SOLO, which is\nwhy this has to be done manually.) Then, from the directory `SOLO/` (the parent\ndirectory of `src/`), run these commands:\n    \n    mkdir build\n    cd build\n    cmake .. && make\n\nAt the end of this you should have a `build/src/` directory containing the\nprograms.\n\n                               Additional files\n\nIn order to run the program, you will need two additional files:\n\n- The grid file for the MSTW 2008 PDF at NLO, from the paper\n    \n  A. D. Martin, W. J. Stirling, R. S. Thorne and G. Watt,\n  \"Parton distributions for the LHC\",\n  Eur. Phys. J. C 63 (2009) 189-285\n  arXiv:0901.0002 [hep-ph].\n\nThe filename is `mstw2008nlo.00.dat`, and it can be downloaded as part of an\narchive at the MSTW PDF site http://mstwpdf.hepforge.org/code/code.html.\n\n- The data file for the DSS fragmentation functions at NLO, from the paper\n\n  Daniel de Florian, Rodolfo Sassot, Marco Stratmann\n  \"Global analysis of fragmentation functions for pions and kaons and their\n  uncertainties\"\n  Phys. Rev. D 75, 114010 (2007)\n  arXiv:hep-ph/0703242\n\nThe filename is `PINLO.DAT`. Unfortunately we (authors of SOLO) are not aware of\na website where this file is directly available.\n\n\nRunning\n---------------\n\nThe program is invoked as\n    oneloopcalc <options>\nwhere the <options> can include any number of the following, in any order:\n\n- Hard factor group specifications\n\n    These tell the program which terms to calculate. A hard factor _group_\n    specification is made of any number of individual hard factor specifications\n    separated by commas, for example\n\n        m.h02qq,m.h02gg\n\n    The program will calculate the results for all the terms in the group and\n    display a total for each group. You can name a group by prefixing the\n    specification with a colon, like\n\n        lo:m.h02qq,m.h02gg\n\n    The name will be used to label a column in the results table printed\n    when the program finishes.\n    \n    An _individual_ hard factor specification is a string like \"p.h02qq\" or\n    \"m.h16gg\". The \"p.\" at the beginning specifies the position space\n    implementation, \"r.\" specifies a position space implementation with the\n    angular integral already done, and the \"m.\" specifies the momentum space\n    implementation. The prefix can be omitted, in which case position space\n    is taken as the default. (Not recommended, as position space is highly\n    inaccurate for some terms.) For compatibility with older versions, the\n    program also accepts a colon instead of the period (like \"p:h02qq\").\n    \n    The rest of the string gives the name of a hard factor. The canonical set\n    of possible names that can be used with a \"p.\" prefix are all the return\n    values from the get_name() methods in hardfactors_position.h, and similarly\n    for \"r.\" with hardfactors_radial.h and \"m.\" with hardfactors_momentum.h.\n    Here's a near-complete list:\n    \n        p.h02qq m.h02qq p.h12qq r.h12qq p.h14qq m.h14qq\n        p.h02gg m.h02gg p.h12gg r.h12gg p.h12qqbar m.h12qqbar p.h16gg m.h16gg\n        p.h112qg r.h112qg p.h122qg r.h122qg p.h14qg m.h14qg\n        p.h112gq r.h112gq p.h122gq r.h122gq p.h14gq m.h14gq\n        \n    and also these, which go beyond what is in the paper:\n        \n        r.h12qq.1 r.h12qq.1A r.h12qq.1B r.h12qq.2 r.h12qq.3 r.h012qqexp\n        m.h1qqexact m.h1ggexact\n        \n    The names are case-insensitive.\n\n    It's also possible to specify the group of all leading order terms using\n    the shortcut \"lo\", which is equivalent to\n    \n        m.h02qq,m.h02gg\n        \n    or the group of all next-to-leading order terms using the shortcut\n    \"nlo.std\", which is equivalent to\n    \n        r.h12qq,m.h14qq,r.h12gg,m.h12qqbar,m.h16gg,r.h112gq,r.h122gq,m.h14gq,\n        r.h112qg,r.h122qg,m.h14qg\n    \n    or the group of all next-to-leading order terms using the high-pT expansion\n    for the diagonal channels using the shortcut \"nlo.hipt\", which is\n    equivalent to\n\n        m.h1qqexact,m.h1ggexact,r.h112gq,r.h122gq,m.h14gq,r.h112qg,r.h122qg,\n        m.h14qg\n\n    The shortcut \"nlo\" will choose between these latter two options\n    automatically: \"nlo.std\" if approximate kinematics are in use\n    (exact_kinematics = 0 in the Context), or \"nlo.hipt\" if exact kinematics\n    are in use (exact_kinematics = 1).\n\n    These shortcuts are defined in oneloopcalc.cpp. The default if no hard\n    factor groups are specified on the command line is\n    \n        lo nlo\n\n- Configuration file names\n\n    Configuration files contain parameters for the program, in the format\n    \n        key1=value1\n        key2=value2\n        \n    and so on. Keys are case-insensitive. The canonical list of keys which\n    are used is the code in context.cpp. Here's a mostly-complete list:\n    \n    A (no default)\n        the mass number\n    abserr (default 1e-20)\n        the absolute error at which to stop an integration, for strategies which\n        use this termination condition\n    alphas (default 0.2)\n        value for the fixed coupling\n    beta (default 11 - 2*Nf/3)\n        coefficient for the LO running coupling\n    c (no default)\n        the centrality coefficient, 0-1\n    c0r_optimization (default true)\n        if the factorization scale scheme is c0r, whether to skip calculating\n        terms that should be zero\n    CF (default 1.5)\n        the color factor\n    coupling_type (default fixed)\n        \"fixed\" or \"running\"\n    cubature_iterations (default 1000000)\n        number of calls to use for cubature integration\n    exact_kinematics (default false)\n        whether to use exact kinematic expressions\n    factorization_scale (default fixed)\n        \"fixed\" or \"4pT2\" or \"CpT2\" or \"c0r\" to specify how to set the\n        factorization scale\n    factorization_scale_coefficient (no default)\n        if factorization_scale is \"CpT2\", this is the coefficient to multiply by\n        pT2 to get mu2\n    ff_filename (default PINLO.DAT)\n        filename to read DSS FF data from\n    gammaMV (default 1)\n        the anomalous dimension in the MV gluon distribution\n    gdist_momentum_filename (no default)\n        file to read the momentum data for a gluon distribution from\n    gdist_position_filename (no default)\n        file to read the position data for a gluon distribution from\n    gdist_subinterval_limit (default 10000)\n        number of subdivisions to use when integrating a position gluon\n        distribution\n    gdist_type (default GBW)\n        the type of the gluon distribution, \"GBW\", \"MV\", \"fMV\", \"file\", or\n        \"gbw+file\"\n    hadron (no default)\n        the type of hadron detected, \"pi-\", \"pi0\", or \"pi+\"\n    inf (default 40)\n        the cutoff used for integration over a theoretically infinite region\n    integration_strategy (default VEGAS)\n        the integration type to use, \"MISER\", \"VEGAS\" (best), or \"QUASI\"\n    lambda (default 0.288)\n        the exponent in the definition of the saturation scale\n    lambdaMV (default 0.241)\n        the parameter in the MV gluon distribution, in GeV\n    lambdaQCD (default 0.2428711 = sqrt(0.0588))\n        QCD lambda in GeV, used in the running coupling\n    miser_iterations (default 10000000 = 1e7)\n        number of iterations to use in MISER integration\n    mu2 (default 10)\n        factorization scale in GeV, if factorization_scale is \"fixed\"\n    Nc (default 3)\n        number of colors\n    Nf (default 3)\n        number of flavors\n    pdf_filename (default mstw2008nlo.00.dat)\n        filename to read MSTW PDF from\n    projectile (no default)\n        the type of projectile, \"deuteron\" or \"proton\"\n    pseudorandom_generator_seed (default 0)\n        seed for the GSL random number generator\n    pseudorandom_generator_type (default mt19937)\n        algorithm to use for generating random numbers; allowed values are in\n        the GSL documentation\n    pT (no default)\n        comma-separated list of transverse momenta\n    quasirandom_generator_type (default halten)\n        algorithm to use for generating quasirandom numbers for QMC integration;\n        allowed values are in the GSL documentation\n    quasi_iterations (default 1000000)\n        the number of iterations at which to stop quasi Monte Carlo integration\n    regulator (default 1)\n        the position of the Landau pole for the regulated LO running coupling\n    relerr (default 0)\n        the relative error at which to stop an integration, for strategies which\n        use this termination condition\n    satscale_source (default extract from momentum)\n        for a file gluon distribution, how to extract the saturation scale;\n        allowed values are \"analytic\" (Q02(x0/x)^l), \"extract from momentum\"\n        which determines the saturation scale by finding the momentum where the\n        gluon distribution equals a fixed fraction of its value at a reference\n        momentum, and \"extract from position\" which finds the radius where the\n        gluon distribution equals a fixed threshold value\n    satscale_threshold (no default)\n        if satscale_source is \"extract from momentum\" or\n        \"extract from position\", this is the fixed threshold value (or fraction\n        of its value at a reference point, in the momentum case) that the gluon\n        distribution should equal at the saturation scale\n    Sperp (default 1)\n        cross-sectional area of the hadron\n    sqs (no default)\n        sqrt(s), the collider's CM energy\n    TR (default 0.5)\n        group coefficient\n    vegas_incremental_iterations (default 1000000)\n        number of function evaluations to use in each step of the VEGAS Monte\n        Carlo algorithm after the first\n    vegas_initial_iterations (default 100000)\n        number of function evaluations to use to refine the grid in the first\n        step of the VEGAS algorithm\n    x0 (default 0.000304)\n        the fit parameter from the definition of the saturation scale\n    Y (no default)\n        comma-separated list of rapidities (in the center of mass frame) to run\n        the calculation at\n\n    The configuration files have to at least set A, c, sqs, and Y, and also pT\n    if no transverse momenta are specified as command line arguments.\n        \n- Transverse momentum values\n\n    Any numbers given as command line arguments are put together into one big\n    list of transverse momentum values to run the calculation at. If a\n    comma-separated list of numbers is given, then it will be split apart and\n    each number added to the one big list. There's no significance to putting\n    certain pT values together and others not. (`0.5 0.7 0.8,0.9` and\n    `0.5,0.7 0.8 0.9` are exactly equivalent.) Any pT values specified on the\n    command line will _replace_ pT values specified in the config file, if there\n    is one.\n\n- Literal options\n\n    --separate  Print out the results for each individual hard factor, not just\n                the total for each hard factor groups\n    --minmax    Track and print out the minimum and maximum values of kinematic\n                variables\n    --trace-gdist\n                Print out parameters and values for every call to the gluon\n                distribution. Output goes to the file trace_gdist.output in the\n                working directory. (Expect this file to grow to several hundred\n                megabytes.)\n    --trace=var1,var2,...\n                Print out selected variables from the integration context after\n                every single evaluation of the function. The output goes to the\n                file trace.output in the working directory. (Expect this file to\n                grow to several megabytes.) The allowable variables are those\n                in ictx_var_list.inc, or you can use \"--trace=all\" or\n                \"--trace=*\" to print out all available variables.\n\n\nStructure\n---------------\n\nBasically the code runs as follows:\n\n1. Collect the command line options and settings from configuration files and\n   put everything into a ResultsCalculator\n2. For each combination of pT and Y, and for each hard factor group:\n    a. Create an Integrator with the current values of pT and y and the current\n       hard factor group\n    b. The Integrator calls the GSL Monte Carlo integration routine\n    c. For each time the MC routine evaluates the function\n        i.  Update the variables in the IntegrationContext\n        ii. Go through the list of HardFactor instances in the current group\n            and get a value from each one\n        iii.Return the total value\n    d. Store the value and error bound returned from the Monte Carlo\n3. Print out all the results\n\n\nFiles\n---------------\n\nSource code for the program itself:\n\noneloopcalc.cpp\n    Main program\nlog.h\n    Declares an output stream to write status messages to\ngsl_exception.h\n    Declares an exception to be thrown when GSL reports an error\nhardfactors.h\n    A class that abstractly represents a hard factor (i.e. an expression to be\n    integrated)\nhardfactors_momentum.h\nhardfactors_momentum.cpp\n    Implementation of the momentum space hard factors (terms)\nhardfactors_position.h\nhardfactors_position.cpp\n    Implementation of the position space hard factors (terms)\ngluondist.h\ngluondist.cpp\n    Implementations of the gluon distributions\ngluondist_driver.cpp\n    A program to print out values from the gluon distributions\ncoupling.h\ncoupling.cpp\n    Implementations of the fixed and LO running couplings\nfactorizationscale.h\nfactorizationscale.cpp\n    Implementations of the various schemes for the factorization scale\nintegrationcontext.h\nintegrationcontext.cpp\n    A class that stores the kinematic variables used in the calculation. The\n    values stored in this get updated every time the function is evaluated.\nintegrator.h\nintegrator.cpp\n    A class that stores the parameters for the integral and actually calls the\n    GSL Monte Carlo integration functions\nintegrationtype.h\nintegrationtype.cpp\n    Definitions of integration types. An integration type specifies how many\n    dimensions are in the Monte Carlo integral and what the limits are.\nutils.h\nutils.cpp\n    Some string and list processing functions\nictx_var_list.inc\n    Variables from the integration context, listed in a separate file as a\n    preprocessor hack of sorts\n\nSource code and object code for other things used by the program:\n    \ndss_pinlo.h\ndss_pinlo.cpp\n    A C++ interface to the DSS fragmentation functions\ndss_pinlo_test.cpp\n    Test program for the DSS FF interface\ninterp2d.h\nlibinterp2d.a\n    A 2D interpolation library compatible with the GSL\n    Full source code at https://github.com/diazona/interp2d\nquasimontecarlo.h\nlibquasimontecarlo.a\n    A library for quasi Monte Carlo integration compatible with the GSL\n    Full source code at https://github.com/diazona/quasimontecarlo\n\nSource code for other things used by the program, written by other people:\n    \nmstwpdf.h\nmstwpdf.cc\n    A C++ interface to the MSTW PDFs\ncubature.h\ncubature.c\n    A library for multidimensional cubature (deterministic integration)\n    Not currently used\n\nNon-source code files:\n    \nCMakeFiles.txt\n    Instructions for the build system, CMake\nPINLO.DAT\n    DSS fragmentation function data\npinlo_extended.dat\n    DSS fragmentation function data with extrapolation to lower z (the\n    significance of this file will be described in an upcoming long paper\n    about SOLO)\nmstw2008nlo.00.dat\n    MSTW PDF data\n", 
  "read_at": 1462549920, 
  "description": "Saturation physics at One Loop Order", 
  "id": 12696557
}