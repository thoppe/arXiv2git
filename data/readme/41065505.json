{
  "read_at": 1462545874, 
  "description": "Emacs Paper Online Search", 
  "README.md": "# Emacs Paper Online Search\n\nEmacs wrapper for [`pyopl`](http://github.com/dimalik/pyopl/) (python online paper locator) to search and fetch scientific citations online and add them to a bib file.\n\n## Installation\n\nFirstly, you need to have installed [`pyopl`](http://github.com/dimalik/pyopl/), preferably somewhere in your `PATH` (default - see below for manually specifying the path).\n\nTo try out the emacs wrapper, download the latest version of `empos.el` from github and add the following to your `.emacs`:\n\n```elisp\n(add-to-list 'load-path \"/path/to/empos\")           ; comment if empos.el is in standard load path\n(require 'empos)\n\n(setq empos-available-engines '(\"arxiv\" \"crossref\"))\n(setq empos-favorite-engines '(\"crossref\"))         ; comment for all available\n(setq empos-bib-file \"path/to/bibliography.bib\")    ; can be optional, but then it woud make sense\n                                                    ; to define the empos-secondary-bib\n(setq empos-secondary-bib \"path/to/a/folder\")       ; comment if not needed\n```\n\n- `empos-available-engines` should contain engines that have been installed in pyopl.\n- `empos-favorite-engines` contains the engines to be used. Note this is a custom variable and can be set through customization.\n- `empos-bib-file` is the (absolute) path to the master bibliography file in which the references are appended.\n- `empos-secondary-bib` is the (absolute) path to a folder in which the citations are going to be added.\n\n## Usage\n\n### Short story\n\n`M-x empos-search RET your-query RET`\n\n### Longer version\n\nThe extension is essentially a wrapper for pyopl written for emacs. It works by calling pyopl with arguments specified in emacs, displaying the results in a separate buffer and saving the references in a specified location.\n\nThe location of the `pyopl` executable is considered to be global (i.e, it can be invoked like this:\n\n ```bash\n pyopl \"you talkin to me\"\n ```\n \nIn case something goes wrong and this does not work (might be the case in virtualenvs), you can respecify the variable `pyopl-path`.  The engines which are used are specified in `empos-favorite-engines` which is a list of strings containing the names of the engines. If no such variable is declared then the search is done on all available engines defined in `empos-available-engines`.\n\nThe actual search is carried by an interactive function `empos-search` displaying its output on a new buffer defining an minor mode called `empos-mode` to ensure better interaction.\n\nUpon hitting <RET> the function `empos-get-identifier` is called using a regex to fetch the relevant id and engine and calling the `pyopl` executable again, this time in fetch mode.\n\n", 
  "id": 41065505
}