{
  "read_at": 1462551179, 
  "description": "A simple integer compression library in Java ", 
  "README.md": "JavaFastPFOR: A simple integer compression library in Java \n==========================================================\n\n[![Build Status](https://travis-ci.org/lemire/JavaFastPFOR.png)](https://travis-ci.org/lemire/JavaFastPFOR) [![][maven img]][maven] [![][license img]][license] [![docs-badge][]][docs]\n[![Coverage Status](https://coveralls.io/repos/github/lemire/JavaFastPFOR/badge.svg?branch=master)](https://coveralls.io/github/lemire/JavaFastPFOR?branch=master)\n\nLicense\n-------\n\nThis code is released under the\nApache License Version 2.0 http://www.apache.org/licenses/.\n\n\nWhat does this do?\n------------------\n\nIt is a library to compress and uncompress arrays of integers \nvery fast. The assumption is that most (but not all) values in\nyour array use much less than 32 bits, or that the gaps between\nthe integers use much less than 32 bits. These sort of arrays often come up\nwhen using differential coding in databases and information\nretrieval (e.g., in inverted indexes or column stores).\n\nPlease note that random integers are not compressible, by this\nlibrary or by any other means. If you ever had the means of\nsystematically compressing random integers, you could compress\nany data source to nothing, by recursive application of your technique. \n\nThis library can decompress integers at a rate of over 1.2 billions per second\n(4.5 GB/s). It is significantly faster than generic codecs (such\nas Snappy, LZ4 and so on) when compressing arrays of integers.\n\nPart of this library has been integrated in Parquet (http://parquet.io/).\nA modified version of the library is included in the search engine \nTerrier (http://terrier.org/). This libary is used by ClueWeb \nTools (https://github.com/lintool/clueweb). \n\nThis library inspired a compression scheme used by Apache Lucene (e.g., see\nhttp://lucene.apache.org/core/4_6_1/core/org/apache/lucene/util/PForDeltaDocIdSet.html ).\n\nIt is a java port of the fastpfor C++ library (https://github.com/lemire/FastPFor). \nThere is also a Go port (https://github.com/reducedb/encoding). The C++\nlibrary is used by the zsearch engine (http://victorparmar.github.com/zsearch/)\nas well as in GMAP and GSNAP (http://research-pub.gene.com/gmap/).\n\n\nUsage\n------\n\nReally simple usage:\n\n```\n        IntegratedIntCompressor iic = new IntegratedIntCompressor();\n        int[] data = ... ; // to be compressed\n        int[] compressed = iic.compress(data); // compressed array\n        int[] recov = iic.uncompress(compressed); // equals to data\n```\n\nFor more examples, see example.java or the examples folder.\n\nSome CODECs (\"integrated codecs\") assume that the integers are\nin sorted orders and use differential coding (they compress deltas). \nThey can be found in the package me.lemire.integercompression.differential.\nMost others do not.\n\n\nMaven central repository\n------------------------\n\nUsing this code in your own project is easy with maven, just add\nthe following code in your pom.xml file:\n\n\n    <dependencies>\n         <dependency>\n\t     <groupId>me.lemire.integercompression</groupId>\n\t     <artifactId>JavaFastPFOR</artifactId>\n\t     <version>[0.1,)</version>\n         </dependency>\n     </dependencies>\n\nNaturally, you should replace \"version\" by the version\nyou desire.\n\n\n\nYou can also download JavaFastPFOR from the Maven central repository:\nhttp://repo1.maven.org/maven2/me/lemire/integercompression/JavaFastPFOR/\n\n\nWhy?\n----\n\nWe found no library that implemented state-of-the-art integer coding techniques\nsuch as Binary Packing, NewPFD, OptPFD, Variable Byte, Simple 9 and so on in Java.\nWe wrote one. \n\nThread safery \n----\n\nSome codecs are thread-safe while others are not.\nFor this reason, it is best to use one codec per thread.\nThe memory usage of a codec instance is small in any case.\n\nNevertheless, if you want to reuse codec instances, \nnote that by convention, unless the documentation of a codec specify\nthat it is not thread-safe, then it can be assumed to be thread-safe.\n\nAuthors\n-------\n\nMain contributors\n* Daniel Lemire, http://lemire.me/en/\n* Muraoka Taro, https://github.com/koron\n\nwith contributions by \n* the Terrier team (Matteo Catena, Craig Macdonald, Saul Vargas and Iadh Ounis)\n* Di Wu, http://www.facebook.com/diwu1989\n* Stefan Ackermann, https://github.com/Stivo\n* Samit Roy, https://github.com/roysamit\n\nHow does it compare to the Kamikaze PForDelta library?\n------------------------------------------------------\n\nIn our tests, Kamikaze PForDelta is slower than our implementations. See\nthe benchmarkresults directory for some results. \n\nhttps://github.com/lemire/JavaFastPFOR/blob/master/benchmarkresults/benchmarkresults_icore7_10may2013.txt\n\n\nReference:\n http://sna-projects.com/kamikaze/\n\n\n\nRequirements\n------------\n\nA recent Java compiler. Java 7 or better is recommended.\n\nGood instructions on installing Java 7 on Linux:\n\nhttp://forums.linuxmint.com/viewtopic.php?f=42&t=93052\n\n\nHow fast is it?\n---------------\n\nCompile the code and execute me.lemire.integercompression.benchmarktools.Benchmark.\n\nI recommend running all the benchmarks with the \"-server\" flag on a desktop machine.\n\nSpeed is always reported in millions of integers per second.\n\n\nFor Maven users\n---------------\n\nmvn compile\n\nmvn exec:java\n\nFor ant users\n-------------\n\nIf you use Apache ant, please try this:\n\n    $ ant Benchmark\n\nor:\n\n    $ ant Benchmark -Dbenchmark.target=BenchmarkBitPacking\n\n\nAPI Documentation\n-----------------\n\nhttp://www.javadoc.io/doc/me.lemire.integercompression/JavaFastPFOR/\n\nWant to read more?\n------------------\n\nThis library was a key ingredient in the best paper at ECIR 2014 :\n\nMatteo Catena, Craig Macdonald, Iadh Ounis, On Inverted Index Compression for Search Engine Efficiency,  Lecture Notes in Computer Science 8416 (ECIR 2014), 2014.\nhttp://dx.doi.org/10.1007/978-3-319-06028-6_30\n\nWe wrote several research papers documenting many of the CODECs implemented here:\n\n* Daniel Lemire, Leonid Boytsov, Nathan Kurz, SIMD Compression and the Intersection of Sorted Integers, Software Practice & Experience (to appear) http://arxiv.org/abs/1401.6399\n* Daniel Lemire and Leonid Boytsov, Decoding billions of integers per second through vectorization, Software Practice & Experience 45 (1), 2015.  http://arxiv.org/abs/1209.2137 http://onlinelibrary.wiley.com/doi/10.1002/spe.2203/abstract\n* Jeff Plaisance, Nathan Kurz, Daniel Lemire, Vectorized VByte Decoding, International Symposium on Web Algorithms 2015, 2015. http://arxiv.org/abs/1503.07387\n* Wayne Xin Zhao, Xudong Zhang, Daniel Lemire, Dongdong Shan, Jian-Yun Nie, Hongfei Yan, Ji-Rong Wen, A General SIMD-based Approach to Accelerating Compression Algorithms, ACM Transactions on Information Systems 33 (3), 2015. http://arxiv.org/abs/1502.01916\n\n\nIkhtear Sharif wrote his M.Sc. thesis on this library:\n\nIkhtear Sharif, Performance Evaluation of Fast Integer Compression Techniques Over Tables, M.Sc. thesis, UNB 2013.\nhttp://lemire.me/fr/documents/thesis/IkhtearThesis.pdf\n\nHe also posted his slides online: http://www.slideshare.net/ikhtearSharif/ikhtear-defense\n\nOther recommended libraries\n-----------------------------\n\n* Encoding: Integer Compression Libraries for Go https://github.com/zhenjl/encoding\n* CSharpFastPFOR: A C#  integer compression library  https://github.com/Genbox/CSharpFastPFOR\n* TurboPFor is a C library that offers lots of interesting optimizations and Java wrappers. Well worth checking! (Uses a GPL license.) https://github.com/powturbo/TurboPFor\n\nFunding\n-----------\n\nThis work was supported by NSERC grant number 26143.\n\n\n[maven img]:https://maven-badges.herokuapp.com/maven-central/me.lemire.integercompression/JavaFastPFOR/badge.svg\n[maven]:http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22me.lemire.integercompression%22%20\n\n[license]:LICENSE\n[license img]:https://img.shields.io/badge/License-Apache%202-blue.svg\n\n[docs-badge]:https://img.shields.io/badge/API-docs-blue.svg?style=flat-square\n[docs]:http://www.javadoc.io/doc/me.lemire.integercompression/JavaFastPFOR/\n", 
  "id": 4931095
}