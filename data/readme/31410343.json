{
  "README": "This file is part of the distribution of the software package LiE.\nIt applies to the compile-only version of LiE; if you should wish to read\nthe source files, you are advised to obtain the documented version instead.\n\nThe program LiE is a stand-alone application. One does need the GNU parser\ngenerator program 'bison' to install it (in principle the standard UNIX tool\n'yacc' should also work, but Berkeley yacc will produce code that does not\ncompile; Linux users take note). LiE is also configured to make use of the GNU\ncommand line preprocessor 'readline' if it is installed as a library on our\nsystem. The compliation process is to be controlled by GNU 'make'.\n\nIf you have the GNU C-compiler gcc, then there should be no need to alter the\nMakefile provided with LiE. If you do not, you can substitute the name of\nanother compiler after 'CC =' in the makefile, and check that the flags\nspecified (notably -ansi for strict ANSI/ISO C compilation) follow the option\nsyntax of that compiler; you may also to specify some additional options.\n\n\nHaving done this, type `make' and sit back; hopefully everything now works\nautomatically.\n\nWhat happens is that first all source files for LiE are compiled, and linked\nto the executable file `Lie.exe'; two small indexing programs `infoind' and\n`learnind' are also compiled. Then the indexing programs are run to create\nindex files for the help system. Finally `Lie.exe' is invoked to run a script\n(progs/maxsub) which does some computations and then writes a small data base\nfile (INFO.a) that can be accessed by some of LiE's functions. When this all\nsucceeds, one has a fully functional version of LiE, that can be called as\n`lie' if the file of that name (a small shell script created during the build\nprocess) can be found in the search path for commands (you may need to move it\nto a suitable directory, where it will still find the necessary files from\nLiE).\n\nIf you do not have the GNU readline library on your system, you may experience\nproblems during the linking of the executable file Lie.exe. In that case you\ncan say 'make noreadline' instead of 'make', and it should produce a version\nwithout command line preprocessing.\n\nThere is also a special version of LiE that is modified to be callable from\nthe GAP package; it has a slightly modified output routine and no command\nline preprocessor. To build it, say `make Liegap.exe', and an executable\nfile of that name will be built. To use it from GAP, you will need the two\nGAP source files in the `gapfiles' subdirectory. You can move these to a\nplace where GAP can find them, and edit the line starting with `EXEC' near\nthe end of `liegap.g' such that the `cd LiE' command makes the correct\ndirectory change to the LiE source directory. Then you can call any LiE\nfunction from GAP by prefixing its name with \"Lie\", for instance `LieCartan'\nor `Lietensor'; you may study the function definitions in `lie.g' for the\ninterface conventions used by GAP.\n\nLast modified April 2000\nMarc van Leeuwen, Poitiers\n\n", 
  "read_at": 1462551976, 
  "description": "A version of LiE optimized for singlet computations", 
  "README.md": "LiE with singlet optimizations\n==============================\n\nThis is a modified version of [LiE](http://wwwmathlabo.univ-poitiers.fr/~maavl/LiE/), optimized for treatment of singlets. It has been used for speeding up the superconformal index computations in [arXiv:1210.7799](http://arxiv.org/abs/arXiv:1210.7799).\n\nFor the original README file see [here](https://github.com/garetxe/lie-singlets/blob/master/README), and the [original distribution](http://wwwmathlabo.univ-poitiers.fr/~maavl/LiE/).", 
  "id": 31410343
}