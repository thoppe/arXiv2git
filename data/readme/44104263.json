{
  "read_at": 1462556240, 
  "description": "Invenio User Group Workshop 2015 - Hands on tutorial sources.", 
  "README.md": "# Invenio User Group Workshop 2015\n\nInspired from https://github.com/jirikuncar/iugw2015.git\n\n## Invenio 2 Customization Hands-on\n\nIn this session we will try to customize an Invenio 2.x installation by adding new formats, pages, submissions and more.\n\n\n### Setup & Requirements\n--------------------------------\n\nLike the other sessions we will work with **Docker**.\n\n![Docker](https://www.docker.com/sites/all/themes/docker/assets/images/logo.png)\n\nPlease follow this [link](https://www.docker.com) and install Docker tool chain on your machine. E.g. [MAC OSx](\nhttps://www.docker.com/toolbox).\n\n#### Verify your docker installation\n\nOn Mac OSx, open `Docker Quickstart Terminal`, on GNU/Linux open a normal terminal window.\n\nNow test your docker setup:\n\n    docker run hello-world\n\n#### Pull INSPIRE Labs image\n\nWe will use the INSPIRE Labs image we prepared for you:\n\n    docker pull inspirehep/inspire:demo\n\n\n#### Pull INSPIRE overlay sources\n\nWhile the docker image is downloading, we can grab the INSPIRE overlay sources which we will modify and play with.\n\nFirst open a new terminal window and create a new folder for the our sources.\n\n    mkdir -p ~/src\n    cd ~/src\n\nNow we `git clone` the sources:\n\n    git clone https://github.com/inspirehep/inspire-next.git\n\n#### Run the container instance\n\nAssuming our docker image is downloaded we are going to initiate the container instance and run our INSPIRE labs site.\n\nFirst we enter the directory which the INSPIRE sources were put by our `git clone` command:\n\n     cd inspire-next\n\nNow, depending on your system, we run the container:\n\nOn MAC OSx:\n\n     docker run -v $(pwd):/src/inspire-next -i -t -p 4000:4000 -e EXTERNAL_IP=\"$(docker-machine ip default)\" inspirehep/inspire:demo\n\n\nOn GNU/Linux:\n\n     docker run -v $(pwd):/src/inspire-next -i -t -p 4000:4000 inspirehep/inspire:demo\n\n\n*Make sure your current working directory is the INSPIRE overlay source folder.\n\n### Templates and blueprints\n--------------------------------\n\n#### Flask Blueprints, Adding a static page\n\nFirstly, we will have a look at an example of how Invenio uses [Flask Blueprints](http://flask.pocoo.org/docs/0.10/blueprints/) and create a static page\n\n**Step 1**: Create a \"view\" on the overlay (`base/views.py`) file, so Flask/Invenio knows to direct to the new page\n\n**Step 2**: Create a template to be rendered by the view method we made previously, by extending the \"page.html\" and adding it on the `base/templates` directory of the overlay\n\n**Step 3**: Restart docker/server\n\nCode Samples: [About page](https://github.com/inspirehep/inspire-next/blob/master/inspire/base/templates/inspire/about.html), [views.py](https://github.com/inspirehep/inspire-next/blob/master/inspire/base/views.py),  [page.html(overlay)](https://github.com/inspirehep/inspire-next/blob/master/inspire/base/templates/page.html), [page.html(invenio)](https://github.com/inveniosoftware/invenio/blob/maint-2.1/invenio/base/templates/page_base.html)\n\n--------------\n#### Templates\n\nHere we are going to change the [\"Login\"](http://localhost:4000/youraccount/login) page to display an extra Github button for authentication\n\n**Step 1**: On the overlay we open( or create) the \"login.html\" file(`base/templates/accounts/login.html`) and \nadd a link, so users can click to navigate to the Github page for authentication\n\n**Step 2**: Now, on the \"config.py\" file of the overlay, we need to add the oauth configurations and credentials (secret/keys given from github)\n\n**Step 3**: Restart docker/server\n\nCode Samples: [Github oauth code](https://github.com/inveniosoftware/invenio/blob/maint-2.1/invenio/modules/oauthclient/contrib/github.py), [config.py(overlay)](https://github.com/inspirehep/inspire-next/blob/master/inspire/config.py), [login page(overlay)](https://github.com/inspirehep/inspire-next/blob/master/inspire/base/templates/accounts/login.html)\n\n-------\n#### Formatting record briefs\n\nFinally, we are going to do some changes on the record briefs and the way they are displayed on [search results](http://localhost:4000/search?p=&cc=HEP)\n\nLet say for example we want to modify the way 'Author' records briefs are displayed\n\n**Step 1**: On the overlay we open( or create) the [\"hb.yml\"](https://github.com/inspirehep/inspire-next/blob/master/inspire/modules/formatter/output_formats/hb.yml) file(`modules/formatter/output_formats/hb.yml`) and add the configurations we need to customize the output format and connect it with a template depending on record fields that we are interested (basically 'collections')\n\n**Step 2**: Next, it is important to have the templates specified on the \"yml\" file for Invenio to render. This templates should be located on overlay (`base/templates/format/record/`) and they are simple Jinja templates.\n\nCode Samples: [hb.yml (invenio)](https://github.com/inveniosoftware/invenio/blob/maint-2.1/invenio/modules/formatter/output_formats/hb.yml), [hb.yml (overlay)](https://github.com/inspirehep/inspire-next/blob/master/inspire/modules/formatter/output_formats/hb.yml), [Author brief template](https://github.com/inspirehep/inspire-next/blob/master/inspire/base/templates/format/record/Author_HTML_brief.tpl)\n\n\n\n\n\n\n### Adding a new submission (Deposit)\n--------------------------------\n\nFirst we are going to have a look at a real world example present in https://qa.inspirehep.net/submit/literature/create\n\nThis submission allows users to suggest articles to be added into INSPIRE.\n\nAnd now we will have a look at a minimal deposition and add it to our site. The code for this demo can be found in:\n\nhttps://github.com/inspirehep/inspire-next/tree/iugw2015-deposit-demo\n\n\n### Adding a harvesting workflow\n--------------------------------\n\nNow we want to add an OAI-PMH harvest workflow.\n\nIn Invenio 2.0 this is done a bit more programmatically than in the past using pluggable Python functions and classes.\n\nWith the help of [invenio-oaiharvester](https://invenio-oaiharvester.readthedocs.org/en/latest/) we will harvest records from an OAI-PMH repository and feed it into an ingestion workflow.\n\nThis ingestion workflow will be a set of tasks, or Python functions, that will convert the metadata format to JSON and ask for upload into the system.\n\nThe code for this demo can be found in [here](https://github.com/inspirehep/inspire-next/tree/iugw2015-oaiworkflows-demo)\n\n\n#### Adding the initial workflow\n\nWe need to add the appropriate files for the workflows [registry](http://flask-registry.readthedocs.org/en/latest/userguide.html) to pick up our workflow:\n\n    mkdir -p  inspire/modules/oaiharvester/workflows\n    touch inspire/modules/oaiharvester/workflows/__init__.py\n    touch inspire/modules/oaiharvester/workflows/demo_oai.py\n\nThen inside `demo_oai.py` we add a base workflow definition:\n\n```python\nclass demo_oai(object):\n\n    object_type = \"OAI-PMH\"\n\n    workflow = []\n```\n\nThis is our base workflow definitions where we define our workflow. However, right now it does not do much!\n\nLet's add some tasks.\n\n#### Adding the initial tasks\n\nA task is a Python function which is given two arguments. The object, or record, being processed in the workflow (`obj`), and the current engine execution (`eng`) that gives you access to halt, stop or jump around in the workflow.\n\nIn our case, the workflow is given the OAI-PMH XML as a text string so first we should convert the XML format into our data model as a Python dictionary. This is tedious work, so fortunately we will just use the existing implementations available in INSPIRE.\n\n\n```python\nfrom invenio_oaiharvester.tasks.records import convert_record_to_json\nfrom inspire.modules.converter.tasks import convert_record\n\nclass demo_oai(object):\n\n    object_type = \"OAI-PMH\"\n\n    workflow = [\n        convert_record(\"oaiarXiv2inspire_nofilter.xsl\"),\n        convert_record_to_json,\n    ]\n```\n\n#### Adding an approval step\n\nNow we have the data in our JSON data model as a Python dictionary. Great, now we could halt the workflow and ask a cataloger to approve this record. If approved, we upload the record. Simple (well..).\n\nLet's create the halt task and add it to the workflow.\n\n```python\ndef halt_for_approval(obj, eng):\n    eng.halt(action=\"demo_approval\", msg=\"This is a demo approval\")\n\nclass demo_oai(object):\n\n    object_type = \"OAI-PMH\"\n\n    workflow = [\n        convert_record(\"oaiarXiv2inspire_nofilter.xsl\"),\n        convert_record_to_json,\n        halt_for_approval,\n    ]\n````\n\nYou may notice we added a `action` argument to the halt task. This is important for the Holding Pen integration - to provide the interactivity to approve/reject records. Similar to workflows, we can add out custom action alongside templates and JavaScript files.\n\nWe need to add the appropriate files for the actions [registry](http://flask-registry.readthedocs.org/en/latest/userguide.html) to pick up our workflow:\n\n    mkdir -p  inspire/modules/oaiharvester/actions\n    touch inspire/modules/oaiharvester/actions/__init__.py\n    touch inspire/modules/oaiharvester/actions/demo_approval.py\n\nThen add the action code in `demo_approval.py`. We will re-use the existing code from other INSPIRE actions to simplify this step by using inheritance for the templating.\n\n```python\nfrom inspire.modules.workflows.actions.core_approval import core_approval\n\nclass demo_approval(core_approval):\n\n    \"\"\"Our demo approval.\"\"\n\n    def resolve(self, bwo):\n        \"\"\"Resolve the action taken in the approval action.\"\"\"\n        bwo.remove_action()\n        extra_data = bwo.get_extra_data()\n\n        value = request.form.get(\"value\", None)\n        extra_data[\"approved\"] = value in ('accept', 'accept_core')\n\n        bwo.set_extra_data(extra_data)\n        bwo.save()\n\n        bwo.continue_workflow(delayed=True)\n\n        if extra_data[\"approved\"]:\n            return {\n                \"message\": \"Suggestion has been accepted!\",\n                \"category\": \"success\",\n            }\n        else:\n            return {\n                \"message\": \"Suggestion has been rejected\",\n                \"category\": \"warning\",\n            }\n\n```\n\nThe `resolve()` function is handling the response back from the user.\n\n```python\nclass demo_oai(object):\n\n    object_type = \"OAI-PMH\"\n\n    workflow = [\n        convert_record(\"oaiarXiv2inspire_nofilter.xsl\"),\n        convert_record_to_json,\n        halt_for_approval,\n    ]\n```\n\nThen we can add a control flow using a builtin IF function and add a task that checks if it was approved. If so, we create the record on the system - so we add a create_record step.\n\n```python\n\nfrom invenio_workflows.tasks.logic_tasks import (\n    workflow_if,\n    workflow_else,\n)\n\ndef was_approved(obj, eng):\n    if obj.extra_data.get('approved'):\n        return True\n    return False\n\n\ndef create_record(obj, eng):\n    Record.create(obj.data)\n\nclass demo_oai(object):\n\n    object_type = \"OAI-PMH\"\n\n    workflow = [\n        convert_record(\"oaiarXiv2inspire_nofilter.xsl\"),\n        convert_record_to_json,\n        halt_for_approval,\n        workflow_if(was_approved),\n        [\n            create_record,\n        ],\n    ]\n```\n\n#### Running workflows with inveniomanage oaiharvester\n\nThanks to the new CLI integration in Invenio 2.0, invenio-oaiharvester has a CLI tool available through `inveniomanage`.\n\n```console\ninveniomanage oaiharvester --help\n```\n\nThere is `get`, and `queue` options available. For this demo we'll use `get`.\n\n```console\ninveniomanage oaiharvester get --help\n```\n\nLet's see some example output from the harvester:\n\n```console\ninveniomanage oaiharvester get -u http://export.arxiv.org/oai2 -i oai:arXiv.org:1507.07286 -m arXiv\n```\n\nNow let's hook in our workflow:\n\n```console\ninveniomanage oaiharvester get -u http://export.arxiv.org/oai2 -i oai:arXiv.org:1507.07286 -m arXiv -o workflow -w demo_oai\n```\n\n# Thanks and happy hacking!\n", 
  "id": 44104263
}