{
  "read_at": 1462549056, 
  "description": "Code to build and teach a neural network to play a game of texas hold'em ", 
  "README.md": "# nn-holdem\nCode to build and teach a neural network to play a game of texas hold'em. The code includes a bare-bones console hold'em table, neural network, and neural network trainer. A human players can play on via console but it would be nice to add a GUI frontend.\n\nAs of this writing, it has all of the features originally intended to be designed.\n\n### Current Status\nThe following things need to be built before the project is complete\n\n* ~~hold'em dealer~~\n* ~~pot splitting~~\n* ~~incorporate hand rank evaluator~~ (using forked package [dueces](https://github.com/alexbeloi/deuces/tree/convert2to3) converted to python3)\n* ~~neural network~~\n* ~~**learning system**~~\n  * ~~Hall of fame generator~~\n  * ~~Child agent spawner~~\n  * ~~Tournament system~~\n\nAdditional (2nd stage)\n* ~~Train seperate neural network to replace rank evaluator and/or win percentage analyzer~~\n  * speed up training\n* learning from existing real world game history\n* competition heuristics\n\nStrong potential branches\n* Use a Recurrent Neural Network with LSTM modules\n  * accept streams of data (turns)\n  * replace evolutionary learning with backpropogation through time (must faster)\n* Q-learning and MDPs seem perfect for poker, how to incorporate Q-learning into neural net?\n\nBonus features\n* GUI frontend for human player\n\n### Usage\nRunning from play.py is simplest way to test things out (although the ai opponents are just random for now)\n```python\n$ cat play.py\nfrom holdem import Table, TableProxy, PlayerControl, PlayerControlProxy\n\nseats = 8\n# start an table with 8 seats\nt = Table(seats)\ntp = TableProxy(t)\n\n# controller for human meat bag\nh = PlayerControl(\"localhost\", 8001, 1, False)\nhp = PlayerControlProxy(h)\n\nprint('starting ai players')\n# fill the rest of the table with ai players\nfor i in range(2,seats+1):\n    p = PlayerControl(\"localhost\", 8000+i, i, True)\n    pp = PlayerControlProxy(p)\n```\n\nTo start an 8 person table with yourself + (seven) unlearned ai opponents simply run\n```python\n$ python3 play.py\nPlayer  1  Joining game\nstarting ai players\nPlayer  2  Joining game\nPlayer  3  Joining game\nPlayer  4  Joining game\nPlayer  5  Joining game\nPlayer  6  Joining game\nPlayer  7  Joining game\nPlayer  8  Joining game\nPlayer 4 ['raise', 1475]\nPlayer 5 ['fold', -1]\nPlayer 6 ['fold', -1]\nPlayer 7 ['fold', -1]\nPlayer 8 ['fold', -1]\nStacks:\n1 :  2000(P)(Button)(me)\n2 :  1990(P)\n3 :  1975(P)\n4 :  525(P)\n5 :  2000\n6 :  2000\n7 :  2000\n8 :  2000\nCommunity cards:  \nPot size:  1510\nPocket cards:   [ 3  ] , [ 3  ]  \nTo call:  1475\n1) Raise\n2) Call\n3) Fold\nChoose your option:\n```\n\nFor now, if you want to play against *smart* ai opponents, you'll have to run the ai trainer `go_ai.py` to start the training algorithm. This is a significant time investment, at some point I'll pre-include some trained networks.\n\n### Holdem Implementation\n\nWe built a basic single table no limit hold'em game. Both dealer and player run a SimpleXMLRPCServer to network board state and player moves.\n\nThe current implementation is meant to simulate a cash game.\n\n## Neural network\n\nThe neural network uses mixed binary and continuous data.\n\nBased on the recommendation of some literature on modeling systems with mixed data, we use *effect coding* **{-1,1}** instead of *dummy coding* **{0,1}** for the binary variables. For the continuous variables (chip ammounts), we normalize by the bigblind and center all values. Ideally we would center values around their means, for the stack sizes we can use the mean stack size at any given table but for other continuous inputs we center around mean stack size.\n\nThe activation function we're currently using is **tanh**, but since we aren't going to use backpropogation we may want to consider nondifferentiable activation functions.\n\n### Input data\n\n| Continuous      | Description |\n| :---------------| :-----------|\n| Pot             | Chips available to win in current hand of play |\n| To Call         | Amout of chips needed to add to pot in order stay in current hand of play |\n| Last Raise      | The most recent raise ammount for current round |\n| Player Stacks   | Ammount of chips(money) each player has |\n| Win percentage  | Chance to win assuming all unknown cards are uniformly distributed |\n\n| Binary          | Description |\n| :---------------| :-----------|\n| Player position | Own position at the table |\n| Players in hand | Which players are still currently in the game |\n| Player betting  | Which player(s) is betting |\n\nOriginally we tried to use binary data to represent pocket cards and community cards, this lead to too little variance on the part of the network. We were unable to select for any interesting behavior because the behavior was always the same (fold). We scaled down the problem by replacing the 200+ binary inputs (required to represent card data) with a proxy value representing the chance for the player to win (assuming all current and future unknown cards are uniformly random).\n\nFor speed, we compute win percentage using a Monte Carlo simulation. The analyzer class is from [PokerTude](https://github.com/neynt/pokertude) adapted to use the [Deuces](https://github.com/alexbeloi/deuces/tree/convert2to3) Deck, Card and Evaluator classes for speedup.\n\nA more sophisticated approach would be to attach another neural network which tries to predict the opponents hands (e.g. http://www.spaz.ca/aaron/poker/nnpoker.pdf) and use this in place of a uniform distribution for the opponent's hand.\n\n### Layers\n\nWe use a **32-20-5** setup with the first four outputs in *[0,1]* denoting network confidence in raise, call, check, fold (resp.) and the last output denoting bet ammount normalized to personal stack or pot size.\n\n### Learning\n\nWe learn through coevolution + hall-of-fame. We spawn *~1000-2000* random networks and have them compete with each other in 8-seat tables. Each table also has two hard-coded bots, one of which is *check/call* only and one a random bot. If a neural network wins a table (is the last remaining player), then we save this network to the hall of fame and move it along to the next stage in the tournament.\n\nOnce a substantial hall-of-fame is generated, we use the hall-of-famers to generate child agents. A child agent's weights are a biased sum of the weights of the parents.\n\nThe hall-of-fame agents are always preserved and never fall out of use. As the hall-of-fame becomes large, we (uniformly) randomly choose hall-of-famers to include in the next epoch, but the total pool of hall-of-famers is never allowed to diminish.\n\n## Literature\n* coevolution and hall-of-fame heuristics:\nhttp://www2.cs.uregina.ca/~hilder/refereed_conference_proceedings/cig09.pdf\n* optimal learning rate:\nhttp://arxiv.org/pdf/1206.1106.pdf\n* Overview of artificial intelligence strategies for texas hold'em poker: http://poker-ai.org/archive/pokerai.org/public/aith.pdf\n* New York Times article on computer poker: http://www.nytimes.com/2013/09/08/magazine/poker-computer.html?_r=0\n\n## License\nThe MIT License (MIT)\n\nCopyright (c) 2016 Aleksander Beloi (beloi.alex@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n", 
  "id": 41717863
}