{
  "read_at": 1462550113, 
  "description": "A tool for correcting for the look-elsewhere effect in 2 dimensions", 
  "README.md": "## Look Elsewhere Effect in 2-d\n\nKyle Cranmer, Nov 19, 2015\n\nBased on\n*Estimating the significance of a signal in a multi-dimensional search* by  Ofer Vitells and Eilam Gross http://arxiv.org/pdf/1105.4355v1.pdf\n\nThanks to Ruggero Turra for detailed checks and debugging.\n\n**Note**: You can run the notebook from your browser right now by gong to [everware](https://everware.rep.school.yandex.net/) and paste the URL to this repository. \n\n[![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.34842.svg)](http://dx.doi.org/10.5281/zenodo.34842)\n\n```\n@misc{kyle_cranmer_2015_34842,\n  author       = {Kyle Cranmer},\n  title        = {look-elsewhere-2d: v1.0},\n  month        = dec,\n  year         = 2015,\n  doi          = {10.5281/zenodo.34842},\n  url          = {http://dx.doi.org/10.5281/zenodo.34842}\n}\n```\n\n## Usage:\n\n```python\nimport lee2d\n```\n\nYou start with several 2d numpy arrays that represent the \n\n![](q_def.png)\n\nIt's up to you to threshold on each scan to make 2d numpy arrays for\nthe excursion sets \n\n![](A_u.png)\n\nThis should be done at two different threshold levels $u_1$ and $u_2$ giving new numpy\narrays with values 0. or 1. For example\n\n```python\n\tq_scan = np.array((nx, ny))\n\n    #get excursion sets above those two levels\n    A_u1 = (q_scan>u1) + 0. #add 0. to convert from bool to double\n    A_u2 = (q_scan>u2) + 0.\n```\n(The values for $u_1$ and $u_2$ are arbitrary. If there are enough toy scans, the choice shouldn't matter, but \nyou may want to do some tests with other choices. Suggestion is to use something like $u_1=0.1$ and $u_2=1$.)\n\n\nFor each of these scans you calculate the Euler characteristic \nusing this function in `lee2d.py`\n\n```python\ndef calculate_euler_characteristic(a):\n   \"\"\"Calculate the Euler characteristic for level set a\"\"\"\n```\n\nafter calculating the expected (mean) value of the Euler characteristics\nfor those two different levels, you can correct the local siginficance with\nthis function in `lee2d.py`. The maximum local significance is given by \n\n![](Z_local.png)\n\n```python\ndef do_LEE_correction(max_local_sig, u1, u2, exp_phi_1, exp_phi_2):\n   \"\"\"\n   Return the global p-value for an observed local significance \n   after correcting for the look-elsewhere effect\n   given expected Euler characteristic exp_phi_1 above level u1\n   and exp_phi_2 above level u2\n   \"\"\"\n```\n\n\n## Examples\n\nSee [an example using ROOT histograms](https://github.com/cranmer/look-elsewhere-2d/blob/master/root_TH2F_example.ipynb)\n\n**Note**: You can run the notebook from your browser right now by gong to [everware](https://everware.rep.school.yandex.net/) and paste the URL to this repository. \n\n\n## Background\n\nThis is for the special case of a likelihood function of the form \n$L(\\mu, \\nu_1, \\nu_2)$ where $\\mu$ is a single parameter of interest and\n$\\nu_1,\\nu_2$ are two nuisance parameters that are not identified under the null.\nFor example, $\\mu$ is the signal strength of a new particle and $\\nu_1,\\nu_2$ are the\nunknown mass and width of the new particle. Under the null hypothesis, those parameters \ndon't mean anything... aka they \"are not identified under the null\" in the statistics jargon.\nThis introduces a 2-d look elsewhere effect.\n\nThe LEE correction in this case is based on \n\n\\begin{equation}\nE[ \\phi(A_u) ] = P(\\chi^2_1 > u) + e^{-u/2} (N_1 + \\sqrt{u} N_2) \\,\n\\end{equation}\nwhere \n   * $A_u$ is the 'excursion set above level $u$ (eg. the set of parameter points in $(\\nu_1,\\nu_2)$ that have a -2 log-likelihood ratio greater than $u$ )\n   * $\\phi(A_u)$ is the Euler characteristic of the excursion set\n   * $E[ \\phi(A_u) ]$ is the expectation of the Euler characteristic of those excursion sets under the null\n   * $P(\\chi^2_1 > u)$ is the standard chi-square probability \n   * and $N_1$ and $N_2$ are two coefficients that characterize the chi-square random field.\n   \n### Image for example 2-d likelihood scans\n  ![](chi-square-random-fields.png)\n  ![](islands.png)\n\n", 
  "id": 47411984
}