{
  "read_at": 1462552177, 
  "description": "General relativitY Orbit Tracer of the Observatoire de Paris", 
  "README.SIGFPE": "Gyoto relies on proper delivery of SIGFPE when arithmetic errors occur\n(division by zero, floating point overflows...). It does so by\nenabling the right exceptions using feenableexcept from GNU fenv.h.\n\nHowever, some compilers (clang/llvm, in particular) do not support\nsetting the floating-point environment and will happily optimize code\nassuming that it is safe to divide by zero. We recommend staying away\nfrom these compilers until this issue is fixed:\n https://llvm.org/bugs/show_bug.cgi?id=23707\n https://llvm.org/bugs/show_bug.cgi?id=8100\n\nAlternatively, you may recompile without any optimization by passing\nthe right flags during configure:\n ./configure CFLAGS=\"-g -O0\" CXXFLAGS=\"-g -O0\"\n\nIf you experience such spurious SIGFPE inside the Yorick plug-in, an\nugly workaround is to call gyoto.fedisableexcept right before the\noffending Gyoto call. If at all possible, consider recompiling Gyoto\nas explained above.\n\nNote that loading some plug-ins (e.g. the lorene plug-in) may change\nor reset the default floating-point environment. This is the case is\nthe plug-in, or one of the libraries it links with, has been compiled\nwith optimizations such as -ffast-math or gfortran.\n", 
  "README.lorene": "                  *** Activating LORENE in Gyoto ***\n\n                 Building the libgyoto-lorene plug-in\n\n3+1 metrics support in Gyoto is implemented in the lorene plug-in,\nbased on the LORENE library.\n\nI- BUILDING TOGETHER WITH GYOTO\n===============================\n\nTo enable it at build time, download LORENE from\nhttp://www.lorene.obspm.fr/, compile liblorene.a with the -fPIC CFLAG\n(i.e. check that the CFLAG variable defined in LORENE's local_settings\nfile contains \"-fPIC\"), and set the HOME_LORENE variable according to\nthe LORENE manual.\n\nIf HOME_LORENE is defined when compiling Gyoto, the lorene plug-in is\nautomatically built and installed.\n\nII- TESTING LIBGYOTO-LORENE\n============================\n\nTwo example files are provided in doc/examples/:\nexample-*-rotstar3_1.xml.\nThey allow to ray-trace a moving/motionless star orbiting in the space-time \nof a relativistic rotating star.\nTo run these examples:\n\n1- Run make in $HOME_LORENE/Codes/Nrotstar:\n   $ cd $HOME_LORENE/Codes/Nrotstar\n   $ make\n\n2- Prepare parameter files par_eos.d and par_rot.d, for instance\n   $ cp Parameters/GR/Kepler/*.d ./\n\n3- Run the executable nrotstar to obtain the result file resu.d\n   $ ./nrotstar\n\n4- Update the file location in example-*-rotstar3_1.xml or copy resu.d\n   to the Gyoto examples directory:\n   $ cd -\n   $ cp $HOME_LORENE/Codes/Nrotstar/resu.d doc/examples/\n\n5- Run GYOTO with example-*-rotstar3_1.xml. Assuming Gyoto is\n   installed:\n   $ gyoto doc/examples/example-fixedstar_rotstar3_1.xml out1.fits\n   $ gyoto doc/examples/example-movingstar_rotstar3_1.xml out2.fits\n\n   If gyoto is not installed replace \"gyoto\" above by:\n   - under Linux:\n     LD_LIBRARY_PATH=lib:$LD_LIBRARY_PATH bin/gyoto\n   - under Mac OS X:\n     DYLD_LIBRARY_PATH=lib:$DYLD_LIBRARY_PATH bin/gyoto", 
  "README.Developers": "Dear Gyoto developers,\n\nA few notes on maintenance:\n\nBefore each commit:\n===================\n\n* If you touched configure.ac or any Makefile.am file, run autoreconf\n  and commit the regenerated files (configure, Makefile*.in)\n\n* Run make check. If possible, build the yorick plug-in so that\n  make-check will do the detailed regression testing suite.\n\n* Check that the files you are commiting have correct Copyright\n  information, including the years. If needed, use \"git blame\n  <filename> to check who modified this file and when.\n\n* Add something in the NEWS file. The NEWS file should contain an\n  entry fror the next release, put your note in there.\n\n* If this commit changes the user manual, update the date on the title\n  page.\n\nTo make a new release:\n======================\n\n* Check with the team whether they had plans fr this release.\n\n* Update the date in the user manual. Check the right date by using\n    git log doc/user_guide\n  and edit doc/user_guide/GyotoManual.tex accordingly.\n\n* Choose a version number. Version is MAJOR.MINOR.MICRO. Bump MAJOR\n  when singnificant new feature are there; update MINOR for continued\n  development of existing features; update MICRO for bugfix or\n  packaging releasing.\n\n* Edit configure.ac\n  + update the version info in AC_INIT\n  + update VERSINFO according to\nhttp://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\n  Note that this VERSINFO has nothing to do with the Gyoto version.\n  + run autoreconf\n\n* Edit NEWS\n  + add a new entry (or change the one which has not been released yet)\n  + mark the release either \"ABI n\" if the ABI changed, \"BUG\" if its a\n    simple backwards-compatible bugfix release, PKG if only the\n    packaging has been changed.\n  + document shortly what has changed in Gyoto: new features,\n    significant bug fixes...\n\n* Regenerate ChangeLog:\n  + run \"git log --no-merges > ChangeLog\"\n  + add an item on top which should correspond to the log message that\n    you will use for the *next* commit (the one that does the\n    release). Use \"unknown\" as commit identifier and the output of\n    \"LANG=C date --rfc-822\" as date.\n\n* Make clean, configure, make, make check again\n\n* Commit the changes\n\n* Merge the released branch into stable, make sure the two branches\n  (stable and master) can be merged both ways and are identical.\n\n* Tag the release using the version as tag name. Use a signed tag:\n  \"git tag -s 1.0.0\".\n\n* Take a coffee break.\n\nRegards, Thibaut.\n", 
  "README": "                             ***  GYOTO  ***\n\n       General relativitY Orbit Tracer of Observatoire de Paris\n\nGyoto aims at providing a framework for computing orbits and\nray-traced images in General relativity. It consists in a library\n(libgyoto), utility programs, and a plug-in for the Yorick programing\nlanguage.\n\nWe request that use of Gyoto in scientific publications be properly\nacknowledged. Please cite:\n\n    GYOTO: a new general relativistic ray-tracing code, F. H. Vincent,\n    T. Paumard, E. Gourgoulhon & G. Perrin, Classical and Quantum\n    Gravity 28, 225011 (2011) [arXiv:1109.4769]\n\nWe also request that Gyoto modifications, extensions or plug-ins\nleading to a scientific publication be made public as free software\nreasonably fast (within one year after publication of the scientific\npaper), for instance by contributing it directly to the Gyoto\ncode base. Contributors will be listed in the relevant source files as\nwell as in the AUTHORS file in the package.\n\n    Gyoto is Copyright 2011-2015 Thibaut Paumard, Frederic Vincent and\n    Odele Straub (To ease reading on non-UTF8 systems, French accents\n    are omitted in file headers).\n\n    Gyoto is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    Gyoto is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with Gyoto.  If not, see <http://www.gnu.org/licenses/>.\n\nFile python/doxyfile.py is Copyright 2008 Prabhu Ramachandran under\nBSD style license. File python/numpy.i is Copyright (c) 2005-2015,\nNumPy Developers under BSD 3-clause license. File bin/optionparser.h\nis Copyright (C) 2012 Matthias S. Benkmann. See each file for details.\n\nRefer to the file INSTALL.Gyoto for building and installing Gyoto.\n\nSeveral sample files are provided in doc/examples. You can ray-trace\nthose sceneries with:\n\n  gyoto <input-file.xml> <output-file.fits>\n\nFITS files can be read by a variety of free and proprietary\nsoftware. See http://heasarc.gsfc.nasa.gov/docs/heasarc/fits.html.\n\nCustom metrics and astronomical objects can be added fairly easily by\nimplementing them as a Gyoto plug-in. This, of course, requires\nknowledge of the C++ language. We don't provide yet a complete guide,\nbut look at the standard plug-in lib/StdPlug.C which includes the Kerr\nmetric and the standard objects. The Lorene (numerical) metrics are\nalso implemented as a plug-in, see lib/LorenePlug.C and\nlib/Makefile.lorene.\n\n                        -- Thibaut Paumard, Tue Aug 30 2011.\n", 
  "id": 2267958
}