{
  "read_at": 1462545931, 
  "description": "Some tools to make the generation of runoff files fo MOM[45] a breeze...", 
  "README.md": "# runoff_tools\nSome tools to make the generation of runoff files for MOM[45] a breeze...\n\ncreate_model_coast.f90   ! Produces a file which contains the points adjacent to land.\n\ncreate_model_wet.f90    ! Produce a file containing all the wet points of a from a mosaic description of of a grid.\n\ncreate_runoff_nn.f90     ! Create files with nearest neighbour of the source runoff which lie on the coast.\n\ncreate_runoff_weights.f90 ! Spread the runoff to nearest coastal neighbors of the points found in create_nn.f90\n                           Either get N nearest neighbours or all the neighbours within a radius\n                           Weights can be evenly distributed or based on a gaussian weighting based on the distance\n                           from either the source or its nearest neighbour. Requires the results from running\n                           create_model_coast.\n                           \ncreate_runoff_weights_spread.f90 ! Spread the runoff to any wet neighbour of the target point. Requires output from\n                           create_model_wet. This allows spread out to open ocean which may be necessary for high \n                           volume discharge like the Amazon River. The amount of spread can be modified with weighting.\n                           \nprocess_runoff.f90        ! Create the runoff files using masks and weights from above.\n\nkdtree2.f90               ! module from the wonderful KDTREE 2 package written by Matthew Kennel.\n                           http://arxiv.org/abs/physics/0408067\n                           https://github.com/jmhodges/kdtree2\n\nferret/make_mask_daitren.jnl ! Create a mask of the original runoff. We only want nonzero runoff. Creates a file runoff_mask.nc\n\nscripts/example_coast       ! Create a runoff file spreding the runoff along the coast\n\nscripts/example_spread       ! Create a runoff file spreding the runoff along the coast and out to the open ocean\n                           \n                           \nGeneral notes.\n\nCreating the connection file (runouff source to model coast).\n\nA kdtree is used to identify the nearest neighbours to the source. This requires a mask of the source grid based\non the nonzero runoff. I calculate a time invariant mask (runoff_mask.nc) based on the whole time series. You could\nrecalculate the nearest neighbours for every time step as it's so quick but this allows for more flexibility.\nThere's also the problem of making sure the correct nearest neighbours are picked (e.g. wrong side of a peninsular,\nthink Mekong River).  We also want all the coastal points of the model.\n\nI save the results (connected indices, positions and the model coast) in an intermediate file. This allows the user\nto check the connections.\n\nTo look at the connections between points here's some example Ferret code.\n\n```ferret\nuse runoff_connection_nn.nc\ndef axis/y/from_data/name=ygr j[j=1:3]\nlet MASK = IF J LE 2 THEN 0*SOURCE_I + 0*J[GY=YGR]+1\nlet/title=\"xpoints\"  PNT_X = IF J EQ 1 THEN MOD(SOURCE_X+360,360)*MASK ELSE MOD(TARGET_X+360,360)*MASK\nlet/title=\"ypoints\" PNT_Y = IF J EQ 1 THEN SOURCE_Y*MASK ELSE TARGET_Y*MASK\n! Plot connections around Indochina\npolygon/j=1:3/i=1:3987/line/key/hlim=80:120/vlim=10:30/col=red pnt_x,pnt_y\ngo land_detail\n! Overlay with source points\nplot/ov/sym=1/vs/col=blue source_x,source_y\n! Overlay with ALL coastal points\nplot/ov/sym=11/vs/col=green coast_x,coast_y\n! Plot circles for the actual target NNs.\n plot/sym=27/vs/col=purple/ov mod(target_x+360,360),target_y\n```\n\nCreating the weights.\n\nThis takes the file  runoff_connection_nn.nc  and again builds a kdtree for the model coastal/ocean points. This time\nwe find either the nearest N neighbours or the nearest neighbours within a certain radius of the nearest neighbours\nidentified in step 1. Weights are either even or can be distance weighted.\n\nTransferring the runoff to the model grid.\n\nEach timestep is read in and the total runoff for each point is calculated according to our weights. I write out using\nNetcdf4 compression, deflation level 1 with chunking of 200 point tiles.\n\nThe size of the new files. 60 years of the Dai and Trenberth runoff output for the GFDL 0.1 degree tripolar grid.\nThis took about 2 minutes on a single processor.\n\n```bash\n[raf599@raijin6 gfdl_grid]$ ls -lh new_run.nc runoff_connection_nn.nc runoff_weights.nc\n-rw-r----- 1 raf599 p93 424M Aug 26 17:15 new_run.nc\n-rw-r----- 1 raf599 p93 3.7M Aug 26 15:57 runoff_connection_nn.nc\n-rw-r----- 1 raf599 p93 2.5M Aug 26 15:57 runoff_weights.nc\n```\n", 
  "id": 41467258
}