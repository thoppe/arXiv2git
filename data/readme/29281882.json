{
  "README": "The code from this project was used for [\"Sublinear Partition Estimation\"](http://arxiv.org/abs/1508.01596), Pushpendre Rastogi, Benjamin Van Durme, arXiv:1508.01596 [stat.ML] (Preprint).\n\nThis project serves two purposes:\n1. It provides bindings for the LSH cpp code that was released by\n   Andoni in Python. Original code is at www.mit.edu/~andoni/LSH.\n   (Note: Since they released their code in GPL, therefore this is also\n   GPL)\n\n2. Neyshabur et. al. (2014)[1] presented a clever modification to E2LSH\n   to perform Maximum Inner Product Search. The code change was really\n   small and it only needed like 10 lines of change to the following\n   files to implement. So I added a flag to perform that as well.\n\n   E2LSH-0.1/sources/Geometry.h\n   E2LSH-0.1/sources/LocalitySensitiveHashing.h\n   E2LSH-0.1/sources/LocalitySensitiveHashing.cpp\n   E2LSH-0.1/sources/NearNeighbors.cpp\n   Basically if you compile the module as \"cython_binding_mips\" then even though\n   the API remains the same but the algorithm compiled would change\n   and we would start doing MIPS based queries. Note that the parameter\n   R would not map exactly to something meaningful.\n\n\nRun the following in order to make the cython_bindings for the standard MIPS task and to test them.\nmake # This calls 'make cython_binding_mips' for doing MIPS\nmake test # This calls 'make test_mnist1k_cython_mips' and tests the MIPS code.\nRead the Makefile for more.\n\n\nAll the code needed for creating cython bindings is in sources_py.\nRead the original manual for understanding the c++ code.\nRead the diffs \"git diff --name-only 0a490a0d0 HEAD\" for the c++ and\n.h file to understand the changes done to implement Neyshabur\net. al.'s algorithm\n\n\n[1] @article{neyshabur2014alsh,\nTitle = {{On Symmetric and Asymmetric LSHs for Inner Product Search}},\nAuthor = {{Neyshabur}, B. and {Srebro}, N.},\nJournal = {ArXiv e-prints},\nMonth = oct,\nPrimaryclass = {stat.ML},\nYear = 2014}\n", 
  "read_at": 1462551755, 
  "description": "Cython/Python bindings of E2LSH by Andoni and  Symmetric LSH for MIPS by Neyshabur", 
  "README.md": "The code from this project was used for [\"Sublinear Partition Estimation\"](http://arxiv.org/abs/1508.01596), Pushpendre Rastogi, Benjamin Van Durme, arXiv:1508.01596 [stat.ML] (Preprint).\n\nThis project serves two purposes:\n\n1. It provides bindings for the LSH cpp code that was released by\n   Andoni in Python. Original code is at www.mit.edu/~andoni/LSH.\n   (Note: Since they released their code in GPL, therefore this is also\n   GPL)\n\n   The idea is that once everything compiles and all python paths are\n   set correctly one would be able to do the following\n   ```\n    >>> import cylsh;\n    >>> import numpy as np\n    >>> db=cylsh.LSH(0.9,\n                     0.9,\n                     np.asarray([[.1, .7, .7],\n                                [.11, .69, .7]]),\n                     np.asarray([[.1, .7, .7]]),\n                     1e6);\n    >>> print db.query(np.asarray([.1, .7, 0]))\n    ```\n   \"this example comes from the target example_cython_api\" in the Makefile\n   But remember that if you compiled it as cython_binding_mips\n   then you must use the mips class.\n   \n2. Neyshabur et. al. (2014)[1] presented a clever modification to E2LSH\n   to perform Maximum Inner Product Search. The code change was really\n   small and it only needed like 10 lines of change to the following\n   files to implement. So I added a flag to perform that as well in the Makefile.\n   ```\n   E2LSH-0.1/sources/Geometry.h\n   E2LSH-0.1/sources/LocalitySensitiveHashing.h\n   E2LSH-0.1/sources/LocalitySensitiveHashing.cpp\n   E2LSH-0.1/sources/NearNeighbors.cpp\n   ```\n   Basically if you compile the module as \"cython_binding_mips\" then even though\n   the API remains the same but the algorithm compiled would change\n   and we would start doing MIPS based queries. Note that the parameter\n   R would not map exactly to something meaningful.\n   \n\nRun the following in order to make the cython_bindings and to test them.\n\n1. make cython_binding_mips for  NeyShabur's Maximum Inner Product LSH,\n   or make cython_binding_e2lsh for Euclidean distance LSH\n   Note that MIPS and MIPS mean the same thing.\n\n2. make test_cython_binding_mips or test_cython_binding_lsh\n\n\nAll the code needed for creating cython bindings is in sources_py.\nRead the original manual for understanding the c++ code.\nRead the diffs \"git diff --name-only 0a490a0d0 HEAD\" for the c++ and\n.h file to understand the changes done to implement Neyshabur\net. al.'s algorithm\n\n```\n[1] @article{neyshabur2014alsh,\nTitle = {{On Symmetric and Asymmetric LSHs for Inner Product Search}},\nAuthor = {{Neyshabur}, B. and {Srebro}, N.},\nJournal = {ArXiv e-prints},\nMonth = oct,\nPrimaryclass = {stat.ML},\nYear = 2014}\n```\n", 
  "id": 29281882
}