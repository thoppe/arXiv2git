{
  "read_at": 1462544671, 
  "description": "An intelligent version of the sliding-puzzle game for your terminal built in golang", 
  "README.md": "puzzl\n=====\n\n> An intelligent version of the sliding-puzzle game for your terminal built in golang\n\n[![GoDoc](https://godoc.org/github.com/pravj/puzzl?status.svg)](http://godoc.org/github.com/pravj/puzzl)\n\npuzzl is an intelligent implementation of the classical sliding-puzzle game.\n\nIt's built on top of Golang's *concurrency primitives*. It uses *goroutines* and *channels* for inter process communications to provide real time notification experience in unix terminals.\n\npuzzl comes with an in-built solver which can solve any puzzle configuration faster than Iron Man. :zap:\n\n![puzzl](https://github.com/pravj/puzzl/blob/development/puzzl.gif?raw=true)\n\nI have also written a paper\\* describing technical details about the game, have a look, in case you want to.\n\n> Implementing an intelligent version of the classical sliding-puzzle game for unix terminals using Golang's concurrency primitives\n>\n> http://arxiv.org/abs/1503.08345\n\n####Installation\n```go\ngo get github.com/pravj/puzzl\n```\n* Make sure that the workspace's **bin** directory is added to your **PATH**\n```go\nexport PATH=$PATH:$GOPATH/bin\n```\n\n####Controls\n* Start the game with the command *puzzl*.\n* Use Arrow Keys to move the blank tile wherever you want.\n* Press 'h' or 'H' to get any hint for next move.\n* Press ESC key to quit the game.\n\n####Features\n* puzzl comes with an [in-built solver](#in-built-solver) that powers the automation for the game.\n* puzzl gives you some hope by showing the optimal possible moves to solve any board configuration.\n* puzzl helps you survive the game by giving [hints](#hints-policy) for next move.\n* puzzl tracks all the user moves and accordingly generates [score](#scoring-policy) for the game.\n* puzzl shows [notifications](#notification-mechanism) according to the real time game status.\n* puzzl notifies that whether your last move was right or wrong.\n\n####In-built Solver\n* puzzl uses A-star algorithm to solve the game board.\n* puzzl's solver is enough fuel-efficient that it can solve the hardest 3x3 puzzle in 31 moves. Exactly what the [ideal solvability condition](http://en.wikipedia.org/wiki/15_puzzle#Solvability) asks for.\n\n####Hints Policy\n* You will get a maximum of 3 hints per game session. No more cheatings. :oncoming_police_car:\n\n####Scoring Policy\n* puzzl has its own scoring system. It measures the real time game score using two parameters, one is *total played game moves (T-score)* and another is *accumulated correct score (A-score)* from all the moves.\n* Whenever a user moves in a correct direction as the solver would have moved, the *A-score* increases by 1 and decreases by 1 when the user moves in a wrong direction.\n* The score of game at any point of time is calculated by this function. [ score = A-score / T-score ]\n* This way the maximum score of 1 would be possible in only one situation when the user traverse the game's state space in the right direction all the time.\n\n####Notification Mechanism\n* puzzl uses a combination of *goroutines* and *channels* to deliver real time notifications in the game.\n* Here you can see all the [available notifications](https://github.com/pravj/puzzl/blob/development/notification/notification.go#L5-L14).\n\n####Dependencies\n* [termbox-go](https://github.com/nsf/termbox-go) - Text based graphic user interface for the game.\n* [Box-drawing characters](http://en.wikipedia.org/wiki/Box-drawing_character) for drawing different sections.\n\n---\n\nBuilt with *Muzi* and *Coffee* by [Pravendra Singh](https://twitter.com/hackpravj)\n", 
  "id": 32503532
}