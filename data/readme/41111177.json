{
  "read_at": 1462545835, 
  "description": "University Thesis Project", 
  "README.md": "# mbqsee (angular.js)\n\nMEng Computing Thesis Project    \nMeasurement Based Quantum Computing\n\nThis project is a visual tool to aid the research in Quantum Computing.\nWritten in Angular.js 1.0 in 2014.    \nIt allows a user to input a so-called _Measurement Calculus_ instruction sequence\nand to simulate the execution on a Measurement-based Quantum Computer.\n\nMy Thesis Paper: [report.pdf](https://github.com/jameslawson/mbqsee-angular/blob/master/report.pdf)\n\nMore info:    \n_Measurement Calculus_: http://arxiv.org/abs/quant-ph/0412135    \n_Measurement-based Quantum Computer_: http://arxiv.org/abs/quant-ph/0508124, http://arxiv.org/abs/0910.1116\n\n## Features\n\nA custom-made **equation editor** (an IME) to input the Measurement Calculus. A user can input an equation and use the arrow keys (or buttons) to navigate through various placeholders to complete the desired equation.  \n![Screenshot of IME](http://i.imgur.com/aPqnqx0.png?1)\n\n\nCorrect **simulation** of the instructions. Working out the Qunatum State is tedious to do by hand mathematically.\nFor example, if your machine has 5 qubits, then for _each instruction_, you need \nto multiply a vector by a 32x32 matrix. With this program, you can do the same operation with a click of a button.\n![Imgur](http://i.imgur.com/ZabyXGM.png)\n\nInteractive **term-rewriting** of the instructions. The original paper describes the ability to move the instrucions around according to so-called [term rewriting rules](https://en.wikipedia.org/wiki/Rewriting#Term_rewriting_systems).\nThe tool shows you when rewriting rules can be applied (the small blue buttons) -- clicking the button applies the  rule to give a new rewritten (reorganized) instruction sequence. For any given rewrite step, the program highlights in blue what changed. \n\n![Imgur](http://i.imgur.com/Hx24yvd.png?1)    \nTerm rewriting is a pain to do on paper because instructions are long and unfortunately, very little changes per step a lot of steps are needed to get anything done. The result is that a given rewrite proof will have *very long lines* and have *many lines*. Typos are very easy to come by; the original paper itself had many typos in the sections that explained term rewriting.\n\n## Installation\n\nRequires Node.js and bower. \nClone the repo and cd to the root of the project.\n```\nbower install\nnpm install\nnpm start\n```\nOpen http://localhost:8000/app in your browser.\n\n\n\n", 
  "id": 41111177
}