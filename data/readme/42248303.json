{
  "id": 42248303, 
  "read_at": 1462548609, 
  "README.rst": "Parmesan\n=======\nParmesan is a library adding variational and semi-supervised neural network models to the neural network library `Lasagne\n<http://github.com/Lasagne/Lasagne>`_.\n\nInstallation\n------------\nParmesan depends heavily on the `Lasagne\n<http://github.com/Lasagne/Lasagne>`_ and\n`Theano\n<http://deeplearning.net/software/theano>`_ libraries. Please make sure you have these installed before installing Parmesan.\n\n**Install Parmesan**\n\n.. code-block:: bash\n\n  git clone https://github.com/casperkaae/parmesan.git\n  cd parmesan\n  python setup.py develop\n\n\nDocumentation\n-------------\nWork in progress. At the moment Parmesan primarily includes\n\n* Layers for Monte Carlo approximation of integrals used in (importance weighted) variational autoencoders in *parmesan/layers/sample.py*\n* Layers for constructing Ladder Networks in *parmesan/layers/ladderlayers.py*\n* Layers for implementing normalizing flows in *parmesan/layers/flow.py*\n\nPlease see the source code and code examples for further details.\n\nExamples\n-------------\n* **examples/vae_vanilla.py**: Variational autoencoder as described in Kingma et al. 2013\n* **examples/iw_vae.py**: Variational autoencoder using importance sampling as described in Burda et al. 2015\n* **examples/iw_vae_normflow.py**: Variational autoencoder using normalizing flows and importance sampling as described in Burda et al. 2015 and Rezende et al. 2015\n* **examples/mnist_ladder.py**: Semi-supervised Ladder Network as described in Rasmus et al. 2015\n\n**Usage example**:\nBelow is an image of the log-likelihood terms training an importance weighted autoencoder on MNIST using binomial sampling of the inputs before each epoch. Further we found it beneficial to add batch normalization to the fully connected layers. The training is done using one Monte Carlo sample to approximate the expectations over q(z|x) and one importance weighted sample.\nThe test performance was evaluated using 5000 importance weighted samples and be should be directly comparable to the results in Burda et al.\nThe final test performance is LL=-84.78 which is better than the current best published results at LL=-86.76 reported in Burda et al. table 1 (compare to top 1st row and 4th row in column labeled IWAE since we are training using a single importance weighted sample)).\n\n\n.. image:: https://raw.githubusercontent.com/casperkaae/parmesan/master/misc/eval_L5000.png\n\n\n\nSimilar results should be obtained by running\n\n.. code-block:: bash\n\n  python examples/iw_vae.py -eq_samples 1 -iw_samples 1 -lr 0.001 -nhidden 500 -nlatent 100 -nonlin_dec very_leaky_rectify -nonlin_enc rectify -batch_size 250 -anneal_lr_epoch 2000\n\n\nDevelopment\n-----------\nParmesan is work in progress, inputs, contributions and bug reports are very welcome.\n\nThe library is developed by\n    * Casper Kaae Sonderby\n    * Soren Kaae Sonderby\n    * Lars Maaloe\n\nReferences\n-----------\n\n* Kingma, D. P., & Welling, M. (2013). Auto-encoding variational bayes. arXiv preprint arXiv:1312.6114.\n* Burda, Y., Grosse, R., & Salakhutdinov, R. (2015). Importance Weighted Autoencoders. arXiv preprint arXiv:1509.00519.\n* Rezende, D. J., & Mohamed, S. (2015). Variational Inference with Normalizing Flows. arXiv preprint arXiv:1505.05770.\n* Rasmus, A., Valpola, H., Honkala, M., Berglund, M., & Raiko, T. (2015). Semi-Supervised Learning with Ladder Network. arXiv preprint arXiv:1507.02672.\n\n", 
  "description": "Variational and semi-supervised neural network toppings for Lasagne"
}