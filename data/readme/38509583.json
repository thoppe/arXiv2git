{
  "read_at": 1462546441, 
  "description": "James Bound, a depth-bounded \u03c0-calculus playground", 
  "README.md": "README\n======\n\nThis repository contains an Haskell package, `picalc`, and an executable `jb`, short for \"James Bound\".\nIt defines data structures and functions for the representation of the\nsyntax and operational semantics of the p-calculus, and its *depth-bounded* fragment (hence the name).\n\nFor more information about p-calculus see\n    <https://en.wikipedia.org/wiki/Pi_calculus>.\n\nOther (more theoretical) references for a quick introduction are\n\n * Milner, R. 1993. *The polyadic p-calculus: a tutorial.*\n   Logic and Algebra of Specification (1993).\n   Available at <http://hdl.handle.net/1842/6050>.\n * Meyer, R. 2008. *On Boundedness in Depth in the p-calculus.*\n   IFIP TCS (2008).\n   Available at <http://concurrency.informatik.uni-kl.de/documents/meyer_bounded_depth_2008.pdf>\n\nThe analysis implemented by James Bound is a variation over the type system described in\n\n * D'Osualdo, E., Ong, L. 2015. *A Type System for proving Depth Boundedness in the p-calculus.*\n   Available at <http://arxiv.org/abs/1502.00944>\n\nThis module is not intended to define a p-calculus style embedded domain\nspecific language but rather to represent, transform, analyse and interpret\np-calculus terms. For this reason the interpretation is not tuned for speed and\nit is not meant to be used for executing systems but rather to explore the\nsemantics of the terms.\n\nThe current version is to be considered *experimental* and simply a playground for experimenting with p-calculus.\n\n\n## License\n\nThis code is released under GPLv2 but in the spirit of the [CRAPL][]:\n\n> Science thrives on openness.\n>\n> In modern science, it is often infeasible to replicate claims without\n> access to the software underlying those claims.\n>\n> Let's all be honest: when scientists write code, aesthetics and\n> software engineering principles take a back seat to having running,\n> working code before a deadline.\n>\n> So, let's release the ugly.  And, let's be proud of that.\n\n\n## Compilation\n\nThe `jb` program can be compiled by running\n\n    cabal build\n\nfrom the top directory of the repository.\n\n\n## Syntax of the language\n\n`PiCalc` implements a variant of polyadic p-calculus.\nIts syntax is defined in the [wiki] and the `SYNTAX.md` file.\n\n[CRAPL]: http://matt.might.net/articles/crapl/\n[wiki]: https://github.com/bordaigorl/jamesbound/wiki", 
  "id": 38509583
}