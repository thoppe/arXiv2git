{
  "read_at": 1462554500, 
  "description": "(Python) Library for Rigid-Body Orientation", 
  "README.md": "This is a library for dealing with rigid body orientation math.\n\n**so3tools**\n\nRepresentation independent functions for manipulating SO3 quantities\nlike rotation matrices, affine (homogeneous) matrices, quaternions, \nand rotation vectors (sometimes called Euler vectors).\nThese functions can be used to abstract SO3 operations so that\nthe user can think in terms of simple vector math. For example,\n\"minus\" can be used to find the difference between two orientations.\n\n**oritools**\n\nA simplified version of so3tools that is only designed to\nwork with the quaternion representation. It is advisable to\nuse oritools and to keep your orientation states as quaternions\nin practice. This is faster and cleaner.\n\n**demo_PDcontroller**\n\nDemo of using oritools in an attitude dynamics simulation\nand PD controller. The demo could use so3tools just as well,\nbut to reinforce good practice, a quaternion representation\nand oritools are used.\n\n**transformations**\n\nThe latest version of Christoph Gohlke's notorious transformations\nmodule. This version is newer than the one used in ROS tf. When using\nanything from this library, this transformations file will be imported,\nnot the old one from tf.\nCurrent Version: 2015.07.18\n\n**(dependencies)**\n\n- numpy\n- matplotlib (only for demo_PDcontroller)\n\n**(references)**\n\n- https://en.wikipedia.org/wiki/Rotation_(mathematics)\n- https://en.wikipedia.org/wiki/Axis-angle_representation\n- http://www.euclideanspace.com/maths/geometry/rotations/\n- https://en.wikipedia.org/wiki/Versor\n- http://arxiv.org/pdf/1107.1119.pdf\n", 
  "id": 46957999
}