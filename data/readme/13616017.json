{
  "read_at": 1462550580, 
  "description": "Pitman-Yor processing with topic models", 
  "README.md": "\nABOUT\n=====\n\nThis source directory contains library routines that provide alternative ways of computing generalised second order Stirling numbers used in working with Pitman-Yor and Dirichlet processes (PYP and DP). Included is library routines for posterior sampling on the discount and concentration parameters of the PYP/DP, and some simple demo scripts.\n\nSystem used for Pitman-Yor processing with topic models, to allow easy scaling to gigabytes of text. Tested on a few versions on Ubuntu Linux and MacOSX. Requires the GSL (GNU Scientific Library) for polygamma functions.\n\nMatching paper with some of the theory at (http://arxiv.org/abs/1007.0296), and a series of papers by Buntine and students. \n\n\nCONTENTS\n========\nThis directory contains a library `lib/` and some testing programs `test/`.\n\nThe library provides alternative ways of computing generalised\nsecond order Stirling numbers used in working with Pitman-Yor\nand Dirichlet processes (PYP and DP).  The relevant theory appears in:\n    http://arxiv.org/abs/1007.0296v2\nand some additional theory is given in \"doc/alpha.pdf\".\n\nThe library functions are described in the header files:\n    stable.h   - tables for log of Stirling numbers\n    \t\t  and for ratio of Stirling numbers\n    psample.h  - routines for sampling discount (a) and concentration (b)\n    sapprox.h  - approximate calcs from difference approximation\n    arms.h     - the ARM code from Gilks, used by samplers\n    sympoly.h  - evaluation and sampling of elementary symmetric polynomials\n\t\t (useful for some more complex models)\n\nIn addition the following files give links to key external \nlibraries that you can change if you want to alter dependencies:\n    rng.h digamma.h  \nFor testing purposes, the following is kept:   yaps.h\nAn earlier full featured version is also here,\nroughly documented.  Used for really big tables:  sxtable.h\nNote am slowly integrating the functionality of this into the\nbetter engineered stable.h.\n\nIncluding is testers, \"list.c\" and \"demo.c\", \nan example use as well as a worked\nexample of posterior sampling on the discount and concentration\nparameters of the PYP/DP, in psample.h.\n\nThe tester has all sorts of dependencies, but the library\nfunctions are self-contained apart from requiring \ndigamma() and polygamma() functions \n(currently got from GNU Scientific Library, GSL)\nand random number generators.\nThese dependencies are isolated in \"lib/digamma.h\" and\n\"lib/rng.h\" so redefine these to change these around.\n\nBuilding\n=======\nTested on a few versions on Ubuntu Linux and an old MacOSX.\nIf \"lib/digamma.h\" and \"lib/rng.h\" are unchanged you will need\nto have GSL installed.\nTesting also requires the GSL for randon number functions.\n    NB.  since its good to have control of seeds \nNote to compile faster versions, modify your compile time flags\naccordingly,  e.g.,  -O5 -DNDEBUG\nMacOSX requires fiddling with paths for GSL libraries.\n   cd lib\n   #  calling plain make creates the library, and leaves it at ./libstb.a\n   make\n\nOptional\n========\n   cd test\n   #  - a simple value lister, lets you see the values\n   make list\n   #  - see what it does\n   ./list\n   #  - create the \"demo\" executable with all sorts of bells and whistles\n   #    for evaluating the Stirling numbers\n   #  - to see the options, execute:\n   #        ./demo -h\n   make demo\n   #  - check the simple options\n   ./demo -h\n   #  - run with fitting the concentration\n   ./demo -H5 -b 10\n\nInstalling\n=========\nCopy the library \"lib/libstb.a\" and the header files \n\"stable.h\", \"sapprox.h\", to wherever is useful for you.\nIf using the parameter samplers, samplea() and sampleb(), then\nyou also need \"psample.h\", \"arms.h\", \"rng.h\" and \"lgamma.h\".\n\nDetail\n======\nTo see how to use the library in more detail, see the examples\nin \"list.c\" and \"demo.c\".  This also shows how to do posterior sampling\non the discount and concentration parameters of the PYP/DP.\n\nIn addition, \"precision_test.c\" is a stand alone program to\ncompare the two Stirling number recursions when done in\nfloat versus double.  This is intended to evaluate how the\nfinite precision affects the calculations, and demonstrates\nthe \"ratio of Stirling number\" recursion is far more\naccurate.\n\nThe adaptive rejection sampling code from:\n   http://www1.maths.leeds.ac.uk/~wally.gilks/adaptive.rejection/web_page/Welcome.html\nis included as \"arms.h\" and \"arms.c\".\nThis is optional since the slice sampler is the default.\nNote naive slice sampling *doesn't* work when sampling the concentration\nparameter ... you need to warm up the sampler with a bit of fixed\npoint optimisation.\n\nSee the relevant \"#define\" in \"lib/psample.h\".\n\nLICENSE\n=======\nThe code in this directory is subject to the Mozilla Public License Version 1.1 \n(the \"License\"); you may not use files in this directory except in\ncompliance with the License. You may obtain a copy of the License at\nhttp://www.mozilla.org/MPL/\n\nSoftware distributed under the License is distributed on an \"AS IS\"\nbasis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\nLicense for the specific language governing rights and limitations\nunder the License.\n\nAuthors:\n     Wray Buntine (wray.buntine@nicta.com.au)\n     Lan Du (lan.du@nicta.com.au)\nContact: \n     Wray Buntine (wray.buntine@nicta.com.au)\n\n\n", 
  "id": 13616017
}