{
  "id": 15323765, 
  "read_at": 1462551470, 
  "README.rst": "PetIGA: A framework for high performance Isogeometric Analysis\n==============================================================\n\n\nOverview\n--------\n\nThis software framework implements a NURBS-based Galerkin finite\nelement method (FEM), popularly known as `isogeometric analysis\n<http://wikipedia.org/wiki/Isogeometric_analysis>`_ (IGA). It is\nheavily based on `PETSc <http://www.mcs.anl.gov/petsc/>`_, the\n*Portable, Extensible Toolkit for Scientific Computation*. PETSc is a\ncollection of algorithms and data structures for the solution of\nscientific problems, particularly those modeled by partial\ndifferential equations (PDEs). PETSc is written to be applicable to a\nrange of problem sizes, including large-scale simulations where high\nperformance parallel is a must. PetIGA can be thought of as an\nextension of PETSc, which adds the NURBS discretization capability and\nthe integration of forms. The PetIGA framework is intended for\nresearchers in the numeric solution of PDEs who have applications\nwhich require extensive computational resources.\n\n\nInstallation\n------------\n\nAfter `installing PETSc\n<http://www.mcs.anl.gov/petsc/documentation/installation.html>`_,\nset appropriate values for ``PETSC_DIR`` and ``PETSC_ARCH`` in your\nenvironment::\n\n  $ export PETSC_DIR=/home/user/petsc-3.4.0\n  $ export PETSC_ARCH=arch-linux2-c-debug\n\nClone the `Mercurial <http://mercurial.selenic.com/>`_ repository\nhosted at `Bitbucket <https://bitbucket.org/dalcinl/petiga>`_ ::\n\n  $ hg clone https://bitbucket.org/dalcinl/PetIGA\n\nFinally, enter PetIGA top level directory and use ``make`` to compile\nthe code and build the PetIGA library::\n\n  $ cd PetIGA\n  $ make all\n  $ make test\n\n\nScripting Support\n--------------\n\nPetIGA is designed to be efficient and as such, we do not directly do\nthings like output VTK files suitable for viewing the solution. We do\nhave routines which output the discretization information and solution\nvectors, but these are in a binary format to minimize I/O time. We\nhave written a python package, `igakit\n<https://bitbucket.org/dalcinl/igakit>`_ which handles post-processing\nfor visualization as well as geometry generation. A series of\ntutorials in how to use PetIGA and igakit are underway and can be\nfound `here <https://petiga-igakit.readthedocs.org>`_.\n\n\nCitation\n------\n\nIf you find PetIGA helpful in conducting research projects, we would\nappreciate a citation to the following article::\n\n  @Article{PetIGA,\n    author = \t {N. Collier, L. Dalcin, V.M. Calo},\n    title = \t {{PetIGA}: High-Performance Isogeometric Analysis},\n    journal = \t {arxiv},\n    year = \t {2013},\n    number = \t {1305.4452},\n    note = \t {http://arxiv.org/abs/1305.4452}\n  }\n\n\nAcknowledgments\n---------------\n\nThis project was partially supported by the Center for Numerical\nPorous Media, Division of Computer, Electrical, and Mathematical\nSciences & Engineering (`CEMSE <http://cemse.kaust.edu.sa/>`_), King\nAbdullah University of Science and Technology (`KAUST\n<http://www.kaust.edu.sa/>`_).\n", 
  "description": "A git version of the PetIGA repository, with a few minor changes"
}