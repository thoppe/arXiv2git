{
  "read_at": 1462548902, 
  "description": "", 
  "readme.txt": "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n% License and attribution:\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n\r\nThis package provides software modules for image and shape analysis. The code is released under the MIT license and can be used for any purpose with proper attribution. The code accompanies the following paper, which should be cited in publications that use the provided modules:\r\n\r\nSingle-View Reconstruction via Joint Analysis of Image and Shape Collections\r\nQixing Huang, Hai Wang, and Vladlen Koltun\r\nACM Transactions on Graphics 34(4), 2015\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n% Loading the parameters\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n  load('data\\parameters.mat');\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n% Attention: The rendering setting in Para (i.e., Para.rHeights,\r\n% Para.rWidhts) is tested on Windows machines. If you are using\r\n% Linux or Mac, please call the following function to update\r\n% these two vectors:\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n  Para = update_para(Para);\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n% Loading the images and shapes\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n  load('data\\car.mat');\r\n  Note that the shapes are assumed to be consistently oriented in\r\n  a world coordinate system\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n% Module I: Pose estimation\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n  The pose estimation module predicts the camera pose for the underlying object with respect to the world coordinate system of the shapes. This is done by sampling the camera poses, rendering the shapes from the camera poses, and comparing real images to rendered images. The most time-consuming part is image rendering, which is done by precomputation.\r\n\r\n  Cameras = cam_camera_sampling(Para); % camera simulation\r\n  hogRender = cam_shape_hog_dess(...   %\r\n                Shapes,...  % The aligned input shapes\r\n                Cameras,... % The sampled camera poses\r\n                Para,...    % Please refer to the function body\r\n                verbose);   % verbose = 1 if you want to print it\r\n                              out\r\n\r\n\r\n  Camera estimation can be done in two ways: for a single image\r\n  in isolation or for a collection of images\r\n\r\n  Camera_init = cam_pose_est_single(...\r\n                  Image,...     % The input image object\r\n                  Shapes,...    % The aligned input shapes\r\n                  Cameras,...   % The sampled camera poses\r\n                  hogRender,... % The rendered hog descriptors\r\n                  Para,...  % Please refer to the function body\r\n                  verbose); % verbose = 1 if you want to print it\r\n                              out\r\n\r\n  Cameras_init = cam_pose_est_joint(...\r\n                  inputImages,...  % The input images\r\n                  Shapes,...       % The aligned input shapes\r\n                  cameraSamples,...% The sampled camera poses\r\n                  hogRender,...    % The rendered hog descriptors\r\n                  Para,...   % Please refer to the function body\r\n                  verbose)   % verbose = 1 if you want to print\r\n                               it out\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n% Module II: Pairwise image-shape alignment\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n  This module performs image-shape alignment for one image. It selects the closest shape and deforms it to fit the image object. Note that the pose estimation module is packed in the following main function:\r\n\r\n  [Camera_opt, Shape_opt] = demo_i2s_align(...\r\n    Image,...  % Input image\r\n    Shapes,... % Input shapes\r\n    Para);     % Parameters used in alignment. Please refer to the\r\n                function body for details\r\n\r\n Output argments:\r\n  'Shape_opt' : The optimized shape, which aligns with the input\r\n                image object\r\n  'Camera_opt': The associated optimized camera configuration\r\n\r\nDemo:\r\n   >load('data\\chair.mat');\r\n   >load('data\\parameters.mat');\r\n   >[Camera_opt, Shape_opt] = demo_i2s_align(Images{1}, Shapes, Para);\r\n\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n% Module III: Assembly-based reconstruction\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n  Assembly-based reconstruction aims to recover the underlying 3D model of an image object by assembling parts from a small collection of relevant shapes. The input consists of one image and a few shapes, each of which comprises a number of components. We assume that the shapes are consistently aligned in a world coordinate system. We assume that the pose of the image object is given. The main function is\r\n\r\n  [Shape_opt, Camera_opt] = demo_ibm_mix_and_match(...\r\n    Image,...             % The input image\r\n    Camera_init,...       % The initial camera configuration for\r\n                            all input shapes\r\n    Shapes,...            % The input shapes\r\n    Para);                % Please refer to the functional body\r\n                            for details\r\n\r\n  Output argments:\r\n    'Shape_opt' : The reconstructed shape in the world coordinate\r\n                  system\r\n    'Camera_opt': The associated optimized camera configuration\r\n\r\nDemo:\r\n   >load('data\\mix_and_match.mat');\r\n   >load('data\\parameters.mat');\r\n   >[Shape_opt, Camera_opt] = demo_ibm_mix_and_match(Image, Camera_init, Shapes, Para);\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n% Module IV: Joint image-shape correspondence\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n  Joint image-shape correspondence module estimates dense pixelwise correspondences among a collection of images and a collection of shapes. We assume that (i) the camera poses of the images are pre-computed (e.g., using Module I), and (ii) the shapes are consistently aligned in a world coordinate system. The main function is\r\n\r\n  PairMatches = demo_joint_i2s_corres_main(...\r\n    Images,...       % Input images\r\n    ImageCameras,... % The camera configurations associated with\r\n                       each input image\r\n    Shapes,...       % The input shapes (aligned in a\r\n                       world coordinate system)\r\n    Top,...          % (#Images x #Shapes) is a sparse matrix\r\n                       that specifies image-shape pairs\r\n                       for matching.\r\n    Para);           %\r\n\r\n  Warning: If you use >100 images and/or >100 shapes,\r\n           the computation may take a very long time.\r\n\r\n  Demo:\r\n    >load('data\\joint_matching.mat');\r\n    >load('data\\parameters.mat');\r\n    >Corres_rs = demo_joint_i2s_corres_main(Images(1:10), ImageCameras(1:10), Shapes(1:5), ones(10,5), Para);\r\n\r\n\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n% External libraries\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n  The software package uses the following external libraries:\r\n\r\n  Piotr's Image & Video Matlab Toolbox:\r\n  http://vision.ucsd.edu/~pdollar/toolbox/doc/\r\n  http://research.microsoft.com/en-us/downloads/389109f6-b4e8-404c-84bf-239f7cbf4e3d/\r\n\r\n  The SIFT flow package:\r\n  http://people.csail.mit.edu/celiu/SIFTflow/\r\n\r\n  The OPENGM2 structure predication package:\r\n  http://hci.iwr.uni-heidelberg.de/opengm2/?l0=library\r\n\r\n  HOG descriptor: functions 'imResample', 'hog'\r\n\r\n  Edge map: function 'edgesDetect'\r\n\r\n  OPENGM2: the trws algorithm\r\n\r\nReferences:\r\n\r\nNavneet Dalal, Bill Triggs: Histograms of Oriented Gradients for Human Detection. CVPR 2005\r\n\r\nPiotr Dollr, C. Lawrence Zitnick: Fast Edge Detection Using Structured Forests. IEEE Trans. Pattern Anal. Mach. Intell. 37(8): 1558-1570 (2015)\r\n\r\nCe Liu, Jenny Yuen, Antonio Torralba: SIFT Flow: Dense Correspondence across Scenes and Its Applications. IEEE Trans. Pattern Anal. Mach. Intell. 33(5): 978-994 (2011)\r\n\r\nAndres, B. and Beier T. and Kappes, J.H. : OpenGM: A C++ Library for Discrete Graphical Models. http://arxiv.org/abs/1206.0111", 
  "id": 42831903
}