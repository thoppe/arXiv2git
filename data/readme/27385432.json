{
  "README": "GNUPFA is an experimental Python-implementation of the PFA\nalgorithm as described in http://arxiv.org/abs/1311.2503.\nPFA is implemented as an MDP-node (http://mdp-toolkit.sourceforge.net).\nWhen this project reaches sufficient stability, an integration\ninto MDP is planned.\n\n\nFiles\n=====\n\nPFANodeMDPRefImp.py\n-------------------\n\nThis is a naive one-to-one implementation of the PFA algorithm.\nIt caches all supplied data into memory and has *no* real support\nfor chunking (as the intention of chunking is to read only a\nsmall subset of the data to memory, process it, free memory,\nprocess the next subset and so on).\nFurther it must process the data several times; one time for\neach work step.\nIts advantage is that it is an easy to read implementation and\nis almost certainly bug free. So it can serve as a controlpoint\nfor more advanced implementations.\n\n\nPFANodeMDP.py\n-------------\n\nContains a smarter PFA implementation that supports real chunking.\nIt only saves the mean, second moment matrix and several auto\ncorrelation matrices. Each chunk is just used to update these,\neleminating any need for keeping data in memory.\nIn contrast to PFANodeMDPRefImp, this implementation is rather\ncomplicated as the used equations are largely expanded in order\nto perform PFA just on top of auto correlation matrices.\nHowever, its results were compared to those of the reference\nimplementation for various test data and the dicrepancy is on\nfloating point numerical level.\n\nThe Layer-aware node uses MergeLayer, an experimental notion to\nperform clone layer functionality in a more precise way. This is\nonly relevant if one applies PFA hirarchically (c.f. mdp.hinet).\n\n\nPFACoreUtil.py\n--------------\n\nContains various utility functions, on which PFANodeMDPRefImp and\nPFANodeMDP are built on. Additionally features some methods to\nevaluate the prediction error of extracted components empirically on\ngiven data. Currently it contains a lot of debugging outputs and\nrequires clean-up.\n\n\nMergeLayer.py\n-------------\n\nIntroduces an MDP-Layer with an additional merging-phase that merges all\nnodes in the layer after training. Merging is done by a given merger,\nwhich is itself a node. After merging, the merger will be used for\nexecution in a CloneLayer-like fashion.\n\nThe idea behind MergeLayer is a hybrid of ordinary layer and CloneLayer.\nThe goal in this design is to use separate nodes in the train-phase,\nwhile using only a single node for execution. The difference to CloneLayer\nis that in MergeLayer, a different algorithm can be used for combining\nhorizontally parallel data chunks than for combining time-sequent data\nchunks. The latter ones are combined by the nodes in the usual train-phase.\nIn Contrast to CloneLayer, MergeLayer allows to control how horizontal merging\nof the data works. While CloneLayer would push this data into the very same\ntrain method like the time-sequent chunks, MergeLayer uses a merger to combine\nhorizontal data.\n\nNote that this implementation is highly experimental.\n\n\ncache_node.py\n-------------\n\nIntroduces caching functionality for MDP flows. Each flow step is saved to disc\nafter it has been trained. This way, early nodes in the flow don't need to process\nthe data repeatedly.\nAnd additional feature is that data can be re-ordered after caching. Most MDP nodes\nare agnostic to the order of their data anyway, but in layer-case, the order can matter,\nif image data from parallel areas is provided sequentially to the node (clone layer).\nMergeLayer can solve this, but a reordering cache can solve it too with even lower\nmemory consumption, as it does not need to have parallel working memory for all areas\nin the layer. Note that memory consumption is crucial for potential GPU-based\nPFA-implementations.\n\nThis implementation is highly experimental.\n\n\n\nLicense\n=======\n\nUntil it gets integrated into MDP, GNUPFA will be released under GPL, v.3.\nSee the file \"LICENSE\" for a copy of this GPL version.\n\n", 
  "read_at": 1462557251, 
  "description": "", 
  "id": 27385432
}