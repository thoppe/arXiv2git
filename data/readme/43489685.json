{
  "read_at": 1462556425, 
  "description": "CUDA based Least Median of Squares", 
  "README.txt": "GPU-Based Computation of 2D Least Median of Squares \n---------------------------------------------------------------\n\n\nThis code accompanies the paper:\nGil Shapira and Tal Hassner, \"GPU-Based Computation of 2D Least Median of Squares with Applications to Fast and Robust Line Detection,\" http://arxiv.org/abs/1510.01041\nIf you find this code useful and use it in your own work, please add a reference to our paper in your relevant publications.\nCopyright 2015, Gil Shapira and Tal Hassner.\nThe SOFTWARE (\"CUDA based Least Median of Squares\" and all included files) is provided \"as is\", without any guarantee made as to its suitability or fitness for any particular use. It may containbugs, so use of this tool is at your own risk. We take no responsibility for any damage that may unintentionally be caused through its use.\n\n0. Build Instruction\n--------------------\n\nThis distribution includes visual studio 2012 proj and solution files but can easily adapted for other platfrom with NSIGHT support.\nTo build the solution you need to install NSIGHT (CUDA dev env for visual studio)- https://developer.nvidia.com/nvidia-nsight-visual-studio-edition\nThe code is written in C++. No third party libraries are used.\nFor visualization the program dumps it's output (the input points and LMS line) in a giv file format.\nGIV is an easy to use open source software for geomerty primitive representation: http://giv.sourceforge.net/giv/\nTo run the software you'll need NVIDIA GPU with compute capability 3.0 (Kepler or later platforms).\n\n1. Input\n---------\nThe input file is the only argument to the program. Specify full path or use active directory specification in the visual studio environment.\nThe number of points in the input file should be a power of two.\nOn the root directory you'll find an input file example named dat.txt.\nThe format of the input file is as follows:\nThe first number is the point count, the second is the points dimension (currently only dim = 2 is supported)\nLater we have one point per line. The first number is the X coordinate of the point and second is the Y coordinate.\nFor instance:\n\n4 2\n11 12\n22.2 22\n33.1 11\n10 9\n\nIs a valid input file containing 4 points.\n\n\n2. Output\n----------\n\n1. The program outputs the LMS parameters (slope intercept and slab height) to stdout.\n2. a GIV file depicting the input file with the LMS strip is dumped to dump_cuda_lms.giv. You can use the GIV application to open the file and view the data\n\n3. Caveats\n----------\n\nCurrently the maximum point count the program can handle is defined in a macro in LMS2D.cu.\nIt is set MAX_POINT_COUNT = 2048. Change this contstant to handle larger point sets.\n", 
  "id": 43489685
}