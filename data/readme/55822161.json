{
  "README": "Version 1.3\n\nUpdate:\n04/08: Fixed output of encoding cost. Added overlap encoding for structures.\n\nCode for \n   VoG: Summarizing and Understanding Large Graphs\n   Danai Koutra, U Kang, Jilles Vreeken, and Christos Faloutsos\n   http://www.cs.cmu.edu/~dkoutra/papers/VoG.pdf\n\n   Overlapping encoding:\n   An Empirical Comparison of the Summarization Power of Graph Clustering Methods\n   Yike Liu, Neil Shah, Danai Koutra\n   http://arxiv.org/abs/1511.06820\n\n\nContact:\n   Danai Koutra, dkoutra@umich.edu\n   Yike Liu, yikeliu@umich.edu\n\nTo run:\n   type 'make'\n\n\nDifference from Version 1.0:\n   Using dynamic programming and the technique of memoization to \n   speed up the application of the GREEDY'nFORGET heuristic.\n\n\nAlgorithm:\n\nInput: graph G\nStep 1: Subgraph Generation. Generate candidate - possibly\noverlapping - subgraphs using one or more graph decomposition\nmethods.\nStep 2: Subgraph Labeling. Characterize each subgraph as a\nperfect structure x \\in Omega, or an approximate structure by using\nMDL to find the type x that locally minimizes the encoding cost.\nPopulate the candidate set C.\nStep 3: Summary Assembly. Use the heuristics PLAIN, TOP10,\nTOP100, GREEDY'NFORGET (Sec. 4.3) to select a non-redundant\nsubset from the candidate structures to instantiate the graph model\nM. Pick the model of the heuristic with the lowest description\ncost.\nReturn graph summary M and its encoding cost.\n\n\n\nChange Log:\n===========\n\nJuly 1, 2015\n- removed vpi():  using l2cnk.m to compute the log of n-choose-k efficiently\n  leads to 30x speedup in the chocolate-wiki dataset\n- tic/toc instead of cputime to compute the runtime: following the recommendation at http://www.mathworks.com/help/matlab/ref/cputime.html\n\nJanuary 9, 2015\n- Replaced the config.py file\n\nJuly 30,  2014\n- Fixed ordering of nodes in cliques\n\nJune 15, 2014\n- Made the greedyNforget 100x faster by exploiting memoization\n", 
  "read_at": 1462548441, 
  "description": "", 
  "id": 55822161
}