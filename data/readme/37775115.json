{
  "read_at": 1462549241, 
  "description": "better multiprocessing and multithreading in python", 
  "README.md": "multiprocess\n====\na friendly fork of the multiprocessing module\n\nAbout Multiprocess\n----------\nmultiprocess is a fork of multiprocessing, and is developed as part of pathos: https://github.com/uqfoundation/pathos\n\n`Multiprocessing` is a package for the Python language which supports the\nspawning of processes using the API of the standard library's\n`threading` module. `multiprocessing` has been distributed in the standard\nlibrary since python 2.6.\n\nFeatures:\n\n* Objects can be transferred between processes using pipes or\n  multi-producer/multi-consumer queues.\n\n* Objects can be shared between processes using a server process or\n  (for simple data) shared memory.\n\n* Equivalents of all the synchronization primitives in `threading`\n  are available.\n\n* A `Pool` class makes it easy to submit tasks to a pool of worker\n  processes.\n\n\nPathos is a python framework for heterogeneous computing.\nPathos is in active development, so any user feedback, bug reports, comments,\nor suggestions are highly appreciated.  A list of known issues is maintained\nat http://trac.mystic.cacr.caltech.edu/project/pathos/query, with a public\nticket list at https://github.com/uqfoundation/pathos/issues.\n\nNOTE: A C compiler is required to build the included extension module. For python 3.3 and above, a C compiler is suggested, but not required.\n\n\nMajor Changes\n-------------\n* enhanced serialization, using dill\n\n\nCurrent Release\n---------------\nThis version is multiprocess-0.70.4 (a fork of multiprocessing-0.70a1).\n\nThe latest released pathos fork of multiprocessing is available from::\n    https://pypi.python.org/pypi/multiprocess\n\nMultiprocessing is distributed under a BSD license.\n\n\nDevelopment Version\n-------------------\nYou can get the latest development version with all the shiny new features at::\n    https://github.com/uqfoundation\n\nIf you have a new contribution, please submit a pull request.\n\n\nExamples\n--------\nThe `multiprocess.Process` class follows the API of `threading.Thread`.\nFor example ::\n\n    from multiprocess import Process, Queue\n\n    def f(q):\n        q.put('hello world')\n\n    if __name__ == '__main__':\n        q = Queue()\n        p = Process(target=f, args=[q])\n        p.start()\n        print q.get()\n        p.join()\n\nSynchronization primitives like locks, semaphores and conditions are\navailable, for example ::\n\n    >>> from multiprocess import Condition\n    >>> c = Condition()\n    >>> print c\n    <Condition(<RLock(None, 0)>), 0>\n    >>> c.acquire()\n    True\n    >>> print c\n    <Condition(<RLock(MainProcess, 1)>), 0>\n\nOne can also use a manager to create shared objects either in shared\nmemory or in a server process, for example ::\n\n    >>> from multiprocess import Manager\n    >>> manager = Manager()\n    >>> l = manager.list(range(10))\n    >>> l.reverse()\n    >>> print l\n    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n    >>> print repr(l)\n    <Proxy[list] object at 0x00E1B3B0>\n\nTasks can be offloaded to a pool of worker processes in various ways,\nfor example ::\n\n    >>> from multiprocess import Pool\n    >>> def f(x): return x*x\n    ...\n    >>> p = Pool(4)\n    >>> result = p.map_async(f, range(10))\n    >>> print result.get(timeout=1)\n    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nWhen `dill` is installed, serialization is extended to most objects,\nfor example ::\n\n    >>> from multiprocess import Pool\n    >>> p = Pool(4)\n    >>> print p.map(lambda x: (lambda y:y**2)(x) + x, xrange(10))\n    [0, 2, 6, 12, 20, 30, 42, 56, 72, 90]\n\n\nMore Information\n----------------\nProbably the best way to get started is to look at the examples that are\nprovided within multiprocess.  See the examples directory for a set of\nexample scripts.  Please feel free to submit a ticket on github, or ask\na question on stackoverflow (@Mike McKerns).\n\nPathos is an active research tool. There are a growing number of publications\nand presentations that discuss real-world examples and new features of pathos\nin greater detail than presented in the user's guide.  If you would like to\nshare how you use pathos in your work, please post a link or send an email\n(to mmckerns at caltech dot edu).\n\n\nCitation\n--------\nIf you use pathos to do research that leads to publication, we ask that you\nacknowledge use of pathos by citing the following in your publication::\n\n    M.M. McKerns, L. Strand, T. Sullivan, A. Fang, M.A.G. Aivazis,\n    \"Building a framework for predictive science\", Proceedings of\n    the 10th Python in Science Conference, 2011;\n    http://arxiv.org/pdf/1202.1056\n\n    Michael McKerns and Michael Aivazis,\n    \"pathos: a framework for heterogeneous computing\", 2010- ;\n    http://trac.mystic.cacr.caltech.edu/project/pathos\n\nPlease see http://trac.mystic.cacr.caltech.edu/project/pathos or\nhttp://arxiv.org/pdf/1202.1056 for further information.\n", 
  "id": 37775115
}