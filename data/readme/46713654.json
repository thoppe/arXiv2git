{
  "read_at": 1462554292, 
  "description": "System to manage human-readable tables using files", 
  "README.md": "# Tabula\n*System to manage human-readable tables using files*\n\n\n[![Build Status](https://travis-ci.org/julianmendez/tabula.png?branch=master)](https://travis-ci.org/julianmendez/tabula)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/de.tu-dresden.inf.lat.tabula/tabula-parent/badge.svg)](http://search.maven.org/#search|ga|1|g%3A%22de.tu-dresden.inf.lat.tabula%22)\n\n\nTabula is a system to manage human-readable tables using files. It uses a specific type of file format that is similar to a [Java Properties](https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html#load-java.io.Reader-) file, but allows defining the same property for different objects.\n\n\n## Download\n\n* [executable JAR file](https://sourceforge.net/projects/latitude/files/tabula/0.1.0/tabula-0.1.0.jar/download)\n* [The Central Repository](https://repo1.maven.org/maven2/de/tu-dresden/inf/lat/tabula/)\n* as dependency:\n```xml\n<dependency>\n  <groupId>de.tu-dresden.inf.lat.tabula</groupId>\n  <artifactId>tabula-ext</artifactId>\n  <version>0.1.0</version>\n</dependency>\n```\n\n\n## Format\n\nThe Tabula format has *primitive types* and *composite types*. Unless something different is stated in the [release notes](https://github.com/julianmendez/tabula/blob/master/RELEASE-NOTES.md), the primitive types are:\n* `String`: any string without any newline (`'\\n'` 0x0A, `'\\r'` 0x0D), and not ending in backslash (`'\\'` 0x5C), neither in blanks (`'\\t'` 0x08, `' '` 0x20)  \n* `URI`: any valid Uniform Resource Identifier\n* `List_String`: list of space-separated words\n* `List_URI`: list of space-separated URIs\n\nWith this format it is possible to define one or many composite *types*. Each type is defined by its *fields*. The *instances* of each type are listed just after the type definition.\nThe name of a type or field can be any *identifier*. A identifier is a word that is not any of the reserved words: `type`, `def`, `new`, `id`.\nInstances can be identified by the field `id`.\n\nEach type is defined as follows:\n```properties\ntype = TYPE_NAME\n```\nwhere *TYPE_NAME* can be any identifier.\n\nEach type has its *fields*, defined as follow:\n```properties\ndef = \\\n FIELD_NAME_0:FIELD_TYPE_0 \\\n FIELD_NAME_1:FIELD_TYPE_1 \\\n...\n FIELD_NAME_n:FIELD_TYPE_n\n```\nwhere each *FIELD_NAME* can be any identifier,\nand each *FIELD_TYPE* can be any of the primitive types.\n\nThe order in which the instances are shown is defined as follows:\n```properties\norder = \\\n [-]FIELD_NAME_a_0 \\\n [-]FIELD_NAME_a_1 \\\n ...\n [-]FIELD_NAME_a_k\n```\nwhere the `-` is optional and used to denote reverse order. For example:\n```properties\norder = \\\n id \\\n -author\n``` \norders the instances by `id` (ascending) and then by author (descending).\n \nThe instances come just after the type definition, with the following syntax:\n```properties\nnew =\nFIELD_NAME_0 = VALUE_0\nFIELD_NAME_1 = VALUE_1\n...\nFIELD_NAME_n = VALUE_n\n```\nwhere each *FIELD_NAME* is one of the already declared field names in the type and each *VALUE* contains a String accoding to the field type.\n\nThe *values* can be any Tabula String. The blanks (`'\\t'` 0x08, `' '` 0x20) at the beginning and at the end are removed. To declare a multi-line value, each line must finish with backslash (`'\\'` 0x5C), except the last one. For the sake of simplicity there is no difference between a multi-line value or the concatenation of all those lines. This means that:\n```properties\nfield_name = \\\n a \\\n b \\\n c\n```\nis the same as\n```properties\nfield_name = a b c\n```\nHowever, the format will normalize and present them differently according to the declared type. Thus, the values of fields with type `List_String` and `List_URI` will be presented as multi-line values.\n\n\n## Example\n\nThis is an example of a library file. Each book record contains an identifier (`id`), a title (`title`), the authors (`authors`), a link to the abstract on the web (`web`), and a list of links to the documents (`documents`). This file is ordered by identifier.\n\n\n```properties\n# simple format 1.0.0\n\n\ntype = record \n\n\ndef = \\\n id:String \\\n title:String \\\n authors:List_String \\\n web:URI \\\n documents:List_URI\n\n\norder = \\\n id\n\n\nnew = \nid = arXiv:1412.2223\ntitle = A topological approach to non-Archimedean Mathematics\nauthors = \\\n Vieri_Benci \\\n Lorenzo_Luperi_Baglini\nweb = http://arxiv.org/abs/1412.2223\ndocuments = \\\n http://arxiv.org/pdf/1412.2223#pdf \\\n http://arxiv.org/ps/1412.2223#ps \\\n http://arxiv.org/format/1412.2223#other\n\n\nnew = \nid = arXiv:1412.3313\ntitle = Infinitary stability theory\nauthors = \\\n Sebastien_Vasey\nweb = http://arxiv.org/abs/1412.3313\ndocuments = \\\n http://arxiv.org/pdf/1412.3313#pdf \\\n http://arxiv.org/ps/1412.3313#ps \\\n http://arxiv.org/format/1412.3313#other\n\n\n```\n\nAn example like this one is used for the unit tests.\n\nFor example, the [MainTest](https://github.com/julianmendez/tabula/blob/master/tabula-core/src/test/java/de/tudresden/inf/lat/tabula/main/MainTest.java) class does the following steps:\n* read the [example file](https://github.com/julianmendez/tabula/blob/master/tabula-core/src/test/resources/example.properties)\n* add a new field `numberOfAuthors`\n* add to each record the number of authors \n* compare the [expected result](https://github.com/julianmendez/tabula/blob/master/tabula-core/src/test/resources/example-modified.properties)\n\n\n## Source code\n\nTo clone and compile the project:\n```\n$ git clone https://github.com/julianmendez/tabula.git\n$ cd tabula\n$ mvn clean install\n```\nThe created executable library, its sources, and its Javadoc will be in `tabula-distribution/target`.\n\nTo compile the project offline, first download the dependencies:\n```\n$ mvn dependency:go-offline\n```\nand once offline, use:\n```\n$ mvn --offline clean install\n```\n\nThe bundles uploaded to [Sonatype](https://oss.sonatype.org/) are created with:\n```\n$ mvn clean install -DperformRelease=true\n```\nand then on each module:\n```\n$ cd target\n$ jar -cf bundle.jar tabula-*\n```\nand on the main directory:\n```\n$ cd target\n$ jar -cf bundle.jar tabula-parent-*\n```\n\nThe version number is updated with:\n```\n$ mvn versions:set -DnewVersion=NEW_VERSION\n```\nwhere *NEW_VERSION* is the new version.\n\n\n## Author\n\n[Julian Mendez](http://lat.inf.tu-dresden.de/~mendez/)\n\n\n## License\n\nThis software is distributed under the [Apache License Version 2.0](https://www.apache.org/licenses/LICENSE-2.0.txt).\n\n\n## Release notes\n\nSee [release notes](https://github.com/julianmendez/tabula/blob/master/RELEASE-NOTES.md).\n\n## Contact\n\nIn case you need more information, please contact @julianmendez .\n\n\n", 
  "id": 46713654
}