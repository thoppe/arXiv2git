{
  "README": "smanifold, Copyright (C) 2009-2012, Stefan Sommer (sommer@diku.dk)\nhttps://github.com/nefan/smanifold.git\n\n--------------------------------------------------------------------------------\n\n    This file is part of smanifold.\n\n    smanifold is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    smanifold is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with smanifold.  If not, see <http://www.gnu.org/licenses/>.\n \n--------------------------------------------------------------------------------\n\nsmanifold v. 0.1.\n\nThe project website is https://github.com/nefan/smanifold.git\n\nStefan Sommer (sommer@diku.dk), May 2012.\n\nCredits:\nIf you use the code, please cite relevant articles from\n'http://image.diku.dk/sommer', e.g. the paper http://arxiv.org/abs/1008.1902\n\nLicense:\nEverything here is GPL.\n\nInstallation instructions:\nSee INSTALL file.\n\nDocumentation:\nExcept for this file, not existing :-)\n\nNews:\nMay 2012: v0.1 release.\n\n\nStructure:\nCode in the directory 'code'.\nExamples in the directory 'examples'.\nThird party code in the directory 'thirdparty'.\n\nThe functions Exp, Log, and LogInit created by ExpLogMaps constitute the\nexponential map, log map, and log map given initial (non-geodesic) curve\nrespectively. \n\nExamples:\nThe files 'surfacePGA.m' and 'quadraticPGA.m' in the examples/ directory\nproduces results equivalent to the ones found in the paper\nhttp://arxiv.org/abs/1008.1902\n\n\n\nVertebra stuff:\nWill be added if necessary - below info is in case this happens.\n\nmain file: runVertebra.m\n    does calls to the various computation steps being\n        runLoad() - load the data\n        create the manifold data structure and functions (Exp/Log maps)\n        runProjection() - project data from embedded space to manifold\n        runRegister() - center shapes and rotate\n        runMean() - compute mean of data\n        runPGA() - compute PGA\n\nThe list \"markers\" indicate the number of points on each segment between markers\npoints. \n\noutput format:\n    Note first that not all output is currently available, but will be added as\n    computations are completed.\n\n    Computation output is placed in subdirections of output/ . First level of\n    subdirectories describes the parameteters used in the computation in the\n    form\n        normalize-#1-tol-#2\n    Here #1 specifies which normalization method is used:\n        0 : no normalization,\n        1 : normalized to norm 1,\n        2 : normalized to have distance 1 between first and last point.\n    #2 specifies the tolerance, usually 0.01 for non-normalized data and 0.0001\n    for normalized data.\n\n    In each of those subdirectories reside three additional subdirectories being\n        projection/ - the samples projected onto the submanifold,\n        means/ - the computed intrinsic means,\n        PGA/ - the PGA/PCA computation data.\n    The contents of the projection/ directory is the same for all\n    computations.\n\n    All shapes are stored as column vectors in the format [x1, y1, x2, y2, ...].\n\n", 
  "read_at": 1462552228, 
  "description": "", 
  "id": 5411377
}