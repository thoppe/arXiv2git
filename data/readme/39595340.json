{
  "read_at": 1462546164, 
  "readme-template.txt": "Java Information Dynamics Toolkit (JIDT)\nCopyright (C) 2012-2014 Joseph T. Lizier\nCopyright (C) 2014-2015 Joseph T. Lizier and Ipek Ozdemir\n\nVersion @VERSION@ (see release notes below)\n\nJIDT provides a standalone, open source code Java implementation (usable in Matlab, Octave and Python) of information-theoretic measures of distributed computation in complex systems: i.e. information storage, transfer and modification.\n\nThis includes implementations for:\n- both discrete and continuous-valued variables, principally for the measures transfer entropy, mutual information and active information storage;\n- using various types of estimators (e.g. Kraskov-Stogbauer-Grassberger estimators, kernel estimation, linear-Gaussian).\n    \n=============\n   License\n=============\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n=============\n   Website\n=============\n\nFull information on the JIDT (usage, etc) is provided at the project page and wiki on google code:\n\nhttp://code.google.com/p/information-dynamics-toolkit/\n\n=============\nInstallation\n=============\n\n\"Full\" description of any required installation is at: http://code.google.com/p/information-dynamics-toolkit/wiki/Installation\n\nHowever, if you are reading this file, you've downloaded a distribution and you're halfway there!\n\nThere are no dependencies to download; unless:\n a. You don't have java installed - download it from http://www.java.com/\n b. You wish to build the project using the build.xml script - this requires ant: http://ant.apache.org/\n c. You wish to run the JUnit test cases - this requires JUnit: http://www.junit.org/ - for how to run JUnit with our ant script see http://code.google.com/p/information-dynamics-toolkit/wiki/JUnitTestCases\n\nThen just put the jar in a relevant location in your file structure.\n\nThat's it.\n\n=============\nDocumentation\n=============\n\nA research paper describing the toolkit is included in the top level directory -- \"InfoDynamicsToolkit.pdf\".\n\nA tutorial, providing background to the information-theoretic measures, various estimators, and then to the JIDT toolkit itself is included in the tutorial folder (see \"JIDT-TutorialSlides.pdf\" for the tutorial slides, and \"README-TutorialAndExercise.pdf\" for further description of the tutorial exercises).\n\nJavadocs for the toolkit are included in the full distribution at javadocs.\nThey can also be generated using \"ant javadocs\" (useful if you are on an SVN view).\nFurther, they will soon be posted on the web.\n\nThe project wiki also contains further information on various aspects; see http://code.google.com/p/information-dynamics-toolkit/ to start.\n\nFurther documentation is provided by the Usage demo examples below.\n\nYou can also join our email discussion group jidt-discuss at http://groups.google.com/d/forum/jidt-discuss\n\n=============\n    Usage\n=============\n\nSeveral sets of demonstration code are distributed with the toolkit:\n\n a. demos/AutoAnalyser -- a GUI tool to compute transfer entropy on a chosen data set with the toolkit, and also automatically generate code in Java, Python and Matlab to show how to do this calculation with the toolkit. See description at https://code.google.com/p/information-dynamics-toolkit/wiki/AutoAnalyser\n\n b. demos/java -- basic examples on easily using the Java toolkit -- run these from the shell scripts in this directory -- see description at http://code.google.com/p/information-dynamics-toolkit/wiki/SimpleJavaExamples\n\n c. Several demo sets mirror the SimpleJavaExamples to demonstrate the use of the toolkit in non-Java environments: \n \n   i. demos/octave -- basic examples on easily using the Java toolkit from Octave or Matlab environments -- see description at http://code.google.com/p/information-dynamics-toolkit/wiki/OctaveMatlabExamples\n \n   ii. demos/python -- basic examples on easily using the Java toolkit from Python -- see description at http://code.google.com/p/information-dynamics-toolkit/wiki/PythonExamples\n\n   iii. demos/r -- basic examples on easily using the Java toolkit from R -- see description at http://code.google.com/p/information-dynamics-toolkit/wiki/R_Examples\n\n   iv. demos/julia -- basic examples on easily using the Java toolkit from Julia -- see description at http://code.google.com/p/information-dynamics-toolkit/wiki/JuliaExamples\n\n   v. demos/clojure -- basic examples on easily using the Java toolkit from Clojure -- see description at http://code.google.com/p/information-dynamics-toolkit/wiki/Clojure_Examples\n\n d. demos/octave/CellularAutomata -- using the Java toolkit to plot local information dynamics profiles in cellular automata; the toolkit is run under Octave or Matlab -- see description at http://code.google.com/p/information-dynamics-toolkit/wiki/CellularAutomataDemos\n \n e. demos/octave/SchreiberTransferEntropyExamples -- recreates the transfer entropy examples in Schreiber's original paper presenting this measure; shows the correct parameter settings to reproduce these results  -- see description at http://code.google.com/p/information-dynamics-toolkit/wiki/SchreiberTeDemos\n \n f. demos/octave/DetectingInteractionLags -- demonstration of using the transfer entropy with source-destination lags; the demo is run under Octave or Matlab -- see description at http://code.google.com/p/information-dynamics-toolkit/wiki/DetectingInteractionLags\n\n g. demos/java/InterregionalTransfer -- higher level example using collective transfer entropy to infer effective connections between \"regions\" of data -- see description at http://code.google.com/p/information-dynamics-toolkit/wiki/InterregionalTransfer\n\n h. demos/octave/NullDistributions --  investigating the correspondence between analytic and bootstrapped distributions for TE and MI under null hypotheses of no relationship; the demo is run under Octave or Matlab -- see description at https://code.google.com/p/information-dynamics-toolkit/wiki/NullDistributions\n\n i. java/unittests -- the JUnit test cases for the Java toolkit are included in the distribution -- these case also be browsed to see simple use cases for the various calculators in the toolkit -- see description at http://code.google.com/p/information-dynamics-toolkit/wiki/JUnitTestCases\n\n=============\n  Citation\n=============\n\nPlease cite your use of this toolkit as:\n\nJoseph T. Lizier, \"JIDT: An information-theoretic toolkit for studying the dynamics of complex systems\", Frontiers in Robotics and AI 1:11, 2014; doi:10.3389/frobt.2014.00011\n\nA pre-print of this paper is distributed with this toolkit (InfoDynamicsToolkit.pdf) and is available at arXiv:1408.3270\n\n=============\n   Notices\n=============\n\nThis project includes modified files from the Apache Commons Math library -- http://commons.apache.org/proper/commons-math/\nThis Apache 2 software is now included as a derivative work in this GPLv3 licensed JIDT project, as per: http://www.apache.org/licenses/GPL-compatibility.html\nNotices and license for this software are found in the notices/commons-math directory.\n\nThe project includes adapted code from the JAMA project -- http://math.nist.gov/javanumerics/jama/\nNotices and license for this software are found in the notices/JAMA directory.\n\nThe project includes adapted code from the octave-java package of the Octave-Forge project -- http://octave.sourceforge.net/java/\nNotices for this software are found in the notices/JAMA directory.\n\n===============\n Release notes\n===============\n\nv1.3 10/7/2015 at r691\n----------------------\nAdded AutoAnalyser (Code Generator) GUI demo for MI and TE;\nAdded auto-embedding capability via Ragwitz criteria for AIS and TE calculators (KSG estimators);\nAdded Java demo 9 for showcasing use of Ragwitz auto-embedding;\nAdding small amount of noise to data in all KSG estimators now by default (may be disabled via setProperty());\nAdded getProperty() methods for all conditional MI and TE calculators;\nUpgraded Python demos for Python 3 compatibility;\nFixed bias correction on mixed discrete-continuous KSG calculators;\nUpdated the tutorial slides to those in use for ECAL 2015 JIDT tutorial;\n\nv1.2.1 12/2/2015 at r621\n------------------------\nAdded tutorial slides, description of exercises and sample exercise solutions;\nMade jar target Java 1.6;\nAdded Schreiber TE heart-breath rate with KSG estimator demo code for Python.\n\nv1.2 28/1/2015 at r601\n-----------------------\nDynamic correlation exclusion, or Theiler window, added to all Kraskov estimators;\nAdded univariate MI calculation to simple demo 6;\nAdded Java code for Schreiber TE heart-breath rate with KSG estimator, ready for use as a template in Tutorial;\nPatch for crashes in KSG conditional MI algorithm 2;\n\nv1.1 14/11/2014 at r576\n-----------------------\nImplemented Fast Nearest Neighbour Search for Kraskov-Stogbauer-Grassberger (KSG) estimators for MI, conditional MI, TE, conditional TE, AIS, Predictive info, and multi-information. This includes a general (multivariate) k-d tree implementation;\nAdded multi-threading (using all available processors by default) for the KSG estimators -- code contributed by Ipek Ozdemir;\nAdded Predictive information / Excess entropy implementations for KSG, kernel and Gaussian estimators;\nAdded R, Julia, and Clojure demos;\nAdded Windows batch files for the Simple Java Demos;\nAdded property for adding a small amount of noise to data in all KSG estimators;\n\n\nv1.0 14/8/2014 at r434\n----------------------\nAdded the draft of the paper on the toolkit to the release;\nJavadocs made ready for release;\nSwitched source->destination arguments for discrete TE calculators to be with source first in line with continuous calculators;\nRenamed all discrete calculators to have Discrete suffix -- TE and conditional TE calculators also renamed to remove \"Apparent\" prefix and change \"Complete\" to \"Conditional\";\nKraskov estimators now using 4 nearest neighbours by default;\nUnit test for Gaussian TE against ChaLearn Granger causality measurement;\nAdded Schreiber TE demos; Interregional transfer demos; documentation for Interaction lag demos; added examples 7 and 8 to Simple Java demos;\nAdded property to add noise to data for Kraskov MI;\nAdded derivation of Apache Commons Math code for chi square distribution, and included relevant notices in our release;\nInserted translation class for arrays between Octave and Java;\nAdded analytic statistical significance calculation to Gaussian calculators and discrete TE;\nCorrected Kraskov algorithm 2 for conditional MI to follow equation in Wibral et al. 2014.\n\n\nv0.2.0 20/4/2014 at r284\n------------------------\nRearchitected (most) Transfer Entropy and Multivariate TE calculators to use an underlying conditional mutual information calculator, and have arbitrary embedding delay, source-dest delay;\nthis includes moving Kraskov-Grassberger Transfer Entropy calculator to use a single conditional mutual information estimator instead of two mutual information estimators;\nRearchitected (most) Active Information Storage calculators to use an underlying mutual information calculator;\nAdded Conditional Transfer Entropy calculators using underlying conditional mutual information calculators;\nMoved mixed discrete-continuous calculators to a new \"mixed\" package;\nbug fixes. \n\nv0.1.4 11/9/2013 at r241\n------------------------\nadded scripts to generate CA figures for 2013 book chapters;\nadded general Java demo code;\nadded Python demo code;\nmade Octave/Matlab demos and CA demos properly compatible for Matlab;\nadded extra Octave/Matlab general demos;\nadded more unit tests for MI and conditional MI calculators, including against results from Wibral's TRENTOOL;\nbug fixes. \n\nv0.1.3 13/1/2013 at r151\n------------------------\nexisting Octave/Matlab demo code made compatible with Matlab;\nseveral bug fixes, including using max norm by default in Kraskov calculator (instead of requiring this to be set explicitly);\nmore unit tests (including against results from Kraskov's own MI implementation) \n\nv0.1.2 19/11/2012 at r116\n-------------------------\nIncludes demo code for two newly submitted papers\n\nv0.1.1 31/10/2012 at r104\n------------------------\nNo notes\n\nv0.1 24/10/2012 at r65?\n------------------------\nFirst distribution\n\n=============\n\nJoseph T. Lizier, @DATE@\n\n", 
  "description": "JIDT: Java Information Dynamics Toolkit for studying information-theoretic measures of computation in complex systems", 
  "README.md": "# Java Information Dynamics Toolkit (JIDT)\n\nCopyright (C) 2012-2014 [Joseph T. Lizier](http://lizier.me/joseph/); 2014-2015 [Joseph T. Lizier](http://lizier.me/joseph/) and Ipek Ozdemir\n\n*JIDT* provides a stand-alone, open-source code Java implementation (also usable in [Matlab, Octave](../../wiki/UseInOctaveMatlab), [Python](../../wiki/UseInPython), [R](../../wiki/UseInR), [Julia](../../wiki/UseInJulia) and [Clojure](../../wiki/UseInClojure)) of information-theoretic measures of distributed computation in complex systems: i.e. information storage, transfer and modification.\n\nJIDT includes implementations:\n * principally for the measures **transfer entropy**, **mutual information**, and their conditional variants, as well as **active information storage**, entropy, etc;\n * for both _discrete_ and _continuous_-valued data;\n * using various types of estimators (e.g. _Kraskov-Stogbauer-Grassberger estimators_, _box-kernel estimation_, _linear-Gaussian_),\nas described in full at ImplementedMeasures.\n\nJIDT is distributed under the [GNU GPL v3 license](http://www.gnu.org/licenses/gpl.html) (or later).\n\n# Getting started\n\n 1. [Download](../../wiki/Downloads) and [Installation](../../wiki/Installation) is very easy!\n   1. _Quick start_: download the latest [v1.3 full distribution](http://lizier.me/joseph/software/jidt/download.php?file=infodynamics-dist-1.3.zip) (suitable for all platforms) and see the readme.txt file therein.\n 1. [Documentation](../../wiki/Documentation) including: the paper describing JIDT at [arXiv:1408.3270](http://arxiv.org/abs/1408.3270) (distributed with the toolkit), a [Tutorial](../../wiki/Tutorial), and [Javadocs (v1.3 here)](http://lizier.me/joseph/software/jidt/javadocs/v1.3/);\n 1. [Demos](../../wiki/Demos) are included with the full distribution, including a [GUI app](../../wiki/AutoAnalyser) for automatic analysis and code generation, [simple java demos](../../wiki/SimpleJavaExamples) and [cellular automata (CA) demos](../../wiki/CellularAutomataDemos).\n  1. These Java tools can easily be used in [Matlab/Octave](../../wiki/OctaveMatlabExamples), [Python](../../wiki/PythonExamples), [R](../../wiki/R_Examples), [Julia](../../wiki/JuliaExamples) and [Clojure](../../wiki/Clojure_Examples)! (click on each language here for examples)\n\nFor further information or announcements:\n * Join our discussion group: http://groups.google.com/d/forum/jidt-discuss\n * See also the [FAQs](../../wiki/FAQs)\n * Follow [@infodynamicstkt](http://twitter.com/infodynamicstkt) on twitter\n\n# Citation\n\nPlease **cite** your use of this toolkit as:\n\nJoseph T. Lizier, \"JIDT: An information-theoretic toolkit for studying the dynamics of complex systems\", _Frontiers in Robotics and AI_ 1:11, 2014; doi:[10.3389/frobt.2014.00011](http://dx.doi.org/10.3389/frobt.2014.00011) (pre-print: [arXiv:1408.3270](http://arxiv.org/abs/1408.3270))\n\nAnd please [let me know](mailto:joseph.lizier_AT_gmail.com) about any publications resulting from its use!\n\nSee other [PublicationsUsingThisToolkit](../../wiki/PublicationsUsingThisToolkit).\n\n# News\n\n_19/7/2015_ - New jar and full distribution files available for **release v1.3**; Changes for v1.3 include:\nAdded AutoAnalyser (Code Generator) GUI demo for MI and TE;\nAdded auto-embedding capability via Ragwitz criteria for AIS and TE calculators (KSG estimators);\nAdded Java demo 9 for showcasing use of Ragwitz auto-embedding;\nAdding small amount of noise to data in all KSG estimators now by default (may be disabled via setProperty());\nAdded getProperty() methods for all conditional MI and TE calculators;\nUpgraded Python demos for Python 3 compatibility;\nFixed bias correction on mixed discrete-continuous KSG calculators;\nUpdated the tutorial slides to those in use for ECAL 2015 JIDT tutorial.\n\n_12/2/2015_ - New jar and full distribution files available for **release v1.2.1**; Changes for v1.2.1 include:\nAdded tutorial slides, description of exercises and sample exercise solutions;\nMade jar target Java 1.6;\nAdded Schreiber TE heart-breath rate with KSG estimator demo code for Python.\n\n_28/1/2015_ - New jar and full distribution files available for **release v1.2**; Changes for v1.2 include:\nDynamic correlation exclusion, or Theiler window, added to all Kraskov estimators;\nAdded univariate MI calculation to simple demo 6;\nAdded Java code for Schreiber TE heart-breath rate with KSG estimator, ready for use as a template in Tutorial;\nPatch for crashes in KSG conditional MI algorithm 2.\n\n_20/11/2014_ - New jar and full distribution files available for **release v1.1**; Changes for v1.1 include:\nImplemented Fast Nearest Neighbour Search for Kraskov-Stogbauer-Grassberger (KSG) estimators for MI, conditional MI, TE, conditional TE, AIS, Predictive info, and multi-information. This includes a general (multivariate) k-d tree implementation;\nAdded multi-threading (using all available processors by default) for the KSG estimators -- code contributed by Ipek Ozdemir;\nAdded Predictive information / Excess entropy implementations for KSG, kernel and Gaussian estimators;\nAdded R, Julia, and Clojure demos;\nAdded Windows batch files for the Simple Java Demos;\nAdded property for adding a small amount of noise to data in all KSG estimators;\n\n_15/8/2014_ JIDT paper finalised and uploaded to the website and [arXiv:1408.3270](http://arxiv.org/abs/1408.3270)\n\n_14/8/2014_ - New jar and full distribution files available for our **first official release, v1.0**; Changes for v1.0 include: Added the draft of the paper on the toolkit to the release;\nJavadocs made ready for release;\nSwitched source->destination arguments for discrete TE calculators to be with source first in line with continuous calculators;\nRenamed all discrete calculators to have Discrete suffix -- TE and conditional TE calculators also renamed to remove \"Apparent\" prefix and change \"Complete\" to \"Conditional\";\nKraskov estimators now using 4 nearest neighbours by default;\nUnit test for Gaussian TE against ChaLearn Granger causality measurement;\nAdded Schreiber TE demos; Interregional transfer demos; documentation for Interaction lag demos; added examples 7 and 8 to Simple Java demos;\nAdded property to add noise to data for Kraskov MI;\nAdded derivation of Apache Commons Math code for chi square distribution, and included relevant notices in our release;\nInserted translation class for arrays between Octave and Java;\nAdded analytic statistical significance calculation to Gaussian calculators and discrete TE;\nCorrected Kraskov algorithm 2 for conditional MI to follow equation in Wibral et al. 2014.\n\n_20/4/2014_ - New jar and full distribution files available for v0.2.0; Moved downloads to http://lizier.me/joseph/ since google code has stopped the download facility here :(. Changes for v0.2.0 include: Rearchitected (most) Transfer Entropy and Multivariate TE calculators to use an underlying conditional mutual information calculator, and have arbitrary embedding delay, source-dest delay; this includes moving Kraskov-Grassberger Transfer Entropy calculator to use a single conditional mutual information estimator instead of two mutual information estimators; Rearchitected (most) Active Information Storage calculators to use an underlying mutual information calculator; Added Conditional Transfer Entropy calculators using underlying conditional mutual information calculators; Moved mixed discrete-continuous calculators to a new \"mixed\" package; bug fixes.\n\n_11/9/2013_ - New jar and full distribution files available for v0.1.4; added scripts to generate CA figures for 2013 book chapters; added general Java demo code; added Python demo code; made Octave/Matlab demos and CA demos properly compatible for Matlab; added extra Octave/Matlab general demos; added more unit tests for MI and conditional MI calculators, including against results from Wibral's TRENTOOL; bug fixes.\n\n_11/9/2013_ - New CA demo scripts for several review book chapters we're preparing in 2013 have been uploaded - see [CellularAutomataDemos](../../wiki/CellularAutomataDemos).\n\n_4/6/2013_ - Added instructions on how to [use in python](../../wiki/UseInPython) and several [PythonExamples](../../wiki/PythonExamples).\n\n_13/01/2013_ - New jar and full distribution files available for v0.1.3; existing Octave/Matlab demo code made compatible with Matlab; several bug fixes, including using max norm by default in Kraskov calculator (instead of requiring this to be set explicitly); more unit tests (including against results from Kraskov's own MI implementation)\n\n_19/11/2012_ - New jar and full distribution files available for v0.1.2, including demo code for two newly submitted papers\n\n_31/10/2012_ - Jar and full distribution files available for v0.1.1 (first distribution)\n\n_7/5/2012_ - JIDT project created and code uploaded\n", 
  "id": 39595340
}