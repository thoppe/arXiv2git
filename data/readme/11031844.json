{
  "read_at": 1462551092, 
  "description": "serialize all of python", 
  "README.md": "dill\n====\nserialize all of python\n\nAbout Dill\n----------\nDill extends python's 'pickle' module for serializing and de-serializing\npython objects to the majority of the built-in python types. Serialization\nis the process of converting an object to a byte stream, and the inverse\nof which is converting a byte stream back to on python object hierarchy.\n\nDill provides the user the same interface as the 'pickle' module, and\nalso includes some additional features. In addition to pickling python\nobjects, dill provides the ability to save the state of an interpreter\nsession in a single command.  Hence, it would be feasable to save a\ninterpreter session, close the interpreter, ship the pickled file to\nanother computer, open a new interpreter, unpickle the session and\nthus continue from the 'saved' state of the original interpreter\nsession.\n\nDill can be used to store python objects to a file, but the primary\nusage is to send python objects across the network as a byte stream.\nDill is quite flexible, and allows arbitrary user defined classes\nand funcitons to be serialized.  Thus dill is not intended to be\nsecure against erroneously or maliciously constructed data. It is\nleft to the user to decide whether the data they unpickle is from\na trustworthy source.\n\nDill is part of pathos, a python framework for heterogeneous computing.\nDill is in active development, so any user feedback, bug reports, comments,\nor suggestions are highly appreciated.  A list of known issues is maintained\nat http://trac.mystic.cacr.caltech.edu/project/pathos/query, with a public\nticket list at https://github.com/uqfoundation/dill/issues.\n\n\nMajor Features\n--------------\nDill can pickle the following standard types::\n\n* none, type, bool, int, long, float, complex, str, unicode,\n* tuple, list, dict, file, buffer, builtin,\n* both old and new style classes,\n* instances of old and new style classes,\n* set, frozenset, array, functions, exceptions\n\nDill can also pickle more 'exotic' standard types::\n\n* functions with yields, nested functions, lambdas\n* cell, method, unboundmethod, module, code, methodwrapper,\n* dictproxy, methoddescriptor, getsetdescriptor, memberdescriptor,\n* wrapperdescriptor, xrange, slice,\n* notimplemented, ellipsis, quit\n\nDill cannot yet pickle these standard types::\n\n* frame, generator, traceback\n\nDill also provides the capability to::\n\n* save and load python interpreter sessions\n* save and extract the source code from functions and classes\n* interactively diagnose pickling errors\n\n\nCurrent Release\n---------------\nThe latest stable release of dill is available from::\n    http://trac.mystic.cacr.caltech.edu/project/pathos\n\nor::\n    https://github.com/uqfoundation/dill/releases\n\nor also::\n    https://pypi.python.org/pypi/dill\n\nDill is distributed under a 3-clause BSD license.\n\n\nDevelopment Version\n-------------------\nYou can get the latest development version with all the shiny new features at::\n    https://github.com/uqfoundation\n\nFeel free to fork the github mirror of our svn trunk.  If you have a new\ncontribution, please submit a pull request.\n\n\nMore Information\n----------------\nProbably the best way to get started is to look at the tests that are\nprovide within dill. See `dill.tests` for a set of scripts that demonstrate\ndill's ability to serialize different python objects.  Since dill conforms\nto the 'pickle' interface, the examples and documentation at\nhttp://docs.python.org/library/pickle.html also apply to dill if one will\n`import dill as pickle`. The source code is also generally well documented,\nso further questions may be resolved by inspecting the code itself. Please\nalso feel free to submit a ticket on github, or ask a question on\nstackoverflow (@Mike McKerns).\n\nDill is an active research tool. There are a growing number of publications\nand presentations that discuss real-world examples and new features of dill\nin greater detail than presented in the user's guide.  If you would like to\nshare how you use dill in your work, please post a link or send an email\n(to mmckerns at caltech dot edu).\n\n\nCitation\n--------\nIf you use dill to do research that leads to publication, we ask that you\nacknowledge use of dill by citing the following in your publication::\n\n    M.M. McKerns, L. Strand, T. Sullivan, A. Fang, M.A.G. Aivazis,\n    \"Building a framework for predictive science\", Proceedings of\n    the 10th Python in Science Conference, 2011;\n    http://arxiv.org/pdf/1202.1056\n\n    Michael McKerns and Michael Aivazis,\n    \"pathos: a framework for heterogeneous computing\", 2010- ;\n    http://dev.danse.us/trac/pathos\n\nPlease see http://trac.mystic.cacr.caltech.edu/project/pathos or\nhttp://arxiv.org/pdf/1202.1056 for further information.\n\n", 
  "id": 11031844
}