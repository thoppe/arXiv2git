{
  "read_at": 1462546471, 
  "description": "Hilbert Curve", 
  "Readme.md": "Hilbert Curve\n=============\n\nHilbert cube\n\n![Hilbert Cube](images/cube.png)\n\n\nDragon curve\n\n![Dragon curve](images/dragon.png)\n\n\nWithout spacing between, using it to choose colours\n\n![all of them](images/hilbert.png)\n\n\nWatch it draw\n\n![watch it draw](images/hilbert.gif)\n\n\nWatch it draw again, this one looks more like a Hilbert curve b/c I spaced the vertices.\n\n![watch it draw 2](images/hilbert3.gif)\n\n\n32 Segment curve\n\n![32 segment curve](images/32-segment-curve.gif)\n\n\nSquare curve\n\n![Square curve](images/square1.png)\n\n![Square curve](images/square2.png)\n\nResources\n---------\n\n* Paper on 3d Hilbert curves [http://arxiv.org/pdf/1109.2323v1.pdf](http://arxiv.org/pdf/1109.2323v1.pdf)\n* Representing a 3d Hilbert curve as an Lsystem [http://math.stackexchange.com/questions/123642/representing-a-3d-hilbert-curve-as-an-l-system](http://math.stackexchange.com/questions/123642/representing-a-3d-hilbert-curve-as-an-l-system)\n  This is the definition I actually used\n\n  ```javascript\n  lsystem Hilbert3D {\n\n      set iterations = 3;\n      set symbols axiom = X;\n\n      interpret F as DrawForward(10);\n      interpret + as Yaw(90);\n      interpret - as Yaw(-90);\n      interpret ^ as Pitch(90);\n      interpret & as Pitch(-90);\n      interpret > as Roll(90);\n      interpret < as Roll(-90);\n      rewrite X to ^ < X F ^ < X F X - F ^ > > X F X & F + > > X F X - F > X - >;\n  }\n  ```\n* Hilbert curves you can draw [https://bentrubewriter.wordpress.com/2012/04/26/fractals-you-can-draw-the-hilbert-curve-or-what-the-labyrinth-really-looked-like/](https://bentrubewriter.wordpress.com/2012/04/26/fractals-you-can-draw-the-hilbert-curve-or-what-the-labyrinth-really-looked-like/)\n  Provides Lsystems for a number of different 2d curves:\n  * Hilbert\n    - Axiom: A\n    - A -> - B F + A F A + F B -\n    - B -> + A F - B F B - F A +\n  * Sierpinski Triangle\n    - Axiom A\n    - A -> B-A-B\n    - B -> A+B+A\n    - In this case we rotate 60 degrees with every turn, and A and B are both used to mean draw a line forward\n  * Koch Curve\n    - Axiom F++F++F\n    - F -> F-F++F-F\n    - Use 60 degree turns\n  * Dragon Curve L-System:\n    - Axiom: FX\n    - X -> X+YF\n    - Y -> FX-Y\n    - Use 90 degree turns\n  * Quadratic Fractal:\n    - Axiom: F+F+F+F\n    - F -> F+F-F\n    - Use 90 degree turns\n  * Koch Curve Variant:\n    - Axiom = F\n    - F -> F+F-F-F+F\n    - Use 90 degree turns\n  * Fractal Plant:\n    - Axiom: X\n    - X -> F-[[X]+X]+F[+FX]-X\n    - F -> FF\n    - Use 25 degree turns. When you encounter a '[' save the current angle and position\n      and restore when you see ']'. This is an example of a recursive L-System.\n* A bunch of 2d curves, plus some code for Hilbert in Mathematmica [http://mathforum.org/advanced/robertd/lsys2d.html](http://mathforum.org/advanced/robertd/lsys2d.html)\n  - Koch curve (F -> F+F--F+F, 60deg):\n  - 32-segment curve (F -> -F+F-F-F+F+FF-F+F+FF+F-F-FF+FF-FF+F+F-FF-F-F+FF-F-F+F+F-F+)\n  - Hilbert curve (L -> +RF-LFL-FR+, R -> -LF+RFR+FL-)\n  - Arrowhead curve (X -> YF+XF+Y, Y -> XF-YF-X, 60deg)\n  - Dragon curve (X -> X+YF+, Y -> -FX-Y)\n  - Hilbert curve II (X -> XFYFX+F+YFXFY-F-XFYFX, Y -> YFXFY-F-XFYFX+F+YFXFY)\n  - Peano-Gosper curve (X -> X+YF++YF-FX--FXFX-YF+, Y -> -FX+YFYF++YF+FX--FX-Y, 60deg)\n  - Peano curve (F -> F+F-F-F-F+F+F+F-F)\n  - Quadratic Koch island (F -> F-F+F+FFF-F-F+F)\n  - Square curve (X -> XF-F+F-XF+F+XF-F+F-X)\n  - Sierpinski triangle (F -> FF, X -> --FXF++FXF++FXF--, 60deg)\n* The algorithmic beauty of plants [http://algorithmicbotany.org/papers/#abop](http://algorithmicbotany.org/papers/#abop)\n* Someone's 3d Hilbert curve for Processing [http://martinpblogformasswritingproject.blogspot.com/2011/06/3d-hilbert-fractal-in-pyprocessing.html](http://martinpblogformasswritingproject.blogspot.com/2011/06/3d-hilbert-fractal-in-pyprocessing.html)\n* Someone's 3d Hilbert curve for Mathematica [http://robertdickau.com/lsys3d.html](http://robertdickau.com/lsys3d.html)\n* Some nice 2d Hilbert curve results [https://lustrebox.wordpress.com/2012/06/17/fractals/](https://lustrebox.wordpress.com/2012/06/17/fractals/)\n\nLicense\n-------\n\n[Just do what the fuck you want to](http://www.wtfpl.net/about/)\n", 
  "id": 40011450
}