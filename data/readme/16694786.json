{
  "read_at": 1462543140, 
  "description": "Recommendation engine for scholarly articles", 
  "README.md": "scholarec\n=========\nRecommendation of Scholarly Works \n---------------------------------\n\n[![Build Status](https://travis-ci.org/arcolife/scholarec.png?branch=master)](https://travis-ci.org/arcolife/scholarec)\n[![Dependency Status](https://gemnasium.com/arcolife/scholarec.png)](https://gemnasium.com/arcolife/scholarec)\n[![Zenodo DOI for github](https://zenodo.org/badge/4244/arcolife/scholarec.png)](http://dx.doi.org/10.5281/zenodo.10265)\n\nThis software has been built due to a need felt for a proper \nrecommendation system for publicly available scholarly/research works. \n\nIt classifies documents and uses personalization features and content-based algorithm to \nsuggest/recommend similar ones, possibly of interest to the user. \n\n_Note:_ Currently, full-functionality is offered by combining this package and another one, \n\tthat offeres web interface (Django-based). \t\n- [arcolife/django-scholarec](https://github.com/arcolife/django-scholarec \"django-scholarec\")\n\n> *Inspired from an older project* [researchlei](http://cs.stanford.edu/people/karpathy/researchlei/ \"BSD Licensed\")\n\n***\n\n**Installation**\n\n* Option 1: Install package only..\n```\n    $ pip install scholarec\n``` \n- Test through:\n```\n    $ python -m scholarec\n```\n\n* Option 2: clone this repository..\n\n```\n    $ git clone https://github.com/arcolife/scholarec.git\n    $ cd scholarec/\n    $ sh setup.sh\n```\n- See INSTALL for detailed instructions.\n\n**Test**\n\n* To see if the scripts runs without error:\n```\n    $ ./tests/run-tests.sh\n    $ ./tests/test.py\n```\n\n* Optionally, to test if installed, look for a description on executing:\n```\n    $ python -m scholarec\n```\n\n**Usage**\n\n* To use the module in a Python script, simply import:\n```python\n    import scholarec\n```\n\n* To check a sample run output, open log/sample_run.txt\n\n* To go for a sample run:\n\n```\n    $ ./tests/query_parse\n```\n\nNote: For developing a small database from arXiv, you need to run \nthe query_parse script and accept \"Extract PDF\" option for extracting \nrelated pdf's, converting them to plain text and extracting interesting \nwords that would later be used for recommendations and suggestions.\n\n\n* A simple arXiv API call can be achieved by executing the following sample code:\n```python          \nimport scholarec\nfrom scholarec.base.arxiv import DocumentArXiv\nurl = \"http://export.arxiv.org/api/query?search_query=all:%22higgs%22&start=0&max_results=2\"\nfrom urllib2 import urlopen\nquery_xml = urlopen(url)\ndoc = DocumentArXiv(query_xml)\ndata_dict = doc.extract_tags()\nfor entry_id in data_dict.keys():\n    print \"ID: %s\" % (entry_id)\n    print(data_dict[entry_id]), \"\\n\"\n```\n        \n***\n\n**FAQ**\n\nQ. What data interchange file formats have been used?\n\nA. Data conversion from XML to JSON as well as in XML itself.\n\n\nQ. What are the Data sources? \n\nA. Dataset currently taken from arXiv. Future: DBLP/Google Scholar. \n\n\nQ. How is the Data dealt with?\n\nA. ElasticSearch/MongoDB for search and storage\n\n***\n\n**LICENSE**\n\n[![GPL V3](http://www.gnu.org/graphics/gplv3-127x51.png)](http://www.gnu.org/licenses/gpl-3.0-standalone.html)", 
  "id": 16694786
}