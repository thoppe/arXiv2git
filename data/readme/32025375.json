{
  "read_at": 1462544871, 
  "description": "Tool to generate correlation functions & power spectra from a galaxy catalogue.", 
  "README.md": "## DESCRIPTION\n\nZelda is a command-line tool to extract correlation functions in velocity\nspace from a galaxy catalogue. Being modular and extendible, Zelda can\nbe generalized to produce power spectra and to work in position\nspace as well.\n\nThe original contributors (Guido W. Pettinari, Alicia Bueno Belloso and\nNikolai Meures) wrote Zelda to analyze the infall velocity of isolated\ngalaxy pairs in the Millennium simulation, a project in collaboration\nwith Will Percival that led to the publication of a paper \n(http://arxiv.org/abs/1204.5761).\n\nZelda is written in C. Its structure is modular and flexible, and it was heavily\ninspired by that of the cosmological Boltzmann code CLASS (http://class-code.net/).\n\nZelda is a parallel code, via the OpenMP standard. Therefore, it can use all the\ncores in a single node, but it cannot span multiple nodes. Set the number of\ncores you want to use on the command line via the environment variable\n`OMP_NUM_THREADS`. For example, if you run Zelda on a laptop with 8 cores\non a bash shell, you might want to execute `export OMP_NUM_THREADS=8` before\nrunning Zelda.\n\n\n## CONTRIBUTE!\n\nZelda is now open source. The whole project is hosted on a public repository\non Github, at the following link:\n\nhttps://github.com/coccoinomane/zelda\n\nFeel free to download the code, test it, and modify it! If you want to\nshare your modifications, we are happy to make you a collaborator of\nthe project, or to accept pull requests. \n\n\n## INSTALLATION\n\nZelda can be installed using GNU make. Personalise the 'makefile' if\nyou want to use a C compiler different from the default GCC. To compile,\njust run 'make all'.\n\nIf that does not work, try first running `make clean` and then again\n`make all`. If that does not work either, make sure that you have installed\nthe OPENMP library. If after installing OPENMP, it still does not work,\nspecify the location of the OPENMP library in the makefile, for example by\nadding it to LDFLAGS using the -L flag (for example,\n`LDFLAGS = -L//usr/local/lib -lgomp`).\n\nIf you are desperate, feel free to email us by using the contact section below :-)\n\n\n## QUICK START\n\nYou can test Zelda with a simple task by running\n\n`./zelda params_quickstart.ini`\n\nZelda will perform a quick computation of the pairwise velocity statistics\nfrom a subsample of the Millennieum simulation of side 62.5 Mpc; the catalogue\nfile is part of the package and is contained in the 'test_data' folder.\n\nThe result will be stored in the Zelda directory under the name\n`results_millennium_small.dat`. To plot it in gnuplot, just run:\n\n    set log x\n    plot \"results_millennium_small.dat\" u 2:4:($4-$6/sqrt($3)):($4+$6/sqrt($3)) with yerr\n\n\n## SHORT USER GUIDE\n\nZelda takes as input a parameter file with a list of 'key = value' settings.\nThe parameter file has to be text-only and usually has a non-mandatory .ini\nextension. For example, you could make a test run of Zelda with\n\n`./zelda params_quickstart.ini`\n\nThe most important file for a new user is params_explanatory.ini. It is a\nparameter file with a documented list of all the parameters in Zelda.\nThe file can be also used as a template for creating your custom parameter files.\n\nThe directory structure of Zelda is important to learn how the code works:\n\n* The 'source' directory contains the main source files in C. Each file\ncorresponds to a module in Zelda.\n\n* The 'tool' directory contains accessory source files in C with\npurely numerical functions or utility functions.\n\n* The 'main' directory contains the main source files, i.e. the executable\nfiles, including zelda.c.\n\n* The 'python' directory contains Python scripts to launch Zelda, including\nthe Zelda wrapper (zelda.py), the batch script (zelda_script.py) and a\nrebinning function.\n\n* The 'include' directory contains the declaration files (.h) for all the\nC files in the 'source', 'main' and 'tools' directories.\n\n* The 'scripts' directory contains accessory script files in bash or \nother scripting languages. For example, to fetch catalogues from\nremote servers (e.g. the Millennium simulation server) or handling\ncatalogue files.\n\n* The 'test' directory contains executable programs to test the outputs\nof Zelda.\n\n\n## CREDITS\n\nWe wish to thank Julien Lesgourgues, Thomas Tram and Diego Blas for creating\nCLASS! Without CLASS, Zelda would not exist as it uses the same modular structure\nand error system.\n\n\n## CONTACT\n\nPlease contact us if you need any help installing or running the code! Our\ncontacts are:\n\nGuido Walter Pettinari (<guido.pettinari@gmail.com>)\nAlicia Bueno Belloso (<alicia.bueno.belloso@gmail.com>)\n\nMake sure to check Zelda's repository for news and updates:\n\nhttps://github.com/coccoinomane/zelda\n\n\n\n", 
  "id": 32025375
}