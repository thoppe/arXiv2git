{
  "read_at": 1462554971, 
  "description": "NER system based on stack LSTMs", 
  "README.md": "## Transition-based NER system.\n\nThis system is part of a paper accepted at NAACL-HLT 2016 Conference.\nSee the paper here: http://arxiv.org/pdf/1603.01360v1.pdf\n\n#### Desired labeling\n\n    John Smith went to Pittsburgh .\n     PER-----   O    O  LOC       O\n\nCorresponding sequence of operations (generated by `convert-conll2trans.pl`)\n\n    SHIFT\n    SHIFT\n    REDUCE(PER)\n    OUT\n    OUT\n    SHIFT\n    REDUCE(LOC)\n    OUT\n\n#### Data structures\n\n * **buffer** - sequence of tokens, read from left to right\n * **stack** - working memory\n * **output buffer** - sequence of labeled segments constructed from left to right\n\n#### Operations\n\n * `SHIFT` - move word from **buffer** to top of **stack**\n * `REDUCE(X)` - all words on **stack** are popped, combined to form a segment and labeled with `X` and copied to **output buffer**\n * `OUT` - move one token from **buffer** to **output buffer**\n\n#### Dataset & Preprocessing\n\nDatasets are in /usr0/home/kkawakam/conll2003\n\nConvert conll format to ner action (convert-conll2trans.pl) and convert it to parser friendly format (conll2parser.py).  \n\n```bash\n   perl convert-conll2trans.pl conll2003/train > conll2003/train.trans\n   python conll2parser.py -f conll2003/train.trans > conll2003/train.parser \n```\n\n#### Training\n\n    ./lstm-parse -T /usr0/home/kkawakam/conll2003/train.parser -d /usr0/home/kkawakam/conll2003/dev.parser --hidden_dim 100 --lstm_input_dim 100 -w /usr3/home/lingwang/chris/sskip.100.vectors --pretrained_dim 100 --rel_dim 20 --action_dim 20 --input_dim 100 -t -S -D 0.3 > logNERYesCharNoPosYesEmbeddingsD0.3.txt &\n\n\n### Decoding \n\n\n    ./lstm-parse -T /usr0/home/kkawakam/conll2003/train.parser -d /usr0/home/kkawakam/conll2003/test.parser --hidden_dim 100 --lstm_input_dim 100 -w /usr3/home/lingwang/chris/sskip.100.vectors --pretrained_dim 100 --rel_dim 20 --action_dim 20 --input_dim 100 -m latest_model -S > output.txt\n    python attach_prediction.py -p output.txt -t /usr0/home/kkawakam/conll2003/test -o evaloutput.txt\n\n\n#### Evaluation\n\nAttach your prediction to test file\n\n```bash\n  python attach_prediction.py -p (prediction) -t /path/to/conll2003/test -o (output file)\n  ./conlleval < (output file)\n```\n", 
  "id": 55110433
}