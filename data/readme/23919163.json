{
  "read_at": 1462558436, 
  "description": "LPC Algorithm in a C++ Environment", 
  "README.md": "README of the LACE package\n==========================\nContact: John Back (J.J.Back@warwick.ac.uk)\n\nIntroduction\n------------\n\nThis package (Lpc Algorithm in a C++ Environment) is a C++ \nimplementation of the local principal curve (Lpc) algorithm \ndescribed in Eur. Phys. J. C (2014) 74:2832, also available \non the arXiv: http://arxiv.org/abs/1312.6059. \nIt is based on the R-code package \"LPCM\"\nhttp://cran.r-project.org/web/packages/LPCM/index.html,\nwritten by Jochen Einbeck and Ludger Evers.\n\nThis software takes a collection of data points and tries \nto find their local principal curves. Each point is represented \nas an \"LpcHit\" with N-dimensional co-ordinates (x,y,z,...) and a \nweight (e.g. energy or charge). Each collection of hits \n(data point cloud) is stored in a so-called \"LpcEvent\" pointer. \nThe curves, feature points and any clustering information can \nthen be retrieved from each LpcEvent.\n\nFurther online documentation is available at\nhttp://universityofwarwick.github.io/LACE\n\n[![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.11708.png)]\n(http://dx.doi.org/10.5281/zenodo.11708)\n\nBuilding the code\n-----------------\n\nThe package only depends on Eigen, the C++ template library \nfor linear algebra: http://eigen.tuxfamily.org. Since Eigen\nonly contains header files, there is no need to \"install\" it;\nonly the Eigen header-file directory needs to be present.\n\nThis software can also use ROOT, a general purpose C++ data \nanalysis framework (http://root.cern.ch), for input and \noutput files, and for finding specific features in the \nprincipal curves. However, using ROOT is not required nor \nmandatory.\n\nUse the configure script to set various compiler options\n(\"configure --help\" lists the available options), then\nbuild using make:\n\n```sh\n$ ./configure\n$ make\n```\n\nIf successful, this should create a shared library \n`lib/libLACE.so` as well as the binary program `bin/LACEMain`,\nwhich is based on the example [LACEMain.cc](LACEMain.cc) \nfile in the base LACE directory.\n\nThe file [pathlib.sh](pathlib.sh) gives an example of setting the\n`LD_LIBRARY_PATH` environment variable to include the LACE\nshared library.\n\n\nRunning the code\n----------------\n\nThe example program `bin/LACEMain` can be used to run the \nLACE code. It takes one extra argument on the command line, \nwhich specifies the name of the Lpc parameter file\n\n```sh\n$ cd example\n$ ../bin/LACEMain mupPars.txt\n```\n\nAn example of ten 770 MeV neutrino to muon-proton \nevents is provided in the [mup770MeV.txt](example/mup770MeV.txt) \nfile, which is text based and contains the following lines:\n\n```\nNumberOfEvents NumberOfDimensions\nEventNumber1 NumberOfHits1\nHitX1 HitX2 HitX3 HitWeight\nOther hits...\nEventNumber2 NumberOfHits2\nHitX1 HitX2 HitX3 HitWeight\nOther hits...\netc...\n```\n\nA description of the lpc parameters are given below, with suggested \ndefault values given in parenthesis:\n\n```\ninfile          Filename of the input file\ninformat        Format for the input file (text or root)\noutfile         Filename of the output file\noutformat       Format for the output file (text or root)\n \nkernelwidth     Value of the lpc scaled kernel width (0.05)\nstepsize        Scaled step size for the lpc (0.05)\nnpoints         Required number of lpc points (250)\npenalisation    Angle penalisation factor (2.0)\neigenratio      Minimum 2nd/1st eigenvalue ratio for possible branching points (0.4)\nboundary        Boundary condition for delaying convergence in the tails (0.005)\nconvergence     Convergence level for the Lpc (1e-6)\nbranchlevel     Number of possible branching generation levels (0 = none, default)\ngapsize         Scaled size of the gap (gapsize*stepsize) to start finding a new branch (1.5)\n\npeakfinder      Select the peak finder method: 0 = none, 1 = simple (default if not using ROOT), \n                                               2 = TSpectrum from ROOT (default if using ROOT)\n\ncosanglecut     Minimum value for finding features in the 1-|cosAngle| distribution (0.01)\nminpeakfrac     Minimum fractional height for the next feature peak w.r.t the previous peak (0.01)\npeakdiffsq      Squared-distance limit for checking if lpc feature peaks overlap (3.0)\n\nclustering      Set the clustering method: 0 = none, 1 = method in paper (default), \n\t\t                           2 = all hits put into 1 cluster\n\ndobranchvtx     Enable (1) or disable (0 = default) vertexing and clustering for branches\nminvtxrescut    Minimum selection cut value for hit-to-lpc residuals for vertexing (20.0)\n\nconvexhull      Minimum value of the convex hull ratio d_transverse/d_longitudinal for showers (0.12)\nshowerres       Minimum threshold for hit-to-lpc residuals for showers (20.0)\nshowerresratio  Minimum hit-to-lpc residual ratio for showers (0.3)\nshowerresfrac   Minimum fraction of residuals that need to be above the shower threshold (0.9)\n\nfirstevent      Integer specifying the first event (usually this is set to 0)\nlastevent       Integer specifying the last event (-1 means process all available events)\n```\n\nIf \"firstevent\" and \"lastevent\" are not set, then all events found in the input \nfile are processed.\n\n\nThis software supports finding branches within lpc curves (\"branchlevel > 0\"),\nbut this is still in the experimental stage. Feedback regarding this\nfeature is desired and indeed welcome.\n\nNote that all integer values used and returned by functions and variables\nfollow the C++ convention and start at zero, _except for branches_.\nThe integer index number of the main curve is nominally set to zero.\nThis implies that the indices of branches start at one (branch = 0 means\nthe main curve that has index 0). Also, the branch generation number \nstarts at 1 (generation of zero means no branches, or just the main curve).\n\n\nCode documentation\n------------------\n\nAutomatic code documentation can be generated using the\nDoxygen system (http://www.doxygen.org). Simply run doxygen\n\n```\n$ doxygen\n```\n\nin the main LACE directory to create a doxygen sub-directory \ncontaining a html-based interface to the description of classes \nand all of their functions and variables (doxygen/html/index.html).\n\n\nLicense\n-------\n\nThis software is distributed under the Boost Software License, Version 1,\n(Aug 17 2003). See [LICENSE_1_0.txt](LICENSE_1_0.txt) \n(optionally the original at http://www.boost.org/LICENSE_1_0.txt)\nfor details.\n\n\nAuthors and contributors\n------------------------\n\nThe main author of the C++ version is John Back.\n\nOther contributors to this work are:\n\n* Gary Barker\n* Steve Boyd\n* Daniel Brunt\n* Jochen Einbeck\n* Ludger Evers\n* Martin Haigh\n* Harmanjeet Khera\n* Ben Morgan\n* Ben Oakley\n* Yorck Ramachers\n* Dan Roythorne\n* Jamie Wynn\n\n", 
  "id": 23919163
}