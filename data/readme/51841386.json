{
  "read_at": 1462557981, 
  "description": "A collection of stemmers for Serbian and Croatian", 
  "README.md": "# SCStemmers - a collection of stemmers for Serbian and Croatian\r\nThis package is a Java reimplementation of four previously published stemming algorithms for Serbian and Croatian:\r\n* The greedy and optimal subsumption-based stemmers for Serbian, by Vlado Keselj and Danko Sipka ([originally written in Perl](http://www.cs.dal.ca/~vlado/nlp/2007-sr/))\r\n* A refinement of the greedy subsumption-based stemmer, by Nikola Milosevic ([originally written in PHP](http://arxiv.org/abs/1209.4471), [later also made available in Python](https://nikolamilosevic86.github.io/SerbianStemmer/))\r\n* A \"Simple stemmer for Croatian v0.1\", by Nikola Ljubesic and Ivan Pandzic ([originally written in Python](http://nlp.ffzg.hr/resources/tools/stemmer-for-croatian/))\r\n\r\n## Text Encoding\r\nAll stemmers expect the input text to be formatted in UTF-8. Their outputs are also UTF-8 encoded.\r\n\r\nSince Serbian is a digraphic language the input texts can be in either the Cyrillic or the Latin script. The stemmer for Croatian works only with texts in the Latin script.\r\n\r\nFor the sake of consistency all stemmers produce output in the Latin script.\r\n\r\n### Dual1 Coding System\r\nThe stemmers for Serbian internally use the so-called *dual1* coding system in which only the Latin script characters without diacritical marks are allowed.\r\nTo obtain dual1-coded texts all Cyrillic characters are first translated into their Latin script equivalents. Afterwards, all characters with diacritical marks are replaced in the following manner:\r\n* **C/c** is coded as **Cx/cx**\r\n* **C/c** is coded as **Cy/cy**\r\n* **Dz/dz** is coded as **Dx/dx**\r\n* **D/d** is coded as **Dy/dy**\r\n* **Z/z** is coded as **Zx/zx**\r\n* **S/s** is coded as **Sx/sx**\r\n\r\nThe greedy and the optimal stemmers of Keselj and Sipka (but not Milosevic's refinement of the greedy stemmer) also apply the following:\r\n* **Lj/lj** is coded as **Ly/ly**\r\n* **Nj/nj** is coded as **Ny/ny**\r\n\r\nThe stemmers for Serbian also accept texts in the dual1 coding as input, but will still produce the normal Latin script text as output.\r\nHowever, this behavior can easily be changed by applying the coding transformation methods, supplied within the *SerbianStemmer* class, to the output text.\r\n\r\n## Usage\r\nAll stemmers can be used through the interface declared in the *SCStemmer* abstract class, via the methods:\r\n```\r\npublic String stemWord (String word)\r\npublic String stemLine (String line)\r\npublic String stemText (String text)\r\npublic void stemFile (String fileInput, String fileOutput)\r\n```\r\n\r\n### Weka\r\nAlternatively, the stemmers can be utilized as an unofficial plug-in module within Weka (Waikato Environment for Knowledge Analysis).\r\nTo do so, download the [SCStemmers Weka package](https://github.com/vukbatanovic/SCStemmers/releases/download/v1.0.0/SCStemmers_1.0.0.zip).\r\nOpen the Weka package manager (available in Weka >= 3.7) and use the \"Unofficial - File/URL\" option to select and install SCStemmers.\r\nAfter restarting Weka, the list of available stemmers (within the StringToWordVector filter) will also contain the four stemmers from this package.\r\n\r\n## References\r\nIf you wish to use this package in your paper or project, please include a reference to the following paper in which it was presented:\r\n\r\n***Reliable Baselines for Sentiment Analysis in Resource-Limited Languages: The Serbian Movie Review Dataset***, Vuk Batanovic, Bosko Nikolic, Milan Milosavljevic, in Proceedings of the 10th International Conference on Language Resources and Evaluation (LREC 2016), Portoroz, Slovenia (2016).\r\n\r\nBe sure to also cite the original paper of each stemmer you use:\r\n* For the greedy and optimal subsumption-based stemmers for Serbian: *[A Suffix Subsumption-Based Approach to Building Stemmers and Lemmatizers for Highly Inflectional Languages with Sparse Resources](http://infoteka.bg.ac.rs/pdf/Eng/2008/INFOTHECA_IX_1-2_May2008_23a-33a.pdf)*, Vlado Keselj, Danko Sipka, Infotheca 9(1-2), 23a-33a (2008).\r\n* For the refinement of the greedy subsumption-based stemmer: *[Stemmer for Serbian language](http://arxiv.org/abs/1209.4471)*, Nikola Milosevic, arXiv preprint arXiv:1209.4471 (2012).\r\n* For the \"Simple stemmer for Croatian v0.1\": *[Retrieving Information in Croatian: Building a Simple and Efficient Rule-Based Stemmer](http://nlp.ffzg.hr/data/publications/nljubesi/ljubesic07-retrieving.pdf)*, Nikola Ljubesic, Damir Boras, Ozren Kubelka, Digital Information and Heritage, 313-320 (2007).\r\n\r\n## Additional Documentation\r\nAll classes and non-trivial methods contain extensive documentation and comments, in both Serbian and English.\r\nIf you have any questions about the stemmers' functioning, please review the supplied javadoc documentation, the source code, and the papers listed above.\r\nIf no answer can be found, feel free to contact me at bv115045p / at / student.etf.bg.ac.rs\r\n\r\n## License\r\nGNU General Public License 3.0 (GNU GPL 3.0)", 
  "id": 51841386
}