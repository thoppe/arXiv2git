{
  "read_at": 1462555692, 
  "description": "Benchmark data and code for Question-Answering on Movie stories", 
  "README.md": "# MovieQA\n\n<strong>MovieQA: Understanding Stories in Movies through Question-Answering</strong>  \nMakarand Tapaswi, Yukun Zhu, Rainer Stiefelhagen, Antonio Torralba, Raquel Urtasun, and Sanja Fidler  \nIEEE Conference on Computer Vision and Pattern Recognition (CVPR), Las Vegas, June 2016.  \n[Project page](http://movieqa.cs.toronto.edu) |\n[arXiv preprint](http://arxiv.org/abs/1512.02902) |\n[Read the paper](http://arxiv.org/abs/1512.02902) |\n[Explore the data](http://movieqa.cs.toronto.edu/examples/)\n\n----\n\n### Benchmark Data\nThe data is made available in simple JSON / text files for easy access in any environment. We provide Python scripts to help you get started by providing simple data loaders.\n\nTo obtain access to the stories, and evaluate new approaches on the test data, please register at our [benchmark website](http://movieqa.cs.toronto.edu/).\n\n\n### Python data loader\n<code>import MovieQA</code>  \n<code>mqa = MovieQA.DataLoader()</code>  \n\n#### Explore\nMovies are indexed using their corresponding IMDb keys. For example  \n<code>mqa.pprint_movie(mqa.movies_map['tt0133093'])</code>\n\nQAs are stored as a standard Python list\n<code>mqa.pprint_qa(mqa.qa_list[0])</code>\n\n#### Use\nTo get train or test splits of the QA along with a particular story, use  \n<code>story, qa = mqa.get_story_qa_data('train', 'plot')</code>\n\nCurrently supported story forms are: <code>plot, split plot</code>\n\n----\n\n### Requirements\n- numpy\n- pysrt\n\n\n", 
  "id": 54207693
}