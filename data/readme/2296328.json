{
  "read_at": 1462552189, 
  "description": "A package for simulating RNA-seq library preparation with parameter estimation", 
  "README.md": "`rlsim` - a package for simulating RNA-seq library preparation with parameter estimation\n========================================================================================\n\n![rlsim architecture](https://raw.github.com/sbotond/rlsim/master/doc/pix/rlsim_main.png)\n\nWhat is the `rlsim` package?\n--------------------------\n\nThe `rlsim` package is a collection of tools for simulating [RNA-seq](http://en.wikipedia.org/wiki/RNA-Seq)\nlibrary construction, aiming to reproduce the most important factors\nwhich are known to introduce significant biases in the currently used\nprotocols: [hexamer priming](http://dx.doi.org/10.1093/nar/gkq224), \n[PCR amplification](http://dx.doi.org/10.1093/nar/gks001) and [size selection](http://dx.doi.org/10.1093/nar/gkq1015).\nIt allows for a systematic exploration of the effects of the individual biasing\nfactors and their interactions on downstream applications by simulating\ndata under a variety of parameter sets.\n\nThe implicit simulation model implemented in the main tool (`rlsim`) is\ninspired by the actual library preparation protocols and it is more\ngeneral than the models used by the bias correction methods hence it allows for \na fair assessment of their performance.\n\nAlthough the simulation model was kept as simple as possible in order to\naid usability, it still has too many parameters to be inferred from data\nproduced by standard RNA-seq experiments. However, simulating datasets\nwith properties similar to specific datasets is often useful. To address\nthis, the package provides a tool (`effest`) implementing simple\napproaches for estimating the parameters which can be recovered from\nstandard RNA-seq data (GC-dependent amplification efficiencies, fragment\nsize distribution, relative expression levels).\n\n[![Catalogued on GSR](http://popmodels.cancercontrol.cancer.gov/static/img/gsr_tile.jpg)](http://popmodels.cancercontrol.cancer.gov/gsr/packages/rlsim)\n\nCiting the `rlsim` package\n--------------------------\n\nAn associated manuscript is in preparation, meanwhile the package should\nbe cited as:\n\n - Botond Sipos, Greg Slodkowicz, Tim Massingham, Nick Goldman (2013) *Realistic simulations reveal extensive sample-specificity of RNA-seq biases* *arXiv*:[1308.3172](http://bit.ly/rlsax) \n\nThe analysis pipeline used to generate the results is available at [github.com/sbotond/paper-rlsim](http://bit.ly/rlsim-pl).\n\n`rlsim` was brought to you by the [Goldman group](http://www.ebi.ac.uk/research/goldman) from [EMBL-EBI](http://www.ebi.ac.uk).\n\nKey features\n------------\n\n-   Simulation of priming biases loosely based on a nearest-neighbor\n    thermodynamic model.\n\n-   Exact simulation of PCR amplification on the level of individual\n    fragments (consistent across expression levels, no approximations).\n\n-   Fragment-specific amplification efficiencies determined by\n    GC-content and length.\n\n-   Possibility to simulate PCR and sampling pseudo-replicates.\n\n-   Simulation of size selection and polyadenylation with flexible\n    target distributions.\n\n-   Estimation of GC-dependent amplification efficiencies from real\n    data, relying on assumptions about locality of biases and the mean\n    efficiency of the fragment pool.\n\n-   Estimation of relative expression levels.\n\n-   Estimation of empirical fragment size distribution, model selection\n    between normal vs. skew normal distributions.\n\n-   Able to simulate experiments on the human transcriptome over a wide\n    range of expression levels on a desktop machine.\n\nBasic examples\n--------------\n\nThe following basic examples can be run from the `src/` directory in the\npackage source tree:\n\n-   Re-sample expression levels from a mixture of gamma distributions\n    with two components with mean 5,000 and 10,000:\n```\n        $ ../tools/sel -d \"0.5:g:(5000, 0.1) + 0.5:g:(10000, 100)\" \\\n        test/basic/test_transcripts.fas > my_transcripts.fas\n```\n\n    The output my\\_transcripts.fas is a Fasta file annotated with the\n    expression levels:\n```\n        >ENST00000371588$9430\n        GCTTCCGGCATCTGGCTCAGTTCCGCCATGGCCTCCTTGGAAGTCAGTCGTAGTCCTCGCAGGTCTCGGCGGGAGCTG ...\n        ...\n```\n\n-   Simulate 10,000 fragments with default parameters, plot rlsim\n    report:\n```\n        $ ./rlsim -n 10000 my_transcripts.fas > frags.fas\n        $ ../tools/plot_rlsim_report\n```\n\n    The output file frags.fas contains the simulated fragments:\n```\n        >Frag_0 ENST00000374005 (Strand - Offset 1883 -- 2298)\n        AGAGAATAGAGGGTAGAAGGGAAATTCTTGGCACCTGGACTAGAGTGAGATAAAAGGAGAGTAGGAAAGCAGTGA ...\n        ...\n```\n\n-   Simulate paired-end sequencing using [simNGS](https://github.com/timmassingham/simNGS) and the\n    runfile shipped with the package source:\n```\n        $ cat frags.fas | simNGS -p paired -o fastq -O reads test/cov/s_4_0066.runfile\n```\n\n    The files `reads_end1.fq` and `reads_end1.fq` contain the simulated\n    paired-end reads:\n```\n        @Frag_24929 refB (Strand - Offset 11583 -- 12067) 151M\n        GCCCCGAGTAGTTCTGGGCGGGGCCCCCGCGGCCAGCGCCGCCCACTATATATTATTTATTCTAACTATT ...\n        +\n        GGGEFG(EGFGGDGBFEGGG;FD7GEGGDGGA=GGGDG7FFGGGGGFGCAGGGGGFF?GGGFG@GGAGGG ...\n        ...\n```\n\n-   Simulate 500,000 fragments, skew normal fragment size distribution\n    with a spike, `after_prim_double` fragmentation method, 15 PCR\n    cycles with the specified efficiency parameters, using 4 cores,\n    verbose mode:\n```\n        $ ./rlsim -n 50000 -d \"0.9:sn:(600,50,4,300,2000) + 0.1:n:(700,1,600,2000)\" \\\n        -f after_prim_double -c 15 -eg \"(1.0,0.5,0.8)\" -el \"(0.1,0.7,1.0)\" \\\n        -t 4 -v my_transcripts.fas > frags.fas\n        $ ../tools/plot_rlsim_report\n```\n\n-   Estimate parameters from SAM file sorted by read name using (verbose\n    mode):\n```\n        $ ../tools/effest -v -f ../tools/test/ref.fas ../tools/test/aln1.sam \n```\n\n-   Estimate parameters from SAM file sorted by read name using - assume\n    15 PCR cycles and a pool efficiency of 0.9:\n```\n        $ ../tools/effest -v -c 15 -m 0.9 -f ../tools/test/ref.fas ../tools/test/aln1.sam \n```\n-   **Simulate 20,000 fragments using the raw parameters estimated by `effest`,\n    set minimum GC-dependent efficiency to 0.5 (verbose mode)**:\n```\n        $ ./rlsim -v -n 20000 -j raw_params.json -jm 0.5 my_transcripts.fas > frags.fas\n        $ ../tools/plot_rlsim_report\n```\n\nGetting more help\n-----------------\n\nPlease consult the [package documentation](http://bit.ly/rlsim-doc) for more help on the tools and the technical background.\n\nThe BioStar Q&A forum ([http://www.biostars.org](http://www.biostars.org)) is an excellent place to get additional help. \nThe author of the package will monitor the posts having the `rlsim` tag.\n\nDependencies\n------------\n\nThe package runs on 64-bit GNU/Linux operating systems. The rlsim tool\nis written in [golang](http://golang.org) and shipped as a statically linked\nexecutable for the `amd64` Linux platforms, hence it has no\ndependencies.\n\nThe rlsim tool can be built for other architectures supported by the\ncompiler, however only the `amd64` architecture is supported and the\n32-bit binaries might not work properly.\n\nThe parameter estimation tool (`effest`) and the additional tools are\nwritten in `Python 2.x` and depend on a couple of packages:\n\n-   [numpy](https://pypi.python.org/pypi/numpy) >= 1.6.2\n\n-   [matplotlib](https://pypi.python.org/pypi/matplotlib) >= 1.1.0\n\n-   [scipy](https://pypi.python.org/pypi/scipy) >= 0.10.1\n\n-   [biopython](https://pypi.python.org/pypi/biopython) >= 1.60\n\n-   A modified version of the [HTSeq](http://www-huber.embl.de/users/anders/HTSeq/doc/overview.html) package available\n    from the GitHub repository under [https://github.com/sbotond/rlsim/tree/master/misc](https://github.com/sbotond/rlsim/tree/master/misc).\n\n    **The official releases of the HTSeq package contain a bug causing\n    segmenation fault when parsing certain paired-end datasets. Please\n    use the modified version from the rlsim repository!**\n\nThese packages (with the exception of the modified HTSeq) are readily\ninstallable from the [Python Package Index](https://pypi.python.org/pypi) using the [pip](https://pypi.python.org/pypi/pip)\ntool by issuing the following command:\n\n```\n    pip install numpy matplotlib scipy biopython\n```\n\nThe additional tool tools depend on samtools [samtools](http://samtools.sourceforge.net/). Simulating\nIllumina sequencing of the fragments can be done by using the [simNGS](https://github.com/timmassingham/simNGS)\npackage (recommended) or any other sequencing simulator.\n\n\nInstalling the latest release\n-----------------------------\n\nThe release tarballs can be obtained from the [releases](https://github.com/sbotond/rlsim/tree/master/releases) directory:\n\n```\n    wget https://github.com/sbotond/rlsim/blob/master/releases/rlsim-latest_amd64.tar.gz?raw=true t.tgz -O rlsim-latest_amd64.tar.gz\n```\n\nThe unpacked release directory contains the following files:\n\n-   `bin/` - directory containing the executables:\n\n    -   `rlsim` - the main tool simulating library construction\n\n    -   `effest` - tool for estimating selected parameters from real datasets\n\n    -   `sel` - tool for sampling expression levels\n\n    -   `plot_rlsim_report`- tool for plotting the `rlsim` report\n\n    -   `pb_plot` - tool for visualising sequence biases\n\n    -   `cov_cmp` - tool for comparing coverage trends across datasets\n\n    -   `plot_cov` - tool for plotting transcript read coverage colored by\n        reference base\n\n-   COPYING - GPL v3 licence\n\n-   README.md - short instructions in markdown format\n\n-   `rlsim_manual.pdf` - package manual\n\nThe executables under `bin/` can be installed by copying them to a\ndirectory listed in the `$PATH` environmental variable.\n\nBuilding from source\n--------------------\n\nBuild dependencies:\n\n-   The package is built using `make` in a standard `Linux` environment.\n\n-   Building the rlsim tool requires the `Go` compiler which can be installed\n    as described on the projects [website](http://golang.org/doc/install).\n\n-   A standard `LaTeX` installation with `pdflatex` has to be present in\n    order to produce the package documentation.\n\n-   Regenerating the test datasets needs the bwa [bwa](http://bio-bwa.sourceforge.net) and \n    [samtools](http://samtools.sourceforge.net) commands to be installed.\n\nThe package source can be obtained by cloning the `GitHub` [repository](https://github.com/sbotond/rlsim)\nand built by issuing `make` in the top level directory:\n\n```\n    git clone https://github.com/sbotond/rlsim.git\n    cd rlsim\n    make\n```\n\nA tarball can be built by issuing:\n\n```\n   make release\n```\n\n## Experimental builds with gccgo\n\n`rlsim` can be compiled with the recent version (>=4.7.2) of the `gccgo` compiler:\n\n- Install the gc `Go` compiler suite on the projects [website](http://golang.org/doc/install), as the build process uses the `go` tool.\n\n- Install gccgo as described [here](http://golang.org/doc/install/gccgo), or through your [package manager](http://packages.ubuntu.com/search?keywords=gccgo).\n\n- Issue `make gccbuild` under `src/'.\n\n[Benchmarks indicate](http://bit.ly/160TBUn) that the `gccgo` build is faster on average, however the difference in runtime is not substantial.\n\n__Please note that the experimental `gccgo` builds are not supported. Feel free to use them, but please do not submit bug reports if anything goes wrong.__\n\nQuick reference\n---------------\n\n### `rlsim`\n\n```\n    Simulate RNA-seq library preparation with priming biases, PCR biases and size selection (version: 1.3).\n\n    Usage:\n            rlsim [arguments] [transcriptome fasta files (optional)]\n\n    Optional arguments:\n                    argument                    type    default  \n            -n      requested fragments         int     \n            -d      fragment size distribution  string  \"1.0:sn:(189, 24, -1.09975, 76, 294)\" \n            -f      fragmentation method        string  \"after_prim_double\"\n            -b      strand bias                 float   0.5\n            -c      PCR cycles                  int     11\n            -p      priming bias parameter      float   5.0\n            -k      primer length               int     6\n            -a      poly(A) tail size dist.     string  [check source]\n            -flg    fragment loss probability   float   0.0\n            -m      expression level multiplier float   1.0\n            -e      fixed PCR efficiency        float   0.0\n            -eg     GC efficiency parameters \n                    as \"(shape, min, max)\":     raw from SRR521457\n            -el     length efficiency parameters \n                    as \"(shape, min, max)\":\n                        shape                   float   0.0\n                        min                     float   1.0\n                        max                     float   1.0\n            -j      raw parameter file          string  \n                    superseeds -d, -c, -eg\n            -jm     minimum raw gc efficiency   float   0.0\n            -r      report file                 string  \"rlsim_report.json\"\n            -t      number of cores to use      int     4\n            -g      keep fragments in memory    bool    false\n            -si     initial random seed         int     from UTC time\n            -sp     pcr random seed             int     auto\n            -ss     sampling random seed        int     auto\n            -gobdir fragment directory          string  \"rlsim_gob_$PID\"\n            -v      toggle verbose mode         bool    false\n            -h      print usage and exit        bool    false\n            -V      print version and exit      bool    false\n            -prof   write CPU profiling info    string  \"\"\n            -gcfreq trigger garbage collection  int     100\n                    after this many transcripts\n            -randt  generate RNG test files     bool    false\n\n    Examples:\n            rlsim -n 2000000 transcripts.fa\n            cat transcripts.fa | rlsim -n 2000000\n\n    For more details consult the package manual at:\n            https://github.com/sbotond/rlsim/tree/master/doc/rlsim_manual.pdf\n```\n\n### `effest`\n\n```\n    usage: effest [-h] [-f ref_fasta] [-i iso_list] [-c nr_cycles] [-m mean_eff]\n                  [-M max_eff] [-d dist_fam] [-g out_fasta] [-j out_json]\n                  [-e expr_mul] [-a] [-t] [-w step_size] [-s out_count_file]\n                  [-k in_count_file] [-p out_prior_file] [-o in_prior_file]\n                  [-q min_qual] [-r report_file] [-l log_file] [-v]\n                  [input file]\n\n    Estimate GC-dependent fragment amplification efficiencies and fragment size\n    distribution from paired-end RNA-seq data mapped to transcriptome (version\n    1.1).\n\n    positional arguments:\n      input file         Aligned *paired end* reads in SAM format sorted by\n                         *name*.\n\n    optional arguments:\n      -h, --help         show this help message and exit\n      -f ref_fasta       Reference fasta.\n      -i iso_list        List of single isoform transcripts.\n      -c nr_cycles       Number of PCR cycles (11).\n      -m mean_eff        Assumed pool efficiency (0.87).\n      -M max_eff         Assumed maximum efficiency (None).\n      -d dist_fam        Distribution to model fragment size distribution\n                         (n|sn|*auto*).\n      -g out_fasta       Output fasta.\n      -j out_json        File to store estimated raw parameters (raw_params.json).\n      -e expr_mul        Expression level multiplier (10000.0).\n      -a                 Do not use GC efficiency correction on expression levels\n                         (False).\n      -t                 Trim off old expression values (True).\n      -w step_size       Sliding window size / step size ratio (5).\n      -s out_count_file  Pickle counts to the specified file (effest_counts.pk).\n      -k in_count_file   Load counts from specifies file.\n      -p out_prior_file  Pickle fragment prior to the specified file\n                         (effest_pr.pk).\n      -o in_prior_file   Load fragment prior from the specified pickle file.\n      -q min_qual        Minimum mapping quality (0).\n      -r report_file     Report PDF (effest_report.pdf).\n      -l log_file        Log file.\n      -v                 Toggle verbose mode (False).\n```\n\n### `plot_rlsim_report`\n\n```\n    usage: plot_rlsim_report [-h] [input file]\n\n    Plot rlsim report (version 1.0).\n\n    positional arguments:\n      input file  rlsim report file.\n\n    optional arguments:\n      -h, --help  show this help message and exit\n```\n\n### `sel`\n\n```\n   usage: sel [-h] [-t] [-d dist_param] [-b nr_bins] [-r report_fil]\n               [input fasta file]\n\n    Sample expression levels from a mixture of gamma distributions (version 1.0).\n\n    positional arguments:\n      input fasta file  Transcripts and expression levels in Fasta format.\n\n    optional arguments:\n      -h, --help        show this help message and exit\n      -t                Trim sequence names.\n      -d dist_param     Expression level distribution.\n      -b nr_bins        Number of bins in histogram.\n      -r report_fil     Report PDF file.\n```\n\n### `pb_plot`\n\n```\n    usage: pb_plot [-h] [-f ref_fasta] [-r report_file] [-w winsize] [-i tr_list]\n                   [-q min_qual] [-p pickle_file] [-s]\n                   [input file]\n\n    Visualise sequence biases around fragment start/end (version 1.1).\n\n    positional arguments:\n      input file      Aligned *paired end* reads in SAM format.\n\n    optional arguments:\n      -h, --help      show this help message and exit\n      -f ref_fasta    Reference sequences in fasta format.\n      -r report_file  Name of PDF report file.\n      -w winsize      Window size.\n      -i tr_list      List of single isoform transcripts.\n      -q min_qual     Minimum mapping quality.\n      -p pickle_file  Results pickle file.\n      -s              Assume single ended dataset.\n```\n\n### `cov_cmp`\n\n```\n    usage: cov_cmp [-h] -f ref_fasta [-g] [-t nr_top] [-c min_cov] [-i iso_list]\n                   [-l min_length] [-x] [-y] [-r report_file] [-q min_qual]\n                   [-p pickle_file] [-v] [-s]\n                   input file input file\n\n    Compare relative coverage trends between the *expressed* transcripts of two\n    datasets (version 1.1).\n\n    positional arguments:\n      input file      Two sets of aligned *paired end* reads in SAM format.\n\n    optional arguments:\n      -h, --help      show this help message and exit\n      -f ref_fasta    Reference sequences in fasta format.\n      -g              Do not color by AT/GC.\n      -t nr_top       Plot at least this many top matches (30).\n      -c min_cov      Minimum number of fragments per transcript (20).\n      -i iso_list     List of single isoform genes.\n      -l min_length   Minimum transcript length.\n      -x              Sort by correlation coefficients.\n      -y              Plot pairwise cumulative coverage.\n      -r report_file  Name of PDF report file.\n      -q min_qual     Minimum mapping quality (0).\n      -p pickle_file  Results pickle file.\n      -v              Toggle verbose mode.\n      -s              Assume single ended dataset.\n\n```\n\n### `plot_cov`\n\n```\n    usage: plot_cov [-h] -r ref_fasta -b bam [-o outfile]\n\n    Plot read coverage colored by the reference base (AT - blue, GC - red). This\n    tools requires samtools to be installed in path.\n\n    optional arguments:\n      -h, --help    show this help message and exit\n      -r ref_fasta  Reference transcriptome.\n      -b bam        Position sorted and indexed BAM file.\n      -o outfile    Output PDF (plot_cov.pdf).\n```\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/a7401ff83389dacf5bf79399ba749f32 \"githalytics.com\")](http://githalytics.com/sbotond/rlsim)\n", 
  "id": 2296328
}