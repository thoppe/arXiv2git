{
  "README": "Correlation Code - v.0.9.1\nDolence & Brunner\nBrief summary of what the code does:\n\nThe Two-Point Angular Correlation function, simply put, quantifies the excess probability above a random distribution of finding an astronomical body (in this case, galaxy) within a specified angle of another astronomical body. To see how it's applied to a particular data set, see http://arxiv.org/pdf/1303.2432v2.pdf (where the Two-Point function is applied to the seventh data release of the Sloan Digital Sky Survey). If you look at correlate.c, there's two main functions that do the work, dualTreeACSpatial and dualTreeACAngular (to get a feel of how the two algorithms are implemented, refer to http://www.linuxclustersinstitute.org/conferences/archive/2008/PDF/Dolence_98279.pdf). \n\nThe Probabilistic TPACF is an extension of the regular TPACF that incorporates probability weights for individual points when calculating bin counts to calculate the correlation function. \n\nMethodology: Enable reading in probabilities from source data files, struct containing information about each data point populated with probability values, recursive KD-tree algorithm to traverse the tree and propogate probabilities of points through the tree (description of tree structure in Moore et al.) The main correlation function is then modified to take into account the probability of two points when populating bins. \n\nFormat for data file for precomputation (examples in test/probability_testing/data):\n\n/*RA DEC PROBABILITY*/\n170 -1 0.58\n169 0.5 0.34\n.. .. ..\n\nInstructions for trying out the code on your machine:\n\n***********************\n***** 1. Building *****\n***********************\n\nChange the \"make.config\" file to reflect the compiler(s) and flags appropriate to your machine and \"params.h\" to set the build options.\n\nType \"make all\" to run the code. \n\nIf the build was successful, the following files should be located in the \"bin\" directory:\n\nprecompute\ncorrelate\nestimate\n\nTo build specific programs, you need to run \"make\" with these targets for separate functions:\n\n\t\t\t1. pre for Precompute code\n\t\t\t2. corr for Correlation code\n\t\t\t3. est for Estimation code\n\nTo clean the build, type \"make clean\"\n\n\n***********************\n***** 2. Testing ******\n***********************\n\nAfter compiling the code, it's important to verify that the code is functioning.  Test data and correct outputs can be found in the test directory.  If the code has been compiled to run serially, simply enter the test directory and run the \"runserial.sh\" script using the command \"sh runserial.sh\" on your system.  This script automates the precomputing and bin counting phases described below and checks the results against the correct answers, reporting if any problems were detected.  If the code is to be run in parallel, in particular through a batch queue, you'll need to run the code appropriately for your system, then use the \"compare.sh\" script which simply checks the output of the parallel run with the correct answers and reports any problems.\n\n\n***********************\n***** 3. Usage ********\n***********************\n\nComputing a correlation involves 3 steps: precomputing, counting pairs, and estimating the correlation from those counts.\n\n\n**** Precomputing *****\n\nSource data files should be plain text and stored as \"RA DEC [z ...]\", one source per line.\nA file should be created that lists each data file, one per line (just use ls data* > filelist).  For an autocorrelation, the source file should be listed first followed by the randoms.  \n\nNow run precompute with the file list, angular/spatial flag (0 for angular, 1 for spatial), and, optionally, the number of jackknife samples (default set in \"params.h\") as command line arguments.\n\nEx.\t./precompute filelist 0 32\n\nfor an angular calculation, or\n\nEx.\t./precompute filelist 1 16\n\nfor a spatial calculation.\n\nDepending on the build parameters in params.h and the size of the data, 2 or more files should be created for each data file.  One (or more) should have .bin and likewise for .tree.\n\n\n**** Getting bin counts ******\n\nCreate a parameter file for the correlation run using the example in the samples directory.  See Dolence & Brunner (2008) for details on the work level parameter.\n\nTo run the code, be sure that the working directory of the program contains the *bin and *tree files generated from precomputing, the parameter file which is the command line argument, and the file list used in precomputing.\n\nSERIAL:\n\t./correlate params.file\n\nPARALLEL WITH OPENMP:\n\tAfter building the code with OpenMP enabled (both in params.h and make.config), set the environment variable OMP_NUM_THREADS to the desired number of processes then run the code as if it were serial.  This may be different if your system has a batch queue.\n\nPARALLEL WITH MPI:\n\tFollow the instructions for your system.\n\nPARALLEL WITH MPI/OPENMP:\n\tSee above.\n\nOnce complete, there should be files ending in *bins which contain the unnormalized bin counts and information about the calculation required for estimating the correlation function.\n\n\n**** Estimation *****\n\nAn estimator hasn't been implemented in our code. But you could potentially implement your own Landy-Szalay estimator using http://adsabs.harvard.edu/full/1993ApJ...412...64L as inspiration. \n\n\n****************************************************************************\n\nFrom raw data to the final correlation estimation, the process is as follows:\n\n(1) In the directory where the data resides, generate a file that lists the names of the data files, one per line.  The \"source\" file should be first in the list, followed by the targets being compared against.\n\n(2) Run the precompute code with the file list and angular/spatial flag as a command line arguments, as well as the desired number of jackknife samples if different from the default.  If no jackknife sample number is supplied, the code defaults to 16 as set in \"params.h\".  NOTE:  the number of jackknife samples MUST be a power of 2.\n\n(3) Create a parameter file for the correlation code.  Samples can be found in the \"samples\" directory.\n\n(4) Run the correlation code with the parameter file as a command line argument.\n\n(5) Create a parameter file for the estimation code.  Again, a sample can be found in the \"samples\"  directory.\n\n(6) Run the estimation code with the parameter file as a command line argument.\n\nDONE!\n", 
  "read_at": 1462551478, 
  "description": "Probabilistic fast two-point correlation code", 
  "id": 15150089
}