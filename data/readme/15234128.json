{
  "read_at": 1462551397, 
  "description": "A C++ library to compress and intersect sorted lists of integers using SIMD instructions ", 
  "README.md": "SIMDCompressionAndIntersection\n======================\n[![Build Status](https://travis-ci.org/lemire/SIMDCompressionAndIntersection.png)](https://travis-ci.org/lemire/SIMDCompressionAndIntersection)\n\nAs the name suggests, this is a C/C++ library for fast\ncompression and intersection of lists of sorted integers using\nSIMD instructions. The library focuses on innovative techniques\nand very fast schemes, with particular attention to differential\ncoding. It introduces new SIMD intersections schemes such as\nSIMD Galloping.\n\nThis library can decode at least 4 billions of compressed integers per second on most\ndesktop or laptop processors. That is, it can decompress data at a rate of 15 GB/s.\nThis is significantly faster than generic codecs like gzip, LZO, Snappy or LZ4.\n\nAuthors: Leonid Boystov, Nathan Kurz,  Daniel Lemire,\nOwen Kaser, Andrew Consroe, Shlomi Vaknin, Christoph Rupp, Bradley Grainger, and others.\n\nDocumentation\n-----------------------\n\n* Daniel Lemire, Leonid Boytsov, Nathan Kurz, SIMD Compression and the Intersection of Sorted Integers, Software Practice & Experience 46 (6), 2016 http://arxiv.org/abs/1401.6399\n* Daniel Lemire and Leonid Boytsov, Decoding billions of integers per second through vectorization, Software Practice & Experience 45 (1), 2015.  http://arxiv.org/abs/1209.2137 http://onlinelibrary.wiley.com/doi/10.1002/spe.2203/abstract\n* Jeff Plaisance, Nathan Kurz, Daniel Lemire, Vectorized VByte Decoding, International Symposium on Web Algorithms 2015, 2015. http://arxiv.org/abs/1503.07387\n* Wayne Xin Zhao, Xudong Zhang, Daniel Lemire, Dongdong Shan, Jian-Yun Nie, Hongfei Yan, Ji-Rong Wen, A General SIMD-based Approach to Accelerating Compression Algorithms, ACM Transactions on Information Systems 33 (3), 2015. http://arxiv.org/abs/1502.01916\n\nThis work has also inspired other work such as...\n\n* T. D. Wu, Bitpacking techniques for indexing genomes: I. Hash tables, Algorithms for Molecular Biology 11 (5), 2016. http://almob.biomedcentral.com/articles/10.1186/s13015-016-0069-5\n\nSimple demo\n------------------------\n\nCheck out example.cpp\n\nYou can run it like so:\n\nmake example\n./example\n\nUsage\n------------------------\n\nmake\n./unit\n\nTo run tests, you can do \n\n./testcodecs\n\n(follow the instructions)\n\n\nFor a simple C library\n----------------------\n\nThis library is a C++ research library. For something simpler,\nwritten in C, see:\n\nhttps://github.com/lemire/simdcomp\n\n\nComparison with the FastPFOR C++ library\n-----------------------------------------\n\nThe FastPFOR C++ Library available at https://github.com/lemire/FastPFor\nimplements some of the same compression schemes except that\nit is not optimized for the compression of sorted lists of integers.\n\nOther recommended libraries\n---------------------------------\n\n* libvbyte: A fast implementation for varbyte 32bit/64bit integer compression https://github.com/cruppstahl/libvbyte\n* TurboPFor is a C library that offers lots of interesting optimizations. Well worth checking! (GPL license) https://github.com/powturbo/TurboPFor\n* Oroch is a C++ library that offers a usable API (MIT license) https://github.com/ademakov/Oroch\n* CSharpFastPFOR: A C#  integer compression library  https://github.com/Genbox/CSharpFastPFOR\n* JavaFastPFOR: A java integer compression library https://github.com/lemire/JavaFastPFOR\n* Encoding: Integer Compression Libraries for Go https://github.com/zhenjl/encoding\n\nLicensing\n------------------------\n\nApache License, Version 2.0\n\nAs far as the authors know, this work is patent-free.\n\nRequirements\n------------------------\n\nA CPU (AMD or Intel) with support for SSE2 (Pentium 4 or better) is required\nwhile a CPU with SSE 4.1* (Penryn  [2007] processors or better) is recommended. \n\n\nA recent GCC (4.7 or better), Clang, Intel or Visual C++ compiler.\n\nA processor support AVX (Intel or AMD).\n\nTested on Linux, MacOS and Windows. It should be portable to other platforms.\n\n*- The default makefile might assume AVX support, but AVX is not required. For GCC\ncompilers you might need the -msse2 flag, but you will not need the -mavx flag.\n\nFor advanced benchmarking, please see\n\nadvancedbenchmarking/README.md\n\nwhere there is additional information as well as links to real data sets.\n\n\nAcknowledgement\n------------------------\n\nThanks to Kelly Sommers for useful feedback.\n\nThis work was supported by NSERC grant number 26143.\n", 
  "id": 15234128
}