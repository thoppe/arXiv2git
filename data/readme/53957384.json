{
  "read_at": 1462555933, 
  "description": "Curved-sky grAvitational Lensing for Cosmological Light conE simulatioNS", 
  "README.md": "## calclens\r\n\r\nCurved-sky grAvitational Lensing for Cosmological Light conE simulatioNS  \r\nCopyright (C) 2009-2016 Matthew R. Becker  \r\nReleased under GNU GPL v3 - see COPYING and AUTHORS for details.  \r\n\r\nCALCLENS stands for Curved-sky grAvitational Lensing for Cosmological\r\nLight conE simulatioNS. It is a curved-sky multiple-plane ray tracing\r\ncode for generating weak gravitational lensing shear fields from light\r\ncone simulations. Currently only flat LCDM models are supported.\r\n\r\nLicense and Conditions of Use\r\n-----------------------------\r\nThis code is released publicly under GNU GPL v3 (see COPYING for\r\ndetails). The standard GNU disclaimer (which most definitely applies\r\nhere!) is\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nIf CALCLENS is used for any scientific work, please\r\ncite the paper describing the code \r\n\r\n    Becker 2013, MNRAS, 435, 115 [arXiv:astro-ph/1210.3069]\r\n\r\nand also post your own work (and any updates) to the arXiv\r\n(http://arxiv.org/).\r\n\r\nCALCLENS is a BYOLC code, which stands for Bring Your Own Light\r\nCone. Utilities for reading light cone formats (see `lightconeio.c` for\r\nhow to write your own) are included below.\r\n\r\nCompilation\r\n-----------\r\nCALCLENS requires the following widely available public software\r\nlibraries:\r\n\r\nGSL - GNU Scientific Library (http://www.gnu.org/software/gsl/)  \r\nCFITSIO - for read and writing FITS files (http://heasarc.gsfc.nasa.gov/fitsio/)  \r\nHDF5 v1.8 - for the indexed light cone format (http://www.hdfgroup.org/HDF5/)  \r\nFFTW3 - for FFTs used by SHTs (http://www.fftw.org/)  \r\n\r\nOther requirements include:\r\n    \r\n1. a 64 bit system - the types long and double in C must both be 8 bytes\r\n2. a Unix/Linux-like environment (It has not been tested on Mac OSX.)\r\n\r\nOnce these libraries are installed (or if you have them already) and\r\nrequirements are met, then you just have to edit the Makefile to match\r\nyour configuration.  For Gadget-2 users, this should be very\r\nintuitive.  Here is an example for the KIPAC Orange cluster\r\n\r\n    ifeq ($(COMP),\"orange\")\r\n    CC          =  mpicc\r\n    OPTIMIZE    =  -g -O3\r\n    GSLI        =  -I/afs/slac.stanford.edu/g/ki/software/gsl/1.15/include\r\n    GSLL        =  -L/afs/slac.stanford.edu/g/ki/software/gsl/1.15/lib\r\n    FFTWI       =  -I/afs/slac.stanford.edu/g/ki/software/fftw/3.3/include \r\n    FFTWL       =  -L/afs/slac.stanford.edu/g/ki/software/fftw/3.3/lib\r\n    HDF5I       =  -I/afs/slac.stanford.edu/g/ki/software/hdf5/1.8.8/include \r\n    HDF5L       =  -L/afs/slac.stanford.edu/g/ki/software/hdf5/1.8.8/lib\r\n    FITSI       =  -I/afs/slac.stanford.edu/g/ki/software/cfitsio/3.29/include\r\n    FITSL       =  -L/afs/slac.stanford.edu/g/ki/software/cfitsio/3.29/lib\r\n    EXTRACFLAGS =\r\n    EXTRACLIB   =\r\n    endif\r\n\r\nThen simply type \"make\" in the source directory and you should get an\r\nexecutable named \"raytrace\" for your enjoyment.  \r\n\r\nRunning an MPI code\r\n-------------------\r\nCALCLENS is an MPI-1 parallel code. See the local user guide (or ask a\r\nfriend) on how to run MPI code on your local compute cluster.\r\nTypically one needs to make a job script and the include commands like \r\n\r\n    mpirun <path to calclens> <path to config file>\r\n\r\nto get this work. See the Ray Tracing below for how to actually run\r\nthe code.\r\n\r\nRay Tracing \r\n-----------\r\nRay tracing a light cone involves two steps.  First, the light cone\r\nmust be rewritten into the HDF5 index light cone format.  Then it can\r\nbe ray traced.  \r\n\r\n1) Making the indexed light cone files.\r\n   \r\n   Code to make lens planes is in the lensplanes directory. You will \r\n   need to setup the configuration file properly as described in Configuration\r\n   below.\r\n   \r\n   Making lens planes is a purely serial operation and requires a lot\r\n   of memory (though you do not need to have the *entire* light cone in\r\n   memory). The best way to make lens planes is to run an MPI job with\r\n   as many tasks as you have cores per node.  Task 0 will make the\r\n   lens planes and then at the end all of the tasks read the data to\r\n   make maps of the matter density for error checking. This can take a\r\n   while depending on how much data you have, but only has to be done once.\r\n\r\n2) Ray Tracing\r\n   \r\n   The ray tracing code is included in the main diretcory. You will need \r\n   to setup your configuration file properly (see Configuration) and \r\n   then run the code as described above.\r\n\r\n   I would recommend, depending on resolution, at least 128 cores for\r\n   220 deg^2 patch and then small increases after that as the area gets\r\n   larger. Note that the SHT steps are the same cost in CPU hours\r\n   regardless of area, but that for large enough areas the MG steps\r\n   dominate the running time.\r\n\r\nConfiguration\r\n------------------\r\nCALCLENS uses a configuration file to set most options for running the\r\ncode.  Options *not* set in the configuration file, but in the\r\nMakefile, include\r\n\r\n    BORNAPPRX - ray trace with born approximation\r\n    OUTPUTRAYDEFLECTIONS - output ray deflections in ray output\r\n    OUTPUTPHI - output lensing potential in ray output\r\n    USE_FITS_RAYOUT - set to use fits for writing rays, otherwise will\r\n                      use a pure binary format\r\n    USE_FULLSKY_PARTDIST - set to tell the code to use a full-sky\r\n                      particle distribution in the SHT step, but only\r\n                      use the specified area for the MG step\r\n    SHTONLY - set to force the code to use SHTs only\r\n\r\nIf any of these options are changed, the code must be recompiled.\r\n\r\nSee raytrace.cfg for an example typical configuration file. Its basic\r\nstructure is a set of tag-value pairs like this \r\n\r\n    OmegaM 0.27\r\n\r\nThe tag names are not case sensitive. All units are assumed to be in\r\ncomoving Mpc/h, Msun/h, MB, degrees or seconds. Comments are denoted by '#',\r\ncan appear anywhere on a line except between a tag and its value\r\n(i.e. \"OmegaM #this is a comment 0.25\" is *not* allowed), and are\r\nstrongly encouraged.\r\n\r\nThe options are as follows.\r\n\r\n    WallTimeLimit - time limit for code in seconds\r\n    WallTimeBetweenRestart - time between writing of restart files\r\n\r\n    OmegaM - matter density in units of critical at z = 0\r\n    maxComvDistance - maximum comoving distance to end of light cone\r\n    NumLensPlanes - number of lens planes\r\n\r\nNote that maxComvDistance and NumLensPlanes should be set so that each\r\nlens plane is approximately 25 - 30 Mpc/h.\r\n\r\n     LensPlanePath - path to lens planes\r\n     LensPlaneName - base name of lens plane\r\n\r\nWhen writing lens planes, this path and base name are used to\r\nconstruct the lens plane files like this\r\n\r\n    <LensPlanePath>/<LensPlaneName>XXXX.h5\r\n\r\nwhere XXXX is the lens plane number (i.e. 0010 for plane 10).\r\n\r\n    OutputPath - path to directory for code output\r\n    RayOutputName - base name of ray outputs\r\n\r\nComment out RayOutputName (by adding a '#' in front of it) to prevent rays\r\nfrom being written to disk.  These outputs can be many TB for most\r\ncalculations so this is usually not recommended.\r\n\r\n    NumRayOutputFiles - # of files to output rays into\r\n    NumFilesIOInParallel - # of files which do I/O at the same time\r\n\r\nNumFilesIOInParallel must be less than both NumRayOutputFiles and\r\nNumGalOutputFiles. The ray outputs are written to disk like this\r\n\r\n    <OutputPath>/<RayOutputName>XXXX.YYYY\r\n\r\nwhere XXXX is the lens plane number (from 0 to NumLensPlanes-1) and\r\nYYYY is a file index from 0 to NumFilesIOInParallel-1.  Note that the\r\ncode will write an additional ray data output with lens plane number\r\nNumLensPlanes which has the rays at the very edge of the light cone\r\n(i.e. at maxComvDistance).  The rest of the ray outputs are at\r\ncomoving distance \r\n\r\n    x*dC + dC/2.0 \r\n\r\nwhere x is the lens plane number and dC is the lens plane width given\r\nby (maxComvDistance/NumLensPlanes).  \r\n\r\nThe rays, ray tracing area, and Poisson solver are controlled by \r\n\r\n    bundleOrder - HEALPix order for bundle cells (usually 6 or 7)\r\n    rayOrder - HELAPix order for rays (somewhere between 14-16)\r\n    minRa - minimum ra for ray tracing area in degrees\r\n    maxRa - maximum ray for ray tracing area in degrees\r\n    minDec - min dec for ray tracing area in degrees\r\n    maxDec - max dec for ray tracing area in degrees\r\n    HEALPixRingWeightPath - path to data directory from public HELAPix\r\n    SHTOrder - HEALPix order of SHT\r\n    ComvSmoothingScale - a comoving smoothing scale (usually ~ a few\r\n                         N-body softening lengths)\r\n\r\nOptionally one can set the parameter\r\n\r\n    MGConvFact - ratio of residual norm to truncation error on finest\r\n                 MG level \r\n\r\nto control the convergence of the MG code. The code has built in\r\ndefaults (0.1) so changing this parameter is *not* recommended.\r\n\r\nCALCLENS uses the quadrature weights from the public HEALPix package\r\nis HEALPixRingWeightPath is specified. Note that if you make minRa\r\ngreater than maxRa, then CALCLENS will wrap the domain around the\r\nsphere in the other direction (i.e. minRa = 360 and maxRa = 5 will set\r\nthe domain to go from -5 to +5 degrees).\r\n\r\nCALCLENS optionally does a grid search for the lensed images of galaxies placed\r\nin the light cone. The source galaxies must be in FITS binary tables\r\nin extension 1 with tags px, py and pz which have the comoving\r\nlocation of the galaxy in the light cone in Mpc/h.  An ID tag is\r\nrecommended but is not currently used by the code. To tell CALCLENS\r\nabout the galaxies, set the following options\r\n\r\n    GalsFileList - file containing list of source galaxy files\r\n    GalOutputName - base output name for galaxy images\r\n    NumGalOutputFiles - number of output files for galaxy images\r\n\r\nThe galaxy output files are formatted like the ray output files with\r\n\r\n    <OutputPath>/<GalOutputName>XXXX.YYYY\r\n\r\nwhere XXXX is the lens plane number (from 0 to NumLensPlanes-1) and\r\nYYYY is a file index from 0 to NumFilesIOInParallel-1.\r\n\r\nThe galaxy output files are FITS binary tables with the following tags\r\n\r\n    index - index which denotes which source galaxy this image is for\r\n            (see below)\r\n    ra - location of image in light in decimal degrees\r\n    dec - location of image in light cone in decimal degrees\r\n    A00 - 00-component of the lensing Jacobian at the image\r\n    A01 - 01-component of the lensing Jacobian at the image\r\n    A10 - 10-component of the lensing Jacobian at the image\r\n    A11 - 11-component of the lensing Jacobian at the image\r\n\r\nThe lensing Jacobian has its 0-basis vector along the ra-direction and\r\nthe 1-basis vector along the dec-direction. The index tag contains a\r\nspecially constructed source galaxy index which allows one to use\r\nmultiple source galaxy files easily.  It is made in the code like this\r\n\r\n    index = fileNum + NumGalFiles*<location in file>\r\n\r\nwhere fileNum is the zero-indexed position of the galaxy source\r\nfile in the GalsFileList, NumGalFiles is the total number of files in\r\nthe GalsFileList, and <location in file> is the zero-indexed location\r\nof the source galaxy in the fileNum-th source galaxy file.  For\r\nC programmers this construction should be quite familiar. By knowing\r\nhow many source galaxy files were input into the code and the index,\r\none can extract the source galaxy file number and location like this\r\n\r\n    fileNum = index mod NumGalFiles\r\n    <location in file> = (index - fileNum)/NumGalFiles\r\n\r\nCALCLENS can make lens planes as described above. For making lens\r\nplanes, the following options must be set.\r\n\r\n    OutputPath - used to output information about lens planes\r\n    NumFilesIOInParallel - controlls I/O loading\r\n\r\n    OmegaM - see above\r\n    maxComvDistance - maximum distance to make planes\r\n    NumLensPlanes - number of lens planes\r\n    LensPlanePath - path to output lens planes\r\n    LensPlaneName - base name for lens planes\r\n\r\n    rayOrder - see above, not directly used\r\n    bundleOrder - see above, not directly used\r\n    \r\n    LightConeFileList - file containing paths to light cone files\r\n    LightConeFileType - I/O type for light cone file - see\r\n                        lightconeio.c for examples\r\n    LightConeOriginX - X-origin of light in Mpc/h\r\n    LightConeOriginY - Y-origin of light in Mpc/h\r\n    LightConeOriginZ - Z-origin of light in Mpc/h\r\n    LensPlaneOrder - HEALPix order of cells used to spatially index \r\n         the light cone (usually between 3 and 5)\r\n    memBuffSizeInMB - size of buffer used in memory to sort particles\r\n        (set as big as possible)\r\n    MaxNumLensPlaneInMem - if particles for more than this many lens\r\n         planes are in mem, all planes will be written to disk (set \r\n         to the number of lens planes usually)\r\n    LightConePartChunkFactor - memBuffSizeInMB/LightConePartChunkFactor \r\n        extra mem is allocated to each plane as needed when sorting \r\n        particles (set around 150 or so)\r\n    partMass - particle mass in Msun/h for light cone formats which need it\r\n        (also used as mass of point mass or NFW mass for those tests)\r\n    MassConvFact - conversion factor used to make masses in light cone\r\n        into Msun/h units\r\n    LengthConvFact - conversion factor used to convert distance units\r\n        to Mpc/h\r\n    VelocityConvFact - conversion factor to get velocities into km/s\r\n\r\nThe velocities are *not* used by the code, but are included so that\r\nindexed light cone format can be used more widely.\r\n", 
  "id": 53957384
}