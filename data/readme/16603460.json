{
  "id": 16603460, 
  "read_at": 1462543226, 
  "readme.txt": "// (C) Copyright 2013, Tianlin Shi (tianlin [at] mit [dot] edu)\n\n\n// SORV is free software; you can redistribute it and/or modify it under\n// the terms of the GNU General Public License as published by the Free\n// Software Foundation; either version 2 of the License, or (at your\n// option) any later version.\n\n// SORV is distributed in the hope that it will be useful, but WITHOUT\n// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n// for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307\n// USA\n\nBuild & Install:\npython setup.py build\nsudo python setup.py install\n\nUsage:\nin python: import sorvlib\nthe algorithm relies on oracle calls to probability distributions. in python, define functions like\n\ndef uniform_dist1(s1, s2):\n    n = 10\n    res = 0\n    if(min(s2,n-1) < max(s1, 0)):\n        return 0\n    return (min(s2,n-1)-max(s1,0)+1)*1.0/n\n\nsorvlib.computeSorv takes three args: func_list, C, epsilon.\n\nfunc_list is a list all function instances.\nfor example, use: sorvlib.computeSorv([uniform_dist1 uniform_dist1], 3, 0.1) \nto compute 1 \\pm 0.1 approximation of the probability such that the sum of two uniform distributed variables is no larger than 3.\n\n\n\n", 
  "README.md": "// (C) Copyright 2013, Tianlin Shi (tianlin [at] mit [dot] edu)\n// The code implements paper : A Fully Polynomial-Time Approximation Scheme for Approximating a Sum of Random Variables\n//                                                 [J. Li, T. Shi, 2013] http://arxiv.org/abs/1303.6071.\n\n\n// SORV is free software; you can redistribute it and/or modify it under\n// the terms of the GNU General Public License as published by the Free\n// Software Foundation; either version 2 of the License, or (at your\n// option) any later version.\n\n// SORV is distributed in the hope that it will be useful, but WITHOUT\n// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n// for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307\n// USA\n\nBuild & Install:\npython setup.py build\nsudo python setup.py install\n\nUsage:\nin python: import sorvlib\nthe algorithm relies on oracle calls to probability distributions. in python, define functions like\n\ndef uniform_dist1(s1, s2):\n    n = 10\n    res = 0\n    if(min(s2,n-1) < max(s1, 0)):\n        return 0\n    return (min(s2,n-1)-max(s1,0)+1)*1.0/n\n\nsorvlib.computeSorv takes three args: func_list, C, epsilon.\n\nfunc_list is a list all function instances.\nfor example, use: sorvlib.computeSorv([uniform_dist1 uniform_dist1], 3, 0.1) \nto compute 1 \\pm 0.1 approximation of the probability such that the sum of two uniform distributed variables is no larger than 3.\n\n\n\n", 
  "description": "A Fully Polynomial-Time Approximation Scheme for Approximating a Sum of Random Variables"
}