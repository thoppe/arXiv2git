{
  "README": "ProofTraPar is a tool to verify correctness of concurrent programs by partitioning set of traces in a finite number of classes. Only one trace per class is proved correct to show the correctness of all other traces of that class. \n\nPrerequisite:\n\n1. This tool uses z3 smt solver and libfaudes library for Finite automat operations.  These libraries have been bundled with the source code and there is no need to install them separately.\n\n2. You need to have a C++ compiler that supports C++11 standard.\n\nTest Cases\n\n1. We compared this tool's performance against THREADER and Lazy-CSeq, previous years winner of software verification competition. Our current implementation does not take input from a C soure file but reads a customized format. We plan to change it in future releases. For comparison, we uploaded those two tools also with this bundle. They can be found in a folder named BenchmarkComparison. \n\n2. We also uploaded the example programs which can be used with those tools. They can be found in a subdirectory named Example.\n\n3. We use Lazy-CSeq with CBMC as backend. CBMC is also present in the tool directory of Lazy-CSeq. You might need to set PATH variable pointing to the current directory in order to run it.\n\n4. We currently have only 32 bit executable of THREADER. This is also present in a subdirectory called cream inside BenchmarkComparison folder. If you have 64 bit machine then you need to install ia32 library on ubnutu to run it properly. This can be installed as following on ubuntu 14.04\nhttp://stackoverflow.com/questions/23182765/how-to-install-ia32-libs-in-ubuntu-14-04-lts-trusty-tahr\n\n5. In the language of input programs we use lcas(x)(v1)(v2) to represent blocking lcas command. Its semantics as following; \nif x=v1 then assign v2 to x else block. This is used to model lock command originally specified in the paper as lcas(lockvar)(0)(1).\n\n6. Paper corresponding to this tool is uploaded a in arxiv with name 'From Traces To Proofs: Proving Concurrent Programs Safe'.\n\nCompiling and Running ProofTraPar\n\n1. run ./configure\n2. run make\n3. Executable ProofTraPar will be generated inside src directory.\n4. use the following command\n\nsrc/ProofTraPar BenchmarkComparison/Examples/ProofTraParFormat/peterson.true.input\n\nto run this tool on examples. \n\n\n\n\n\n", 
  "read_at": 1462549001, 
  "description": "A tool to prove concurrent programs safe by partitioning the set of traces in a small number of equivalence classes", 
  "id": 43291283
}