{
  "read_at": 1462554752, 
  "description": "Julia package mirror.", 
  "README.md": "# Sparsegrids\n\n[![Build Status](https://travis-ci.org/robertdj/SparseGrids.jl.svg?branch=master)](https://travis-ci.org/robertdj/SparseGrids.jl)\n\nThis package computes sparse grids for quadrature rules used to compute multidimensional integrals.\n\n\n## Installation\n\nIn Julia, run \n\n```julia\nPkg.add(\"SparseGrids\")\n```\n\n\n## Usage\n\nIf `f` is a function that returns `nodes, weights = f(n)`, for any (integer) order `n`, then the function `sparsegrid` computes the sparse extension to `D` dimensions of order `O`:\n\n```julia\nnodes, weigths = sparsegrid(D, O, f)\n```\n\nBy default, `f` is `gausshermite` from the [FastGaussQuadrature](https://github.com/ajt60gaibb/FastGaussQuadrature.jl) package.\nThe `gausshermite` quadrature rule is used for computing integrals over `R^D` with integrants of the form `g(x) * exp(-|x|^2)`.\nTo approximate such an integral, compute\n\n```julia\ndot( weigths, g(nodes) )\n```\n\nNote that when integrating against `exp(-|x|^2)` instead of the standard Gaussian density, the nodes and weigths are rescaled compared to e.g. the source of the Kronrod-Patterson nodes mentioned below.\n\nThis package offers another node generating function for \"Gaussian\" integrals, `kpn`, for the *nested* Kronrod-Patterson nodes.\nWhen the 1D nodes are nested, the higher dimensional sparse grids contain fewer points.\n\nThe easy extension of 1D nodes (where the number of nodes also grows *much* faster) is by tensor products.\nThis is available by the function `tensorgrid` that takes the same inputs as `sparsegrid`.\n\n\n## References\n\nThe sparse grid quadrature rules are described in e.g.\n\n* Thomas Gerstner, Michael Griebel, \"Numerical integration using sparse grids\", Numerical Algorithms, 1998, 209--232.\nDOI: [10.1023/A:1019129717644](http://dx.doi.org/10.1023/A:1019129717644)\n* Florian Heiss, Victor Winschel, \"Likelihood approximation by numerical integration on sparse grids\", Journal of Econometrics, 2008, vol. 144, pp. 62--80.\nDOI: [10.1016/j.jeconom.2007.12.004](http://dx.doi.org/10.1016/j.jeconom.2007.12.004)\n* Vesa Kaarnioja, \"[Smolyak Quadrature](http://hdl.handle.net/10138/40159)\", Master's thesis, University of Helsinki, 2013.\n\nThe Matlab scripts released in connection with the paper by Heiss & Winschel have also served as an inspiration in the implementation. \nThese are found at [http://www.sparse-grids.de](http://www.sparse-grids.de).\nNote that there are some disagreements between these Matlab scripts and the paper; the Matlab scripts are correct, as confirmed by testing.\n\nThe algorithm for computing the integer D-vectors with constant 1-norm is found in e.g. Kaarnioja's thesis as Algorithm 1.11.\n\nThe nested nodes are obtained from the sparse-grids web page.\n\n## ToDos\n\nAt some point methods for *computing* nested nodes may be implemented using techniques from e.g.\n\n* Sanjay Mehrotra, David Papp, \"Generating nested quadrature formulas for general weight functions with known moments\"\narXiv: [1203.1554 [math.NA]](http://arxiv.org/abs/1203.1554v1)\n\n", 
  "id": 45342786
}