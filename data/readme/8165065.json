{
  "read_at": 1462547590, 
  "description": "experimental SNAP repository", 
  "README.txt": "========================================================================\r\n  SNAP : Stanford Network Analysis Platform\r\n\thttp://snap.stanford.edu\r\n========================================================================\r\n\r\nStanford Network Analysis Platform (SNAP) is a general purpose, high\r\nperformance system for analysis and manipulation of large networks.\r\nSNAP is written in C++ and it scales to massive graphs with hundreds\r\nof millions of nodes and billions of edges.\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\nDirectory structure: http://snap.stanford.edu/snap/description.html\r\n\r\n  snap-core: \r\n        the core SNAP graph library\r\n  snap-adv: \r\n        advanced SNAP components, not in the core, but used by examples\r\n  snap-exp:\r\n        experimental SNAP components, still in development\r\n  examples:\r\n        small sample applications that demonstrate SNAP functionality\r\n  tutorials:\r\n        simple programs, demonstrating use of various classes\r\n  glib-core: \r\n        STL-like library that implements basic data structures, like vectors\r\n        (TVec), hash-tables (THash) and strings (TStr), provides\r\n        serialization and so on\r\n  test:\r\n        unit tests for various classes\r\n  doxygen:\r\n        SNAP reference manuals\r\n\r\nCode compiles under Windows (Microsoft Visual Studio, CygWin with gcc) and\r\nLinux and Mac (gcc). Use the SnapExamples.vcproj or provided makefiles.\r\n\r\nSome of applications expect that GnuPlot and GraphViz are installed and\r\naccessible -- paths are in the system PATH variable or they reside in the\r\nworking directory.\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\nExample applications: http://snap.stanford.edu/snap/description.html\r\n\r\nExecute:\r\n  cd examples\r\n  make all  : compiles all sample applications\r\n  make clean: cleans up all the examples directories\r\n  \r\nExamples:\r\n  agmgen :\r\n        Implements the Affiliation Graph Model (AGM). AGM generates a\r\n        realistic looking graph from the community affiliation of the nodes.\r\n  cascades :\r\n        Simulates a SI (susceptible-infected) model on a network and computes\r\n        structural properties of cascades.\r\n  centrality :\r\n        Computes node centrality measures for a graph: closeness, eigen,\r\n        degree, betweenness, page rank, hubs and authorities.\r\n  cliques :\r\n        Finds overlapping dense groups of nodes in networks, based on\r\n        the Clique Percolation Method.\r\n  community :\r\n        Implements network community detection algorithms: Girvan-Newman and\r\n        Clauset-Newman-Moore.\r\n  concomp :\r\n        Computes weakly, strongly and biconnected connected components,\r\n        articulation points and bridge edges of a graph.\r\n  forestfire : \r\n        Generates graphs using the Forest Fire model.\r\n  graphgen : \r\n        Generates undirected graphs using one of the many SNAP graph generators.\r\n  kcores :\r\n        Plots the number of nodes in a k-core of a graph as a function of k.\r\n  kronem : \r\n        Estimates Kronecker graph parameter matrix using EM algorithm.\r\n  kronfit : \r\n        Estimates Kronecker graph parameter matrix.\r\n  krongen :\r\n        Generates Kronecker graphs.\r\n  magfit : \r\n        Estimates Multiplicative Attribute Graph (MAG) model parameter.\r\n  maggen : \r\n        Generates Multiplicative Attribute Graphs (MAG).\r\n  mkdatasets :\r\n        Demonstrates how to load different kinds of networks in various\r\n        network formats and how to compute various statistics of the network.\r\n  motifs : \r\n        Counts the number of occurence of every possible subgraph on K nodes \r\n        in the network.\r\n  ncpplot : \r\n        Plots the Network Community Profile (NCP).\r\n  netevol :\r\n        Computes properties of an evolving network, like evolution of \r\n        diameter, densification power law, degree distribution, etc.\r\n  netstat :\r\n        Computes structural properties of a static network, like degree\r\n        distribution, hop plot, clustering coefficient, distribution of sizes\r\n        of connected components, spectral properties of graph adjacency\r\n        matrix, etc.\r\n  testgraph :\r\n        Demonstrates some of the basic SNAP functionality.\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\nSNAP Introduction: http://snap.stanford.edu/snap/doc.html\r\n\r\nThe library defines Graphs (nodes and edges) and Networks (graph with data\r\nassociated with nodes and edges).\r\n\r\nGraph types:\r\n  TNGraph : \r\n  \tdirected graph (single directed edge between a pair of nodes)\r\n  TNEGraph : \r\n  \tdirected multi-graph (any number of directed edges between a pair of\r\n\tnodes)\r\n  TUNGraph : \r\n  \tundirected graph (single undirected edge between a pair of nodes)\r\n\r\nNetwork types:\r\n  TNodeNet<TNodeData> : \r\n  \tlike TNGraph but with TNodeData object for each node\r\n  TNodeEdgeNet<TNodeData, TEdgeData> : \r\n  \tlike TNEGraph but with TNodeData object for each node and TEdgeData\r\n\tobject for each edge\r\n  TBigNet<TNodeData> : \r\n  \tmemory efficient implementation of TNodeNet (avoids memory\r\n\tfragmentation)\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\nSNAP files: http://snap.stanford.edu/snap/description.html\r\n\r\nsnap-core:\r\n  alg.h : Simple algorithms like counting node degrees, simple graph\r\n        manipulation (adding/deleting self edges, deleting isolated nodes)\r\n        and testing whether graph is a tree or a star.\r\n  anf.h : Approximate Neighborhood Function: linear time algorithm to\r\n        approximately calculate the diameter of massive graphs.\r\n  bfsdfs.h : Algorithms based on Breath First Search (BFS) and Depth First\r\n        Search (DFS): shortest paths, spanning trees, graph diameter, and\r\n        similar.\r\n  bignet.h : Memory efficient implementation of a network with data on\r\n        nodes. Use when working with very large networks.\r\n  centr.h : Node centrality measures: closeness, betweenness, PageRank, ...\r\n  cmty.h : Algorithms for network community detection: Modularity,\r\n        Girvan-Newman, Clauset-Newman-Moore.\r\n  cncom.h : Connected components: weakly, strongly and biconnected\r\n        components, articular nodes and bridge edges.\r\n  ff.h : Forest Fire model for generating networks that densify and have\r\n        shrinking diameters.\r\n  gbase.h : Defines flags that are used to identify functionality of graphs.\r\n  ggen.h : Various graph generators: random graphs, copying model,\r\n        preferential attachment, RMAT, configuration model, Small world model.\r\n  ghash.h : Hash table with directed graphs (<tt>TNGraph</tt>) as keys. Uses\r\n        efficient adaptive approximate graph isomorphism testing to scale to\r\n        large graphs. Useful when one wants to count frequencies of various\r\n        small subgraphs or cascades.\r\n  gio.h : Graph input output. Methods for loading and saving various textual\r\n        and XML based graph formats: Pajek, ORA, DynNet, GraphML (GML), \r\n        Matlab.\r\n  graph.h : Implements graph types TUNGraph, TNGraph and TNEGraph.\r\n  gstat.h : Computes many structural properties of static and evolving networks.\r\n  gsvd.h : Eigen and singular value decomposition of graph adjacency matrix.\r\n  gviz.h : Interface to GraphViz for plotting small graphs.\r\n  kcore.h : K-core decomposition of networks.\r\n  network.h : Implements network types TNodeNet, TNodeEDatNet and TNodeEdgeNet.\r\n  Snap.h : Main include file of the library.\r\n  statplot.h : Plots of various structural network properties: clustering,\r\n        degrees, diameter, spectrum, connected components.\r\n  subgraph.h : Extracting subgraphs and converting between different\r\n        graph/network types.\r\n  timenet.h : Temporally evolving networks.\r\n  triad.h : Functions for counting triads (triples of connected nodes in the\r\n        network) and computing clustering coefficient.\r\n  util.h : Utilities to manipulate PDFs, CDFs and CCDFs. Quick and dirty\r\n        string manipulation, URL and domain manipulation routines.\r\n\r\nsnap-adv:\r\n  agm.h : Implements the Affiliation Graph Model (AGM).\r\n  cliques.h : Maximal clique detection and Clique Percolation method.\r\n  graphcounter.h : Performs fast graph isomorphism testing to count the\r\n        frequency of topologically distinct sub-graphs.\r\n  kronecker.h : Kronecker Graph generator and KronFit algorithm for\r\n        estimating parameters of Kronecker graphs.\r\n  mag.h : Implements the Multiplicative Attribute Graph (MAG).\r\n  ncp.h : Network community profile plot. Implements local spectral graph\r\n        partitioning method to efficiently find communities in networks.\r\n  subgraphenum.h : Enumerates all connected induced sub-graphs of particular\r\n        size.\r\n\r\nsnap-exp:\r\n  arxiv.h : Functions for parsing Arxiv data and standardizing author names.\r\n  dblp.h : Parser for XML dump of DBLP data.\r\n  imdbnet.h : Actors-to-movies bipartite network of IMDB.\r\n  mxdag.h  Finds the maximum directed-acyclic subgraph of a given\r\n        directed graph.\r\n  signnet.h : Networks with signed (+1, -1) edges that can denote\r\n        trust/distrust between the nodes of the network.\r\n  sir.h : SIR epidemic model and SIR parameter estimation.\r\n  spinn3r.h : Past parser for loading blog post data from Spinn3r.\r\n  trawling.h : Algorithm of extracting bipartite cliques from the network.\r\n  wgtnet.h : Weighted networks.\r\n  wikinet.h : Networks based on Wikipedia.\r\n\r\n", 
  "id": 8165065
}