{
  "read_at": 1462553752, 
  "description": "Fast decoder for VByte-compressed integers", 
  "README.md": "MaskedVByte\n===========\n[![Build Status](https://travis-ci.org/lemire/MaskedVByte.png)](https://travis-ci.org/lemire/MaskedVByte)\n\nFast decoder for VByte-compressed integers in C.\n\nIt includes fast differential coding.\n\nIt assumes a recent Intel processor (e.g., haswell) but should work\nwith most x64 processors (supporting SSE instruction sets).\n\nThe code should build using most C compilers. The provided makefile\nexpects a Linux-like system.\n\n\nUsage:\n\n      make\n      ./unit \n\nSee example.c for an example.\n\nShort code sample:\n\n```C\nsize_t compsize = vbyte_encode(datain, N, compressedbuffer); // encoding\n// here the result is stored in compressedbuffer using compsize bytes\nsize_t compsize2 = masked_vbyte_decode(compressedbuffer, recovdata, N); // decoding (fast)\n```\n\nInteresting applications \n-----------------------\n\nGreg Bowyer has integrated Masked VByte into Lucene, for higher speeds :\n\nhttps://github.com/GregBowyer/lucene-solr/tree/intrinsics\n\n\nReference\n-------------\n\nJeff Plaisance, Nathan Kurz, Daniel Lemire, Vectorized VByte Decoding, \nInternational Symposium on Web Algorithms 2015, 2015.\nhttp://arxiv.org/abs/1503.07387\n\n\nSee also\n------------\n\n* libvbyte: A fast implementation for varbyte 32bit/64bit integer compression https://github.com/cruppstahl/libvbyte\n* https://github.com/lemire/streamvbyte\n* https://github.com/lemire/simdcomp\n\n\n", 
  "id": 26868077
}