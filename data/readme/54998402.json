{
  "read_at": 1462555915, 
  "description": "This is a copy of the Cerulean Assembler developed by Viraj Deshpande and hosted on Sourceforge", 
  "README.txt": "NOTE: I have hosted this software here to easily manage the code across several machines, \nas well as make and track changes as needed. In no way do I claim ownership or authorship.\n\nCerulean Hybrid Genome Assembler v0.1.1\n\nThis software extends contigs assembled using short read datasets like Illumina\npaired-end reads using long reads like PacBio RS long reads.\n\nThe method is fully described in:\nDeshpande, V., Fung, E. D., Pham, S., & Bafna, V. (2013).\nCerulean: A hybrid assembly using high throughput short and long reads.\nhttp://arxiv.org/abs/1307.7933\n\nA] Requirements:\nUbuntu 12.04 (may run on other operating systems, but not tested)\nPython 2.7.1 (may run on older versions, but not tested)\nnumpy, matplotlib libraries for Python\nABySS assembler: http://www.bcgsc.ca/platform/bioinfo/software/abyss\nSMRT Analysis tookit (for BLASR): http://pacbiodevnet.com/\nPBJelly: https://sourceforge.net/projects/pb-jelly/ \n\nB] Inputs and Pre-processing:\n i) Assembled contigs from ABySS short read assembler\n ii)Mapping of Pacbio reads to ABySS contigs using BLASR\n\n i) Assembly of Illumina paired-end reads:\n   If the paired-end reads are stored in fastq format in the files reads1.fastq\n   and reads2.fastq, then contigs may be assembled by:\n   $ abyss-pe k=64 n=10 in='reads1.fastq reads2.fastq' name=<dataname>\n   This will generate 2 files used for inputs to Cerulean:\n   * <dataname>-contigs.fa    #This contains the contig sequences\n   * <dataname>-contigs.dot   #This contains the graph structure\n\n ii)Mapping PacBio reads to ABySS contigs using BLASR:\n   Note: sawriter and blasr are part of SMRT Analysis toolkit\n   Note: You need to set the environmental variables and path:\n   $ export SEYMOUR_HOME=/opt/smrtanalysis/\n   $ source $SEYMOUR_HOME/etc/setup.sh\n   \n   Suppose PacBio reads are stored in <dataname>_pacbio.fasta\n   $ sawriter <dataname>-contigs.fa\n   $ blasr <dataname>_pacbio.fa <dataname>-contigs.fa -minMatch 10 \\\n     -minPctIdentity 70 -bestn 30 -nCandidates 30 -maxScore -500 \\\n     -nproc <numthreads> -noSplitSubreads \\\n     -out <dataname>_pacbio_contigs_mapping.fasta.m4\n   \n   Make sure the fasta.m4 file generated has the following format:\n   qname tname qstrand tstrand score pctsimilarity tstart tend tlength \\\n   qstart qend qlength ncells\n   The file format may be verified by adding the option -header to blasr. \n\nC] Execute:\n Cerulean requires that all input files are in the same directory <basedir>:\n i)   <basedir>/<dataname>-contigs.fa\n ii)  <basedir>/<dataname>-contigs.dot\n iii) <basedir>/<dataname>_pacbio_contigs_mapping.fasta.m4\n\n To run:\n $ python src/Cerulean.py --dataname <dataname> --basedir <basedir> \\\n --nproc <numthreads>\n \n This will generate:\n i)  <basedir>_cerulean.fasta\n ii) <basedir>_cerulean.dot\n Note: The dot does not have same contigs as fasta, but intermediate graph.\n \n \nD] Post-processing:\n Currently Cerulean does not include consensus sequence of PacBio reads in gaps\n The gaps may be filled using PBJelly.\n $ python $JELLYPATH/fakeQuals.py <dataname>_cerulean.fasta <dataname>_cerulean.qual\n $ python $JELLYPATH/fakeQuals.py <dataname>_pacbio.fasta <dataname>_pacbio.qual\n $ cp $JELLYPATH/lambdaExample/Protocol.xml .\n $ mkdir PBJelly\n Modify Protocol.xml as follows:\n Set <reference> to $PATH_TO_<basedir>/<dataname>_cerulean.fasta \n Set <outputDir> to $PATH_TO_<basedir>/PBJelly\n Set <baseDir> to $PATH_TO_<basedir>\n Set <job> to <dataname>_pacbio.fasta\n Set <blasr> option -nproc <numthreads> \n Note: PBJelly requires that the suffix be .fasta and not .fa\n Next run PBJelly:\n ($ source $JELLYPATH/exportPaths.sh)\n $ python $JELLYPATH/Jelly.py <stage> Protocol.xml\n where <stage> has to be in the order:\n setup\n mapping\n support\n extraction\n assembly\n output\n \n The assembled contigs may be view in <basedir>/PBJelly/assembly/jellyOutput.fasta\n\nIn case of any questions or errors please contact vdeshpan eng DT ucsd DT edu\n", 
  "id": 54998402
}