{
  "read_at": 1462556856, 
  "description": "Facebook dispersion", 
  "README.md": "Dispersion\n==========\n### Note:  Now updated and included in [networkx](http://networkx.github.io/documentation/development/reference/generated/networkx.algorithms.centrality.dispersion.html#networkx.algorithms.centrality.dispersion).\n\n### Overview\n\nThe following is a python implementation of the dispersion algrotithm recently defined by \nLars Backstrom and Jon Kleinberg here: http://arxiv.org/pdf/1310.6753v1.pdf.\n\nIn english, dispersion is a score for each indivdual (v) in a person's (u) network (G_u)\nwhere the dispersion articulates how 'far apart' their mutual connections are.\n\nDispersion has the ability to predict the spouse of a facebook user with up to 60% accuracy.\n*The implementation here is normalized with embededness (~50% accuracy)*\n\n### Usage\n\nI will be submitting a pull request to networkx to include 'disperion centrality' in the next\nrelease.  In the meantime:\n\n* Clone this repo\n* in a python shell:\n        `from dispersion import *`\n* load the *network_json.json* file from the *data* directory\n* `dispersion(network_json, 1)` will return a dictionary of the absolute and normalized dispersion score for all nodes in the network.\n\n### Implementation\n* Core parts of the algo use [networkx](http://networkx.github.io/)\n* Data: is a [GraphJSON](https://github.com/GraphAlchemist/GraphJSON) object.  More later on how you can create your ego network using facebook oauth.\n* We used just 4 lines of cypher to query the data from neo4j *./cypher/\n\nFeedback and tips on optimization welcome.\n\n", 
  "id": 14416403
}