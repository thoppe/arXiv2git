{
  "read_at": 1462545913, 
  "description": "First posting of the code", 
  "README.md": "***************************************************************************\n\nOverview:\n\nThis is code to do structured matrix factorizations based on the\nformulation given in the \"Applications\" section of the paper:\n\nHaeffele, B., Young, E., and Vidal, R. \"Structured low-rank matrix \nfactorization: Optimality, algorithm, and applications to image \nprocessing.\" ICML. 2014.\n\nThe code here is a generalization of the formulation given in the\npaper as it also includes options to include additional 'non-factorized'\nvariables in the optimization and to put non-negative constraints on the \nfactorized variables.  This more general formulation is also shown to have \nsimilar properties regarding global optimality of local-minima as shown in \nthe following:\n\nHaeffele, Benjamin D., and Rene Vidal. \"Global Optimality in Tensor \nFactorization, Deep Learning, and Beyond.\" arXiv preprint arXiv:1506.07540\n2015.\n\nScripts and data used to generate the results/figures from the above \nICML 2014 paper will follow shortly.\n\nHistory:\n    Aug 13, 2015 - First distribution of the code.\n\n***************************************************************************\n\nFiles:\n\nFactorTVL1L2_v1.m - The main function.\n\nToyExample.m - A script with simulated data to show how to run the code.\n\nCalciumImagingExample.m - A script that calls the code with real Calcium \n    imaging data.\n\nImgs1375.mat - Real Calcium imaging data used in the calcium imaging \n    example script. The data were taken from awake mouse auditory cortex \n    transfected with GCaMP5G.  The x-axis of the image frame is \n    approximately 470 microns, and the y-axis is approximately 75 microns.  \n    The data were sampled with a frame rate of 5Hz.\n\nproximalTVL1L2.m - Function to calculate the proximal operator of the sum\n    of the L1, L2, and Total-Variation norms, as given in equation (19) of\n    the above paper.\n\nmexProximalL1TV.cpp - The proximalTVL1L2.m function calls this mex file to \n    calculate the proximal operator of the L1+TV term.  The calculation is\n    done by doing coordinate descent on the dual problem and checking the\n    duality gap for the stopping criteria.  See below for instuctions on\n    compiling.  Note that this mex file only gets called if TV \n    regularization is used, so for applications where TV \n    regularization is not needed it is not necessary to compile this.\n\nmexProximalL1TV.mexw64 - Compiled mex file for 64-bit windows.  Other \n    platforms will need to compile this file.\n\nL1TVprox.cpp/h - Library and header files for the mexProximalL1TV.cpp mex\n    function.\n\nGetLatticeIndex.m - Returns the pairs of neighboring indices for an\n    8-connected 2D lattice (i.e. neighboring pixels of an image of a \n    given size).\n\nMakeFourierD.m - Makes a dictionary of Fourier components as an example for\n    the ToyExample.m script and for fitting background signals in Calcium\n    imaging data.\n\nMakeD.m - Make a dictionary of decaying explonential signals for the use in\n    processing Calcium imaging data.\n***************************************************************************\n\nCompiling the mex file:\n\nThe implimentation was purposely written for ease of compilation (i.e. no \nexternal libraries, such as LAPACK, are required).  Assuming the mex C/C++\ncompiler is properly configured and that all of the source files are in the\ncurrent directory, the mex file should compile with the following command:\n\nmex mexProximalL1TV.cpp L1TVprox.cpp\n***************************************************************************\n\nContact:\n\nPlease send any questions or found bugs to Ben Haeffele\nbhaeffele@jhu.edu", 
  "id": 40722833
}