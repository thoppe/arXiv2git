{
  "read_at": 1462549605, 
  "description": "Group degree centralization extension for SNAP http://snap.stanford.edu", 
  "ReadMe.txt": "========================================================================\n  Group degree centralization extension for SNAP. \n========================================================================\n\nExtension:\n  snap-core/gcentr.cpp\n  snap-core/gcentr.h\nExample\n  examples/gcentralization/gcentralization\n\n========================================================================\n  SNAP : Stanford Network Analysis Platform\n\thttp://snap.stanford.edu\n========================================================================\n\nStanford Network Analysis Platform (SNAP) is a general purpose, high\nperformance system for analysis and manipulation of large networks.\nSNAP is written in C++ and it scales to massive graphs with hundreds\nof millions of nodes and billions of edges.\n\n/////////////////////////////////////////////////////////////////////////////\n\nDirectory structure:\n  http://snap.stanford.edu/snap/description.html\n\n  snap-core: \n        the core SNAP graph library\n  snap-adv: \n        advanced SNAP components, not in the core, but used by examples\n  snap-exp:\n        experimental SNAP components, still in development\n  examples:\n        small sample applications that demonstrate SNAP functionality\n  glib-core: \n        STL-like library that implements basic data structures, like vectors\n        (TVec), hash-tables (THash) and strings (TStr), provides\n        serialization and so on\n  doxygen:\n        SNAP reference manuals\n\nCode compiles under Windows (Microsoft Visual Studio, CygWin with gcc) and\nLinux and Mac (gcc). Use the SnapExamples.vcproj or provided makefiles.\n\nSome of applications expect that GnuPlot and GraphViz are installed and\naccessible -- paths are in the system PATH variable or they reside in the\nworking directory.\n\n/////////////////////////////////////////////////////////////////////////////\n\nThis project contains an example of finding a group with maxima group \ncentralzation.\n\nTo compile from the command line, execute:\n  make all   # compiles SNAP and all sample applications\n\nTo compile on Mac OSX, using Xcode:\n  1. From the Toolbar, select Scheme (e.g. 'bigclam').\n  2. Product -> Build.  (or Cmd + B).\n  3. Run executable via the command line; or\n     Choose the scheme's executable (Product -> Edit Scheme -> Run -> Info)\n     and run: Product -> Run (or Cmd + R). \n     Note: If using Gnuplot, add the PATH to the scheme's environment variables.\n     or create symlink to /usr/bin:\n     sudo ln -s <gnuplot_dir>/gnuplot /usr/bin/\n  For code completion, the \"docs\" target has been created which includes all\n  Snap-related files and example programs.\n\nDescription of examples:\n  gcentralization :\n\tComputes group node degree centralization measures for a graph.\n\n/////////////////////////////////////////////////////////////////////////////\n\nSNAP documentation:\n  http://snap.stanford.edu/snap/doc.html\n\nThe library defines Graphs (nodes and edges) and Networks (graphs with data\nassociated with nodes and edges).\n\nGraph types:\n  TNGraph : \n  \tdirected graph (single directed edge between a pair of nodes)\n  TUNGraph : \n  \tundirected graph (single undirected edge between a pair of nodes)\n  TNEGraph : \n  \tdirected multi-graph (multiple directed edges can exist between\n        a pair of nodes)\n\nNetwork types:\n  TNodeNet<TNodeData> : \n  \tlike TNGraph, but with TNodeData object for each node\n  TNodeEDatNet<TNodeData,TEdgeData> :\n        like TNGraph, but with TNodeData object for each node and TEdgeData\n        object for each edge\n  TNodeEdgeNet<TNodeData, TEdgeData> : \n  \tlike TNEGraph but with TNodeData object for each node and TEdgeData\n\tobject for each edge\n  TNEANet :\n        like TNEGraph, but with attributes on nodes and edges. The attributes\n        are dynamic in that they can be defined at runtime\n  TBigNet<TNodeData> : \n  \tmemory efficient implementation of TNodeNet (avoids memory\n\tfragmentation)\n\nTo generate reference manuals, install doxygen (www.doxygen.org), and execute:\n  cd doxygen; make all    # generates user and developer reference manuals\n\n/////////////////////////////////////////////////////////////////////////////\n\nSNAP tutorials\n\nSample programs demonstrating the use of foundational SNAP classes and\nfunctionality are available in the tutorials directory.\n\nTo compile all the tutorials, execute the following command line:\n  cd tutorials; make all    # generates all the tutorials\n\n/////////////////////////////////////////////////////////////////////////////\n\nSNAP unit tests\n\nUnit tests are available in the test directory.\n\nTo run unit tests, install googletest (code.google.com/p/googletest) and\nexecute:\n  cd test; make run    # compiles and runs all the tests\n\n/////////////////////////////////////////////////////////////////////////////\n\nDescription of SNAP files:\n  http://snap.stanford.edu/snap/description.html\n\nsnap-core:\n  alg.h : Simple algorithms like counting node degrees, simple graph\n        manipulation (adding/deleting self edges, deleting isolated nodes)\n        and testing whether graph is a tree or a star.\n  anf.h : Approximate Neighborhood Function: linear time algorithm to\n        approximately calculate the diameter of massive graphs.\n  bfsdfs.h : Algorithms based on Breath First Search (BFS) and Depth First\n        Search (DFS): shortest paths, spanning trees, graph diameter, and\n        similar.\n  bignet.h : Memory efficient implementation of a network with data on\n        nodes. Use when working with very large networks.\n  centr.h : Node centrality measures: closeness, betweenness, PageRank, ...\n  cmty.h : Algorithms for network community detection: Modularity,\n        Girvan-Newman, Clauset-Newman-Moore.\n  cncom.h : Connected components: weakly, strongly and biconnected\n        components, articular nodes and bridge edges.\n  ff.h : Forest Fire model for generating networks that densify and have\n        shrinking diameters.\n  flow.h: Maximum flow algorithms.\n  gbase.h : Defines flags that are used to identify functionality of graphs.\n  ggen.h : Various graph generators: random graphs, copying model,\n        preferential attachment, RMAT, configuration model, Small world model.\n  ghash.h : Hash table with directed graphs (<tt>TNGraph</tt>) as keys. Uses\n        efficient adaptive approximate graph isomorphism testing to scale to\n        large graphs. Useful when one wants to count frequencies of various\n        small subgraphs or cascades.\n  gio.h : Graph input output. Methods for loading and saving various textual\n        and XML based graph formats: Pajek, ORA, DynNet, GraphML (GML), \n        Matlab.\n  gcentr.h : Implements approximative algorithm for group degree \n             centralization\n  graph.h : Implements graph types TUNGraph, TNGraph and TNEGraph.\n  gstat.h : Computes many structural properties of static and evolving networks.\n  gsvd.h : Eigen and singular value decomposition of graph adjacency matrix.\n  gviz.h : Interface to GraphViz for plotting small graphs.\n  kcore.h : K-core decomposition of networks.\n  network.h : Implements network types TNodeNet, TNodeEDatNet and TNodeEdgeNet.\n  Snap.h : Main include file of the library.\n  statplot.h : Plots of various structural network properties: clustering,\n        degrees, diameter, spectrum, connected components.\n  subgraph.h : Extracting subgraphs and converting between different\n        graph/network types.\n  timenet.h : Temporally evolving networks.\n  triad.h : Functions for counting triads (triples of connected nodes in the\n        network) and computing clustering coefficient.\n  util.h : Utilities to manipulate PDFs, CDFs and CCDFs. Quick and dirty\n        string manipulation, URL and domain manipulation routines.\n\nsnap-adv:\n  agm*.h : Implements the Affiliation Graph Model (AGM).\n  cliques.h : Maximal clique detection and Clique Percolation method.\n  graphcounter.h : Performs fast graph isomorphism testing to count the\n        frequency of topologically distinct sub-graphs.\n  kronecker.h : Kronecker Graph generator and KronFit algorithm for\n        estimating parameters of Kronecker graphs.\n  mag.h : Implements the Multiplicative Attribute Graph (MAG).\n  ncp.h : Network community profile plot. Implements local spectral graph\n        partitioning method to efficiently find communities in networks.\n  rolx.h : Node role detection.\n  subgraphenum.h : Enumerates all connected induced sub-graphs of particular\n        size.\n\nsnap-exp:\n  arxiv.h : Functions for parsing Arxiv data and standardizing author names.\n  dblp.h : Parser for XML dump of DBLP data.\n  imdbnet.h : Actors-to-movies bipartite network of IMDB.\n  mxdag.h  Finds the maximum directed-acyclic subgraph of a given\n        directed graph.\n  signnet.h : Networks with signed (+1, -1) edges that can denote\n        trust/distrust between the nodes of the network.\n  sir.h : SIR epidemic model and SIR parameter estimation.\n  spinn3r.h : Past parser for loading blog post data from Spinn3r.\n  trawling.h : Algorithm of extracting bipartite cliques from the network.\n  wgtnet.h : Weighted networks.\n  wikinet.h : Networks based on Wikipedia.\n\n", 
  "id": 37785275
}