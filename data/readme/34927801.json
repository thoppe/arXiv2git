{
  "read_at": 1462558722, 
  "description": "Python port of B. Kelly's LINMIX_ERR IDL package", 
  "README.md": "# linmix\n### A Bayesian approach to linear regression with errors in both X and Y.\n\nPython port of B. Kelly's LINMIX_ERR IDL package\n(Kelly2007, [arXiv:0705.2774](http://adsabs.harvard.edu/abs/2007ApJ...665.1489K)).\nParaphrasing from the LINMIX_ERR.pro IDL routine:\n\nPerform linear regression of y on x when there are measurement errors in both variables.  The\nregression assumes:\n\neta = alpha + beta * xi + epsilon\n\nx = xi + xerr\n\ny = eta + yerr\n\nHere, (_alpha_, _beta_) are the regression coefficients, _epsilon_ is the intrinsic random scatter\nabout the regression, _xerr_ is the measurement error in _x_, and _yerr_ is the measurement error\nin _y_.  _epsilon_ is assumed to be normally-distributed with mean zero and variance _sigsqr_.\n_xerr_ and _yerr_ are assumed to be normally-distributed with means equal to zero, variances\n_xsig_^2 and _ysig_^2, respectively, and covariance _xycov_.  The distribution of _xi_ is modeled as\na mixture of normals, with group proportions _pi_, means _mu_, and variances _tausqr_.  The following\ngraphical model illustrates, well..., the model...\n\n![linmix PGM](docs/pgm/pgm.png)\n\nBayesian inference is employed, and a Markov chain containing random draws from the posterior is\ndeveloped. Convergence of the MCMC to the posterior is monitored using the potential scale reduction\nfactor (RHAT, Gelman et al. 2004). In general, when RHAT < 1.1 then approximate convergence is\nreached.\n\nDocumentation\n-------------\n\nMore detailed documentation can be found at http://linmix.readthedocs.org/en/latest/.  In particular,\nthe API is listed at http://linmix.readthedocs.org/en/latest/src/linmix.html, and a worked example\n(the same as in Kelly (2007) (arXiv:0705.2774)), is at http://linmix.readthedocs.org/en/latest/example.html.\n\nUsage\n-----\n```\nimport linmix\nlm = linmix.LinMix(x, y, xsig=xsig, ysig=ysig, xycov=xycov, delta=delta, K=K, nchains=nchains)\nlm.run_mcmc(miniter=miniter, maxiter=maxiter, silent=silent)\nprint lm.chains['alpha'].mean(), lm.chains['alpha'].std()\nprint lm.chains['beta'].mean(), lm.chains['beta'].std()\nprint lm.chains['sigsqr'].mean(), lm.chains['sigsqr'].std()\n```\n\nInstallation\n------------\nCurrently, the best way to get linmix for python is to clone from github and build using normal\nsetup.py facilities.  (see http://linmix.readthedocs.org/en/latest/install.html)  In the future, I\nhope to add linmix to PyPI.\n\nLicense\n-------\nThis repo is licensed under the 2-line BSD license.  See the LICENSE doc for more details.", 
  "id": 34927801
}