{
  "read_at": 1462547586, 
  "description": "Matlab package for the synthesis and analysis of random variable with matrix representation", 
  "Readme.md": "#Presentation \n\nThis matlab package gathers a set of functions and subroutines for the synthesis and analysis of random variables\nwith matrix representation. In brief, the joint probability density of these random variables\ncan be expressed as \np(x_1, ..., x_n) = L (R_n(x_1 ).. R_n(x_n) ) / Z \nwhere R is a positive matrix function and L is a linear form on the space of matrices.\nThese random variables with a matrix joint probability density enjoy various statistical\nproperties which are explored in a (future) series of papers (cf http://arxiv.org/abs/1203.4500).\nThis package aims to provide a clear API in order to helps the practitionner to explore\nthe potentiality of such laws. This aim is still faraway for now, so you are encouraged to provide\ncomments and critics.\n\n#Structure of the package\n## Laws class\nIn order to implement probability laws, this package use 2 main abstract class.\nThe univariate laws implements the abstract class lUniv found in the subdirectory LawsUniv.\nA certain number of reimplementation of classical laws are also provided in this subdirectory.\n\nMultivariate laws implements the abstract class lMulti found in the subdirectory LawsMulti.\n\n##Random variables with matrix representation\nThe core of this package are the class \"matrixLaw\" and \"matrixLawNS\" found in the subdirectory LawsMulti.\n The first class corresponds to the case where R_n is constant in n, the second class models the general situation.\n\n### Homogeneous Matrix laws\nIn order to create a random variable with matrix variables, one needs to use\n```matlab\n% matrix Law\nmL= matrixLaw(A,E,Laws,n);\n```\n\nIn the previous code fragment, \n* 'A' is a positive positive matrix which corresponds to the dual vector of L, i.e. L(M)=tr( A^T E).\n* 'E' is a positive matrix which corresponds to the integral of the matrix R_n(x). \n* 'Laws' is a 2-dimensionnal cell of laws.\n\nFor more details, see the tutorial/tMatrixLaw.m.\n\n### Inhomogeneous matrix laws\nThe inhomogeneous case looks quite similar to the homogeneous case \n```matlab\nmL= matrixLawNS(A,E,fLaws,n)\n```\n except that fLaws must be a function such that fLaws(k) is the cells of laws at\nthe time k. For more informations, see the tutorial/tMatrixLawNS.m.\n\n## Laws shreding\nIn typical utilisation, it is more practical to generate random variables with prescribed\nmarginal(s) and dependency structures rather to prescribes the whole joint probability density function.\nThe aims of the \"Shreding\" subdirectory is to provide helpers functions, which are able to shreds\na parent law into a set of sub-laws such that the parent law can be recomposed as a mixture of these sublaws.\n\nThe end user is gently but strongly encouraged to only use 'ShredWithKernel' which is the only human-friendly function available for now (non-human users should contact directly the author). \n\n```matlab\nsubLaws = ShredWithKernel(L , moments, Ws0, pts0, Kern, Kstart )\n```\n\n* 'L' is the parent Law\n* 'moments' contains the constraints on the sub-laws moments, which should be a s*o matrix where s is the number of sublaws and o is the order of the moments constraint.\n* 'Ws0' is a vector of dimension s, which contains the weight of the mixture, i.e. L= sum( wWs0_i * subLaws(i) )\n* pts0 is a vector containing the discretization points which would be used for the constructions of the sub-laws L\n* Kern is the kernel function, such that Kern(param) is a real endofunction.\n* Kstart is the starting parameters for the kernel function\n\nThe script 'tutorial/tShred' contains an example of utilisation of this function \n\n## Demos and example\n\nMany examples  are present in the Demos and DemosNS subdirectories.\n\n", 
  "id": 8309706
}