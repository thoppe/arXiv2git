{
  "read_at": 1462543257, 
  "description": "Labeled IO Library", 
  "README.md": "About\n=============\n\nThe *Labeled IO* (LIO) library is an information flow control (IFC)\nlibrary. IFC is a mechanism that enforces security policies by\ntracking and controlling the flow of information within a system.\nDifferent from discretionary access control (think UNIX file\npermissions), with IFC you can execute an untrusted computation on\nyour secret data and be sure that it does not leak it or overwrite\nit.\n\nLIO is an IFC library that can be used to implement such untrusted\ncomputations. LIO provides combinators similar to those of 'IO' for\nperforming side-effecting computations (e.g., accessing the\nfilesystem, modifying mutable references, throwing exceptions, etc.)\nTo track and control the flow of information, LIO associates a\nsecurity policy, usually called a *label*, with every piece of data.\nA label may, for example, impose a restriction on who can observe,\npropagate, or modify the data labeled as such.  Different from\nstandard IO operations, the LIO counterparts usually take an\nadditional parameter for the label which they inspect before\nactually performing the (underlying IO) side-effecting computation.\nSo, before writing to a file LIO asserts that the write will not\nviolate any security policies associated with the file or the data\nto be written.\n\nMost code should import module `LIO` and whichever label format the\napplication is using (e.g., `LIO.DCLabel`). All untrusted code\nshould have type `LIO`, which trusted code can safely execute with\n`evalLIO`. See `LIO` for a description of the core library API.\n\nThe papers that describes the core of LIO, including motivation and\nformal modeling/proofs, are available here:\n\n*  Deian Stefan, Alejandro Russo, Pablo Buiras, Amit Levy, John C. Mitchell, David Mazieres.\n   _Addressing Covert Termination and Timing Channels in Concurrent Information Flow Systems._\n   _In Proceedings of The 17th ACM SIGPLAN International Conference on Functional Programming (ICFP), ACM, 2012._\n   [PDF](http://www.deian.net/pubs/stefan:2012:addressing.pdf)\n   \n*  Deian Stefan, Alejandro Russo, John C. Mitchell, David Mazieres.\n   _Flexible Dynamic Information Flow Control in Haskell._\n   _In Proceedings of Haskell Symposium , ACM SIGPLAN . September 2011._\n   [PDF](http://www.deian.net/pubs/stefan:2011:flexible.pdf)\n   \n*  Deian Stefan, Alejandro Russo, John C. Mitchell, David Mazieres.\n   _Flexible Dynamic Information Flow Control in the Presence of Exceptions._\n   In _Arxiv preprint arXiv:1207.1457.  2012._\n   [PDF](http://arxiv.org/abs/1207.1457v1)\n   \n*  Deian Stefan, Alejandro Russo, David Mazieres, John C. Mitchell.\n   _Disjunction Category Labels._\n   _In Proceedings of 16th Nordic Conference on Security IT Systems, NordSec , Springer LNCS. October 2011._\n   [PDF](http://www.deian.net/pubs/stefan:2011:dclabels.pdf)\n\n\nStructure of repository\n=============\n\nThis repository is divided into three packages:\n\n- `lio`: The main LIO library\n\n- `lio-fs`: Simple IFC filesystem library\n\n- `quickcheck-lio-instances`: QuickCheck2 instances for LIO\n\n- `lio-eval`: Tests and benchmarks. This is a package solely because it\n  depends on both `lio` and `quickcheck-lio-instances`. Having the\n  tests and benchmarks in `lio` leads to a circular dependency.\n\nAcknowledgements\n=============\n\nWe thank  Catalin Hritcu, Benjamin Pierce, and Jeremy Planul for\ninsightful comments on both the design and implementation of LIO. This\nwork was funded by the DARPA Clean-Slate Design of Resilient,\nAdaptive, Secure Hosts (CRASH) program, BAA-10-70.  Deian Stefan was\nfunded by The National Defense Science and Engineering Graduate\n(NDSEG) Fellowship while working on LIO.\n", 
  "id": 3161068
}