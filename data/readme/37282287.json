{
  "read_at": 1462549197, 
  "description": "A very fast scalar implementation for Frame Of Reference integer compression.", 
  "README.md": "libfor - Fast C Library for Frame of Reference Integer Compression\n======================\n\nAn ANSI C library with a fast scalar (non-SIMD) implementation for\nFrame of Reference (FOR) integer compression. It works on Linux,\nMicrosoft Windows and most likely all other sane systems.\n\nFOR can compress sorted and unsorted integer sequences.\n\nIn addition, the library can perform operations directly on compressed data:\n\n   * select: returns a value at a specified index\n   * linear search: for unsorted sequences, or short sorted sequences\n   * lower bound search: based on binary search, for sorted sequences\n   * append: appends an integer to a compressed sequence\n\nSimple demo\n------------------------\n\n    #define LEN 100\n    uint32_t in[LEN] = {0};\n    uint8_t out[512];\n\n    // Fill |in| with numbers of your choice\n    for (int i = 0; i < LEN; i++)\n      in[i] = i;\n\n    // Now compress; can also use for_compress_sorted() if the numbers\n    // are sorted. This is slightly faster.\n    uint32_t size = for_compress_unsorted(&in[0], &out[0], LEN);\n    printf(\"compressing %u integers (%u bytes) into %u bytes\\n\",\n            LEN, LEN * 4, size);\n \n    // Decompress again\n    uint32_t decompressed[LEN];\n    for_uncompress(&out[0], &decompressed[0], LEN);\n\nUsage\n------------------------\n\nIt can't be more simple:\n\n    make\n\nTo run the tests:\n\n    ./test\n\nWhere is this used?\n----------------------\n\nI use this library to compress 32bit integers for upscaledb, a very\nfast embedded key/value store (see http://upscaledb.com). \n\nIf you would like me to add your application to this list then please send\nme a mail at chris@crupp.de.\n\nLicensing\n------------------------\n\nApache License, Version 2.0\n\nRequirements\n------------------------\n\nThis library only works with little-endian CPUs.\n\nTested on Linux and Windows (Visual Studio 2013). Porting it should not\nbe difficult.\n\nAcknowledgement\n------------------------\n\nThis work is based on Daniel Lemire (http://lemire.me)'s ideas and\nimplementation at https://github.com/lemire/FrameOfReference.\n\nFor further information, see\n* Goldstein J, Ramakrishnan R, Shaft U. Compressing relations and indexes. Proceedings of the Fourteenth International Conference on Data Engineering, ICDE '98, IEEE Computer Society: Washington, DC, USA, 1998; 370-379.\n* Daniel Lemire and Leonid Boytsov, Decoding billions of integers per second through vectorization, Software Practice & Experience 45 (1), 2015.  http://arxiv.org/abs/1209.2137 http://onlinelibrary.wiley.com/doi/10.1002/spe.2203/abstract\n* Daniel Lemire, Leonid Boytsov, Nathan Kurz, SIMD Compression and the Intersection of Sorted Integers, Software Practice & Experience (to appear) http://arxiv.org/abs/1401.6399\n* Jeff Plaisance, Nathan Kurz, Daniel Lemire, Vectorized VByte Decoding, International Symposium on Web Algorithms 2015, 2015. http://arxiv.org/abs/1503.07387\n* Wayne Xin Zhao, Xudong Zhang, Daniel Lemire, Dongdong Shan, Jian-Yun Nie, Hongfei Yan, Ji-Rong Wen, A General SIMD-based Approach to Accelerating Compression Algorithms, ACM Transactions on Information Systems 33 (3), 2015. http://arxiv.org/abs/1502.01916\n\n\n", 
  "id": 37282287
}