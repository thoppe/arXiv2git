{
  "README": "Release Notes for xGPU v0.0.1\n-----------------------------\n\nOverview:\n\nxGPU is a library for performing the cross-multiplication step of the\nFX correlator algorithm, which is popular for radio astronomy signal\nprocessing.\n\nSoftware Compatibility:\n\nThe library has been tested under Linux (Ubuntu 10.04 and 10.10) and\nMac OS X using release 4.0 of the CUDA toolkit.  Default compilation\ncreates a 32-bit binary, so 64-bit systems will require 32-bit c and\nc++ libraries installed for cross-compilation (gcc and g++ multilib).\n\nHardward Compatibility:\n\nFor a list of supported devices see,\n\nhttp://www.nvidia.com/object/cuda_learn_products.html\n\nWhile this library will run on pre-Fermi GPUs with appropriate changes\nto the Makefile, note that the kernels make Fermi-specific\noptimizations and so will likely lead to sub-standard performance on\nsm1.x CUDA architectures.  Initial tuning has taken place for the\nKepler architecture, but this is far from complete.\n\nBuilding the Library:\n\nThe library, library query tool \"xgpuinfo\", and the sample program\n\"cuda_correlator\" can be built by changing into the src subdirectoy\nand running \"make\".\n\n  $ cd src\n  $ make\n\nCurrently, a number of sizing parameters must be specified when\nbuilding the library.  Default values of these parameters are\nspecified near the top of src/xgpu_info.h.  The default values can be\noverridden on the make command line to suit your instrument's needs.\nThe options that can be given on the make command line are shown here\nwith there default values.\n\n  NPOL=2\n  NSTATION=256\n  NFREQUENCY=10\n  NTIME=1000\n  NTIME_PIPE=100\n\nNote that NTIME_PIPE must be a multiple of 4 and NTIME must be a\nmultiple of NTIME_PIPE.  The preprocessor will error out if those two\nconditions are not met.\n\nFor example, to compile with NSTATION set to 128 and all other\nparameters at their default values:\n  \n  $ make NSTATION=128\n\nInstalling the Library:\n\nThe library can be installed by changing into the src subdirectoy and\nrunning \"make install\".  By default, this will install xgpuinfo into\n/usr/local/bin, xgpu.h into /usr/local/include, and libxgpu.so (or\nlibxgpu.dll on Cygwin) to /usr/local/lib.  Specifying\n\"prefix=/some/path\" on the \"make install\" command line will install\nthese files into /some/path/bin, /some/path/include, and\n/some/path/lib instead.\n\n  $ cd src\n  $ make install                    # install under /usr/local\n  $ make install prefix=$HOME/local # install under $HOME/local\n\nUsing the Library:\n\nThe library can be called from C or C++ code.  To use the library,\nyour source files need to #include <xpgu.h> and your executable needs\nto be linked with libxpgu.so (or libxgpu.dll on Cygwin).  On UNIX\nsystems, this usaually means adding \"-L/path/to/lib/dir\" and \"-lxpgu\"\nto the link command line.\n\nPlease see the comments in xgpu.h as well as the usage in the sample\nprogram cuda_correlator.cu for more details on how to use the library.\n\nThis library has been designed to be interfaced with other parts of an\nFX correlator pipeline, and so not much can be achieved in isolation.\nA simple test program \"cuda_correlator.cu\" is included which performs\ncross-multiplication on the host and the device and verifies the\ndevice obtained the correct answer.  The many options regarding number\nof stations, frequency channels etc. are set in the top of this file.\n\nBenchmarking Performance:\n\nxGPU includes an additional benchmarking utility: CUBE - CUDA\nBEnchmarking.  This uses C-preprocessor directive to obtain arithmetic\nthroughput and device memory bandwidth performance.  To invoke a\nbenchmarking run, one simply has to execute the \"bench\" script.  This\nwill perform four runs of the test.  The first two of these are\nconcerned with counting all flops and transfers performed by the\nkernels, and measuring the time taken for each of these steps.  The\nlatter two are concerened with measuring the asynchronous performance\nof the device<->host transfers.  By default the results are printed to\nstdout, though they are output to file (cube_benchmark.log and\ncube_benchmark.csv).\n\nAcknowledging xGPU:\n\nIf you find this code useful in your work, please cite:\n\nM. A. Clark, P. C. La Plante, and L. J. Greenhill, \"Accelerating Radio\nAstronomy Cross-Correlation with Graphics Processing units\",\n[arXiv:1107.4264 [astro-ph]].\n\nAuthors:\n\nMichael Clark (NVIDIA)\nPaul La Plante (Loyola University Maryland)\nLincoln Greenhill (Harvard-Smithsonian Center for Astrophysics)\nDavid MacMahon (University of California, Berkeley)\nBen Barsdell (Harvard-Smithsonian Center for Astrophysics)\n", 
  "read_at": 1462547486, 
  "description": "A GPU based FX correlator for radio astronomy", 
  "id": 745382
}