{
  "read_at": 1462558354, 
  "description": "Cost-Sensitive Support Vector Machines", 
  "README.md": "Cost-Sensitive Support Vector Machines (CSSVM)\n=\nThis project implements [CSSVM](http://arxiv.org/abs/1212.0975) using LibSVM. \n\n1.  Installation\n-\nInstalling CSSVM is exactly the same as LibSVM:\n\n1.  **Command line**:\nIn the root directory of the project and simply execute ```make```.\n\n2.  **Python Interface** In the ```python``` directory, execute ```make```.\n\n\n2.  Run\n-\nRunning CSSVM is almost like running LibSVM, except the new  <code>-C</code> and <code>-W</code> options:\n<pre><code>\nUsage: svm-train [options] training_set_file [model_file]\noptions:\n-s svm_type : set type of SVM (default 0)\n\t0 -- C-SVC\t\t(multi-class classification)\n\t1 -- nu-SVC\t\t(multi-class classification)\n\t2 -- one-class SVM\n\t3 -- epsilon-SVR\t(regression)\n\t4 -- nu-SVR\t\t(regression)\n-t kernel_type : set type of kernel function (default 2)\n\t0 -- linear: u'*v\n\t1 -- polynomial: (gamma*u'*v + coef0)^degree\n\t2 -- radial basis function: exp(-gamma*|u-v|^2)\n\t3 -- sigmoid: tanh(gamma*u'*v + coef0)\n\t4 -- precomputed kernel (kernel values in training_set_file)\n-C Cost-sensitive Learning Method(default 0):\n\t0 -- cost-insensitive SVM (biased-penalty SVM with option -w1 C_1 -w-1 C_-1)\n\t1 -- cost-sensitive SVM with option -w1 C_1 -w-1 1/kappa\n\t2 -- cost-sensitive SVM with example-dependent cost.used with option -W cost_file_name\n-W cost_file_name : file contains example costs for example-dependent cost-sensitive learning\n-d degree : set degree in kernel function (default 3)\n-g gamma : set gamma in kernel function (default 1/num_features)\n-r coef0 : set coef0 in kernel function (default 0)\n-c cost : set the parameter C of C-SVC, epsilon-SVR, and nu-SVR (default 1)\n-n nu : set the parameter nu of nu-SVC, one-class SVM, and nu-SVR (default 0.5)\n-p epsilon : set the epsilon in loss function of epsilon-SVR (default 0.1)\n-m cachesize : set cache memory size in MB (default 100)\n-e epsilon : set tolerance of termination criterion (default 0.001)\n-h shrinking : whether to use the shrinking heuristics, 0 or 1 (default 1)\n-b probability_estimates : whether to train a SVC or SVR model for probability estimates, 0 or 1 (default 0)\n-wi weight : set the parameter C of class i to weight*C, for C-SVC (default 1)\n-v n: n-fold cross validation mode\n-q : quiet mode (no outputs)\n</code></pre>\n\n3.   CSSVM Tools\n-\nSeveral utiliy functions for training, grid search, and computind different performance measures is provided in `cssvm_tools.py`.\n\n`cssvmutil.py` and `cssvm.py` containt python interface functions for CSSVM.\n\n4.   Examples\n-\nExample scripts involving grid search, cross-validation, train and testing CSSVM is provided for each algorithm:\n\n**Cost-Sensitive Learning with Available Class-Dependent Costs (CSA):** For the `german` dataset which its costs are known, `run_german` perfoms grid search, minimizing the (cost-sensitive) Risk to find the best hyperparameters and threshold for SVM, Biased-Penalty SVM, and CSSVM. The output of the can be found in the  [run_german.html](./python/run_german.html)\n\n**Cost-Sensitive Learning with Unavailable Class-Dependent Costs (CSU):** (to be added)\n\n**Cost-Sensitive Learning with Example-Dependent Costs (CSE):** (to be added)\n\n5. Cite\n-\n`\n@article{masnadi2012cost,\n  title={Cost-Sensitive Support Vector Machines},\n  author={Masnadi-Shirazi, Hamed and Vasconcelos, Nuno and Iranmehr, Arya},\n  journal={arXiv preprint arXiv:1212.0975},\n  year={2012}\n}`\n", 
  "id": 24387907
}