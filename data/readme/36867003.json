{
  "README": "FlexibleSUSY\n============\n\nFlexibleSUSY provides Mathematica and C++ code to create spectrum\ngenerators for non-minimal supersymmetric models.  It is designed for\ngenerating fast and modular C++ code, allowing for easy modification,\nextension and reuse.\n\nHomepage:                https://flexiblesusy.hepforge.org\nMailing list:            flexiblesusy@projects.hepforge.org\nSource code repository:  https://github.com/FlexibleSUSY\nBug reports:             https://github.com/FlexibleSUSY/FlexibleSUSY/issues\nReferences:              CPC 190 (2015) 139-172 (arxiv:1406.2319 [hep-ph])\n\n\nRequirements\n============\n\n * C++ compiler (g++ >= 4.4.7 or clang++ >= 3.1 or icpc >= 12.1)\n * Fortran compiler (gfortran, ifort)\n * Mathematica (version 7.0 or higher)\n * SARAH (version 4.0.4 or higher)    http://sarah.hepforge.org\n * Boost (version 1.37.0 or higher)   http://www.boost.org\n * Eigen 3 (version 3.1 or higher)    http://eigen.tuxfamily.org\n * GNU scientific library             http://www.gnu.org/software/gsl/\n * Lapack / Blas                      http://www.netlib.org/lapack/\n\nOptional:\n\n * Looptools (version 2.8 or higher)  http://www.feynarts.de/looptools/\n\n\nInstallation of SARAH\n=====================\n\nFlexibleSUSY requires SARAH to be installed and to be loadable with\nthe Needs[\"SARAH`\"] command from inside Mathematica.  We recommend the\nfollowing setup:\n\n   $ cd ~/.Mathematica/Applications/\n   $ wget https://www.hepforge.org/archive/sarah/SARAH-4.4.6.tar.gz\n   $ tar -xf SARAH-4.4.6.tar.gz\n   $ ln -s $PWD/SARAH-4.4.6/ SARAH\n\n   $ cd ~/.Mathematica/Kernel/\n   $ echo \"AppendTo[\\$Path, \\\"$HOME/.Mathematica/Applications/SARAH/\\\"];\" \\\n        >> init.m\n\nAll the above steps can be executed at once with the `install-sarah`\nscript.  Example:\n\n   $ ./install-sarah\n\nSee `./install-sarah --help' for more options.\n\n\nHow to create a model\n=====================\n\n0. Before you setup a FlexibleSUSY model, you have to provide a SARAH\n   model file.  To make it available in FlexibleSUSY, you can put it\n   either into FlexibleSUSY's SARAH model directory\n\n     FlexibleSUSY/sarah/<model>/\n\n   or directly into SARAH's own model directly\n\n     SARAH/Models/<model>/\n\n   Here <model> is the name of your model (e.g. MSSM, NMSSM, etc.).\n   Note, that there are already plenty of pre-installed model files\n   under SARAH/Models/ that can be used.\n\n1. Setup a FlexibleSUSY model\n\n   $ ./createmodel --name=<model>\n\n   See `./createmodel --help' for more details.  Afterwards there will\n   be\n\n   * a model directory models/<model>/\n   * a makefile module models/<model>/module.mk\n   * a Mathematica start script models/<model>/start.m\n   * and a FlexibleSUSY model file models/<model>/FlexibleSUSY.m\n\n   To modify the model details (input parameters, constraints, etc.),\n   please edit the FlexibleSUSY model file\n   models/<model>/FlexibleSUSY.m .\n\n2. Create the Makefile and register your model\n\n   $ ./configure --with-models=<model>\n\n   Use `./configure --with-models=all' to build all available models.\n   See `./configure --help' for more options.\n\n3. Compile\n\n   $ make\n\n   When `make' is executed, Mathematica is called and generates the\n   C++ code for the spectrum generator.  All C++ source files are\n   written to models/<model>/ .  Afterwards this C++ code will be\n   compiled and a user example spectrum generator\n   models/<model>/run_<model>.x will be created.\n\n\nExample\n=======\n\n   $ ./createmodel --name=NMSSM\n   $ ./configure --with-models=NMSSM\n   $ make\n   $ ./models/NMSSM/run_NMSSM.x \\\n     --slha-input-file=model_files/NMSSM/LesHouches.in.NMSSM\n\n\nCreating the soucre code documentation\n======================================\n\nFlexibleSUSY's source code documentation (including the generated\nsource code files) can be generated with Doxygen in HTML format.  To\ngenerate the documentation please run:\n\n   $ make doc-html\n\nThe generated HTML index file can then be found in doc/html/index.html\nand can be viewed with any HTML browser, e.g.\n\n   $ firefox doc/html/index.html\n\n\nCreating only the source code files -- no compilation\n=====================================================\n\nIf you want to only create the C++ source files for your model, but do\nnot want to compile the code, you can use the --disable-compile\nconfigure option:\n\n   $ ./configure --with-models=MSSM --disable-compile\n   $ make\n\nHere, configure will not check for installed compilers or libraries.\nIt will only check for Mathematica and SARAH.  The execution of `make'\nwill stop as soon as all C++ source code files are generated.\n\n\nCompile only\n============\n\nIf you want to only compile already created the C++ source files for\nyour model, you can use the --disable-meta configure option:\n\n   $ ./configure --with-models=MSSM --disable-meta\n   $ make\n\nHere, configure will only check for installed compilers or libraries.\nIt will not check for Mathematica and SARAH.\n\nWarning: Please make sure all C++ source files of your model are\navailable in the model directory models/<model>/ .  Otherwise the\ncompilation will fail.\n\n\nExporting the generated source code\n===================================\n\nThe generated C++ source code can be exported to a separate directory,\nwithout the Mathematica meta code.  This exported directory will be a\ncomplete standalone package, with it's own build system.  To export\nthe code, one has to set the target directory during configuration via\nthe --with-install-dir= option.  For example\n\n   $ ./configure --with-models=<models> \\\n     --with-install-dir=/path/to/export/directory\n\nBy running\n\n   $ make install-src\n\nthe generated C++ source code for all <models> is copied to\n/path/to/export/directory , together with the non-model specific\nsource code from config/ , doc/ , legacy/ , slhaea/ and src/ .\nAfterwards, the standalone package can be build via\n\n   $ cd /path/to/export/directory\n   $ ./configure\n   $ make\n\n\nDynamic libraries\n=================\n\nIf you want to create dynamic libraries (instead of static libraries)\nyou have to pass all the following options to the ./configure script\n\n   --disable-static-libs\n   --with-lib-ext=\".so\"\n   --with-make-lib-cmd=\"gcc -shared -o\"\n\nWhen using Intel compilers, replace `gcc' by `icc' or `icpc'.\n\nExample:\n\n   $ ./configure --with-models=MSSM,NMSSM \\\n     --disable-static-libs \\\n     --with-lib-ext=\".so\" \\\n     --with-make-lib-cmd=\"gcc -shared -o\"\n\nImportant remark:\n\nThe libraries are linked to the executables with _absolute_ paths.\nThis means that, if you move the package directory to another\nlocation, the executables will no longer work, because the libraries\nare now at another place.  To make the executables work again, you\nhave to rebuild them via\n\n   $ make clean-executables\n   $ make allexec\n\n\nLooptools\n=========\n\nIt is possible to use Looptools (http://www.feynarts.de/looptools/)\nfor calculating the loop functions, instead of using Softsusy's loop\nfunctions.  To enable Looptools configure via\n\n   $ ./configure --enable-looptools\n\nTo use the Looptools library and header files from a specific\ndirectory configure via\n\n   $ ./configure --enable-looptools \\\n     --with-looptools-incdir=\"/path/to/looptools/build/\" \\\n     --with-looptools-libdir=\"/path/to/looptools/build/\"\n\nNote: Looptools 2.8 or higher is required.  Versions <= 2.7 will fail\nto build with the following compiler error message (or similar):\n\n   In file included from models/MSSM/MSSM_two_scale_model.cpp:28:0:\n   /usr/include/clooptools.h:67:28: error: conflicting declaration 'typedef struct std::complex<double> Complex'\n   In file included from src/utils.h:15:0,\n                    from src/rge.h:17,\n                    from models/MSSM/MSSM_two_scale_soft_parameters.hpp:24,\n                    from models/MSSM/MSSM_two_scale_model.hpp:25,\n                    from models/MSSM/MSSM_two_scale_model.cpp:21:\n   src/mycomplex.h:17:7: error: 'class Complex' has a previous declaration as 'class Complex'\n\n\nPlotting spectrum and RG running\n================================\n\nThe pole mass spectrum and the RG flow can be written to data files\nfor easy plotting.  In the MSSM for example these data files can be\ngenerated via\n\n   $ ./models/MSSM/run_MSSM.x \\\n     --slha-input-file=model_files/MSSM/LesHouches.in.MSSM \\\n     --rgflow-output-file=MSSM_rgflow.dat \\\n     --spectrum-output-file=MSSM_spectrum.dat\n\nThe generated files \"MSSM_rgflow.dat\" and \"MSSM_spectrum.dat\" can be\nplotted with the gnuplot scripts in the model directory:\n\n   $ gnuplot -persist -e \"filename='MSSM_spectrum.dat'\" \\\n       models/MSSM/MSSM_plot_spectrum.gnuplot\n\n   $ gnuplot -persist -e \"filename='MSSM_rgflow.dat'\" \\\n       models/MSSM/MSSM_plot_rgflow.gnuplot\n\nThe latter is just for illustration and currently plots all DR-bar\nparameters regardless of dimension, so the resulting plot is not\nparticularly informative.  However the user may then adapt this script\nto plot any chosen subset of the parameters.\n\n\nAddons\n======\n\nA FlexibleSUSY addon is a program or library, which uses parts of the\nFlexibleSUSY libraries or the generated models.  An addon can be\ncreated via\n\n   $ ./createaddon --name=<addon>\n\nwhere <addon> is the name of the addon.  This script creates the\ndirectory addons/<addon>/ and the corresponding makefile module\naddons/<addon>/module.mk .  If an addon has been created with the\nabove script, the user may edit the makefile module to add his source\nfiles in to the three variables\n\n   LIB@ADDON@_SRC   (list of library source files)\n   EXE@ADDON@_SRC   (list of soucre files with a main())\n   LIB@ADDON@_HDR   (list of header files)\n\nExample:\n\n   LIB@ADDON@_SRC := $(DIR)/file1.cpp\n   EXE@ADDON@_SRC := $(DIR)/run.cpp\n   LIB@ADDON@_HDR := $(DIR)/file1.hpp\n\nTo configure and compile the addon run\n\n   ./configure --with-addons=<addon>\n   make\n\nmake compiles all source files and creates the addon library\naddons/<addon>/lib<addon>.a (including the object file file1.o from\nthe above example) and an executable (addons/<addon>/run.x in the\nabove example).\n", 
  "read_at": 1462549643, 
  "description": "https://flexiblesusy.hepforge.org", 
  "id": 36867003
}