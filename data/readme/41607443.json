{
  "read_at": 1462545861, 
  "description": "Fuzzy Categorical Distances", 
  "README.md": "# fuzzycategory\nFuzzy Categorical Distances\n\nFor cases which the number of classes is large, but much smaller than the number of of records we can do something like a \"semantic\" distance between categories. A good example would be something like occupation in campaign finance data.\n\n```python\n{'name' : 'Jim Bob', 'employer' : 'JP Morgan Chase', 'occupation' : 'lawyer'}\n{'name' : 'James Bob', 'employer' : 'JP Morgan Chase', 'occupation' : 'lawyer'}\n{'name' : 'Jim Bob', 'employer' : 'JP Morgan Chase', 'occupation' : 'attorney''}\n```\n\nWe can 1.\n\n# Create a vector of all the terms that don't appear in the focal field\n\n```python\nlawyer : {'Jim' : 1, 'James' : 1, 'Bob' : 2, 'JP' : 2, 'Morgan' : 2, 'Chase' : 2}\nattorney : {'Jim' : 1, 'Bob' : 1, 'JP' : 1, 'Morgan' : 1, 'Chase' : 1}\n```\n\nThe \"distance\" between attorney and lawyer is then the tfidf weighted cosine distance between those vectors.\n\nAlternately, \n\n# Create a vector of exact field matches\n\n```python\nlawyer : {'Jim Bob' : 1, 'James Bob' : 1, 'JP Morgan Chase' : 2}\nattorney : {'Jim Bob' : 1, 'JP Morgan Chase' : 2}\n```\n\nOr even a \n\n# vector exact matches for everything except the focal field\n\n```python\nlawyer : {'Jim Bob, JP Morgan Chase' : 1, 'James Bob, JP Morgan Chase' : 1}\nattorney : {'James Bob, JP Morgan Chase' : 1}\n```\n\nThis last version is very similar to what http://www.naviddianati.com/fec is doing with their Maximum Likelihood Filter: http://arxiv.org/abs/1503.04085\n\n\nIf we wanted to get even more fancy we could use word2vec instead of the tfidf business: https://www.kaggle.com/c/word2vec-nlp-tutorial/details/part-2-word-vectors\n", 
  "id": 41607443
}