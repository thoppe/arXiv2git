{
  "read_at": 1462550736, 
  "description": "MIXMAX", 
  "README.md": "\nA MODULE for MIXMAX Random Number Generator\n\nThis module implements the MIXMAX Random Number Generator in \nstandard fortran 2008. The relevant references are:\n\n(*) On the Monte Carlo Simulation of Physical Systems\n    J.Comput.Phys. 97, 566 (1991)\n\n(*) Matrix Generator of Pseudorandom Numbers \n    J.Comput.Phys.97, 573 (1991).\n\n(*) The MIXMAX random number generator\n    Konstantin G. Savvidy (http://arxiv.org/abs/1403.5355)\n\nThis implementation is heavily based (i.e. routines are a copy) of \nthe C implementation that can be found in \n\nhttps://mixmax.hepforge.org/ (mixmax_release_100_beta.zip)\n\nThe code has been compared with this reference implementation,\nbut as always the correctness of the code can not be guaranteed. \nUse with caution.\n\n** USAGE **\n\n1) To initialize MIXMAX one needs to call \n   mxmx_init(int32) with the matrix size as input parameters.\n   Valid matrix sizes are: \n   3150 1260 1000 720 508 256 (default) 88 64 44 40 30 16 10\n   88 or anything bigger should do any job (they all passed the\n   BigCrush). The speed is independent of this number.\n\n2) Seed the RNG. There are four available methods:\n   o mxmx_seed_skip(ids_int32(4)): Seed with an array of up \n     to 4 integers (e.g. (/ clusterID, machineID, runID, MPIprocID/) ). \n     as an array. Mathematically guaranteed that if at least a \n     single bit of any of the 4 numbers is different, then \n     the different streams will not collide. This is the \n     perfect seeding method, but needs access to the \n     precomputed coefficients (look at the file mxmx_magic.dat\n     and the routine Read_skiparray_from_file() at the end\n     of the file test_mxmx.f90)\n\n   o mxmx_seed_spbox(int64): As good as \"traditional\" seeding. \n     Very unlikely that different seeds collide.\n\n   o mxmx_seed_lcg(int64): Another traditional seeding, but \n     different seeds can collide. Use reative prime seeds\n     to avoid this (I could be understanding something wrong \n     here!).\n\n   o mxmx_seed_vielbein(int32): Seed with unit vector. Mainly \n     for test. \n\n3) Get numbers with calls to mxmx. It will fill with RN\n   either scalars or vectors of any intrinsic type \n\n\n\"THE BEER-WARE LICENSE\":\nAlberto Ramos wrote this file. As long as you retain this \nnotice you can do whatever you want with this stuff. If we meet some \nday, and you think this stuff is worth it, you can buy me a beer in \nreturn. <alberto.ramos@desy.de>\n\n \n", 
  "id": 19321509
}