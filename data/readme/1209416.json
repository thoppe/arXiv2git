{
  "README": "social arxiv front-end. now with free artificial intelligence (tm)!\n\n(iteration 0 \"the mvp\")\n-- todo: --\n\nsearch queries grammar\n  txt      <- (ngram \"txt\")\n  \"a b\"    <- (ngram \"a b\")\n  t:tag    <- (tag \"tag\")\n  y:YYYY   <- (> year YYYY)\n  e1 e2    <- (and e1 e2) \n\nmodify schema: $exists can't use an index\n\n\nrank articles by relevance\n  - order by sum of predicate log-likelihoods\n\ndeploy to amazon ec2\n  * virtualenv, fabric\n  - set up ebs for mongo\n  - bootstrap, load-arxiv\n\n-- done: --\nlist all abstracts from arxiv on a page by chronology / topic, link to arxiv page\n  * flask, mongodb\n  - / -- home page\nkeyword search through abstracts\n  * build ngram tables, documents with keywords, years, tags\n  - / -- add search box on homepage\n  - /s?q=k:word t:tag y:year -- search\n\n(iteration 1 \"the basics\")\n-- todo: --\n\"similar\" link to show similar articles\n  * scipy + numpy for n-gram frequencies comparison\n  - /similar/article-id1&article-id2&... \n  - /similar <- POST (like: [... articles ...] , unlike: [... articles ...], authors: [ ... ])\nnice simple CSS style & favicon, domain name\n  - /style.css\n  - /favicon.ico\nclick title to see details \n  - /id/article-id -- show article abstract, quickview, comments, votes, whatever\nclick \"+\" link to vote up an article (clickpass login)\n  - /login  -- show clickpass\nauto-updating of database with new entries\n  - update-job.py\n\nrequired eggs:\n\nFlask - web framework\nmongoengine - mongo schemas\nlxml - xml parsing\nnltk - natural language processing\nlepl - search query parsing\n\nnotes:\n\n(query language):\n  txt      <- (1gram \"txt\")\n  \"a b\"    <- (2gram \"a b\")\n  t:tag    <- (tag \"tag\")\n  y:YYYY   <- (> year YYYY)\n  +e       <- (must e)\n  e1 e2    <- (and e1 e2) \n  e1 & e2  <- (and e1 e2)\n  -e       <- (not e)\n  e1 | e2  <- (or e1 e2)\n\n(keyword search):\n  for each document:\n  - descriptions -> sentence tokenizer\n  - sentences -> word tokenizer\n  - words -> ngrams pdf \n  - words -> stems -> stemgrams pdf\n  for corpus:\n  - compute corpus-wide ngrams pdf\n  - compute corpus-wide stemgrams pdf\n  for each document:\n  - ln p(ngram|doc) - ln p(ngram|corpus) # ngram relevance\n  - ln p(sgram|doc) - ln p(sgram|corpus) # sgram relevance\n  - ln p(ngram|doc) - sum(ln p(1gram_i|corpus)) # ngram importance\n\n", 
  "read_at": 1462552198, 
  "description": "social arxiv", 
  "id": 1209416
}