{
  "README": "(1) How to run the prospino f90 code: \n\n  download files from official Prospino2 website \n  email to plehn@uni-heidelberg.de if you want to know about updates/bug removal/new features and channels\n  unpack prospino.tar.gz\n\n  fix path in Makefile\n  fix f90 compiler in Makefile (tested with Intel, DEC-Alpha, Portland Group, NAG, gfortran)\n\n  type `make'\n  run executable `prospino.run > screeen.out'\n  to remove object files etc type `make clean' (does not affect the running code)\n\n  enjoy the ride, for comments or complaints please email tilman.plehn@cern.ch\n\n  IF YOU USE THIS CODE, PLEASE REFERENCE THE ORIGINAL PAPERS AS LISTED ON PROSPINO2 WEB PAGE\n\n(2) Things you could change in the code:\n\n  all SUSY parameters are read from the SLHA file (m_LQ = m_stop1)\n\n  nlo flag, collider flag (TeV/LHC) and final state:            prospino_main.f90\n  Standard Model input parameters:                              Xvital.f90\n  MSSM spectrum, masses, input mode, input/output unit#:        Xprospino_subroutine.f90\n  interface with parton densities and MSSM spectrum generators: all files in Pro2_interface\n\n  please note: if you edit any other file and want me to check your result afterwards -> NOPE!\n\n(3) Output:\n\n  all cross sections in pb, all errors relative errors!\n\n  prospino.dat: short output of masses and LO/NLO cross sections (dummy0, dummy1 dummy variables in default mode)\n                with format (parameters not needed for the respective channel set to zero):\n\n                final state, neutralino/chargino#1 and #2, dummy0, dummy1, ren/fac scale factor, mass1, mass2, sin(2 angle)\n                cross section LO, rel error LO, cross section NLO, rel error NLO, K factor, corrected cross section LO, corrected cross section NLO\n\n                while the LO and NLO results are produced with some numerical assumptions (degenerate squark masses, reduced mass hierarchies),\n                the rate LO_ms do not include these assumptions and the NLO_ms rate is computed as the LO_ms rate with our best K factor. \n\n                EXECUTIVE SUMMARY: UNLESS YOU HAVE A PARTICULAR REQUIREMENT PLEASE USE THE LO_ms and NLO_ms RATES AS THE PROSPINO2 OUTPUT\n\n  prospino.dat2: long output file with all masses etc.\n\n  prospino.dat3: log file with spectrum and all kinds of parameters\n\n  [note that all these output files will be overwritten by the code if you run the code for a second time]\n\n(4) Comment on LQ processes:\n\n  by default the scalar LQ mass is set to the stop1 mass, for example in the SHLA input file\n  the pair production cross section depends on nothing but the mass\n  for the associated production cross section the over-all coupling \\lambda is set to unity\n  also for the associated production, the initial-state quark flavor has to be set in Xprospino_subroutine.f\n\n(5) Comment on charged Higgs processes:\n  \n  these processes are not officially part of Prospino! \n  they are simply in there for my convenience, the code will stop running if you pick these final states\n  please drop me a private email if you would like to use these codes \n\n(6) In case you would like to know: structure of the f90 files\n\n  file name:                module in file                external modules required \n                            content of modules: functions and subroutines\n\n   prospino_main.f90:        main                          xx_kinds, xx_prospino_subroutine, \n                                        \n   Xprospino_subroutine.f90: xx_prospino_subroutine        xx_in_out, xx_kinds, xx_pass_integ, \n                                                           xx_public_variables, xx_initialize,\n                                                           xx_integral_ng, xx_integral_ns, xx_integral_nn, xx_integral_ll\n                                                           xx_integral_tb, xx_integral_lq, xx_integral_le,\n                                                           xx_integral_hh, xx_integral_ht\n                             subroutines: INIT_GLOBAL, INIT_ITERATION, INIT_VEGAS, INIT_SUSY, INIT_ALPHAS, INIT_ALPHAS_NLO\n                             internal subroutines: TEST_SETTINGS_GLOBAL, TEST_SETTINGS_ITERATION\n\n   Xinitialize.f90:          xx_initialize                 xx_in_out, xx_kinds, xx_pass_integ, xx_public_variables\n                             subroutines: INIT_GLOBAL, INIT_ITERATION, INIT_VEGAS, INIT_SUSY, INIT_ALPHAS, INIT_ALPHAS_NLO\n                             internal subroutines: TEST_SETTINGS_GLOBAL, TEST_SETTINGS_ITERATION\n\n   Xin_out.f90:              xx_in_out                     xx_kinds, xx_pass_integ, xx_public_variables\n                             subroutines: READ, DAT1, DAT2, DAT3\n\n   Xinteg_ng.f90:            xx_integral_ng                xx_kinds, xx_pass_integ, xx_public_variables\n                             functions:   IFCT_NG_X12\n                             subroutines: COUPLING_NG\n\n   Xinteg_ns.f90:            xx_integral_ns                xx_kinds, xx_pass_integ, xx_public_variables\n                             functions:   IFCT_NS_X12\n                             subroutines: COUPLING_NS_SIM, COUPLING_NS_EXT\n\n   Xinteg_nn.f90:            xx_integral_nn                xx_kinds, xx_pass_integ, xx_public_variables\n                             functions:   IFCT_NN_X12\n                             subroutines: KIN_NN_SIM, COUPLING_NN\n\n   Xinteg_ll.f90:            xx_integral_ll                xx_kinds, xx_pass_integ, xx_public_variables\n                             functions:   IFCT_LL_X12\n                             subroutines: KIN_LL_SIM, COUPLING_LL\n\n   Xinteg_tb.f90:            xx_integral_tb                xx_kinds, xx_pass_integ, xx_public_variables\n                             functions:   IFCT_TB_X12\n\n   Xinteg_lq.f90:            xx_integral_lq                xx_kinds, xx_pass_integ, xx_public_variables\n                             functions:   IFCT_LQ_X12\n\n   Xinteg_le.f90:            xx_integral_le                xx_kinds, xx_pass_integ, xx_public_variables\n                             functions:   IFCT_LE_X12\n                             subroutines: LUMINOSITY_LE\n\n   Xinteg_hh.f90:            xx_integral_hh                xx_kinds, xx_pass_integ, xx_public_variables\n                             functions:   IFCT_HH_X12\n                             subroutines: COUPLING_HH\n\n   Xinteg_ht.f90:            xx_integral_ht                xx_kinds, xx_pass_integ, xx_public_variables\n                             functions:   IFCT_HT_X12\n                             subroutines: COUPLING_HT\n\n   Xvital.f90:               xx_kinds\n                             xx_pass_integ                 xx_kinds\n                             xx_public_variables           xx_kinds\n\n   * n.b.: modules used/linked only in modules, not in functions/subroutines!\n", 
  "read_at": 1462557086, 
  "description": "[2.1.17Oct14] UNOFFICIAL repo of Prospino2 written by T. Plehn", 
  "README.md": "[Prospino2](http://www.thphys.uni-heidelberg.de/~plehn/index.php?show=prospino)\n=========\n\n### Authors\n\n   W. Beenakker, R. Hopker, M. Spira, and T. Plehn\n\n### References\n * http://www.thphys.uni-heidelberg.de/~plehn/index.php?show=prospino and references therein for respective processes.\n * For old versions, [arXiv:hep-ph/9611231](http://arxiv.org/abs/hep-ph/9611232).\n\n", 
  "id": 28097166
}