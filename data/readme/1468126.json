{
  "read_at": 1462509764, 
  "description": "Rolling Hash C++ Library", 
  "README.md": "# Randomized rolling hash functions in C++ \n[![Build Status](https://travis-ci.org/lemire/rollinghashcpp.png)](https://travis-ci.org/lemire/rollinghashcpp)\n\n\nLicense: Apache 2.0\n\n\n## What is this?\n\nThis is a set of C++ classes implementing various recursive n-gram hashing techniques, also called rolling hashing (http://en.wikipedia.org/wiki/Rolling_hash), including:\n\n*   Randomized Karp-Rabin (sometimes called Rabin-Karp)\n*   Hashing by Cyclic Polynomials (also known as Buzhash)\n*   Hashing by Irreducible Polynomials\n\n\n##  Code sample\n\n        const uint n(3);//hash all sequences of 3 characters\n        const uint L(7); // you need 7 bits\n        CyclicHash<uint32> hf(n,L );// if you want 64-bit values replace uint32 by uint64\n        for(uint32 k = 0; k<n;++k) {\n                  chartype c = ... ; // grab some character\n                  hf.eat(c); // feed it to the hasher\n        }\n        while(...) { // go over your string\n           hf.hashvalue; // at all times, this contains the hash value\n           chartype c = ... ;// point to the next character\n           chartype out = ...; // character we want to forget\n           hf.update(out,c); // update hash value\n        }\n\n\n\n##  Requirements \n\nA recent GNU GCC C++ compiler or a recent CLANG.\n\n##  What should I do after I download it?\n\n\ntype:\n\n        make\n\nthen\n\n        ./unit\n\nthen\n\n        ./speedtesting\n\n\n\n\n##  References\n\nDaniel Lemire, Owen Kaser: Recursive n-gram hashing is pairwise independent, at best, Computer Speech & Language, Volume 24, Issue 4, October 2010, Pages 698-710 http://arxiv.org/abs/0705.4676\n\nDaniel Lemire, The universality of iterated hashing over variable-length strings, Discrete Applied Mathematics 160 (4-5), 2012. http://arxiv.org/abs/1008.1715\n\nOwen Kaser and Daniel Lemire, Strongly universal string hashing is fast, Computer Journal (2014) 57 (11): 1624-1638.\nhttp://arxiv.org/abs/1202.4961\n\n", 
  "id": 1468126
}