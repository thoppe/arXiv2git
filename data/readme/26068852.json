{
  "read_at": 1462554038, 
  "description": "A simple MCMC code for cosmological parameter estimation where only expansion history matters.", 
  "README.md": "april\n=====\n\nA simple MCMC code for cosmological parameter estimation where only\nexpansion history matters. Written by Anze Slosar and Jose Vazquez.\n\nThis is the github version, based off internal BOSS svn. It should\nwork, but feel free to complain to me (Anze Slosar).\n\nThis code is not intendent as a replacement of CosmoMC. It simply\nreimplements the homogeneus part of cosmomc code. This allows one to\nfit BAO data, etc. in the spirit of arxiv:xxxx for any bat-shit crazy\nmodel without much hassle and very quickly. One just needs to define\nhow Hubble parameter varies with redshift. It might also be useful for\npedagogical reasons.\n\n\nDirectory structure:\n--------------------\n\npy - analysis code  \nRun - actual executables - you should read them like scripts  \ndata - data files  \nchains - empty directory to store chains  \nexample - a simple example to see how the code works  \ntools - various tools we use for plotting, etc.  \nattick - various hacks and tests  \n\nQuick start:\n------------\n\nA quick start with the code, try:\n\n`examples/TestRun.py`  \nand then, after a few minutes  \n`examples/TestPlot.py`  \n\n\nBut this is now how we normally run the code. To fit for LCDM using\nBOSS BAO without assuming you know what rd is, say something\n\n`Run/driver.py pre LCDM BBAO`\n\nTo fit for oLCDM using Lyman-alpha BAO and LyaCross BAO +Planck say \n\n`Run/driver.py phy oLCDM LBAO+Planck`\n\n`Run/driver.py` will print all possible options\n\n\nHow does it work:\n-----------------\n\nIt was supposed to be minimal, allowing any one to add models, without\nbeing spaghetti.\n\nThere are three basic kind of objects:\n\nCosmology objects that define models. These are based on\nBaseCosmology.py \n\nLikelihood objects that calculate Likelihood given some theory\npredictions from Cosmoloy. These are based on BaseLikelihood. You tell\nthem the theory you want to use with setTheory and then you can ask\nthem about loglikelihood(). They can also tell you which Parameters\nthey have with freeParameters. These are based on Parameter.py and are\nreally simple -- name defines the parameter (like white socks define\nan american).\n\nAnalyzers -- these take likelihoods and do something with it (see below)\n\nTo see how data is used, start with BOSSLikelihoods.py This defines\nobjects that actually correspond to real likelihoods.  These are then\nchucked into one single CompositeLikelihood as seen in Run/TestRun.py.\n\nTo see how models are created, have a look, for example at\nLCDMCosmology.py and oLCDMCosmology.py.\n\nParameters and priors are defined in ParamDefs.py\n\nLCDMCosmology inherits BaseCosmology and defines three functions:\n\nfreeParameters - here we announced what are the parameters in this\nmodel\n\nupdateParameters - here we process a request to update\nparameters. Here we store parameters, but must also update rs of the\nBaseCosmogy if it is affected. At the moment we keep rs constant.\n\nHSSquared_a - this is the relative Hubble parameter squared, \n              in simple ternms H(a)**2/H0**2\n\nBaseCosmology deals with integrating the above to various distance\nmoduli. It also handles the prefactors of the form c/(H0*rs). We can\neither have h=H0/100 as a parameter and then believe that rs is\nwhatever it is, or have the entire phenomenological prefactor\nc/(H0*rs) as a free parameter. One can switch this on as demonstrated\nin Run/TestRun.py with T.setVaryPrefactor().\n\nRadiationAndNeutrinos.py deals with, well, radiation and neutrino components.\nNuDensity.py calculates the annoying neutrino integral.\n\n\nAnalyzers:\n----------\n\nSo, one can then create a composite Likelihood by saying e.g.\n\nL=CompositeLikelihood([\n    DR11LOWZ(),\n    DR11CMASS(),\n    DR11LyaAuto(),\n    DR11LyaCross()\n    ])\n\nand then connect it to a theory, like \nL.setTheory(oLCDMCosmology())\n\nThis is now a nice package:\nL.freeParameters() will tell you which parameters you can jiggle.\nL.updateParams() allows you to update them.\nL.loglike() returns the total log likelihood.\n\nDifferent Analyzers can use this interface to  do different things\nwith this likelihood, without knowing anything about the underlying\ntheory. There are two attached:\n\nMaxLikeAnalyzer - finds the maximum and then uses second derivative to\nget errors, only that that doesn't quite work and I think this is due\nto linear interpolation in the chi2 tables\n\nMCMCAnalyzer - a vanilla MCMC samples compatible with CosmoMC format\n\ntools/cosmich.py is an archaic ugly script that I use for plotting.\n\n\n\n\n", 
  "id": 26068852
}