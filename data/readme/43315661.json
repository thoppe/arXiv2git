{
  "id": 43315661, 
  "read_at": 1462548935, 
  "README.rst": "======\nCyCuba\n======\n\nA Cython wrapper around the Cuba multidimensional integration library.\n\nWhat is Cuba?\n-------------\n\nThe Cuba integration library (http://www.feynarts.de/cuba/) provides both \nMonte Carlo and deterministic rules for the evaluation of multidimensional \nintegrals.\n\nWhat does CyCuba provide?\n-------------------------\n\nCyCuba provides an interface between the Python interpreter and the Cuba\nintegration library. It allows the user to quickly and easily integrate their\nPython functions, including for situations where the SciPy quadrature routines\n(http://docs.scipy.org/doc/scipy/reference/integrate.html) are inappropriate due\nto excessive dimensionality or non-smooth integrand functions. CyCuba is\nintended to greatly simplify the process of evaluating these integrals, while\nsimultaneously providing transparent access to all of the different options of\nthe Cuba library for those users who need it.\n\nNotably, CyCuba does NOT yet support concurrent evaluation of integrals, and\ntesting for some integration options remains incomplete. When you find bugs or\nincomplete features that you need, please post an issue to GitHub\n(https://github.com/woodscn/CyCuba), and we will try to resolve it right away.\n\nRequirements\n------------\n\n- python 3.5\n- Cuba\n- cython\n- numpy\n- pytest\n\n\nInstallation\n------------\n\nThe simplest way to install CyCuba is using the `conda` distribution\npackage. The command to do so is: `conda install -c woodscn cycuba`.\n\nCyCuba relies on a working copy of the Cuba library. The most current version of\nthis library can be obtained from http://www.feynarts.de/cuba/, along with\npapers which describe in detail the algorithms used in Cuba, along with the\nvarious options and capabilities the library provides. This library and its\naccompanying header files should be placed in a \"normal\" location for your\nsystem, or else environment variables can be modified in order to point to their\nlocation. For instance, if the library is placed in ``~/lib/`` and the library\nheader file ``cuba.h`` is placed in ``~/include/``, then one could write\n(OS X or Linux): \n\n    export CFLAGS=\"-I ~/include/ $CFLAGS\"\n    export LDFLAGS=\"-L ~/lib/ $LDFLAGS\"\n\nOne can also handle the library location using a setup.cfg file. Once this\nlibrary is available, the CyCuba package can be installed using the normal\ncommand: ``python setup.py install``. You will need to have the ``cython``,\n``numpy``, and ``pytest`` packages installed.  The package tests may be run as\n``cycuba.test()``.\n\n\nUsage\n-----\n\nCyCuba provides wrappers to the four Cuba routines: Vegas, Suave, Divonne, and\nCuhre. Detailed descriptions of these routines are available in the Cuba\ndocumentation (Ref. 1), and only the necessary Python equivalents are given\nhere.\n\nSimplest possible usage:\n\n``Vegas/Suave/Divonne/Cuhre(integrand, ranges=None)``\n\n- ``integrand``: Python callable object. The signature is ``y = f(*args)``, where y\n  is an iterable. The Python wrapper handles the necessary conversion to the\n  required Cuba form. The ``userdata`` pointer is not available; if context must\n  be provided to ``integrand``, then it should be defined as a callable class,\n  and the context stored as state. The additional information Cuba provides,\n  e.g. ``nvec``, or ``weight`` for Vegas, are not supported at this time.\n\n- ``ranges``: Python iterable of len(2) iterables. Defines hypercubic\n  integration domain, e.g. [[x0min, x0max], [x1min, x1max], ... [xnmin, xnmax]]\n  If unspecified, defaults to [[0, 1], [0, 1], ...]\n\n\n\nCommon arguments:\n\n- ``epsrel=1e-3``, ``epsabs=1e-12``: The requested relative and absolute accuracies.\n\n- ``mineval=0``, ``maxeval=1e6``: The minimum and maximum allowed number of\n  ``integrand`` evaluations.\n\n- ``verbosity=0``: The requested verbosity level, ranging from 0 (lowest) to 3\n  (highest).\n\n- ``last_samples_only=False``: Use only the last, largest set of samples to\n  compute the final integral value.\n\n- ``do_not_smooth=False`` (Vegas and Suave only): Do not smooth the importance\n  function. Recommended for non-smooth integrands.\n\n- ``retain_state_file=False``: Do not delete the state file upon successful\n  termination of the integration. Note that the use of state files is currently\n  unsupported.\n\n- ``file_grid_only=False``: Ignore integrator state, even if state file is\n  present. Allows the reuse of one grid for a different integrand. Note that the\n  use of state files is currently unsupported.\n\n- ``seed=0``: Seed the random number generator. Uses Sobol quasi-random numbers\n  if set to 0. If non-zero, the specific random number generator is determined\n  by ``level``.\n\n- ``level=0``: Further specify a random number generator, provided ``seed`` is\n  non-zero. If ``level`` is set to zero, use Mersenne Twister. If non-zero, use\n  Ranlux with a generation period ``p`` defined by ``level`` as follows:\n  - 1: ``p`` = 48: Very long period; passes gap test but fails spectral test. \n  - 2: ``p`` = 97: Passes all known tests, but theoretically still defective.\n  - 3: ``p`` = 223: Very small chance of observing theoretical correlations.\n  - 4: ``p`` = 389: Highest possible luxury.\n  - 5-23: Default to 3.\n  - 24+: Specify ``p`` directly.\n\n``def Vegas(integrand, ranges=None, **kwargs)``\n\nVegas-specific arguments:\n\n  - ``nstart=1e3``: Starting number of integrand evaluations per iteration.\n    \n  - ``nincrease=5e2``: Increase in number of integrand evaluations per\n    iteration.\n    \n  - ``nbatch=1e3``: Batch size for sampling.\n    \n  - ``gridno=0``: Slot in internal grid table. See Cuba documentation.\n\n``def Suave(integrand, ranges=None, **kwargs)``\n\nSuave-specific arguments:\n\n - ``nnew=1e3``: Number of new integrand evaluations in each subdivision.\n\n - ``nmin=2``: Minimum number of samples a former pass must congtribute to a\n   subregion to be considered in that region's compound integration\n   value. Increasing ``nmin`` may reduce jumps in the chi-squared value.\n\n - ``flatness=25``: The type of norm used to compute the fluctuation of a\n   sample. Choose a large value for flat integrands, and a smaller value for\n   volatile integrands. Very large values (> ~ 200) may cause double-precision\n   overflow.\n\n``def Divonne(integrand, ranges=None, **kwargs)``\n\nThe user is cautioned that Divonne is the most complex of the routines in Cuba,\nand testing for this part of the wrapper does not provide complete coverage of\nall the available options. In particular, specification of ``xgiven`` and\n``peakfinder`` is untested, and may contain bugs. The developers welcome any\ntest routines that may be contributed to extend test coverage for Divonne (and\nthe other routines). \n\nDivonne-specific arguments (See Ref. 1 for description):\n\n - ``key1=47``\n\n - ``key2=1``\n\n - ``key3=1``\n   \n - ``maxpass=5``\n\n - ``border=0``\n\n - ``maxchisq=10``\n\n - ``mindeviation=0.25``\n\n - ``xgiven=[]``\n\n - ``nextra=0``\n\n - ``peakfinder=None``\n\n``def Cuhre(integrand, ranges=None, **kwargs)``\n\nCuhre-specific arguments:\n\n - ``key=1``: Select the cubature rule of degree ``key``. Available choices are\n   7, 9, 11 (3-dimensions only), 13 (2-dimensions only). For other values, the\n   highest available rule for the dimensionality is used.\n\n\nReferences\n----------\n\n1. Cuba - a library for multidimensional numerical integration\n(http://arxiv.org/abs/hep-ph/0404043)\n\n2. Concurrent Cuba (http://arxiv.org/abs/1408.6373)\n\n\n", 
  "description": ""
}