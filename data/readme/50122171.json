{
  "read_at": 1462552983, 
  "description": "0-shot learning with SJE objective.", 
  "README.md": "# Structured Joint Embedding (SJE) for 0-shot learning\nA Theano-based implementation of SJE for 0-shot learning [1].\nIt is an unofficial implementation of [1] and may not be reliable.\nThe source code has only an educational purpose.\n\n[1] Z. Akata et. al. \"Zero-Shot Learning with Structured Embeddings\"\n(link: http://arxiv.org/pdf/1409.8403v1.pdf).\n\n# 0-shot learning\nIn the 0-shot learning scenario, the training and test classes are \ndisjoint. To facilitate recognition a model has to successfully transfer\nadditional information (for instance attributes) from known to unknown classes.\nIn this example first an image is mapped into its representation \n(input embedding) with a global feature extractor (e.g. CNN). Next, \na class name is encoded into its class representation\n(output embedding) using word2vec. Later, we train a compatibility\nfunction such that \n```\nF(input_embedding(image), output_embedding(class)) \n```\nis large if the 'image' has 'class'. \n\nIn the test time, a given image 'im' is recognized by assigning a class 'class*'\nthat maximizes the compatibility, that is\n```\nclass* = \\argmax_\\{cl \\in test_class} F(input_embedding(im), output_embedding(cl))\n```\n\nThis approach follows an intuition: similar classes exhibit similar output embeddings \n(for instance similar classes have similar attributes, or similar wiki descriptions, \nor similar word2vec representation). Next, a compatibility between image\nrepresentations (input embeddings) and the corresponding class representations\n(output embeddings) must be learnt. \n\n# Structured Joint Embedding (SJE)\nThe objective function is a binary ranking loss that separates positive\ncompatibilities from negative compatibilities \n(following the ideas of structured SVM formulation).\nA compatibility is a function that measures dissimilarity between\ninput and output embeddings. \n\nThe compatibility function between x and y is expressed as xWy with\nW being the compatibility matrix. This function is also  similar to \nMahalanobis distance but without positive definite or even symmetric \nconstraints for the compatibility matrix.\nThus the input and output embeddings can exhibit different dimensions.\nA more detailed information can be found in [1].\n\n# Experiments\nI tested SJE on the CUB dataset with class word2vec output embedding,\nand achieved test accuracy ~= 22% \nThis result corresponds to Table1, SJE column, CNN row in CUB \\phi^w in [1].\n\n# Tested on\n * Python 2.7.3\n * Theano:167df2c43d1d08000105d448ff04b5bf2a6400c4\n", 
  "id": 50122171
}