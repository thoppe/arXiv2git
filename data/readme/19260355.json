{
  "read_at": 1462550777, 
  "description": "Fast pseudo-random number generator based on normal numbers", 
  "readme.txt": "    BCNRANDOM, last change 27/4/2014\n\n\tThis is the C language version of the library bcnrandom, which  generates\n\tuniform random variates of type double on (0,1), using the linear\n\tCongruential Generator (LCG) by J. Borwein and D. Bailey. \n\n\tThere are two generators, the basic and the combined. The basic generator is of\n\ta good quality and has the period of approx 10^15. Its advantage is that it is\n\tvery fast, twice as fast if compared to the very basic (and poor quality) standard \n\tC function rand(). The combined generator is a bit slower (still faster than rand()), \n\tbut it has the period of 10^23, and it passes all the tests in BigCrush suite\n\tof tests. The random numbers are not of cryptographic strength, but are well\n\tsuited for numerical simulations, especially in parallel processes, where\n\tthe sam sequence of random variate is obtained when using any number of threads.\n\tThis is because of the valuable skip ahead feature. The seed is the starting position\n\tin the sequence of random variates.\n\n\tThe implementation is in the .h file, which means that only include statement is needed\n\tto start using this generator.\n \n\n \tThe random variates in the basic generator are generated by iterating\n\t                       z_{k+1} = 2^53 z_k mod 3^33. \n\tThe actual random variate is computed by \n\t                            x = z_{k+1} * 3^-33. \n\tThe period is approx 10^15. Random variates can be generated in parallel \n\tand in multiple threads, although this version of the code is not always\n\tguaranteed to be thread safe, see notes below.\n\n\tA combined LCG is also used to ensure even better statistical quality\n\tof the generated sequence. The combined generator is marginally slower than\n\tJ. Borwein and D. Bailey's LCG, but gives a longer period and passes\n\tBirthday spacings and Closed pairs tests as well.\n\n\tThe pseudorandom sequence passes statistical tests of BigCrunch test of\n\tTestU01 suite. The description of the method is published in\n\n\tBeliakov, G., Creighton, D., Johnstone, M. and Wilkin, T. 2013, Efficient implementation \n\tof Bailey and Borwein pseudo-random number generator based on normal numbers, \n\tComputer physics communications, vol. 184, no. 8, pp. 1999-2004.\n\n\tG. Beliakov, M. Johnstone, D. Creighton, T. Wilkin, 2012, An efficient implementation of \n\tBailey and Borwein's algorithm for parallel random number generation on graphics processing\n\tunits, Computing 94(5): 433-447.\n\n\tG. Beliakov, M. Johnstone, D. Creighton, T. Wilkin, Parallel random\n\tvariates generator for GPUs based on normal numbers, ArXiv 1206.1187\n\thttp://arxiv.org/abs/1206.1187,\n\n\tsee also\t\n\thttp://www.deakin.edu.au/~gleb/bcn_random.html\n\n\t\n\tUsage: Follow the examples presented here.\n\n\t\tThe user desires to generate a sequence of pseudorandom variates starting from \n\t\ta chosen position (seed).  The value of seed should be in the range of\n\t\t            [0,3448138688185369]  =  [0,2^53-3^33-100]\n\n     Step 1 Initialize the generator with \"seed\" \n\t\t\t\n\t\t \tseedbcn(seed);\n\n\n     Step 2 is to generate random variates. It is accomplished by calling  this code:\n\t\t\t\n    \t\tfor (int i = 0 ; i < N ; i++)\n   \t\t\t{\n\t\t\t\tgenerated_value =  randbcn();\n\t\t\t...// using generated_value\n        \t\t}\n\t\t\t\n\n\t\t\t\n\tExample program :\n\t\tSee file testbcnrand.c\n\n\tMore detailed comments are at the start of bcnrandom.h file\n\n\tAll essential code is in bcnrandomc.h file. The file testbcnrand.c is a test/\n\tillustration program. Compile the test program using make. Then\n\texecute using ./bin/testrand \n\t\n\n\tThis program is freeware. \n\n\tPlease cite our work\n\tBeliakov, G., Creighton, D., Johnstone, M. and Wilkin, T. 2013, Efficient implementation \n\tof Bailey and Borwein pseudo-random number generator based on normal numbers, \n\tComputer physics communications, vol. 184, no. 8, pp. 1999-2004.\n\n\tG. Beliakov, M. Johnstone, D. Creighton, T. Wilkin, 2012, An efficient implementation of \n\tBailey and Borwein's algorithm for parallel random number generation on graphics processing\n\tunits, Computing 94(5): 433-447.\n\tsee also\thttp://arxiv.org/abs/1206.1187, http://www.deakin.edu.au/~gleb/bcn_random.html\n\n\tCopyright Gleb Beliakov, Tim Wilkin and Michael Johnstone, 2013\n\n\n\n\n", 
  "id": 19260355
}