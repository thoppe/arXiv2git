{
  "read_at": 1462826697, 
  "description": "Code for working with tanglegrams.", 
  "README.md": "# tangle\n\n[SAGE](http://www.sagemath.org/) and [GAP4](http://gap-system.org/) code for working with tanglegrams.\n\n[![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.16427.svg)](http://dx.doi.org/10.5281/zenodo.16427)\n\nThis code enumerates and checks the enumeration of tanglegrams, and is to accompany the papers\n\n* Billey, S., Konvalinka, M., & Matsen IV, F. A. (2015). On the enumeration of tanglegrams and tangled chains. <http://arxiv.org/abs/1507.04976>\n* Matsen IV, F. A., Billey, S., Kas, A., & Konvalinka, M. (2015). Tanglegrams: a reduction tool for mathematical phylogenetics. <http://arxiv.org/abs/1507.04784>\n\nIt does this by enumerating double cosets of the symmetric group using GAP4.\nThis is nice in that it gives an explicit list of the tanglegrams, but to actually count such structures please refer to the Billey et al paper for much more efficient formulas.\n\n\n## Dependencies and setup\nFollow [these instructions](http://www.liafa.univ-paris-diderot.fr/~labbe/blogue/2013/02/using-sage-in-the-new-ipython-notebook/) to run the `.ipynb` files in SAGE.\nThis project uses git submodules, so [init and update appropriately](http://git-scm.com/book/en/Git-Tools-Submodules#Cloning-a-Project-with-Submodules).\n\nOther dependencies:\n\n* [SCons](http://www.scons.org)\n* [pandas](http://pandas.pydata.org/)\n* [seaborn](https://stanford.edu/~mwaskom/software/seaborn/)\n\n\n## Running the code\n\nTo run the code, just invoke `scons` in this directory.\nTo see how the code would be run if you did this, invoke `scons -n`.\nThe parameters for how the code is run are in the individual `SConscript` files for the directories describing the various types of tanglegrams.\n\nThis will run the two core scripts, `gen-tangles.py` and `check-tangles.py`.\nThe former script generates tanglegrams with given parameters, and the latter checks to make sure they actually correspond to distinct tanglegrams.\n\nThere are two output formats, the `.idx` file and the `.sobj` file.\nThe `.idx` file is simply a whitespace-separated tabular file enumerating the tanglegrams.\nA line such as\n\n    0       3       ((((1,2),3),4),5);      (((1,2),(3,5)),4);      DoubleCoset(Group([(1,2)]),(),Group([(3,5),(1,2),(1,3)(2,5)]))\n\nsays that this tanglegram is composed of trees numbered 0 and 3 (zero indexed in the corresponding tree file), with their Newick strings, and then the corresponding coset.\nThe `.sobj` file is a binary SAGE format saving the tanglegrams directly; see the SAGE documentation for how to load such files.\n\n\n## Plotting tanglegrams\n\nThe `plot-tangle.R` script will plot the generated tanglegrams like so:\n\n![](http://i.imgur.com/Z7FGB1p.png)\n\nThis example was generated by running\n\n    scripts/plot-tangle.R rooted-asymmetric/tangle7.idx 7230 output-filename.svg\n    \nwhere the arguments are:\n\n* the path to an index file containing your tanglegram\n* the 1-indexed line number of your tanglegram in that file\n* an output file path\n\nFor this functionality, you will need R and the\n[ape](https://cran.r-project.org/web/packages/ape/index.html) and\n[dendextend](https://github.com/talgalili/dendextend)\npackages, both of which you can install using `install.packages`.\n", 
  "id": 24509525
}