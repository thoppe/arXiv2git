{
  "read_at": 1462558911, 
  "description": "An expert system for optimization problems", 
  "Readme.md": "# Ask Minmax!\n\nAsk Minmax is an expert system for optimization problems targeted towards the non-expert user.\n\n\n## How it works\n * Ask-minmax associates a **prior** to every problem and question in the database. \n * The prior of a problem is proportional to the number of times there is a query intended for that particular\n  problem. \n * At the beginning of every iteration, it asks the user for a human readable [summary](summaries.md).\n * [Document vectors](https://cs.stanford.edu/~quocle/paragraph_vector.pdf) have been trained on \n  abstracts downloaded from arxiv and google-scholar.\n * A softmax classifier is built on top of these document vectors to output a probability distribution on\n the problems.\n * The prior thus reflects this probability distribution together with the frequency. \n * The prior of a question reflects the **gain in information** by asking the question  - in other words\n it is inversely proportional to the **expected conditional entropy** of the distribution of problem posteriors\n conditioned on the response to this question.\n * At every step a question is sampled proportional to it's posterior.\n * The posteriors of a problem are updated according to the **confidence** level in your answer.\n * The posteriors of a question are updated reflecting the information gain provided for this new distribution.\n * The algorithm outputs the most popular problems by doing a 1 dimensional k-means (a.k.a\n[Jenks natural breaks](https://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization) ).\n * A similar (clustering) idea is applied to questions, at every step only the \"most useful questions\" are\n  sampled from.\n * The algorithm is greedy in the sense that it only cares about questions that reduce the entropy on the\n posterior distribution supported on the \"most relevant\" (coming from Jenks/k-means) problems.\n * One can visualize the changing distribution in a simple matplotlib plot.\n \n## Prerequisites: \n\n * Python 3\n * A running [Mongodb](https://www.mongodb.org/) server \n * [pymongo](https://pypi.python.org/pypi/pymongo/)\n * [jenks](https://github.com/perrygeo/jenks)\n * [scipy](http://www.scipy.org/)\n * [numpy](http://www.scipy.org/)\n * [matplotlib](http://matplotlib.org/)\n * [nltk](http://www.nltk.org/)\n * [scikit-learn 0.17](https://pypi.python.org/pypi/scikit-learn/0.17)\n * [gensim](https://pypi.python.org/pypi/gensim)\n\n## Quickstart:\n\nClone the repository and use\n\n```shell\nsudo python3 setup.py install\n```\n\nTo create an instance of the Expert system first import the `Expert` class and\nthen use the basic constructor\n\n```python\nfrom askminmax.expert import Expert\nexpert = Expert()\n```\n\nIt will ask you to either import stuff from an existing database or it will give \nyou the option to create one of your own. Finally to run the expert system use\n\n```python\nexpert.run(data_set, doc2vec_model_path, classifier_path)\n```\nwhere `data_set` is the path to the data set (for e.g. [dataset](dataset)), \n `doc2vec_model_path` is the path to the Doc2Vec model (for e.g. \n [models/model_2015-11-25_08-44-27.d2v](models/model_2015-11-25_08-44-27.d2v)), and \n `classifier_path` is the path to the softmax classifier \n (for e.g. [models/model_2015-11-28_21-50-40.log](models/model_2015-11-28_21-50-40.log)).\n\n## Doc2Vec model examples\n\nYou can train your own doc2vec model on your domain specific dataset. In this case we train it on\nabstracts downloaded from `arxiv` and `google-scholar`. Here are some interesting examples in IPython:\n\n```python\nIn [1]: from gensim.models import Doc2Vec\nIn [2]: model = Doc2Vec.load('model/[Insert model name]')\nIn [3]: model.doesnt_match(['bipartite', 'non-bipartite', 'stable', 'matching', 'scheduling'])\nOut[3]: 'scheduling'\nIn [4]: model.doesnt_match(['facility location', 'minimum cut', 'maximum cut', 'sparsest cut'])\nOut[4]: 'facility location'\nIn [5]: model.doesnt_match(['scheduling', 'routing', 'maximum', 'TSP', 'facility location'])\nOut[5]: 'maximum'\n```\n\n\n\n", 
  "id": 35115250
}