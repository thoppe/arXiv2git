{
  "read_at": 1462548537, 
  "description": "A Mathematica Package for Finding Forbidden Minors of a Given Graph Property", 
  "README.md": "\n# Minor-Minimal Graph Functions\n\nA Mathematica package that contains functions \nrelated to finding the forbidden minors of a given graph property.\nIn particular, this package has functions relating to the properties\nof a graph being [apex][APEX], edge-apex, or contraction-apex.\n\n  ![K6 and the Jorgenson Graph](https://raw.githubusercontent.com/mikepierce/MMGraphFunctions/master/images/k6andjorgenson.png)\n\nAccording to the [Robertson&ndash;Seymour Theorem][RST],\ngiven any property of graphs *P* that is closed under taking [minors][MINOR]\n(if graph *G* has *P*, then every minor of *G* has *P*), \nthere is some finite obstruction set of graphs such that \neach obstruction doesn't have *P*, \nbut every minor of an obstruction has *P*.\nThis finite set is referred to as the *minor-minimal non*-P graphs,\nor sometimes also the forbidden minors of the property *P*.\nThe significance of this obstruction set is that it \ncompletely characterizes the graphs with property *P*.\nThat is, a graph *G* has *P* if and only if\nit does not have one of these obstructions as a minor.\n\nThe classic example of this, preceding the \nRobertson&ndash;Seymour Theorem, is [Wagner's Theorem][WAGNER].\nAccording to Wagner's Theorem, a graph is [planar][PLANAR] if and only if\nit does not contain either *K<sub>5</sub>* or *K<sub>3,3</sub>* as a minor.\nTherefore two graphs *K<sub>5</sub>* or *K<sub>3,3</sub>* \nare the obstructions to graph planarity.\n\nThis Mathematica package was created to help search for the \nforbidden minors to the properties of a graph \nbeing apex, edge-apex, or contraction-apex.\nUnfortunately the properties edge-apex and contraction-apex\naren't closed under taking minors. So while their obstruction sets \ndon't completely characterize the property, \nthey are still worthwhile to search for.\n\nFor further reading, see:\n\n -  *Searching for and Classifying the Finite Set\n\tof Minor-Minimal Non-Apex Graphs*, Pierce ([pdf][MPTHESIS])\n -  *Six Variations on a Theme: Almost Planar Graphs*, \n\tLipton, Mackall, Mattman, Pierce, Robertson, and Weinschelbaum \n\t(publication under review)\n -  *Examples of Obstructions to Apex Graphs,\n\tEdge-Apex Graphs, and Contraction-Apex Graphs*, Pierce ([pdf][MPPRESENT])\n -  *The* K<sub>n+5</sub> *and* K<sub>3<sup>2</sup>,1<sup>n</sup></sub>\n\t*families are obstructions to n-apex*, Mattman and Pierce ([arXiv][KN5K321N])\n\n  [APEX]: https://en.wikipedia.org/wiki/Apex_graph\n  [RST]: https://en.wikipedia.org/wiki/Robertson%E2%80%93Seymour_theorem  \n  [MINOR]: https://en.wikipedia.org/wiki/Graph_minor\n  [WAGNER]: https://en.wikipedia.org/wiki/Wagner%27s_theorem\n  [PLANAR]: https://en.wikipedia.org/wiki/Planar_graph\n  [MPTHESIS]: http://www.csuchico.edu/~tmattman/mpthesis.pdf\n  [MPPRESENT]: http://math.ucr.edu/~mpierce/presentation.pdf\n  [KN5K321N]: http://arxiv.org/abs/1603.00885\n\n\n\n# Constants\n\n  This package contains the graphs *K<sub>5</sub>* (as `K5`) \n  and *K<sub>3,3</sub>* (as `K33`) as constants.\n\n# Important Functions\n\n -  `NonApexGraphQ[g]` takes a graph *g*\n    and yields True if *g* is non-apex and False otherwise.\n   \n    There are also functions `NonEdgeApexGraphQ[g]` \n    and `NonContractionApexGraphQ[g]` defined similarly.\n\n -  `MMGraphQ[P, g]` takes a graph property *P* \n    such that *&not;P* is closed under taking minors\n    and a graph *g* and returns True if *g* is minor-minimal\n    with respect to *P* and False otherwise.\n    This function is defined pretty simply as \n    \n        MMGraphQ[P, g] := Return[P[g] && !MemberQ[P /@ SimpleMinors[g], True]];\n\n    There are three specific implementations of this function.\n    Firstly there is `MMNAGraphQ[g] := MMGraphQ[NonApexGraphQ, g]`.\n    There are also functions `MMNEGraphQ[g]` and `MMNCGraphQ[g]`, \n\tbut these have to defined differently because neither of the properties\n    edge-apex or contraction-apex are closed under taking minors.\n\n -  `SimpleMinors[g]` takes a graph *g* and returns\n    a list of the simple minors of *g*. \n    Specifically it returns a list of all distinct graphs \n    that are the result of either deleting an edge, \n    contracting an edge, or deleting a degree-*0* vertex in *g*.  \n    \n    `SimpleMinors[g, n]` returns the distinct minors with a minimum\n    vertex degree of *n*.\n\n# Supplementary Functions\n\n -  `EdgeContract[g, e]` contracts the edge *e* in the graph *g*.\n    Note that this function is built into Mathematica 10.\n\n -  `DeleteGraphDuplicates[{g1, g2, ..., gn}]` removes duplicate graphs \n    (up to isomorphism) from the list\n    *{g<sub>1</sub>, g<sub>2</sub>, &#8230;, g<sub>n</sub>}*.\n\n -  `GraphSimplify[g]` simplifies the graph *g* so that the result\n    will have no degree-*0*, -*1*, or -*2* vertices.\n    \n    `GraphSimplify[]` will print an outline \n\tof the graph simplification algorithm.\n\n -  `GraphColor[g]` displays the graph *g* with edges and vertices colored\n\taccording to their equivalence. In particular, the edges \n\t*e<sub>1</sub>* and *e<sub>2</sub>* (respectively the vertices\n\t*v<sub>1</sub>* and *v<sub>2</sub>*) will be colored the same if\n    *g-e<sub>1</sub>* and *g-e<sub>2</sub>* (respectively \n\t*g-v<sub>1</sub>* and *g-v<sub>2</sub>*) are isomorphic.\n\n -  `GraphModel[g]` displays the graph *g* in various different layouts\n\twith the edges and vertices colored with `GraphColor`.\n\n\t`GraphModel[g, n]` displays *n* different layouts of *g* like above.\n\n   \n\n# ToDo\n \n -  Change the documentation in the package to be more clear and match the README.\n -  Add any of the many relevant functions that I have to this package.\n -  Change `DeleteGraphDuplicates` so that it runs in O(nlg(n)) and preserves order.\n -  Have some kind of code review done. See if any of the functions can be made more efficient.\n    Ask if there is some better way (that I don't already know) to organize a Mathematica package.\n -  Be open to suggestions/recommendations/requests.\n\n\n", 
  "id": 56167667
}