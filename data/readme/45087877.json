{
  "read_at": 1462556460, 
  "description": "Sudoku solver", 
  "README.md": "# go-sudoku\n\n`go-sudoku` is an entry for [Go Challenge 8](http://golang-challenge.com/go-challenge8/).\n\n## Run\n\n`go-sudoku < input.txt`\n\nor, more interestingly:\n\n`go-sudoku -steps < input.txt`\n\n[See example](https://gist.githubusercontent.com/judwhite/792d3336dd4398c50186/raw/4a301869d7b6699e678931cef80f4e8c79137791/sudoku-steps.txt)\n\n## Board input format\n\n```\n1 _ 3 _ _ 6 _ 8 _\n_ 5 _ _ 8 _ 1 2 _\n7 _ 9 1 _ 3 _ 5 6\n_ 3 _ _ 6 7 _ 9 _\n5 _ 7 8 _ _ _ 3 _\n8 _ 1 _ 3 _ 5 _ 7\n_ 4 _ _ 7 8 _ 1 _\n6 _ 8 _ _ 2 _ 4 _\n_ 1 2 _ 4 5 _ 7 8\n```\n\n## Additional arguments\n\nRun `go-sudoku -help` for a full list of optional arguments.\n\n| Argument                | Description\n|-------------------------|-------------\n| `-time`                 | print time to solve\n| `-steps`                | print steps an explanations to solve and eliminate candidates\n| `-generate`             | generate a sudoku puzzle (unfortunately no difficulty selection)\n| `-profile`              | enable CPU and memory profiling\n| `-file`                 | run a set of Sudoku puzzles from a file\n| `-max-puzzles`          | use with `-file` to limit the number of puzzles executed\n\n## How it works\n\n`go-sudoku` first attempts human strategy and ultimately falls back on a SAT solver.\n\nThe SAT solver takes advantage of some Sudoku characteristics to shorten execution time. It's rather good at determining unsolvable boards.\n\n## Resources\n\n- http://www.sudokuwiki.org/Strategy_Families\n- https://en.wikipedia.org/wiki/Simplex_algorithm\n- http://www.nature.com/articles/srep00725#f3\n- http://arxiv.org/ftp/arxiv/papers/0805/0805.0697.pdf\n- Satisfiability Solvers: http://www.cs.cornell.edu/gomes/papers/satsolvers-kr-handbook.pdf\n- http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-005-elements-of-software-construction-fall-2011/assignments/MIT6_005F11_ps4.pdf\n- https://en.wikipedia.org/wiki/Conjunctive_normal_form\n- https://en.wikipedia.org/wiki/DPLL_algorithm\n- https://en.wikipedia.org/wiki/Backtracking\n- https://en.wikipedia.org/wiki/Unit_propagation\n- http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-005-elements-of-software-construction-fall-2011/lecture-notes/\n- [Puzzle Generation](http://zhangroup.aporc.org/images/files/Paper_3485.pdf)\n- http://www.sudokuwiki.org/sudoku_creation_and_grading.pdf\n- http://www.websudoku.com/faqs.php\n- http://planetsudoku.com/how-to/sudoku-squirmbag.html\n- http://www.sudoku-solutions.com/index.php?page=background\n- https://gophers.slack.com/files/mem/F0DHMJBML/top95.txt\n- http://www.websudoku.com/\n- https://en.wikipedia.org/wiki/Exact_cover#Sudoku\n", 
  "id": 45087877
}