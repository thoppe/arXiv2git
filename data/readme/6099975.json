{
  "read_at": 1462558181, 
  "description": "Optimizing Abstract Abstract Machines", 
  "README.md": "Optimizing Abstract Abstract Machines\n=====================================\n\nAuthors: [J. Ian Johnson](http://www.ccs.neu.edu/home/ianj/),\n[Nicholas Labich](http://www.ccs.neu.edu/home/labichn/),\n[Matthew Might](http://matt.might.net/), \n[David Van Horn](http://www.ccs.neu.edu/home/dvanhorn/)\n\nOverview\n--------\n\nAbstracting abstract machines is a lightweight approach to designing\nsound and computable program analyses. Although sound analyzers are\nstraightforward to build under this approach, they are also\nprohibitively inefficient.\n\nThis repository contributes a step-by-step process for going from a\nnaive analyzer derived under the abstracting abstract machine approach\nto an efficient program analyzer. The end result of the process is a\ntwo to three order-of-magnitude improvement over the systematically\nderived analyzer, making it competitive with hand-optimized\nimplementations that compute fundamentally less precise results.\n\nThe repository contains a paper describing the approach and\nsummarizing the results of an empirical evalution; an implementation\nof a framework of analyses that can be instantiated to each step of\nthe optimizations; and a benchmark suite and harness that evaluates\neach optimization.\n\nPaper\n-----\n\nThe paper _Optimizing Abstract Abstract Machines_ is available as a\nPDF from [arXiv.org](http://arxiv.org/abs/1211.3722).\n\nBuilding\n--------\n\nRequires [Racket](http://www.racket-lang.org/) version 5.2 or higher\n(maybe the nightly)\n\n### Running benchmarks\n\nTo make the benchmark harness and all instantiations of\nthe algorithms/abstractions, run\n\n    raco make code/run-benchmark.rkt\n\n(This may take several minutes due to the substantial compile-time\ncomputation involved.)\n\nTo run benchmarks,\n\n    racket code/drive-benchmarks.rkt\n\n(This may take several hours.)\n\nInstructions for modification (times to run, how many threads, etc)\nare inline.\n\n### Building the paper\n\nAfter benchmarks produce their output, run [code/bench/out.sh] to\nproduce [paper/benchmark].  Then, in [paper/], run\n\n    make getbib ; make bibtex ; make ; make\n\nThis will fetch the bibliography info, compile the bibliography, build\nthe paper and the charts using the produced numbers, then rebuild the\npaper to correct references.\n\n[paper/proctime.rkt] is the module that parses [paper/benchmark] and\nbuilds a hash table of raw numbers called timings, if you want to\ninspect more.", 
  "id": 6099975
}