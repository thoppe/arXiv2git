{
  "read_at": 1462553055, 
  "description": "Symbolic Reachability Analysis of the B-Method through ProB and LTSmin", 
  "README.md": "Symbolic Reachability Analysis of B through ProB and LTSmin\n===\n\nThis repository hosts the models of the experimental section in the paper and a guide on how to build and run the tools.\n\nPlease note the implementation **ONLY** works on [Linux] and [Mac OS].\n\nSubmitted and accepted to [iFM 2016], Springer LNCS Volume 9681.\n\nAuthors version available at [arXiv.org].\n\nAuthors:\n---\n\n* Institut fur Informatik, Heinrich Heine University Dusseldorf, Germany\n    - Jens Bendisposto:      [<bendisposto@cs.uni-duesseldorf.de>](mailto:bendisposto@cs.uni-duesseldorf.de)\n    - Philipp Korner:        [<p.koerner@uni-duesseldorf.de>](mailto:p.koerner@uni-duesseldorf.de)\n    - Michael Leuschel:      [<leuschel@cs.uni-duesseldorf.de>](mailto:leuschel@cs.uni-duesseldorf.de)\n* Formal Methods and Tools, University of Twente, The Netherlands\n    - Jeroen Meijer*:        [<j.j.g.meijer@utwente.nl>](mailto:j.j.g.meijer@utwente.nl)\n    - Jaco van de Pol:       [<j.c.vandepol@utwente.nl>](mailto:j.c.vandepol@utwente.nl)\n* Department of Computer Science, University of Surrey, United Kingdom\n    - Helen Treharne:        [<h.treharne@surrey.ac.uk>](mailto:h.treharne@surrey.ac.uk)\n    - Jorden Whitefield+:    [<j.whitefield@surrey.ac.uk>](mailto:j.whitefield@surrey.ac.uk)\n\n\\* Supported by STW SUMBAT grant: 13859\n\n+ Partly supported by EPSRC grant: EP/M506655/1\n\nTable of Contents\n---\n\n* [Abstract]\n* [Prerequisites]\n* [Installation]\n    - [Linux]\n    - [Mac OS]\n* [Usage]\n    - [ProB CLI]\n    - [ProB to LTSmin link]\n    - [LTSmin Symbolic]\n* [Experiments]\n\nAbstract\n---\n\n*We present a symbolic reachability analysis for the B-method,\nwhich can provide a significant speed up over traditional explicit state model\nchecking. The symbolic analysis is implemented by linking ProB to LTSmin,\na high-performance language independent model checker. The link is achieved\nvia LTSmin's Pins interface, allowing ProB to benefit from LTSmin's analysis\nalgorithms, while only writing a few hundred lines of glue-code, along with\na bridge between ProB and C using ZMQ. ProB supports model checking\nof several formal specification languages such as B, Event-B, Z and Tla+ .\nOur experiments are based on a wide variety of B and Event-B models to\ndemonstrate the efficiency of the new link. Among the tested categories\nare state space generation and deadlock detection; but action detection and\ninvariant checking are also feasible in principle. In many cases we observe\nspeedups of several orders of magnitude. We also compare the results with\nother approaches for improving model checking, such as partial order reduction\nor symmetry reduction. We thus provide a new scalable, symbolic analysis\nalgorithm for the B-method, along with a platform to integrate other model\nchecking improvements via LTSmin in the future*\n\nPrerequisites\n---\n\n*[ProB]* is an animator, constraint solver and model checker for the B-Method. It allows fully automatic animation of B specifications, and can be used to systematically check a specification.\n\n*[LTSmin]* is a high-performance language-independent model checker that allows\nnumerous modelling language front-ends to be connected to various analysis algorithms, through a common interface known as PINS. It offers a wide spectrum of parallel and symbolic algorithms.\n\nInstallation\n---\n\nIn order to clone this repository you will require `git` to be set up and installed on your machine. If you experience any issues please also consult the [LTSmin] website for further instructions.\n\n### Linux\n\nFirstly for Ubuntu we need to install the following dependencies:\n\n```\n$ sudo apt-get install build-essential automake autoconf libtool\nlibzmq3 libzmq3-dev libczmq libczmq-dev libboost-all-dev libpopt-dev\nzlib1g-dev zlib1g flex ant asciidoc xmlto doxygen wget git\n```\n\nOnce these are installed we can now begin to build the required components for the integration.\n\n1. Clone the repository:\n    * `$ git clone git@github.com:lordqwerty/ProB-LTSmin-iFM16.git`\n2. Change directory:\n    * `$ cd ProB-LTSmin-iFM16`\n3. Get the latest ProB LTSmin development tool:\n    * `$ wget http://nightly.cobra.cs.uni-duesseldorf.de/ltsmin/ProB.linux64.tar.gz`\n4. Unpack ProB:\n    * `$ tar xvf ProB.linux64.tar.gz`\n5. Clone the LTSmin ProB Branch:\n    * `git submodule update --init`\n6. Change directory to ltsmin:\n    * `cd ltsmin`\n7. Get the latest modules for ltsmin:\n    * `git submodule update --init`\n8. Run `ltsminreconf`:\n    * `./ltsminreconf`\n9. Configure the LTSmin build:\n    * `./configure --without-spins --without-scoop --prefix ~/bin/ltsmin`\n    * Change the prefix location. At current it will install to your `$HOME` directory under `bin/ltsmin`.\n10. Make and install:\n    * `make all install`\n\n\n### Mac OS\n\nBefore beginning the installation process on Mac we recommend having [Xcode], [Developer Command Line tools](https://apple.stackexchange.com/questions/88535/how-to-download-the-command-line-tools-for-xcode-without-the-downloads-for-devel) and [Homebrew] installed.\n\nBefore we can build the LTSmin ProB link we need to install required dependencies:\n\n```\n$ brew tap homebrew/science\n$ brew install asciidoc xmlto boost popt lzlib flex ant doxygen automake\nautoconf libtool zeromq czmq hwloc wget git\n```\n\nOnce all the dependencies have been installed above we can now continue to build LTSmin ProB link tools:\n\n1. Clone the repository:\n    * `$ git clone git@github.com:lordqwerty/ProB-LTSmin-iFM16.git`\n2. Change directory:\n    * `$ cd ProB-LTSmin-iFM16`\n3. Get the latest ProB LTSmin development tool:\n    * `$ wget http://nightly.cobra.cs.uni-duesseldorf.de/ltsmin/ProB.mac_os.10.7.5.x86_64.tar.gz`\n4. Unpack ProB:\n    * `$ tar xvf ProB.mac_os.10.7.5.x86_64.tar.gz`\n5. Clone the LTSmin ProB Branch:\n    * `git submodule update --init`\n6. Change directory to ltsmin:\n    * `cd ltsmin`\n7. Get the latest modules for ltsmin:\n    * `git submodule update --init`\n8. Run `ltsminreconf`:\n    * `./ltsminreconf`\n9. Configure the LTSmin build:\n    * `./configure --without-spins --without-scoop --prefix ~/bin/ltsmin`\n    * Change the prefix location. At current it will install to your `$HOME` directory under `bin/ltsmin`.\n10. Make and install:\n    * `make all install`\n\nIf you experience issues with xmldoc giving I/O errors you will need to either\nadd the following export to your bashrc, or execute in terminal:\n\n```\nexport XML_CATALOG_FILES=\"/usr/local/etc/xml/catalog\"\n```\n\n\nUsage\n---\n\n### ProB CLI\n\nTo run model checks using only ProB you can use the following commands. From the ProB folder run the following:\n\n```\n$ LD_LIBRARY_PATH=./lib ./probcli [PATH TO MACHINE FILE] --model_check -cs\n```\n\nWhere `[PATH TO MACHINE FILE]` is the machine file you want to run.\n\nYou can then add the following flags to customise the model checking process:\n\n```\nPROPERTIES\n----------\n\n-nodead     Disables deadlock checking\n-noinv      Disables invariant checking\n-noass      Disables assertion checks\n-nogoal     GOALS not checked\n\n\nOTHER\n-----\n\n--model_check   Starts the ProB model checker with the supplied machine\n-cs             Shows coverage statistics after when model check complete\n-log            ProB writes logs of the model check that took place\n-bf             Sets the exploration algorithm to Breadth-first Search\n-h              Shows a list of all available command line options\n\n```\n\nWith the `-cs` flag enabled you will see information about the model check, similar to the following:\n\n```\nALL OPERATIONS COVERED\n\n% All open nodes visited\nModel Checking Time: 320 ms (320 ms walltime)\nStates analysed: 243\nTransitions fired: 946\nNo Counter Example found. ALL nodes visited.\nCoverage:\n States: 244\n Transitions: 946\n Uninitialised states: 1 (root and constants only)\n All 5 possible operations have been covered\n```\n\nWhere all the statistics are self explanatory. More info can be found at the [ProB CLI Documentation].\n\n### ProB to LTSmin link\n\nTo run model checks using LTSmin we need to open a connection to ProB. The following commands open the link.\n\n```\n$ LD_LIBRARY_PATH=./lib ./probcli -ltsmin2 ~/ltsmin.probz [PATH TO MACHINE FILE]\n```\n\nWhere `[PATH TO MACHINE FILE]` is the machine file you want to run.\n\nOnce this loads and shows `Starting LTSmin Server...` open a new terminal and continue with the steps below.\n\n### LTSmin Symbolic\n\nTo run model checks using LTSmin you can use the following commands.\n\n```\n$ ~/bin/ltsmin/bin/prob2lts-sym --vset=lddmc --lace-workers=1 ~/ltsmin.probz\n```\n\nThis will run the model checking process with LTSmin using the Symbolic model checking algorithms. You can then add the following flags to customise the model checking process:\n\n```\n-v              increase verbosity and show matrix information\n--labels        print state variable, type names, and state and action labels\n--matrix        print dependency matrix on exit\n--deadlock      detect deadlocks\n-r              apply transformations to the dependency matrix\n--no-close      Keep the ProB connection open\n-h              Shows a full list of all available options.\n```\n\nUpon completion of the process if a deadlock is found it will look similar to the following:\n\n```\nprob2lts-sym: deadlock found\nprob2lts-sym: deadlock detection took 0.730 real 0.090 user 0.160 sys\nprob2lts-sym: exiting now\nprob2lts-sym: terminating ProB connection\n```\n\nIf no deadlock is found and the model checking is complete then metrics you want to look for are:\n\n```\nprob2lts-sym: connecting to zocket ipc:///home/user/ltsmin.probz\nprob2lts-sym: state vector length is 17; there are 12 groups\n...\nprob2lts-sym: Exploration took 180 group checks and 180 next state calls\nprob2lts-sym: reachability took 0.940 real 0.180 user 0.170 sys\nprob2lts-sym: counting visited states...\nprob2lts-sym: counting took 0.000 real 0.000 user 0.000 sys\nprob2lts-sym: state space has 80719 states, 3118 nodes\nprob2lts-sym: group_next: 714 nodes total\nprob2lts-sym: group_explored: 465 nodes, 588 short vectors total\n```\n\nWhere:\n\n* **Groups** are *Events*, minus one ( -1 ) as the Initialisation event is counted from ProB.\n* **Reachability**:\n    - Real is the Wall clock time in Milliseconds (ms)\n    - User is the time the CPU took to compute the model check in Milliseconds (ms)\n* **State Space** \"has *X* states\" is the number of states, not the nodes.\n* **Short vectors** is the total number of Next State Calls from the model checking process.\n\nRunning `man ~/bin/ltsmin/bin/prob2lts-sym` will show you the manual pages for the tool.\n\n\n\n[iFM 2016]: http://en.ru.is/ifm/\n[arXiv.org]: https://arxiv.org/abs/1603.04401\n[ZeroMQ]: http://zeromq.org/\n[ZeroMQC]: http://zeromq.org/bindings:c\n[LTSmin]: http://fmt.cs.utwente.nl/tools/ltsmin/\n[LTSmin ProB Branch]: https://github.com/Meijuh/ltsmin/tree/prob\n[ProB]: https://www3.hhu.de/stups/prob/index.php/Main_Page\n[ProBNightly]: http://nightly.cobra.cs.uni-duesseldorf.de/ltsmin/\n[Homebrew]: http://brew.sh/\n[Xcode]: https://developer.apple.com/xcode/\n[ProB CLI Documentation]: https://www3.hhu.de/stups/prob/index.php/ProB_Cli\n\n[Abstract]: #abstract\n[Prerequisites]: #prerequisites\n[Installation]: #installation\n[Linux]: #linux\n[Mac OS]: #mac-os\n[Usage]: #usage\n[ProB CLI]: #prob-cli\n[ProB to LTSmin link]: #prob-to-ltsmin-link\n[LTSmin Symbolic]: #ltsmin-symbolic\n[Experiments]: Experiments.md\n[install_ubuntu.sh]: install_ubuntu.sh\n[install_mac.sh]: install_mac.sh\n\n\n", 
  "id": 49576783
}