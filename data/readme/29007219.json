{
  "read_at": 1462551625, 
  "description": "CK extensions - customizable, multi-dimensional and multi-objective software and hardware autotuning", 
  "README.md": "Universal, customizable and multi-objective software and hardware autotuning\n============================================================================\n\nStatus\n======\nThis is a relatively stable repository for universal,\ncustomizable, multi-dimensional, multi-objective \nSW/HW autotuning.\n\nPrerequisites\n=============\n* Collective Knowledge Framework: http://github.com/ctuning/ck\n\nDescription\n===========\nDuring many years of research on machine learning based autotuning \nwe spent more time on data management then on innovation. At the end,\nwe decided to provide a complete solution in CK where our plugin-based \nautotuning tools are combined with our repository and python or\nR-based machine learning plugins.\n\nWe are gradually moving, simplifying and extending autotuning\nfrom Collective Mind into new CK format! Since design and optimization\nspaces are very large, we are trying to make their exploration practical \nand scalable by combining autotuning, crowdsourcing, predictive \nanalytics and run-time adaptation.\n\nModules from this repository will be used to unify:\n* program compilation and execution (with multiple data sets)\n* benchmarking\n* statistical analysis\n* plugin-based autotuning\n* automatic performance modeling\n* static and dynamic features extraction\n* machine learning to predict optimizations and run-time adaptation\n* reproducibility of experimental results\n\nPublications\n============\n* http://hal.inria.fr/hal-01054763\n* http://arxiv.org/abs/1506.06256\n* https://hal.inria.fr/inria-00436029\n* http://arxiv.org/abs/1407.4075\n\nAuthors\n=======\n\n* Grigori Fursin, cTuning foundation (France) / dividiti (UK)\n* Anton Lokhmotov, dividiti (UK)\n\nLicense\n=======\n* BSD, 3-clause\n\nInstallation\n============\n\n> ck pull repo:ck-autotuning\n\nModules with actions\n====================\n\nchoice - exploring choices in multi-dimensional spaces (customizing autotuning)\n\n  * make - make next choice in multi-dimensional space\n  * select_list - select from a list of choices in console mode\n\ncompiler - describing compilers and their optimization choices\n\n  * extract_to_pipeline - prepare compiler flag choices for universal tuning via program pipeline (experimental workflow)\n\ndataset - datasets\n\ndataset.features - dataset features\n\n  * convert_raw_rgb_image - convert raw RGB image to png (originally used for SLAM application tuning)\n  * extract - extract data set features\n\npipeline - defining universal pipelines (experiment workflows)\n\n  * autotune - perform autotuning of any available CK pipeline (workflow)\n  * run - run a given pipeline (workflow) once\n  * run_stat - run a given pipeline (workflow) N times and perform statistical analysis\n  * setup - setup a given pipeline (workflow) for execution/autotuning\n\npipeline.cmd - demonstrating command line pipeline (for CMD-based autotuning)\n\n  * pipeline - run universal command line pipeline (demo)\n\nprogram - program compilation and execution workflow (pipeline)\n\n  * autotune - universal, multi-objective, multi-dimensional software/hardware autotuning\n  * clean - clean temporal files and directories of a given program\n  * compile - compile a given program\n  * pipeline - universal program compilation and execution pipeline (workflow)\n  * run - run a given program\n  * select_uoa - select program UOA in console mode\n\nprogram.experiment.speedup - checking program speedups vs compiler flags vs data sets\n\n  * describe - describe experiment\n  * reproduce - reproduce experiment\n\nprogram.species - classification of similar programs using machine learning or manually by the community\n\nprogram.static.features - program semantic features\n", 
  "id": 29007219
}