{
  "read_at": 1462547112, 
  "description": "C++ classes for parsing SLHA and LHEF files. Also includes code for using gnuplot, latex, dvips, & ps2eps (or ps2epsi) to plot SLHA spectra.", 
  "README.txt": "/*****************************************************************************\\\n * README.txt                                                                *\n *                                                                           *\n *  Created on: Jan 27, 2012                                                 *\n *      Author: Ben O'Leary (benjamin.oleary@gmail.com)                      *\n *      Copyright 2012 Ben O'Leary                                           *\n *                                                                           *\n *      This file is part of LesHouchesParserClasses (LHPC).                 *\n *                                                                           *\n *      LesHouchesParserClasses is free software: you can redistribute it    *\n *      and/or modify it under the terms of the GNU General Public License   *\n *      as published by the Free Software Foundation, either version 3 of    *\n *      the License, or (at your option) any later version.                  *\n *                                                                           *\n *      LesHouchesParserClasses is distributed in the hope that it will be   *\n *      useful, but WITHOUT ANY WARRANTY; without even the implied warranty  *\n *      of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *\n *      General Public License for more details.                             *\n *                                                                           *\n *      You should have received a copy of the GNU General Public License    *\n *      (in LHPC/GNU_public_license.txt ) along with                         *\n *      LesHouchesParserClasses.  If not, see                                *\n *      <http://www.gnu.org/licenses/>.                                      *\n *      A full list of the files of LesHouchesParserClasses is at the end of *\n *      this file.                                                           *\n\\*****************************************************************************/\n\n Now that the legalese preamble is out of the way, the description of the code\n and how to use it can begin!\n\n LesHouchesParserClasses (LHPC) is a set of classes for interpreting files in\n the Les Houches Event File (LHEF) format and SUSY Les Houches Accord (SLHA)\n format. It also parses Flavor Les Houches Accord (FLHA) files, though with\n less functionality. This set of files is the version written in C++.\n\n There are 3 main parts to LHPC: the LHCO parser and associated structures; the\n LHEF parser and associated structures; and the SLHA parser and associated\n structures.\n \n There is also code to automatically plot SLHA spectra using the SLHA parser,\n though this requires the use of external programs: gnuplot, latex, dvips, and\n ps2eps (or ps2epsi).\n\n Running make on the makefile included will compile the library\n (LHPC/lib/libLHPC.a) and 4 executables (LHPC/bin/LhpcSpectrumPlotter.exe,\n LHPC/bin/LhefParserExample.exe, LHPC/bin/LhcoParserExample.exe, and\n LHPC/bin/SlhaParserExample.exe). The executables can be run with test input\n files in the LHPC/bin/testing directory.\n\n\n\n** SLHA spectrum plotter\n As mentioned above, running make will produce LhpcSpectrumPlotter.exe, which\n can be run without any arguments to show further information on how to use it.\n Please ensure that the paths in the control block are correct! The paths in\n the examples in LHPC/bin/testing use the paths that seem to me to be the\n 'standard' Linux paths.\n\n\n\n * C++ library code\n \n I have written LhcoParserExample.cpp, LhefParserExample.cpp and\n SlhaParserExample.cpp as examples for how to use the codes. I hope that they\n are commented well enough to be understandable. Some basic knowledge of C++\n (such as knowing what templates are) is required.\n\n\n** LHPC::LhcoParser\n   - this class is for reading in events from a file in the LHCO format.\n   \n The essential functionality of this class is already covered by MadAnalysis 5.\n The LhcoParser class was written independently of MadAnalysis, and provides\n the functionality of reading LHCO files directly into C++ code.\n \n The intended use of LhcoParser is that an instance of the class is constructed\n with the name of the LHCO-format file that it should open, then\n  readNextEvent() is called for as long as necessary. The readNextEvent()\n function returns false when the file can no longer be read, which in normal\n circumstances is when the end of the file has been reached.\n \n The LhcoParser holds a single event at a time, as a LHPC::LHCO::LhcoEvent,\n which holds the information from the 1st line of the event directly and the\n objects information as a set of LHPC::LHCO::ObjectLine instances, which each\n hold the information of a single line describing an object and its momentum\n from the event.\n\n One can read LhcoEvent.hpp and ObjectLine.hpp for the full information on\n these classes, but I expect that, for an example LhcoEvent called\n exampleEvent, exampleEvent.getObjectsOfType( int const whichType ) to get\n std::list< ObjectLine const* >s of all the objects of a given type in the\n event, and exampleEvent[ whichLine ] to get the line number whichLine (the\n first line is 1, not 0) would be the most used functions. I expect that, for\n each example ObjectLine called exampleLine,\n exampleLine.getTransverseMomentum() and the other named functions, or\n equivalently exampleLine[ whichEntry ], to get the whichEntry-th number of the\n line (starting with 0 for the object number, followed by its type at [ 1 ],\n pseudorapidity at [ 2 ] and so on) would be the most-used functions.\n \n\n\n** LHPC::LhefParser\n   - this class is for reading in events from a file in the LHEF format.\n   \n The essential functionality of this class is already covered by the classes in\n the LesHouches directory of an installation of the publicly-available code\n ThePEG (typically part of an installation of Herwig++). The LhefParser class\n was written independently of the code in ThePEG, and provides an extra layer\n of interpretation beyond just filling the HEPRUP and HEPEUP groupings of the\n old Les Houches Accord format.\n \n The intended use of LhefParser is that an instance of the class is constructed\n with the name of the LHEF-format file that it should open, then\n readNextEvent() is called for as long as necessary. The readNextEvent()\n function returns false when the file can no longer be read, which in normal\n circumstances is when the end of the file has been reached, though reading\n stops as soon as an event is found which is not in the valid format, either by\n invalid XML, or by having the wrong number of data entries on any line, or by\n disagreement between the number of lines describing particles given in the 1st\n line of the event and the actual number of lines describing particles between\n \"<event>\" and \"</event>\".\n \n At this basic level, the LhefParser holds a single event at a time, as a\n LHPC::LHEF::LhefEvent, which holds the HEPRUP information (the information\n from the 1st line of the event) directly and the HEPEUP information as a set\n of LHPC::LHEF::ParticleLine instances, which each hold the information of a\n single line describing a particle and its momentum from the event.\n \n One can read LhefEvent.hpp and ParticleLine.hpp for the full information on\n these classes, but I expect that, for an example LhefEvent called\n exampleEvent, exampleEvent.getEventWeight() (or exampleEvent.XWGTUP()\n equivalently) to get the event's weight, exampleEvent.getNumberOfParticles()\n (or exampleEvent.NUP() equivalently) to get the number of particle lines of\n the event, and exampleEvent[ whichLine ] (or exampleEvent.getLine( whichLine )\n equivalently) to get the line number whichLine (the first line is 1, not 0)\n would be the most used functions. I expect that, for each example\n ParticleLine called exampleLine,\n exampleLine.getXMomentum()/.getYMomentum()/.getZMomentum()/.getEnergy(), or\n equivalently exampleLine.IPUP( 1 )/.IPUP( 2 )/.IPUP( 3 )/.IPUP( 4 ), to get\n the particle's momentum, and exampleLine.getPrimaryMotherLineNumber, or\n equivalently exampleLine.MOTHUP( 1 ), to get the primary mother particle line\n number to find the source of this particle would be the most-used functions.\n \n The further functionality mentioned above is pretty much two aspects: the\n minor convenience of the ParticleLines having direct pointers to their\n mother and daughter lines, and automatic collection of ParticleLine subsets of\n the event prepared by the LHPC::LHEF::AutomaticEventFilter class. The intended\n use of this class is as an aid to analyze an event (e.g. for whether to accept\n it or reject it): each time a new event is read in, each AutomaticEventFilter\n instance makes a std::list< LHPC::LHEF::ParticleLine const* > of pointers to\n the ParticleLines which pass its own FilterRule criteria (note that this does\n not _remove_ any lines from the LhefEvent, the list is prepared in addition).\n This could be used for example by setting up a filter to collect all the lines\n corresponding to final-state muons or antimuons with transverse momentum\n greater than e.g. 10 GeV, and then one can quickly find how many of these\n occur in the last read event by asking for the size of the list that the\n filter prepared, so that the event can be accepted or rejected based on the\n number of muons which would pass that transverse momentum cut, for instance.\n Note that the filters do not accept or reject *events*, they merely collect\n *lines* that are accepted or rejected by their FilterRules.\n \n Instances of the AutomaticEventFilter class hold a set of\n LHPC::LHEF::FilterRule instances which are used to select which lines of the\n last event read in. to be added to the list, the ParticleLine must pass *all*\n the FilterRules that an AutomaticEventFilter has. More complicated rules than\n the provided \"select on transverse momentum\", \"select on pseudorapidity\",\n \"select on PDG particle code\", and \"select on whether initial-state,\n intermediate, or final-state\" rules provided can be written as classes derived\n from the FilterRule abstract base class. I hope that the examples in\n LhefParserExample.cpp are clear enough.\n\n The ParticleLine class provides some static functions to provide sums of\n momenta as lines and transverse momentum sums of these lists of lines.\n\n\n\n** LHPC::SlhaParser\n   - this class is for reading in data from a file in the SLHA format.\n\n SLHA1 refers to JHEP 0407 (2004) 036 [hep-ph/0311123], and SLHA2 to\n Comput. Phys. Commun. 180 (2009) 8 [arXiv:0801.0045 [hep-ph]].\n\n The intended use of SlhaParser is that an instance of the class is\n constructed, and then instances of derived classes of the SlhaBlock class are\n constructed and then registered with the parser with the\n registerBlock( LHPC::SLHA::BaseSlhaBlock const& ) function (but nobody\n should have to deal with the base BaseSlhaBlock class directly).\n \n Registered blocks are filled with data by the next call of\n SlhaParser::readFile( std::string const& slhaFileName ). (Blocks registered\n with a parser that has already read in a file will *not* fill their data until\n the next time a file is read in.)\n \n There are bundles of blocks that automatically register their blocks with the\n SlhaParser given to the bundle's constructor, which cover the blocks described\n in SLHA1 and SLHA2. An instance of LHPC::SlhaOne has all the blocks in SLHA1,\n and an instance of SlhaTwo has all the blocks mentioned in SLHA1 and in SLHA2.\n The entries in the blocks are then filled when readFile( std::string const& )\n is called. The entries are accessed with operator() (various derived classes\n use different numbers of arguments for this) for the copy of their block with\n lowest scale value (\"Q\"), or the interpreter for a given copy can be accessed\n with operator[], which returns interpreters for the blocks in the order in\n which they were read, starting from 1 (asking for entry 0 returns the\n interpreter for the copy with the lowest scale). Also, the block as a set of\n lines (each line held as a separate std::string) can be obtained by\n getLineWithoutComment( int const ) for each block.\n\n The function SlhaBlock::hasRecordedScale( double const, int&, int&, double& )\n is the best compromise that I could come up with for finding blocks for a\n given scale. See the comments of the function for how to use it.\n I had intended to provide flexible searching of the blocks as strings to\n accommodate non-standard blocks, but this is still on the to-do list.\n \n Decays are only recorded if a MassSpectrum instance has been registered with\n the SlhaParser (by the registerSpectrum( MassSpectrum& ) function). A\n registered MassSpectrum instance has its MassEigenstate data members filled\n with masses recorded from the MASS or FMASS blocks that are read from the SLHA\n file, and with decays filled from the decays of the file. The particle codes\n of the decays are interpreted so that accessing the decays gets references to\n other MassEigenstates, to simplify following cascade decays for example. It\n includes the distinction between particles and antiparticles (e.g. say a heavy\n boson can decay to a top-antitop pair: this decay is accessed as a reference\n to the top quark paired with a reference to the antitop; the top\n MassEigenstate (under normal circumstances) has then a decay which is accessed\n as a reference to the W^+ MassEigenstate paired with a reference to the bottom\n quark MassEigenstate, while the antitop's decay is the W^- with the\n antibottom).\n\n The StandardModel class and classes derived from it automatically set up the\n SM particles to have masses and decay widths, along with decay channels and\n branching ratios, as they appeared on the Particle Data Group website\n http://pdg.lbl.gov/ on the 16th of March, 2012. The masses and decays are\n overwritten by any data found in parsed SLHA files.\n \n There is also a LHPC::SlhaSimplisticInterpreter class. An instance of this\n class opens an SLHA file, and tries to match strings as block names followed\n by indices, and returns the string following matched indices in the block, if\n any are found. It is, however, quite inefficient compared to the above, since\n it involves lots of string interpretation with every search.\n (There is also now a very similar class: SimpleLhaParser. This behaves in the\n same way, but is only a header file, and requires only\n Utilities/ParsingUtilities.hpp to be present as well.)\n\n\nCHANGELOG:\n* 15th December 2015: version 0.8.14\n - added functionality to SimpleLhaParser so that decays are recorded.\n - added functionality to ParsingUtilities so that doubles can be printed in\n   the format specified in the SLHA1 paper.\n - fixed bug in SimpleLhaParser, where it was holding the blocks from every\n   file read in, instead of dropping the old blocks before reading in the new\n   file.\n\n* 11th December 2015: version 0.8.13\n - added SimpleLhaParser class, and various utility classes in Utilities\n   folder.\n\n* 30th October 2015: version 0.8.12\n - added SlhaSimplisticInterpreter constructor which does not try to open a\n   file straight away.\n\n* 29th October 2015: version 0.8.11\n - added SlhaSimplisticInterpreter::getScalesPairedWithValues to return a list\n   of scales paired with values (in the same order as that in which they were\n   read).\n\n* 19th October 2015: version 0.8.10\n - fixed bug in LhefEvent class, where getEventWeight was returning eventId\n   instead of eventWeight.\n\n * 24th June 2014: version 0.8.8\n - updated to version 0.5.1 BOLlib (added extra functionality to\n   TwoDimensionalDataPlotter).\n\n * 4th March 2014: version 0.8.7\n - updated to version 0.4.7 BOLlib (added StringParser::stringIsDouble & a few\n   static strings).\n - corrected incorrect comment in description of SparseManyIndexedBlock.\n\n * 11th November 2013: version 0.8.6\n - fixed wrong numbers being assigned to PDG.IX codes for the MSSM without\n   R-parity.\n - fixed unassigned mass value in LineData.cpp, though it should not ever\n   matter.\n - fixed incorrect consts in declarations of findOrMakeEntry(...) in\n   DenseTriplyIndexed.hpp which should not have been ignored by the compiler,\n   damnit.\n - upgraded to BOLlib v0.4.6 (just adding in FilePlaceholderManager class).\n - added SlhaParser::copyWithoutBlock( std::string const& originalFilename,\n   std::string const& blockToStrip, std::string const& copyFilename ) to copy\n   an SLHA file called originalFilename to a file called copyFilename without\n   any blocks with the name blockToStrip (also stripping out blank lines).\n\n * 19th July 2013: version 0.8.5\n - fixed bug in hasEntry(...) of DoublyIndexedMultipleEntriesBlock,\n   JustSingleValueBlock, SinglyIndexedMultipleEntriesBlock,\n   SparseSinglyIndexedBlock, and TriplyIndexedMultipleEntriesBlock classes.\n\n * 3rd April 2013: version 0.8.4\n - updated to version 0.4.5 BOLlib (parsing uncommented lines no longer leaves\n   trailing newline characters) leading to SlhaSimplisticInterpreter working\n   on files without comments for block header lines.\n\n * 25th March 2013: version 0.8.3\n - updated to version 0.4.4 BOLlib (added explicit #include <unistd.h> to\n   WaitingOnSubprocessExecutor.hpp so that it no longer relies on some other\n   header including it).\n\n * 8th March 2013: version 0.8.2\n - updated to version 0.4.3 of BOLlib (fixing bug with XML reader).\n\n * 15th February 2013: version 0.8.1\n - fixed silly typo in Makefile (several instances of \"/PreSelector/\" instead\n   of \"/Preselector/\", which was being ignored by my Mac and compiling fine.)\n - updated to version 0.4.2 of BOLlib.\n\n * 25th January 2013: version 0.8.0\n - fixed LhefEvent::recordEvent( std::string const& eventAsString )\n   to allow for the optional information permitted by the LHEF format. all\n   characters after the 1st instance of a '#' character are separated from the\n   event before parsing, stored in a string accessible by\n   LhefEvent::getOptionalInformation().\n - added StandardPreselector class to facilitate common combinations of\n   FilterRules for final-state particles. also added\n   EitherSignElectronPreselector, EitherSignMuonPreselector, JetPreselector,\n   LightLeptonPreselector derived classes for very common desired final states.\n - added example use of the StandardPreselector class and derived classes to\n   LhefParserExample.cpp example.\n - update Makefile and READMEs.\n \n * 15th January 2013: version 0.7.5\n - fixed SlhaSimplisticInterpreter::operator( std::string blockNameAndIndices )\n   to correctly return an empty string if given the name of a block that does\n   not exist in the SLHAfile, rather than causing a segmentation fault.\n - minor change to Makefile to ensure that it does not return an error if it\n   could not remove the file __.SYMDEF, which is sometimes there when unpacking\n   libBOLlib.a to incorporate it into libLHPC.a directly.\n\n * 18th December 2012: version 0.7.4\n - changed Makefile to include all BOLlib source files in libLHPC.a, so only\n   -L/path/to/LHPC/ -lLHPC is needed to link the static library, without\n   needing to link libBOLlib.a as well.\n\n * 23rd October 2012: version 0.7.3\n - BOLlib updated to 0.4.1 (minor AsciiXmlParser::loadString signature change)\n   \n * 16th October 2012: version 0.7.2\n - BOLlib updated to 0.4.0 (AsciiXmlParser rewritten, now properly ignores XML\n   comments) - breaks any code that relies on BOL::AsciiXmlParser, but all LHPC\n   files have been updated to use the new code.\n - added\n   SlhaSimplisticInterpreter::getLowestScale( std::string const& blockName )\n   to return the scale of the copy of the block called blockName with the\n   lowest scale.\n\n * 8th October 2012: version 0.7.1\n - BOLlib updated to 0.3.1 (minor function alias).\n - using above function alias in LhcoParser class.\n - READMEs updated.\n\n * 5th October 2012: version 0.7.0\n - BOLlib updated to 0.3.0 (BOL::AsciiXmlParser::getCurrentElementAttributes()\n   now returns a std::map< std::string, std::string > const& reference).\n - makefile now has deleteobjects option to delete the .o files without\n   deleting the library or executables.\n - READMEs updated.\n \n * 4th October 2012: version 0.6.9\n - BOLlib updated to 0.2.2 (reducing thread unsafety)\n - READMEs updated.\n\n * 28th September 2012: version 0.6.8\n - gave default values of false to verbosities of SLHA block collections\n   \n * 28th September 2012: version 0.6.7\n - finished switching verbosity bool references to just bools (0.6.4 did not\n   change all of them...)\n \n * 20th September 2012: version 0.6.6\n - removed debugging statements from\n   SlhaSimplisticInterpreter::withMap( std::string blockNameAndIndices ).\n - fixed\n   SlhaSimplisticInterpreter::operator()( std::string blockNameAndIndices ) to\n   correctly only insert whitespace between words of the return string, not\n   before the 1st word of the return string as well.\n\n * 19th September 2012: version 0.6.5\n - BOLlib updated to 0.2.1 (fixing new bug introduced into AsciiXmlParser\n   by previous bugfix).\n\n * 19th September 2012: version 0.6.4\n - changed verbosity bool references to just bools, having decided that the\n   ability to switch off verbosity mid-execution isn't worthwhile.\n - BOLlib updated to 0.2.0 (fixing AsciiXmlParser, fixed\n   StringParser::stringToIntVector, enhancing ArgumentParser).\n - added withMap( std::string blockNameAndIndices ) function to\n   SlhaSimplisticInterpreter, which performs the same job as operator(), but\n   checking to see if blockNameAndIndices had already been searched for,\n   storing results in a std::map< std::string, std::string >.\n \n * 14th September 2012: version 0.6.3\n - updated SlhaParserExample to demonstrate that SlhaSimplisticInterpreter can\n   take strings of indices in floating-point format and also indices can be\n   each in their own brackets as well as being separated by commas.\n \n * 13th September 2012: version 0.6.2\n - updated BOLlib to include ArgumentParser class.\n - added LHPC::SlhaSimplisticInterpreter class.\n - fixed makefiles to correctly make lib and bin directories if they are\n   missing.\n - corrected READMEs again.\n \n * 10th September 2012: version 0.6.1\n - corrected READMEs.\n \n * 10th September 2012: version 0.6.0\n - reorganized directory structure to be more in line with GNU standards.\n - BOLlib is separate standalone release, but included.\n - Makefiles changed to work with this, also uses full compiler optimization.\n \n * 28th August 2012: version 0.5.0\n - added SparseManyIndexBlock and SparseManyIndex template classes that take\n   std::vectors of ints (or convert strings of integers) for map keys.\n - fixed SparseQuadruplyIndexedBlock not actually working (template classes do\n   not get compiled by the makefile by default)\n - fixed DenseDoublyIndexedBlock, SparseDoublyIndexedBlock, and\n   SparseQuadruplyIndexedBlock, which were returning an implicit cast of the\n   result of operator() to a bool for hasEntry().\n \n * 7th August 2012: version 0.4.9\n - added FourMomentum setters.\n - added FourMomentum::toString() for printing the FourMomentum in Cartesian\n   co-ordinates.\n - added FourMomentum constructors that take pairs and sum the momenta.\n \n * 3rd August 2012: version 0.4.8\n - fixed StringParser bug (where remainder string was not being updated).\n - added FourMomentum constructors that take vectors or lists and sum the\n   momenta.\n \n * 30th July 2012: version 0.4.7\n - fixed bug where FourMomentum::getInvariantMassSquared() and hence also\n   FourMomentum::getInvariantMass() were incorrect.\n \n * 28th July 2012: version 0.4.6\n - fixed wrong formula for converting an ObjectLine into a FourMomentum.\n \n * 28th July 2012: version 0.4.5\n - changed FourMomentum assignment functions to not return anything.\n - added angular distance functions to ObjectLine:\n   getAzimuthalDistanceTo( ObjectLine const& comparisonObject ) const\n   getPseudorapidityDistanceTo( ObjectLine const& comparisonObject ) const\n   getPseudorapidityAngularDistanceSquaredTo(\n                                     ObjectLine const& comparisonObject ) const\n   getPseudorapidityAngularDistanceTo(\n                                     ObjectLine const& comparisonObject ) const\n \n * 27th July 2012: version 0.4.4\n - changed ObjectLine::isOrderedByTransverseMomentumLowToHigh( ... ) and\n   ObjectLine::isOrderedByTransverseMomentumHighToLow( ... ) to take pointers,\n   because LhcoEvents return lists of pointers to ObjectLines, rather than\n   lists of ObjectLine objects themselves.\n - also changed the makefile to use optimization level 3 by default (-O3).\n\n * 26th July 2012: version 0.4.3\n - added LHPC::FourMomentum class to provide basic conversion of ObjectLines\n   to four-momenta (also for ParticleLines).\n   \n * 16th July 2012: version 0.4.2\n - fixed LhcoEvent erroneously overwriting event number with number of last\n   object line.\n \n * 4th July 2012: version 0.4.1\n - fixed LhefEvent counting events from 2 instead of from 1\n - added ObjectLine ordering functions for LHCO:\n   ObjectLine::isOrderedByTransverseMomentumLowToHigh( ... ) and\n   ObjectLine::isOrderedByTransverseMomentumHighToLow( ... ), suitable for\n   being used with std::list::sort( ... ).\n \n * 2nd July 2012: version 0.4.0 released!\n - add LHCO-parsing functionality.\n   \n * 22nd May 2012: version 0.3.1\n - fixed segmentation fault bug due to improperly initialized pointer in\n   SpectrumUpdater class.\n\n * 7th April 2012: version 0.3.0 released!\n - New templates (SinglyIndexedMultipleEntriesBlock,\n   DoublyIndexedMultipleEntriesBlock, TriplyIndexedMultipleEntriesBlock,\n   SparseQuadruplyIndexedBlock, MultipleSinglyIndexed, MultipleDoublyIndexed,\n   MultipleTriplyIndexed, SparseQuadruplyIndexed) & classes to go in them\n   (RunningConstant, RunningConstantError, FlavorObservable,\n   FlavorObservableError) (& the functionality of using\n   std::pair< double, double > in the templates is now there) should allow the\n   full FLHA to be covered. Does not cover proposed extra column in FOBS (& I\n   presume FOBS-type blocks) which specifies if an observable is SM, NP, or\n   SM+NP. This could be covered by using TriplyIndexedMultipleEntriesBlock\n   instead of DoublyIndexedMultipleEntriesBlock.\n   \n * 19th March 2012: version 0.2.2 released!\n - Fixed incorrect command to run ps2epsi from wrong\n   \"ps2epsi - f LHPC_SpectrumPlotter_LaTeX.ps\" to correct\n   \"ps2epsi LHPC_SpectrumPlotter_LaTeX.ps LHPC_SpectrumPlotter_LaTeX.eps\"\n   (or path-corrected version).\n\n * 19th March 2012: version 0.2.1 released!\n - Added the SparseDoublyIndexedBlock class using the SparseDoublyIndexed\n   template class as its interpreter.\n - Changed example spectrum-plotting control files to have 'standard' Linux\n   paths by default (except in testControl.txt, which still has the paths for\n   Mac OSX).\n - Rearranged READMEs and edited the text somewhat.\n\n * 16th March 2012: version 0.2.0 released!\n - Major reorganization of how the code works behind the scenes, which should\n   allow for using the block interpreters for writing input blocks too (by\n   setting the values and then calling interpretAsString()).\n - A consequence of the above is that each SlhaParser can have multiple blocks\n   registered for any block name. likewise, each SlhaParser can have multiple\n   spectra registered.\n - Also changed some names a bit: the block interpreters are now\n   SparseSinglyIndexedBlock< double > etc. rather than\n   BlockClass::SparseSinglyIndexed< double > and so on.\n - Added hasEntry(...) functions to block interpreters to assist in exploring\n   parsed SLHA files without crashing when asking for out-of-range values.\n - Can no longer give a scale to get the closest block to that scale: instead\n   hasRecordedScale( double const, int&, int&, double& ) should be used to find\n   the pair of blocks nearest with the fraction that can be used to interpolate\n   between values from the pair of blocks. Not specifying a scale still\n   defaults to getting values from the copy with lowest scale, and now copies\n   are accessed in the order that they were recorded.\n (LHEF and SLHA parsers seem to work, spectrum plotter seems to work; after\n some beta testing, this version will be tweaked and released as 1.0.0 - the\n changes of this version represent some of the tweaking foretold below...)\n\n * 29th February 2012: version 0.1.0 released!\n (LHEF and SLHA parsers seem to work, spectrum plotter seems to work; after\n some beta testing, this version will be tweaked and released as 1.0.0)\n\n\nThe C++ files of LesHouchesParserClasses are:\n\n <> headers in LHPC/include/:\n LargeHadronColliderOlympicsClasses/FourMomentum.hpp\n LargeHadronColliderOlympicsClasses/LhcoEvent.hpp\n LargeHadronColliderOlympicsClasses/LhcoParser.hpp\n LargeHadronColliderOlympicsClasses/ObjectLine.hpp\n LesHouchesEventFileClasses/AutomaticEventFilter.hpp\n LesHouchesEventFileClasses/FilterRule.hpp\n LesHouchesEventFileClasses/FilterRuleClasses.hpp\n LesHouchesEventFileClasses/InterfaceToClhepLorentzVectorClass.hpp\n LesHouchesEventFileClasses/LhefEvent.hpp\n LesHouchesEventFileClasses/LhefParser.hpp\n LesHouchesEventFileClasses/ParticleLine.hpp\n within LesHouchesEventFileClasses/FilterRuleClasses/:\n   - InitialOrIntermediateOrFinalState.hpp\n   - ParticleCode.hpp\n   - PseudorapidityCut.hpp\n   - TransverseMomentumCut.hpp\n MassEigenstateCollectionClasses/DefaultSpectra.hpp\n MassEigenstateCollectionClasses/ExtendedMass.hpp\n MassEigenstateCollectionClasses/MapAndVectorAndBools.hpp\n MassEigenstateCollectionClasses/MassEigenstate.hpp\n MassEigenstateCollectionClasses/MassSpectrum.hpp\n MassEigenstateCollectionClasses/MassSpectrumClasses.hpp\n MassEigenstateCollectionClasses/PointersWithValue.hpp\n MassEigenstateCollectionClasses/RunningConstant.hpp\n MassEigenstateCollectionClasses/RunningConstantError.hpp\n MassEigenstateCollectionClasses/SpectrumUpdater.hpp\n within MassEigenstateCollectionClasses/MassSpectrumClasses/:\n - CodesAndDataForMassEigenstates.hpp\n - MinimalSupersymmetricStandardModel.hpp\n - NextToMinimalSupersymmetricStandardModel.hpp\n - ParticleSpectrumSubsetClasses.hpp\n - StandardModel.hpp\n - ParticleSpectrumSubsetClasses/ChargedSleptonsOneToSix.hpp\n - ParticleSpectrumSubsetClasses/CharginosOneToTwo.hpp\n - ParticleSpectrumSubsetClasses/GluinoOneGeneration.hpp\n - ParticleSpectrumSubsetClasses/MssmExtraEwsbSpinZeroBosonSet.hpp\n - ParticleSpectrumSubsetClasses/NeutralinosOneToFive.hpp\n - ParticleSpectrumSubsetClasses/NeutralinosOneToFour.hpp\n - ParticleSpectrumSubsetClasses/NmssmExtraEwsbSpinZeroBosonSet.hpp\n - ParticleSpectrumSubsetClasses/SneutrinosOneToThree.hpp\n - ParticleSpectrumSubsetClasses/SquarksOneToSix.hpp\n ParticleCodesAndDataClasses/NineDigitSlhaCodes.hpp\n ParticleCodesAndDataClasses/PdgData.hpp\n ParticleCodesAndDataClasses/SevenDigitSlhaCodes.hpp\n SlhaSpectrumPlottingClasses/LineData.hpp\n SlhaSpectrumPlottingClasses/SpectrumDrawer.hpp\n SusyLesHouchesAccordClasses/BlockClasses.hpp\n SusyLesHouchesAccordClasses/BlockTypes.hpp\n SusyLesHouchesAccordClasses/FlavorObservable.hpp\n SusyLesHouchesAccordClasses/FlavorObservableError.hpp\n SusyLesHouchesAccordClasses/FlhaOne.hpp\n SusyLesHouchesAccordClasses/SlhaBlock.hpp\n SusyLesHouchesAccordClasses/SlhaOne.hpp\n SusyLesHouchesAccordClasses/SlhaParser.hpp\n SusyLesHouchesAccordClasses/SlhaTwo.hpp\n SusyLesHouchesAccordClasses/SlhaTwoWithSpheno.hpp\n within SusyLesHouchesAccordClasses/BlockClasses/:\n   - BaseSlhaBlock.hpp\n   - BaseStringBlock.hpp\n   - DenseDoublyIndexedBlock.hpp\n   - DenseSinglyIndexedBlock.hpp\n   - DenseTriplyIndexedBlock.hpp\n   - DoublyIndexedMultipleEntriesBlock.hpp\n   - IndexedBlockTemplate.hpp\n   - InterpreterClasses.hpp\n   - JustSingleValueBlock.hpp\n   - LinesAsStringsBlock.hpp\n   - SameNameBlockSet.hpp\n   - SinglyIndexedMultipleEntriesBlock.hpp\n   - SparseDoublyIndexedBlock.hpp\n   - SparseQuadruplyIndexedBlock.hpp\n   - SparseSinglyIndexedBlock.hpp\n   - TriplyIndexedMultipleEntriesBlock.hpp\n   - InterpreterClasses/BlockInterpreter.hpp\n   - InterpreterClasses/DenseDoublyIndexed.hpp\n   - InterpreterClasses/DenseSinglyIndexed.hpp\n   - InterpreterClasses/DenseTriplyIndexed.hpp\n   - InterpreterClasses/IndexedInterpreter.hpp\n   - InterpreterClasses/InterpreterTemplate.hpp\n   - InterpreterClasses/JustSingleValue.hpp\n   - InterpreterClasses/LinesAsStrings.hpp\n   - InterpreterClasses/MultipleDoublyIndexed.hpp\n   - InterpreterClasses/MultipleSinglyIndexed.hpp\n   - InterpreterClasses/MultipleTriplyIndexed.hpp\n   - InterpreterClasses/SparseDoublyIndexed.hpp\n   - InterpreterClasses/SparseQuadruplyIndexed.hpp\n   - InterpreterClasses/SparseSinglyIndexed.hpp\n LHCO.hpp\n LHEF.hpp\n MassEigenstateCollectionClasses.hpp\n PDG.hpp\n SLHA.hpp\n \n <> source files in LHPC/source/:\n LargeHadronColliderOlympicsClasses/FourMomentum.cpp\n LargeHadronColliderOlympicsClasses/LhcoEvent.cpp\n LargeHadronColliderOlympicsClasses/LhcoParser.cpp\n LargeHadronColliderOlympicsClasses/ObjectLine.cpp\n LesHouchesEventFileClasses/AutomaticEventFilter.cpp\n LesHouchesEventFileClasses/FilterRule.cpp\n LesHouchesEventFileClasses/LhefEvent.cpp\n LesHouchesEventFileClasses/LhefParser.cpp\n LesHouchesEventFileClasses/ParticleLine.cpp\n within LesHouchesEventFileClasses/FilterRuleClasses/:\n   - InitialOrIntermediateOrFinalState.cpp\n   - ParticleCode.cpp\n   - PseudorapidityCut.cpp\n   - TransverseMomentumCut.cpp\n MassEigenstateCollectionClasses/ExtendedMass.cpp\n MassEigenstateCollectionClasses/MassEigenstate.cpp\n MassEigenstateCollectionClasses/MassSpectrum.cpp\n MassEigenstateCollectionClasses/RunningConstant.cpp\n MassEigenstateCollectionClasses/RunningConstantError.cpp\n MassEigenstateCollectionClasses/SpectrumUpdater.cpp\n within MassEigenstateCollectionClasses/MassSpectrumClasses/:\n - MinimalSupersymmetricStandardModel.cpp\n - NextToMinimalSupersymmetricStandardModel.cpp\n - StandardModel.cpp\n - ParticleSpectrumSubsetClasses/ChargedSleptonsOneToSix.cpp\n - ParticleSpectrumSubsetClasses/CharginosOneToTwo.cpp\n - ParticleSpectrumSubsetClasses/GluinoOneGeneration.cpp\n - ParticleSpectrumSubsetClasses/MssmExtraEwsbSpinZeroBosonSet.cpp\n - ParticleSpectrumSubsetClasses/NeutralinosOneToFive.cpp\n - ParticleSpectrumSubsetClasses/NeutralinosOneToFour.cpp\n - ParticleSpectrumSubsetClasses/NmssmExtraEwsbSpinZeroBosonSet.cpp\n - ParticleSpectrumSubsetClasses/SneutrinosOneToThree.cpp\n - ParticleSpectrumSubsetClasses/SquarksOneToSix.cpp\n ParticleCodesAndDataClasses/NineDigitSlhaCodes.cpp\n ParticleCodesAndDataClasses/PdgData.cpp\n ParticleCodesAndDataClasses/SevenDigitSlhaCodes.cpp\n SlhaSpectrumPlottingClasses/LineData.cpp\n SlhaSpectrumPlottingClasses/SpectrumDrawer.cpp\n SusyLesHouchesAccordClasses/FlavorObservable.cpp\n SusyLesHouchesAccordClasses/FlavorObservableError.cpp\n SusyLesHouchesAccordClasses/FlhaOne.cpp\n SusyLesHouchesAccordClasses/SlhaOne.cpp\n SusyLesHouchesAccordClasses/SlhaParser.cpp\n SusyLesHouchesAccordClasses/SlhaTwo.cpp\n SusyLesHouchesAccordClasses/SlhaTwoWithSpheno.cpp\n within SusyLesHouchesAccordClasses/BlockClasses/:\n   - BaseSlhaBlock.cpp\n   - BaseStringBlock.cpp\n   - LinesAsStringsBlock.cpp\n   - SameNameBlockSet.cpp\n   - InterpreterClasses/BlockInterpreter.cpp\n   - InterpreterClasses/LinesAsStrings.cpp\n LhcoParserExample.cpp\n LhefParserExample.cpp\n LhpcSpectrumPlotter.cpp\n SlhaParserExample.cpp\n \n <> and also:\n LHPC_CPP/Makefile\n and README.LHPC_CPP.txt which describes the package (copied as README.txt).\n The files of BOLlib are also included, and are described in\n BOLlib/README.BOLlib.txt.\n The makefile creates four executables in LHPC/bin/:\n LhcoParserExample.exe, a demonstration of the LHCO parser\n LhefParserExample.exe, a demonstration of the LHEF parser\n LhpcSpectrumPlotter.exe, a program that uses gnuplot to plot a mass spectrum\n                          from an SLHA file\n SlhaParserExample.exe, a demonstration of the SLHA parser.\n \n \n", 
  "id": 3536922
}