{
  "README.Rmd": "---\noutput:\n  md_document:\n    variant: markdown_github\n---\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n# Forecasting Vegetation Health at High Spatial Resolution\n\nDrought threatens food and water security around the world, and this threat is likely to become more severe under climate change.  High resolution predictive information can help farmers, water managers, and others to manage the effects of drought.  We have created a tool to produce short-term forecasts of vegetation health at high spatial resolution, using open source software and [NASA satellite data](http://modis.gsfc.nasa.gov/data/dataprod/index.php) that are global in coverage.  The tool automates downloading and processing Moderate Resolution Imaging Spectroradiometer (MODIS) datasets, and training gradient-boosted machine models on hundreds of millions of observations to predict future values of the Enhanced Vegetation Index.  We compared the predictive power of different sets of variables (raw spectral MODIS data and Level-3 MODIS products) in two regions with distinct agro-ecological systems, climates, and cloud coverage:  Sri Lanka and California.  Our tool provides considerably greater predictive power on held-out datasets than simpler baseline models.\n\nThis website hosts the supplementary material for this project by [John J. Nay](http://johnjnay.com/), [Emily Burchfield](https://ekburchfield.wordpress.com/), and [Jonathan Gilligan](https://my.vanderbilt.edu/jonathangilligan), listing the external software requirements and the exact commands to be run in a terminal for completing our process.\n\nThe data downloading and processing requires a computer with significant amounts of RAM (> 100 GB) because the data must be held in memory to manipulate it. The modeling and hyper-parameters search can be run on weaker machines but the training time will take months if run on a laptop. To complete model training and hyper-parameters search in a few days, train the models on a computer with >= available 32 threads and >= 100 GB RAM.\n\nIf you use these scripts, cite this paper:\n\nNay, John J., Burchfield, Emily, Gilligan, Jonathan. (2016) \"Forecasting Vegetation Health at High Spatial Resolution.\" eprint arXiv:1602.06335\n\nThe paper can be downloaded as a pdf here: [http://arxiv.org/abs/1602.06335](http://arxiv.org/abs/1602.06335).\n\nUnited States National Science Foundation grant EAR-1204685 funded this research.\n\n![Poster](figures/WSC_poster2.png)\n\n# Overview:\n\nThe figure below illustrates our process. We downloaded and processed eleven years of remotely sensed imagery. We combined this data with ancillary datasets and reshaped it into a single matrix where each row corresponds to a pixel at one time and each column is a measured variable.  We divided the observations into Training Data 1 and Testing Data 1 by sampling from large spatial grid indices without replacement. We then divided Training Data 1 into Training Data 2 and Testing Data 2 with the same spatial sampling process, and trained multiple models on Training Data 2, varying the hyper-parameters for each model estimation.  We used Testing Data 2 to assess the performance of each model's predictions.  We repeated this loop of learning on Training Data 2 and testing on Testing Data 2 for each of the four different data types, and chose the combination of data type and hyper-parameter setting that achieved the highest performance in predicting Testing Data 2.  Finally, we validated the best-performing model from the previous step by testing its performance on the held-out data in Testing Data 1. We repeated this entire process separately for Sri Lanka and California.\n\n![Methods Diagram](figures/methods_diagram.jpg)\n\nThe next figure displays predictions of agricultural land in Testing Data 1, the hold-out data, in California.\n\n![Methods Diagram](figures/scatter_ca.jpg)\n\n# Requirements\n\n* Python 2.7 https://www.python.org/download/releases/2.7/\n* h2o 3 http://www.h2o.ai/download/h2o/python\n\n```\n[sudo] pip install requests # for h2o\n[sudo] pip install tabulate # for h2o\n[sudo] pip install numpy # for reshaping and saving data\n[sudo] pip install pandas # for reshaping and saving data\n[sudo] pip install hyperopt # for estimating hyper-parameters of h2o models\n[sudo] pip install annoy # for baseline model\n```\n\nThe optional visualizations of validation performance requires R, and the R packages dplyr, ggplot2, and ggExtra.\n\n# Data construction:\n\npython -u 0_matrix_construction.py spectral directory username password tiles today enddate referenceImage > 0_construct.log &\n\n  * python -u 0_matrix_construction.py 1 /data/emily/SL myusername mypassword 'h25v08 h26v08' 2014-01-30 2014-01-01 /data/emily/WF/NDVI_DC/SL.tif\n\n# Pre-processing (spectral and non-spectral use different scripts):\n\n### For non-spectral:\n \npython -u 1_pre_process.py *load_data_fp save_data_fp load_extra_file intervals* > 1_process.log &\n\n  * load_extra_file is optional, its used when an analyst has ancillary data, e.g. land-use classifications\n  * python -u 1_pre_process.py /data/emily/SL/ /data/john/srilanka/data1.csv /data/NDVI/columns/landuse.npy 253 > 1_process.log &\n  * python -u 1_pre_process.py /data/emily/CA/ /data/john/CA/data1.csv /data/emily/SJ/SJlanduse.npy 253 > 1_processCA.log &\n\n### For spectral:\n\npython -u 1_pre_processS.py *load_data_fp save_data_fp old_data_fp intervals load_extra_file* > 1_processS.log &\n\n  * python -u 1_pre_processS.py /data/emily/SLs/ /data/john/srilanka/data1S.csv /data/john/srilanka/data1.csv 253 /data/NDVI/columns/landuse.npy > 1_processS.log &\n    * python -u 1_pre_processS.py /data/emily/CAs/ /data/john/CA/data1S.csv /data/john/CA/data1.csv 253 /data/emily/SJ/SJlanduse.npy > 1_processSCA.log &\n    \n  * python -u 1_pre_processS.py /data/emily/BL/spectral/ /data/john/BL/data1S.csv None 230 > 1_processSBL.log &\n\n## For h2o:\n\n### For non-spectral:\n\npython -u 2_h2o_process.py *load_data_fp save_data_fp* > 2a_h2o.log &\n\n  * python -u 2_h2o_process.py /data/john/srilanka/data1.csv /data/john/srilanka/h2o_data_withMissing > 2a_h2o.log &\n  * python -u 2_h2o_process.py /data/john/CA/data1.csv /data/john/CA/h2o_data_withMissing > 2a_h2oCA.log &\n\npython -u 2_h2o_process_2.py *load_data_fp save_training_data_fp save_holdout_data_fp save_training_ind_fp* > 2b_h2o.log &\n\n*save_training_ind_fp* is an optional argument for the 2_h2o_process_2.py script. If it is provided, then the script will create a column indicating whether each row is in the training or testing data. This column will be used by subsequent scripts in dividing data into training and testing (not hold-out data, that was done previously). When we run the spectral we usually do not specify this argument because we don't want to overwite the file we created for the level-3 data: this allows us to use the same training/test split and compare performance across predictor variable data type.\n\n  * python -u 2_h2o_process_2.py /data/john/srilanka/h2o_data_withMissing /data/john/srilanka/h2o_data_training /data/john/srilanka/h2o_data_holdout /data/john/srilanka/random_split_for_training.csv > 2b_h2o.log &\n  * python -u 2_h2o_process_2.py /data/john/CA/h2o_data_withMissing /data/john/CA/h2o_data_training /data/john/CA/h2o_data_holdout /data/john/CA/random_split_for_training.csv > 2b_h2oCA.log &\n\n### For spectral:\n\npython -u 2_h2o_processS.py *load_data_fp save_data_fp* > 2a_h2oS.log &\n\n  * python -u 2_h2o_processS.py /data/john/srilanka/data1S.csv /data/john/srilanka/h2o_data_withMissingS > 2a_h2oS.log &\n  * python -u 2_h2o_processS.py /data/john/CA/data1S.csv /data/john/CA/h2o_data_withMissingS > 2a_h2oSCA.log &\n  \n  * python -u 2_h2o_processS.py /data/john/BL/data1S.csv /data/john/BL/h2o_data_withMissingS > 2a_h2oSBL.log &\n\npython -u 2_h2o_process_2.py *load_data_fp save_training_data_fp save_holdout_data_fp* > 2b_h2oS.log &\n\n  * Starting here, all the scripts are the same for spectral and non spectral. You just pass them different arguments.\n  * If you run non-spectral first, you can optionally not specify the *save_training_ind_fp* with 2_h2o_process_2.py and thus not over-wrtie the csv file with the vector of indices denoting a training and testing data split. This allows results to be comparable between spectral and non-spectral.\n  * python -u 2_h2o_process_2.py /data/john/srilanka/h2o_data_withMissingS /data/john/srilanka/h2o_data_trainingS /data/john/srilanka/h2o_data_holdoutS > 2b_h2oS.log &\n  * python -u 2_h2o_process_2.py /data/john/CA/h2o_data_withMissingS /data/john/CA/h2o_data_trainingS /data/john/CA/h2o_data_holdoutS > 2b_h2oSCA.log &\n  \n    * python -u 2_h2o_process_2.py /data/john/BL/h2o_data_withMissingS /data/john/BL/h2o_data_trainingS /data/john/BL/h2o_data_holdoutS /data/john/BL/random_split_for_training.csv > 2b_h2oSBL.log &\n\n## For baseline:\n\npython -u 2_baseline_process.py load_data_fp save_data_fp > 2_baseline.log &\n\n  * python -u 2_baseline_process.py /data/john/srilanka/data1.csv /data/john/srilanka/baseline_data.csv > 2_baseline.log &\n  * python -u 2_baseline_process.py /data/john/CA/data1.csv /data/john/CA/baseline_data.csv > 2_baselineCA.log &\n  * python -u 2_baseline_process.py /data/john/BL/data1S.csv /data/john/BL/baseline_data.csv > 2_baselineBL.log &\n  \n# Modeling (spectral and non-spectral use same scripts, just different arguments for predictor variables)\n\n# Modeling in h2o with GBM:\n\n## For non-spectral:\n\npython -u 3_h2o_gbm.py *load_data_fp* *load_train_ind_fp* *saving_fp* GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 3_gbm.log &\n\n  * python -u 3_h2o_gbm.py /data/john/srilanka/h2o_data_training /data/john/srilanka/random_split_for_training.csv output/gbmres.csv GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 3_gbm.log &\n    * python -u 3_h2o_gbm.py /data/john/srilanka/h2o_data_training /data/john/srilanka/random_split_for_training.csv output/gbmres_evi.csv EVI_lag > 3_gbmevi.log &\n    * python -u 3_h2o_gbm.py /data/john/srilanka/h2o_data_training /data/john/srilanka/random_split_for_training.csv output/gbmres_evilt.csv time_period EVI_lag landuse > 3_gbmevilt.log &\n  * python -u 3_h2o_gbm.py /data/john/CA/h2o_data_training /data/john/CA/random_split_for_training.csv output/gbmresCA.csv GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 3_gbmCA.log &\n    * python -u 3_h2o_gbm.py /data/john/CA/h2o_data_training /data/john/CA/random_split_for_training.csv output/gbmresCA_evi.csv EVI_lag > 3_gbmCAevi.log &\n    * python -u 3_h2o_gbm.py /data/john/CA/h2o_data_training /data/john/CA/random_split_for_training.csv output/gbmresCA_evilt.csv time_period EVI_lag landuse > 3_gbmCAevilt.log &\n\n## For spectral:\n\npython -u 3_h2o_gbm.py *load_data_fp* *load_train_ind_fp* *saving_fp* B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_gbm.log &\n\n  * python -u 3_h2o_gbm.py /data/john/srilanka/h2o_data_trainingS /data/john/srilanka/random_split_for_training.csv output/gbmresS.csv B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_gbm.log &\n  * python -u 3_h2o_gbm.py /data/john/CA/h2o_data_trainingS /data/john/CA/random_split_for_training.csv output/gbmresSCA.csv B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_gbmCA.log &\n  \n  * python -u 3_h2o_gbm.py /data/john/BL/h2o_data_trainingS /data/john/BL/random_split_for_training.csv gbmresSBL.csv B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_gbmBL.log &\n\n\n# Modeling in h2o with deep learning (both model-imputed and mean-imputed):\n\n## For non-spectral:\n\npython -u 3_h2o_deeplearning_imputation.py *load_data_fp saving_meanImputed_fp saving_modelImputed_fp saving_means_fp saving_models_fp* GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 3_dl_imp.log &\n\n  * python -u 3_h2o_deeplearning_imputation.py /data/john/srilanka/h2o_data_training /data/john/srilanka/mean_imputed_data /data/john/srilanka/model_imputed_data /data/john/srilanka/dl_imputation_means.csv /data/john/srilanka/models/ GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 3_dl_imp.log &\n    * python -u 3_h2o_deeplearning_imputation.py /data/john/CA/h2o_data_training /data/john/CA/mean_imputed_data /data/john/CA/model_imputed_data /data/john/CA/dl_imputation_means.csv /data/john/CA/models/ GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 3_dl_impCA.log &\n\npython -u 3_h2o_deeplearning.py *load_data_fp load_train_ind_fp saving_fp* GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 3_dl_mean.log &\n\n  * python -u 3_h2o_deeplearning.py /data/john/srilanka/mean_imputed_data /data/john/srilanka/random_split_for_training.csv output/dlres_meanimputed.csv GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 3_dl_mean.log &\n    * python -u 3_h2o_deeplearning.py /data/john/CA/mean_imputed_data /data/john/CA/random_split_for_training.csv output/dlres_meanimputedCA.csv GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 3_dl_meanCA.log &\n\n  * python -u 3_h2o_deeplearning.py /data/john/srilanka/model_imputed_data /data/john/srilanka/random_split_for_training.csv output/dlres_modelimputed.csv GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 3_dl_model.log &\n    * python -u 3_h2o_deeplearning.py /data/john/CA/model_imputed_data /data/john/CA/random_split_for_training.csv output/dlres_modelimputedCA.csv GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 3_dl_modelCA.log &\n\n## For spectral:\n\npython -u 3_h2o_deeplearning_imputation.py *load_data_fp saving_meanImputed_fp saving_modelImputed_fp saving_means_fp saving_models_fp* B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_dl_imp.log &\n\n  * python -u 3_h2o_deeplearning_imputation.py /data/john/srilanka/h2o_data_trainingS /data/john/srilanka/mean_imputed_dataS /data/john/srilanka/model_imputed_dataS /data/john/srilanka/dl_imputation_meansS.csv /data/john/srilanka/modelsS/ B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_dl_impS.log &\n    * python -u 3_h2o_deeplearning_imputation.py /data/john/CA/h2o_data_trainingS /data/john/CA/mean_imputed_dataS /data/john/CA/model_imputed_dataS /data/john/CA/dl_imputation_meansS.csv /data/john/CA/modelsS/ B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_dl_impSCA.log &\n  \npython -u 3_h2o_deeplearning.py *load_data_fp load_train_ind_fp saving_fp* B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_dl_meanS.log &\n\n  * python -u 3_h2o_deeplearning.py /data/john/srilanka/mean_imputed_dataS /data/john/srilanka/random_split_for_training.csv output/dlres_meanimputedS.csv B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_dl_meanS.log &\n    * python -u 3_h2o_deeplearning.py /data/john/CA/mean_imputed_dataS /data/john/CA/random_split_for_training.csv output/dlres_meanimputedSCA.csv B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_dl_meanSCA.log &\n\n  * python -u 3_h2o_deeplearning.py /data/john/srilanka/model_imputed_dataS /data/john/srilanka/random_split_for_training.csv output/dlres_modelimputedS.csv B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_dl_modelS.log &\n    * python -u 3_h2o_deeplearning.py /data/john/CA/model_imputed_dataS /data/john/CA/random_split_for_training.csv output/dlres_modelimputedSCA.csv B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 3_dl_modelSCA.log &\n\n# Predicting holdout:\n\nThis data is reserved for final testing of the best model.\n\nOnly run the spectral or the level 3 (non-spectral) on the hold out data, not both. Choose the one that did the best on the test data in the previous scripts. Only run the deep learning or the GBM, not both. Choose the one that did the best on the test data in the previous scripts.\n\n## With Baseline:\n\npython -u 4_baseline.py *load_data_fp saving_model saving_fp saving_predictions_fp Trees Neighbs K* > 4_bline_holdout.log &\n\n  * python -u 4_baseline.py /data/john/srilanka/baseline_data.csv /data/john/srilanka/baseline_model.ann output/baseline_holdout.csv  /data/john/srilanka/baseline_predicted_holdout.csv 7 30 10 > 4_bline_holdout.log &\n  * python -u 4_baseline.py /data/john/CA/baseline_data.csv /data/john/CA/baseline_model.ann output/baseline_holdout.csv  /data/john/CA/baseline_predicted_holdout.csv 7 30 10 > 4_bline_holdoutCA.log &\n  * python -u 4_baseline.py /data/john/BL/baseline_data.csv /data/john/BL/baseline_model.ann baseline_holdout.csv  /data/john/BL/baseline_predicted_holdout.csv 7 30 10 > 4_bline_holdoutBL.log &\n  \n## With Models:\n\npython -u 4_holdout_models.py *load_data_fp train_data_fp training_res_fp saving_fp saving_predictions_fp saving_varimp_fp predictors* > 4_model_holdout.log &\n\n### For non-spectral and GBM:\n\n  * python -u 4_holdout_models.py /data/john/srilanka/h2o_data_holdout /data/john/srilanka/h2o_data_training output/gbmres.csv output/gbm_holdout_final.csv /data/john/srilanka/gbm_predicted_holdout.csv output/gbm_varimp.csv GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 4_model_holdout.log &\n    * python -u 4_holdout_models.py /data/john/CA/h2o_data_holdout /data/john/CA/h2o_data_training output/gbmresCA.csv output/gbm_holdout_finalCA.csv /data/john/CA/gbm_predicted_holdout.csv output/gbm_varimpCA.csv GWP_lag LST_lag NDVI_lag FPAR_lag LAI_lag GP_lag PSN_lag nino34_lag time_period EVI_lag landuse > 4_model_holdoutCA.log &\n  \n### For spectral and GBM:\n\n  * python -u 4_holdout_models.py /data/john/srilanka/h2o_data_holdoutS /data/john/srilanka/h2o_data_trainingS output/gbmresS.csv output/gbm_holdout_finalS.csv /data/john/srilanka/gbm_predicted_holdoutS.csv output/gbm_varimp.csv B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 4_model_holdoutS.log &\n    * python -u 4_holdout_models.py /data/john/CA/h2o_data_holdoutS /data/john/CA/h2o_data_trainingS output/gbmresSCA.csv output/gbm_holdout_finalSCA.csv /data/john/CA/gbm_predicted_holdoutS.csv output/gbm_varimpCA.csv B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 4_model_holdoutSCA.log &\n    * python -u 4_holdout_models.py /data/john/BL/h2o_data_holdoutS /data/john/BL/h2o_data_trainingS gbmresSBL.csv gbm_holdout_finalSBL.csv /data/john/BL/gbm_predicted_holdoutS.csv gbm_varimpBL.csv B1_lag B2_lag B3_lag B4_lag B5_lag B6_lag B7_lag GWP_lag nino34_lag time_period EVI_lag landuse > 4_model_holdoutSBL.log &\n\n# Create plots of validation performance:\n\nFor model selection, the plot comparing the performance of the different data types and locations:\n\n```\nRscript paper_plots_modelSelection.R &\n```\n\nFor final model validation on hold-out data, the many plots illustrating performance over space and time:\n\n```\nRscript paper_plots.R &\n```\n", 
  "read_at": 1462558045, 
  "description": "Forecasting Vegetation Health at a High Spatial Resolution", 
  "README.md": "<!-- README.md is generated from README.Rmd. Please edit that file -->\nForecasting Vegetation Health at High Spatial Resolution\n========================================================\n\nDrought threatens food and water security around the world, and this threat is likely to become more severe under climate change. High resolution predictive information can help farmers, water managers, and others to manage the effects of drought. We have created a tool to produce short-term forecasts of vegetation health at high spatial resolution, using open source software and [NASA satellite data](http://modis.gsfc.nasa.gov/data/dataprod/index.php) that are global in coverage. The tool automates downloading and processing Moderate Resolution Imaging Spectroradiometer (MODIS) datasets, and training gradient-boosted machine models on hundreds of millions of observations to predict future values of the Enhanced Vegetation Index. We compared the predictive power of different sets of variables (raw spectral MODIS data and Level-3 MODIS products) in two regions with distinct agro-ecological systems, climates, and cloud coverage: Sri Lanka and California. Our tool provides considerably greater predictive power on held-out datasets than simpler baseline models.\n\nThis website hosts the supplementary material for this project by [John J. Nay](http://johnjnay.com/), [Emily Burchfield](https://ekburchfield.wordpress.com/), and [Jonathan Gilligan](https://my.vanderbilt.edu/jonathangilligan), listing the external software requirements and the exact commands to be run in a terminal for completing our process.\n\nThe data downloading and processing requires a computer with significant amounts of RAM (\\> 100 GB) because the data must be held in memory to manipulate it. The modeling and hyper-parameters search can be run on weaker machines but the training time will take months if run on a laptop. To complete model training and hyper-parameters search in a few days, train the models on a computer with \\>= available 32 threads and \\>= 100 GB RAM.\n\nIf you use these scripts, cite this paper:\n\nNay, John J., Burchfield, Emily, Gilligan, Jonathan. (2016) \"Forecasting Vegetation Health at High Spatial Resolution.\" eprint arXiv:1602.06335\n\nThe paper can be downloaded as a pdf here: [<http://arxiv.org/abs/1602.06335>](http://arxiv.org/abs/1602.06335).\n\nUnited States National Science Foundation grant EAR-1204685 funded this research.\n\n![Poster](figures/WSC_poster2.png)\n\nOverview:\n=========\n\nThe figure below illustrates our process. We downloaded and processed eleven years of remotely sensed imagery. We combined this data with ancillary datasets and reshaped it into a single matrix where each row corresponds to a pixel at one time and each column is a measured variable. We divided the observations into Training Data 1 and Testing Data 1 by sampling from large spatial grid indices without replacement. We then divided Training Data 1 into Training Data 2 and Testing Data 2 with the same spatial sampling process, and trained multiple models on Training Data 2, varying the hyper-parameters for each model estimation. We used Testing Data 2 to assess the performance of each model's predictions. We repeated this loop of learning on Training Data 2 and testing on Testing Data 2 for each of the four different data types, and chose the combination of data type and hyper-parameter setting that achieved the highest performance in predicting Testing Data 2. Finally, we validated the best-performing model from the previous step by testing its performance on the held-out data in Testing Data 1. We repeated this entire process separately for Sri Lanka and California.\n\n![Methods Diagram](figures/methods_diagram.jpg)\n\nThe next figure displays predictions of agricultural land in Testing Data 1, the hold-out data, in California.\n\n![Methods Diagram](figures/scatter_ca.jpg)\n\nRequirements\n============\n\n-   Python 2.7 <https://www.python.org/download/releases/2.7/>\n-   h2o 3 <http://www.h2o.ai/download/h2o/python>\n\n<!-- -->\n\n    [sudo] pip install requests # for h2o\n    [sudo] pip install tabulate # for h2o\n    [sudo] pip install numpy # for reshaping and saving data\n    [sudo] pip install pandas # for reshaping and saving data\n    [sudo] pip install hyperopt # for estimating hyper-parameters of h2o models\n    [sudo] pip install annoy # for baseline model\n\nThe optional visualizations of validation performance requires R, and the R packages dplyr, ggplot2, and ggExtra.\n\nData construction:\n==================\n\npython -u 0\\_matrix\\_construction.py spectral directory username password tiles today enddate referenceImage \\> 0\\_construct.log &\n\n-   python -u 0\\_matrix\\_construction.py 1 /data/emily/SL myusername mypassword 'h25v08 h26v08' 2014-01-30 2014-01-01 /data/emily/WF/NDVI\\_DC/SL.tif\n\nPre-processing (spectral and non-spectral use different scripts):\n=================================================================\n\n### For non-spectral:\n\npython -u 1\\_pre\\_process.py *load\\_data\\_fp save\\_data\\_fp load\\_extra\\_file intervals* \\> 1\\_process.log &\n\n-   load\\_extra\\_file is optional, its used when an analyst has ancillary data, e.g. land-use classifications\n-   python -u 1\\_pre\\_process.py /data/emily/SL/ /data/john/srilanka/data1.csv /data/NDVI/columns/landuse.npy 253 \\> 1\\_process.log &\n-   python -u 1\\_pre\\_process.py /data/emily/CA/ /data/john/CA/data1.csv /data/emily/SJ/SJlanduse.npy 253 \\> 1\\_processCA.log &\n\n### For spectral:\n\npython -u 1\\_pre\\_processS.py *load\\_data\\_fp save\\_data\\_fp old\\_data\\_fp intervals load\\_extra\\_file* \\> 1\\_processS.log &\n\n-   python -u 1\\_pre\\_processS.py /data/emily/SLs/ /data/john/srilanka/data1S.csv /data/john/srilanka/data1.csv 253 /data/NDVI/columns/landuse.npy \\> 1\\_processS.log &\n    -   python -u 1\\_pre\\_processS.py /data/emily/CAs/ /data/john/CA/data1S.csv /data/john/CA/data1.csv 253 /data/emily/SJ/SJlanduse.npy \\> 1\\_processSCA.log &\n-   python -u 1\\_pre\\_processS.py /data/emily/BL/spectral/ /data/john/BL/data1S.csv None 230 \\> 1\\_processSBL.log &\n\nFor h2o:\n--------\n\n### For non-spectral:\n\npython -u 2\\_h2o\\_process.py *load\\_data\\_fp save\\_data\\_fp* \\> 2a\\_h2o.log &\n\n-   python -u 2\\_h2o\\_process.py /data/john/srilanka/data1.csv /data/john/srilanka/h2o\\_data\\_withMissing \\> 2a\\_h2o.log &\n-   python -u 2\\_h2o\\_process.py /data/john/CA/data1.csv /data/john/CA/h2o\\_data\\_withMissing \\> 2a\\_h2oCA.log &\n\npython -u 2\\_h2o\\_process\\_2.py *load\\_data\\_fp save\\_training\\_data\\_fp save\\_holdout\\_data\\_fp save\\_training\\_ind\\_fp* \\> 2b\\_h2o.log &\n\n*save\\_training\\_ind\\_fp* is an optional argument for the 2\\_h2o\\_process\\_2.py script. If it is provided, then the script will create a column indicating whether each row is in the training or testing data. This column will be used by subsequent scripts in dividing data into training and testing (not hold-out data, that was done previously). When we run the spectral we usually do not specify this argument because we don't want to overwite the file we created for the level-3 data: this allows us to use the same training/test split and compare performance across predictor variable data type.\n\n-   python -u 2\\_h2o\\_process\\_2.py /data/john/srilanka/h2o\\_data\\_withMissing /data/john/srilanka/h2o\\_data\\_training /data/john/srilanka/h2o\\_data\\_holdout /data/john/srilanka/random\\_split\\_for\\_training.csv \\> 2b\\_h2o.log &\n-   python -u 2\\_h2o\\_process\\_2.py /data/john/CA/h2o\\_data\\_withMissing /data/john/CA/h2o\\_data\\_training /data/john/CA/h2o\\_data\\_holdout /data/john/CA/random\\_split\\_for\\_training.csv \\> 2b\\_h2oCA.log &\n\n### For spectral:\n\npython -u 2\\_h2o\\_processS.py *load\\_data\\_fp save\\_data\\_fp* \\> 2a\\_h2oS.log &\n\n-   python -u 2\\_h2o\\_processS.py /data/john/srilanka/data1S.csv /data/john/srilanka/h2o\\_data\\_withMissingS \\> 2a\\_h2oS.log &\n-   python -u 2\\_h2o\\_processS.py /data/john/CA/data1S.csv /data/john/CA/h2o\\_data\\_withMissingS \\> 2a\\_h2oSCA.log &\n\n-   python -u 2\\_h2o\\_processS.py /data/john/BL/data1S.csv /data/john/BL/h2o\\_data\\_withMissingS \\> 2a\\_h2oSBL.log &\n\npython -u 2\\_h2o\\_process\\_2.py *load\\_data\\_fp save\\_training\\_data\\_fp save\\_holdout\\_data\\_fp* \\> 2b\\_h2oS.log &\n\n-   Starting here, all the scripts are the same for spectral and non spectral. You just pass them different arguments.\n-   If you run non-spectral first, you can optionally not specify the *save\\_training\\_ind\\_fp* with 2\\_h2o\\_process\\_2.py and thus not over-wrtie the csv file with the vector of indices denoting a training and testing data split. This allows results to be comparable between spectral and non-spectral.\n-   python -u 2\\_h2o\\_process\\_2.py /data/john/srilanka/h2o\\_data\\_withMissingS /data/john/srilanka/h2o\\_data\\_trainingS /data/john/srilanka/h2o\\_data\\_holdoutS \\> 2b\\_h2oS.log &\n-   python -u 2\\_h2o\\_process\\_2.py /data/john/CA/h2o\\_data\\_withMissingS /data/john/CA/h2o\\_data\\_trainingS /data/john/CA/h2o\\_data\\_holdoutS \\> 2b\\_h2oSCA.log &\n\n    -   python -u 2\\_h2o\\_process\\_2.py /data/john/BL/h2o\\_data\\_withMissingS /data/john/BL/h2o\\_data\\_trainingS /data/john/BL/h2o\\_data\\_holdoutS /data/john/BL/random\\_split\\_for\\_training.csv \\> 2b\\_h2oSBL.log &\n\nFor baseline:\n-------------\n\npython -u 2\\_baseline\\_process.py load\\_data\\_fp save\\_data\\_fp \\> 2\\_baseline.log &\n\n-   python -u 2\\_baseline\\_process.py /data/john/srilanka/data1.csv /data/john/srilanka/baseline\\_data.csv \\> 2\\_baseline.log &\n-   python -u 2\\_baseline\\_process.py /data/john/CA/data1.csv /data/john/CA/baseline\\_data.csv \\> 2\\_baselineCA.log &\n-   python -u 2\\_baseline\\_process.py /data/john/BL/data1S.csv /data/john/BL/baseline\\_data.csv \\> 2\\_baselineBL.log &\n\nModeling (spectral and non-spectral use same scripts, just different arguments for predictor variables)\n=======================================================================================================\n\nModeling in h2o with GBM:\n=========================\n\nFor non-spectral:\n-----------------\n\npython -u 3\\_h2o\\_gbm.py *load\\_data\\_fp* *load\\_train\\_ind\\_fp* *saving\\_fp* GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_gbm.log &\n\n-   python -u 3\\_h2o\\_gbm.py /data/john/srilanka/h2o\\_data\\_training /data/john/srilanka/random\\_split\\_for\\_training.csv output/gbmres.csv GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_gbm.log &\n    -   python -u 3\\_h2o\\_gbm.py /data/john/srilanka/h2o\\_data\\_training /data/john/srilanka/random\\_split\\_for\\_training.csv output/gbmres\\_evi.csv EVI\\_lag \\> 3\\_gbmevi.log &\n    -   python -u 3\\_h2o\\_gbm.py /data/john/srilanka/h2o\\_data\\_training /data/john/srilanka/random\\_split\\_for\\_training.csv output/gbmres\\_evilt.csv time\\_period EVI\\_lag landuse \\> 3\\_gbmevilt.log &\n-   python -u 3\\_h2o\\_gbm.py /data/john/CA/h2o\\_data\\_training /data/john/CA/random\\_split\\_for\\_training.csv output/gbmresCA.csv GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_gbmCA.log &\n    -   python -u 3\\_h2o\\_gbm.py /data/john/CA/h2o\\_data\\_training /data/john/CA/random\\_split\\_for\\_training.csv output/gbmresCA\\_evi.csv EVI\\_lag \\> 3\\_gbmCAevi.log &\n    -   python -u 3\\_h2o\\_gbm.py /data/john/CA/h2o\\_data\\_training /data/john/CA/random\\_split\\_for\\_training.csv output/gbmresCA\\_evilt.csv time\\_period EVI\\_lag landuse \\> 3\\_gbmCAevilt.log &\n\nFor spectral:\n-------------\n\npython -u 3\\_h2o\\_gbm.py *load\\_data\\_fp* *load\\_train\\_ind\\_fp* *saving\\_fp* B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_gbm.log &\n\n-   python -u 3\\_h2o\\_gbm.py /data/john/srilanka/h2o\\_data\\_trainingS /data/john/srilanka/random\\_split\\_for\\_training.csv output/gbmresS.csv B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_gbm.log &\n-   python -u 3\\_h2o\\_gbm.py /data/john/CA/h2o\\_data\\_trainingS /data/john/CA/random\\_split\\_for\\_training.csv output/gbmresSCA.csv B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_gbmCA.log &\n\n-   python -u 3\\_h2o\\_gbm.py /data/john/BL/h2o\\_data\\_trainingS /data/john/BL/random\\_split\\_for\\_training.csv gbmresSBL.csv B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_gbmBL.log &\n\nModeling in h2o with deep learning (both model-imputed and mean-imputed):\n=========================================================================\n\nFor non-spectral:\n-----------------\n\npython -u 3\\_h2o\\_deeplearning\\_imputation.py *load\\_data\\_fp saving\\_meanImputed\\_fp saving\\_modelImputed\\_fp saving\\_means\\_fp saving\\_models\\_fp* GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_imp.log &\n\n-   python -u 3\\_h2o\\_deeplearning\\_imputation.py /data/john/srilanka/h2o\\_data\\_training /data/john/srilanka/mean\\_imputed\\_data /data/john/srilanka/model\\_imputed\\_data /data/john/srilanka/dl\\_imputation\\_means.csv /data/john/srilanka/models/ GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_imp.log &\n    -   python -u 3\\_h2o\\_deeplearning\\_imputation.py /data/john/CA/h2o\\_data\\_training /data/john/CA/mean\\_imputed\\_data /data/john/CA/model\\_imputed\\_data /data/john/CA/dl\\_imputation\\_means.csv /data/john/CA/models/ GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_impCA.log &\n\npython -u 3\\_h2o\\_deeplearning.py *load\\_data\\_fp load\\_train\\_ind\\_fp saving\\_fp* GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_mean.log &\n\n-   python -u 3\\_h2o\\_deeplearning.py /data/john/srilanka/mean\\_imputed\\_data /data/john/srilanka/random\\_split\\_for\\_training.csv output/dlres\\_meanimputed.csv GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_mean.log &\n    -   python -u 3\\_h2o\\_deeplearning.py /data/john/CA/mean\\_imputed\\_data /data/john/CA/random\\_split\\_for\\_training.csv output/dlres\\_meanimputedCA.csv GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_meanCA.log &\n-   python -u 3\\_h2o\\_deeplearning.py /data/john/srilanka/model\\_imputed\\_data /data/john/srilanka/random\\_split\\_for\\_training.csv output/dlres\\_modelimputed.csv GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_model.log &\n    -   python -u 3\\_h2o\\_deeplearning.py /data/john/CA/model\\_imputed\\_data /data/john/CA/random\\_split\\_for\\_training.csv output/dlres\\_modelimputedCA.csv GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_modelCA.log &\n\nFor spectral:\n-------------\n\npython -u 3\\_h2o\\_deeplearning\\_imputation.py *load\\_data\\_fp saving\\_meanImputed\\_fp saving\\_modelImputed\\_fp saving\\_means\\_fp saving\\_models\\_fp* B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_imp.log &\n\n-   python -u 3\\_h2o\\_deeplearning\\_imputation.py /data/john/srilanka/h2o\\_data\\_trainingS /data/john/srilanka/mean\\_imputed\\_dataS /data/john/srilanka/model\\_imputed\\_dataS /data/john/srilanka/dl\\_imputation\\_meansS.csv /data/john/srilanka/modelsS/ B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_impS.log &\n    -   python -u 3\\_h2o\\_deeplearning\\_imputation.py /data/john/CA/h2o\\_data\\_trainingS /data/john/CA/mean\\_imputed\\_dataS /data/john/CA/model\\_imputed\\_dataS /data/john/CA/dl\\_imputation\\_meansS.csv /data/john/CA/modelsS/ B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_impSCA.log &\n\npython -u 3\\_h2o\\_deeplearning.py *load\\_data\\_fp load\\_train\\_ind\\_fp saving\\_fp* B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_meanS.log &\n\n-   python -u 3\\_h2o\\_deeplearning.py /data/john/srilanka/mean\\_imputed\\_dataS /data/john/srilanka/random\\_split\\_for\\_training.csv output/dlres\\_meanimputedS.csv B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_meanS.log &\n    -   python -u 3\\_h2o\\_deeplearning.py /data/john/CA/mean\\_imputed\\_dataS /data/john/CA/random\\_split\\_for\\_training.csv output/dlres\\_meanimputedSCA.csv B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_meanSCA.log &\n-   python -u 3\\_h2o\\_deeplearning.py /data/john/srilanka/model\\_imputed\\_dataS /data/john/srilanka/random\\_split\\_for\\_training.csv output/dlres\\_modelimputedS.csv B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_modelS.log &\n    -   python -u 3\\_h2o\\_deeplearning.py /data/john/CA/model\\_imputed\\_dataS /data/john/CA/random\\_split\\_for\\_training.csv output/dlres\\_modelimputedSCA.csv B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 3\\_dl\\_modelSCA.log &\n\nPredicting holdout:\n===================\n\nThis data is reserved for final testing of the best model.\n\nOnly run the spectral or the level 3 (non-spectral) on the hold out data, not both. Choose the one that did the best on the test data in the previous scripts. Only run the deep learning or the GBM, not both. Choose the one that did the best on the test data in the previous scripts.\n\nWith Baseline:\n--------------\n\npython -u 4\\_baseline.py *load\\_data\\_fp saving\\_model saving\\_fp saving\\_predictions\\_fp Trees Neighbs K* \\> 4\\_bline\\_holdout.log &\n\n-   python -u 4\\_baseline.py /data/john/srilanka/baseline\\_data.csv /data/john/srilanka/baseline\\_model.ann output/baseline\\_holdout.csv /data/john/srilanka/baseline\\_predicted\\_holdout.csv 7 30 10 \\> 4\\_bline\\_holdout.log &\n-   python -u 4\\_baseline.py /data/john/CA/baseline\\_data.csv /data/john/CA/baseline\\_model.ann output/baseline\\_holdout.csv /data/john/CA/baseline\\_predicted\\_holdout.csv 7 30 10 \\> 4\\_bline\\_holdoutCA.log &\n-   python -u 4\\_baseline.py /data/john/BL/baseline\\_data.csv /data/john/BL/baseline\\_model.ann output/baseline\\_holdout.csv /data/john/BL/baseline\\_predicted\\_holdout.csv 7 30 10 \\> 4\\_bline\\_holdoutBL.log &\n\nWith Models:\n------------\n\npython -u 4\\_holdout\\_models.py *load\\_data\\_fp train\\_data\\_fp training\\_res\\_fp saving\\_fp saving\\_predictions\\_fp saving\\_varimp\\_fp predictors* \\> 4\\_model\\_holdout.log &\n\n### For non-spectral and GBM:\n\n-   python -u 4\\_holdout\\_models.py /data/john/srilanka/h2o\\_data\\_holdout /data/john/srilanka/h2o\\_data\\_training output/gbmres.csv output/gbm\\_holdout\\_final.csv /data/john/srilanka/gbm\\_predicted\\_holdout.csv output/gbm\\_varimp.csv GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 4\\_model\\_holdout.log &\n    -   python -u 4\\_holdout\\_models.py /data/john/CA/h2o\\_data\\_holdout /data/john/CA/h2o\\_data\\_training output/gbmresCA.csv output/gbm\\_holdout\\_finalCA.csv /data/john/CA/gbm\\_predicted\\_holdout.csv output/gbm\\_varimpCA.csv GWP\\_lag LST\\_lag NDVI\\_lag FPAR\\_lag LAI\\_lag GP\\_lag PSN\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 4\\_model\\_holdoutCA.log &\n\n### For spectral and GBM:\n\n-   python -u 4\\_holdout\\_models.py /data/john/srilanka/h2o\\_data\\_holdoutS /data/john/srilanka/h2o\\_data\\_trainingS output/gbmresS.csv output/gbm\\_holdout\\_finalS.csv /data/john/srilanka/gbm\\_predicted\\_holdoutS.csv output/gbm\\_varimp.csv B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 4\\_model\\_holdoutS.log &\n    -   python -u 4\\_holdout\\_models.py /data/john/CA/h2o\\_data\\_holdoutS /data/john/CA/h2o\\_data\\_trainingS output/gbmresSCA.csv output/gbm\\_holdout\\_finalSCA.csv /data/john/CA/gbm\\_predicted\\_holdoutS.csv output/gbm\\_varimpCA.csv B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 4\\_model\\_holdoutSCA.log &\n    -   python -u 4\\_holdout\\_models.py /data/john/BL/h2o\\_data\\_holdoutS /data/john/BL/h2o\\_data\\_trainingS output/gbmresSBL.csv output/gbm\\_holdout\\_finalSBL.csv /data/john/BL/gbm\\_predicted\\_holdoutS.csv output/gbm\\_varimpBL.csv B1\\_lag B2\\_lag B3\\_lag B4\\_lag B5\\_lag B6\\_lag B7\\_lag GWP\\_lag nino34\\_lag time\\_period EVI\\_lag landuse \\> 4\\_model\\_holdoutSBL.log &\n\nCreate plots of validation performance:\n=======================================\n\nFor model selection, the plot comparing the performance of the different data types and locations:\n\n    Rscript paper_plots_modelSelection.R &\n\nFor final model validation on hold-out data, the many plots illustrating performance over space and time:\n\n    Rscript paper_plots.R &\n", 
  "id": 51855621
}