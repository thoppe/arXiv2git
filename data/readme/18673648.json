{
  "read_at": 1462550678, 
  "description": "Native Implementation (CPU & GPU) of the Iterative Bayesian Deconvolution Algorithm in the Fiji Multi-View Deconvolution Plugin by Stephan Preibisch", 
  "README.md": "# GPU based Multi-View Deconvolution using cuFFT\n\nThis package aims at providing an easy-to-use API for calling GPU deconvolution routines from the Fiji/SPIM_Registration plugin ( https://github.com/fiji/spimreconstruction ). It is written in C++ and offers a C API of plain methods and C structs to call from any client binary or library. The implementation is based on <http://arxiv.org/abs/1308.0730>.\n\n# Building the Library\n\n## Operating Systems\n\nWe currently support the following operating systems:\n\n* OSX 10.8 or higher (experimental)\n* Fedora Linux 19 or higher\n* CentOS Linux 6.3 or higher\n\n## Dependencies\n\n* CUDA 5 or later (the nvcc compiler, libcudart and libcufft) must be available.\n* cmake versions later than 2.8 ( FindCUDA.cmake sources are needed )\n* boost 1.42 or later\n* fftw 3.1 or later\n\n## Install:\nTo compile the shared library libMultiViewNative.so, invoke\n```bash\n$ mkdir build\n$ cd build\n```\n\nIf a specific installation destination is to be used\n```bash\n$ cmake -DCMAKE_INSTALL_PREFIX=/path/to/lib ..\n$ make\n$ make install\n```\n\nor else (will install library in system default library paths, administrator rights required)\n```bash\n$ cmake .. \n$ make\n$ make install\n```\n\n\n# Using the Library\n\n*Note: The GPU is unstable and not yet production ready. The CPU API can be used!*\n\n## Fiji related\n\nIn order to call the GPU methods from Java, simply create a directory called lib/linux64 under the fiji root directory. Create a symlink to libMultiViewNative.so (compiled for your architecture) here.\n\n## License\n\nsee LICENSE\n\n## Contact\n\nFor questions, bug reports, improvement suggestions or else, use the github issue tracker of this repo.\n\n## Known Issues\n\nOn OS X, CUDA is (at the time of writing) INCOMPATIBLE with the installed llvm based compilers used by default (e.g. /usr/bin/c++). To resolve this, the installation procedure uses an llvm based gcc version for compiling and testing.\n\n## Disclaimer\n\nThe library at hand is an evolving project. It is designed as the native implementation of http://fiji.sc/Multi-View_Deconvolution (cf. <http://arxiv.org/abs/1308.0730>). The ultimate goal is to implement the performance sensitive parts of the Multi-View_Deconvolution in this library which can provide significant speed-ups: <http://on-demand.gputechconf.com/gtc/2015/video/S5208.html> (recording of the talk), <https://idisk.mpi-cbg.de/~steinbac/gtc2015> (slides)\n\n", 
  "id": 18673648
}