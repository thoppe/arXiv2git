{
  "read_at": 1462543198, 
  "description": "Proximal gradient algorithm for convex optimization, using a diagonal +/- rank-1 norm", 
  "README.md": "# zeroSR1 toolbox\n\nThe zeroSR1 toolbox implements the algorithm from 'A quasi-Newton proximal splitting method' by \nStephen Becker and Jalal Fadili, which appeared in [NIPS 2012](http://nips.cc/). The paper is available at [arXiv 1206.1156](http://arxiv.org/abs/1206.1156).\n\nBriefly, the algorithm follows the standard proximal-gradient method, but allows a scaled prox. This enables us to use a limited-memory SR1 method (similar to L-BFGS).\n\nThe algorithm solves problems of the form min\\_x f(x) + h(x) where f is differentiable (more precisely, with a Lipschitz gradient) and h is one of the following (see the paper):\n\nAvailable \"h\" | Cost for input of size \"n\"\n------------- | -------------\nl1 norm | O( n log n)\nnon-negativity constraints | O( n log n)\nl1 and non-negativity | O( n log n)\nbox constraints | O( n log n )\nl\\_infinity norm constraint | O( n log n )\n[hinge loss](http://en.wikipedia.org/wiki/Hinge_loss) | O( n log n )\n\nThe algorithm compares favorably with other methods, including [L-BFGS-B](http://www.mathworks.com/matlabcentral/fileexchange/35104-lbfgsb-l-bfgs-b-mex-wrapper).\n\nThis toolbox currently implements in the following languages\n\n* Matlab\n* Octave\n\nFurther releases may target these languages:\n\n* Python\n* R\n* C++\n\n# Installation\nFor Matlab, there is no installation necessary. Every time you run a new Matlab session, run the `setup_zeroSR1.m` file and it will add the correct paths.\n\nRun `tests/test_solver_simple.m` to see how to solve a typical problem\n\n# Structure\nIn each folder, see they `Contents.m` file for more information\n## Algorithms\nThis includes the zeroSR1 algorithm as well as implemenations of FISTA and other proximal-gradient methods\n\n## Proxes\nThe scaled diagonal+ rank1 prox operators for various \"g\" functions\n\n## SmoothFunctions\nThese are pre-made wrappers for the various smooth \"f\" functions. The files here with the `_splitting` suffix are intended for use with any method that requires forming the augmented variable \"x\\_aug = (x\\_pos, x\\_neg)\". For example, this approach is used when using L-BFGS-B (which only allows box constraints, such as x\\_pos >= 0,  x\\_neg <= 0) to solve the LASSO problem.\n\n## Utilities\nHelper files\n\n## Tests\nVerify the algorithm and proxes are working correctly. This uses [CVX](http://cvxr.com/cvx) to verify; if this is not installed on your system, then it relies on precomputed solutions stored in a subdirectory.\n\n## Experiments\nRecreate tests of several algorithms, or do something more interesting than the scripts in `tests`\n\n## Authors\nThe original authors are Stephen Becker and Jalal Fadili. Further contributions are welcome.\n", 
  "id": 17225027
}