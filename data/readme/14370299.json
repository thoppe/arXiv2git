{
  "read_at": 1462556854, 
  "description": "Finite Volume Nonlinear Acoustics GPU Implementation", 
  "README.md": "# FiVoNAGI\n\nName : Finite Volume Nonlinear Acoustics GPU Implementation (FiVoNAGI)\n\nAuthors : Roberto Velasco Segura and Pablo L. Rendon\n\nAffiliations : Grupo de Acustica y Vibraciones, Centro de Ciencias\nAplicadas y Desarrollo Tecnologico (CCADET), Posgrado en Ciencias\nFisicas (PCF), Universidad Nacional Autonoma de Mexico (UNAM).\n\nRegistration numbers: 03-2014-022811451900-01 INDAUTOR Mexico\n\nSource repository : https://github.com/rvelseg/FiVoNAGI\n\n## Description\n\nThis code calculates an approximate solution for nonlinear and\ndissipative acoustic field, using conservation laws obtained with all\nbut one hypotheses used to obtain Westervelt equation.\n\nThe code is implemented in 2D using a finite volume method. It\nuses 2D texture memory and OpenGL display.\n\n## Papers\n\nFirst results of this code have been published as preprint in\nhttp://arxiv.org/abs/1311.3004 , you can find some results of this\ncode as videos there. If you use this code in your research\nplease cite using\n\n> @article{velasco2013finite,\n> \ttitle={A finite volume approach for the simulation of nonlinear\n> \tdissipative acoustic wave propagation},\n> \tauthor={Velasco-Segura, Roberto and Rend{\\'o}n, Pablo L},\n> \tjournal={arXiv preprint arXiv:1311.3004},\n> \tyear={2013}\n> \t}\n\n## License\n\nSee license.txt in the root directory of the repository.\n\n## System requirements\n\nThis code has been tested in the following system, we are not sure if\nit runs, and how it performs, in different systems:\n\nHardware\n\n* core i3 processor \n* 16 GB RAM\n* 500 GB HDD (dedicated to these simulations)\n* 2.0 GPU CUDA compute capability\n* 6 GB GPU RAM\n* 448 CUDA cores\n\nSoftware\n\n* Linux Debian/Sid\n* GNU bash 4.2.45\n* GNU Make 3.81\n* CUDA 5.5.0\n* g++ 4.8.2\n* python 2.7.6\n* gnuplot 4.6\n* pdfTeX 3.1415926-2.5-1.40.14\n\nAny feedback on performance over different systems is welcome.\n\n## Usage\n\nFirst, clone or download (and decompress) the repository.\n\nTo execute the existing code:\n\n* `cd` to the root directory of the repository\n* if you want to see some action before more reading try `make APP=hifu-beam display`\n* execute `make help` and see further instructions\n\nTo create new applications:\n\n* make a new directory inside `apps` directory\n* replicate the structure of existing applications using code for your\nspecific system\n\n## Structure\n\nThe core of this code is in the `common` directory. Applications are\ndirectories in any level within the `apps` directory, inside each application\ndirectory should be files defining those qualities that make the\ncorresponding application different from the other applications,\ne.g. boundary conditions, Riemann solver or initial values. If two\napplications share something, it is recommended to create a third\ndirectory to place common files instead of repeating them, as is the\ncase of `apps/na`.\n\nAs you have probably already noticed, the structure of this code\nreproduces a few parts of the structure of CLAWPACK\n\n> R. J. LeVeque, M. J. Berger, et. al., Clawpack Software 4.6.1,\n> www.clawpack.org, last visited: november 2013.\n\nwe have learned a lot looking at that code. Indeed some of this code\nreplicates, with the context needs, parts of CLAWPACK code. To\nfacilitate comparison indications like\n\n> For comparison with CLAWPACK see: path/to/some/clawpack/file.f\n\nhave been placed as comments in the corresponding files. Integration\nwith this or other FOSS project would be highly desirable for us.\n", 
  "id": 14370299
}