{
  "read_at": 1462547752, 
  "description": "", 
  "README.md": "# Generating Images with Recurrent Adversarial Networks \n\nPython (Theano) implementation of Generating Images with Recurrent Adversarial Networks code provided \nby Daniel Jiwoong Im, Chris Dongjoo Kim, Hui Jiang, and Roland, Memisevic \n\nGenerative Recurrent Adversarial Network (GRAN) is a recurrent generative model inspired by\nthe view that unrolling the gradient-based optimization yields\na recurrent computation that creates images by\nincrementally adding onto a visual \"canvas\".\nGRAN is trained using adversarial training to generate very good image\nsamples. \n\nGenerative Adversarial Metric (GAM) quantitatively\ncompare adversarial networks by having\nthe generators and discriminators of these networks\ncompete against each other.\n\nFor more information, see \n```bibtex\n@article{Im2015,\n    title={Generating Images with Recurrent Adversarial Networks },\n    author={Im, Daniel Jiwoong and Kim, Chris Dongjoo and Jiang, Hui and Memisevic, Roland},\n    journal={http://arxiv.org/abs/1602.05110},\n    year={2016}\n}\n```\nIf you use this in your research, we kindly ask that you cite the above arxiv paper.\n\n\n## Dependencies\nPackages\n* [numpy](http://www.numpy.org/)\n* [Theano ('0.7.0.dev-725b7a3f34dd582f9aa2071a5b6caedb3091e782')](http://deeplearning.net/software/theano/) \n\n## How to set-up LSUN dataset\n1. Obtain the LSUN dataset from [fyu's repository](https://github.com/fyu/lsun)\n2. Resize the image to 64x64 or 128x128.\n3. Split the dataset to train/val/test set.\n4. Update the paths in provided paths.yaml, and run the script \n```\npython to_hkl.py <toy/full>\n```\nLink it to the inquire/main file, e.g.\n```\nlsun_datapath='/local/scratch/chris/church/preprocessed_toy_10/'\n``` \n\n## How to run\nEntry code for CIFAR10 and LSUN Church are \n```\n    - ./main_granI_cifar10.py\n```\n## How to obtain samples with pretrained models\nFirst download the pretrained model from this [Dropbox Link](https://www.dropbox.com/sh/1jek1alxyjhcnjh/AADOWgtWOWF-LYEuMekxe2yWa?dl=0), save it to a local folder, and supply the path when prompted.\n```\n    python inquire_samples.py # to attain Nearest Neighbour and Sequential Samples\n\n    python main_granI_lsun.py # to attain 100 samples from the pretrained model.\n\n```\n\nHere are some CIFAR10 samples generated from GRAN:\n\n![Image of cifar10](https://github.com/jiwoongim/GRAN/blob/master/figs/cifar10/cifar10_granI_samples.jpeg)\n\n![Image of cifar10](https://github.com/jiwoongim/GRAN/blob/master/figs/cifar10/cifar10_granI_samples2.jpeg)\n\nHere are some LSUN Church samples generated from GRAN:\n\n![Image of lsun](https://github.com/jiwoongim/GRAN/blob/master/figs/lsun/lsun_ts3.jpg)\n\n![Image of lsun](https://github.com/jiwoongim/GRAN/blob/master/figs/lsun/lsun_ts5.jpg)\n\n\n", 
  "id": 55297197
}