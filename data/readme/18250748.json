{
  "read_at": 1462553635, 
  "description": "Model checker for HyperLTL2", 
  "README.md": "# Model checker for HyperLTL_2 \n\nHyperLTL is an extension of linear-time temporal logic (LTL)\nwith first-order quantification of traces.  It can be used\nfor model-checking of security properties of programs.\n\nThis software is a prototype model checker written to accompany \nthe Principles of Security and Trust (POST) 2014 paper titled \n\"Temporal Logics for Hyperproperties\" by Clarkson, Finkbeiner, \nKoleini, Micinski, Rabe, and Sanchez.  The full version of that\npaper can be found in an arXiv technical report at: \n  \n  http://arxiv.org/abs/1401.4492.\n\nThe model checker is for a fragment of HyperLTL\nthat allows one quantifier alternation between forall (A) and\nexists (E).  This fragment is called HyperLTL_2.  It was\noriginally described in another arXiv technical report:\n\n  http://arxiv.org/abs/1306.5678\n\nHyperLTL_2 is a syntactic restriction of HyperLTL, which is a logic \nfor stating and verifying security hyperproperties of systems.  The \nlogic is described in the paper [Temporal Logics for Hyperproperties](http://faculty.cs.gwu.edu/~clarkson/papers/clarkson_hyper_tl.pdf)\n\n## Dependencies\n\nYou need an OCaml compiler.  An easy way to get one is to\ninstall OPAM, available from:\n\n  http://opam.ocamlpro.com/\n\nRun this command to install some libraries that our model checker depends on:\n\n  opam install xml-light ounit\n  \nAlso install the GOAL toolkit, available at:\n\n    http://goal.im.ntu.edu.tw/wiki/doku.php  \n    \nInstall the Linux/Windows .zip distribution of GOAL, not the Mac .dmg \ndistribution.\n\nWe tested these instructions with version 4.01.0 of the OCaml compiler, and\nwith with GOAL2, version 2013-07-11.\n  \n## Building\n\nTo build, run from the src/ directory: \n\n    make\n\n## Running the model checker\n\nTo run the model checker on an input model and formula, run this from the src/\ndirectory:\n\n    ./main.native model_file formula path_to_goal\n\n- model_file is the name of a file containing a Kripke structure.\n  Some examples are provided in the test_models/ directory.\n- formula_file is a string containing a HyperLTL formula.\n  Some examples are provided in the test_formulas/ directory.\n  The formula syntax uses a nameless representation of traces,\n  as described in the original HyperLTL_2 technical report\n  [http://arxiv.org/abs/1306.5678].\n- path_to_goal is the path to the GOAL runtime as installed \n  on your system.\n  \nThe ultimate output from GOAL will either be (true, null), indicating that\nthe model satisfies the formula, or (false, ctex), where ctex is a\ncounterexample showing that model does not satisfy the formula.\n  \nAn invocation on one of the author's machines looks like this:\n\n    $ ./main.native ../test_models/1.mod \"A ^ 1 E ^ 1 G ( [T, ~ \\\"p\\\"] ^ \\\"LE\\\")\" ~/Downloads/GOAL-20130123/goal\n    Running the model checker with ../test_models/1.mod as the input file..\n    Verifying property:\n    A ^ 1 E ^ 1 G ( [T, ~ \"p\"] ^ \"LE\")\n    Model name: ../test_models/1.mod\n    Simplified formula: A E ~ (T U (T,p,) v ~ (LE))\n    Parsing model...\n    The maximally consistent sets are:\n    \n    ...\n\n    The constructed automaton has 60 states.\n    Now to check the formula, we check containment of these two automata\n    Written to files...\n    Calling GOAL's solver...\n    Goal says...\n    (true, null)\n\n    Finished checking all properties.\n\n", 
  "id": 18250748
}