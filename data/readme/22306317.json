{
  "read_at": 1462551019, 
  "description": "Numerical routines for calculation of triangle electrostatic center, characteristic point X(5626). Precise routines are written in Wolfram Mathematica, with practical approximation being implemented in C and Python.", 
  "README.md": "Center of electrostatic potential X(5626)\n=========================================\n\nIt is the point of maximal electrostatic potential inside a triangle having a homogeneous surface charge distribution. It's also a point of zero electric field of the same charge distribution, and happens to satisfy the mathematical definition of triangle center. A lot of technical details can be found in the article *'From electrostatic potentials to yet another triangle center'* by Hrvoje Abraham and Vjekoslav Kovac. (http://arxiv.org/pdf/1312.3176v2.pdf)\n\nCenter is also listed in Kimberling's Encyclopedia of triangle centers under *X(5626) = CENTER OF ELECTROSTATIC POTENTIAL.* (http://faculty.evansville.edu/ck6/encyclopedia/ETCPart4.html)\n\nThe point is successfully used to improve the stability and speed up the convergence of BEM methods for electrostatic problems.\n\nThis repository contains a few routines for numerical calculation of X(5626). Precise routines are written in Wolfram Mathematica, with practical approximation being implemented in C and Python.\n\nWolfram Mathematica\n-------------------\n\nA brief documentation for Mathematica functions available in __ElectrostaticCenter.nb__.\n\n### Functions\n```\nFindElectrostaticLambda[{{ax_,ay_},{bx_,by_},{cx_,cy_}}]\n```\n\nFinds numerical value of *lambda* parameter of triangle electrostatic center X(5626) based on 2D Cartesian coordinates of triangle vertices. Default value of *Precision* option is 12 decimal places.\n\n```\nElectrostaticLine[{{ax_,ay_},{bx_,by_},{cx_,cy_}}, lambda_]\n```\n\nComputes a point on electrostatic line of the triangle based on 2D Cartesian coordinates of triangle vertices and *lambda* parameter. Returns electrostatic center X(5626) if its *lambda* is used.\n\n```\nFindElectrostaticCenter2D[{{ax_,ay_},{bx_,by_},{cx_,cy_}}]\n```\n\nReturns electrostatic center X(5626) of triangle defined with 2D Cartesian coordinates of its vertices. Default value of *Precision* option is 12 decimal places.\n\n```\nFindElectrostaticCenter3D[{{ax_,ay_,az_},{bx_,by_,bz_},{cx_,cy_,cz_}}]\n```\n\nReturns electrostatic center X(5626) of triangle defined with 3D Cartesian coordinates of its vertices. Default value of *Precision* option is 12 decimal places.\n\n### Example\n\n![alt tag](https://raw.githubusercontent.com/ahrvoje/electrostatic-center/master/resources/ElectrostaticCenter_MathematicaExample.png)\n\nC\n-\n\nA brief documentation for C functions available in __electrostaticCenter.c__. These functions use approximate estimation of *lambda* parameter described in section 6 of the article mentioned in the header of this document. Estimation is implemented in a way which reduces the probability of numerical overflow or underflow.\n\n### Functions\n\n#### electrostaticCenter2D\nComputes coordinates of electrostatic center based on 2D Cartesian coordinates of triangle vertices.\n\n_Syntax:_\n\n```C\nint electrostaticCenter2D(double ax, double ay, double bx, double by, double cx, double cy,\n                          double* x, double* y)\n```\n_Parameters:_\n\n| Name | Type | Description|   \n|-----:|------|------------|   \n| *ax, ay, bx, by, cx, cy* | double | 2D Cartesian coordinates of ABC triangle vertices |   \n| *x, y* | double* | pointers to result variables for 2D Cartesian coordinates of electrostatic center |   \n\n_Remark:_\n\nPerformance and return value depend on ELECTROCENTERDEBUG preprocess variable being defined in __electrostaticCenter.h__.\n\n_Return value:_\n\n| Value | Description |\n|------:|-------------|\n| *< 0* | If calculation failed and ELECTROCENTERDEBUG is defined. It can vary between -6 and -1 depending on where the problem occurred. |\n| *0* | If ELECTROCENTERDEBUG not defined. |\n| *1* | If calculation is successfully executed and ELECTROCENTERDEBUG is defined. |\n\n#### electrostaticCenter3D\nComputes coordinates of electrostatic center based on 3D Cartesian coordinates of triangle vertices.\n\n_Syntax:_\n\n```C\nint electrostaticCenter3D(double ax, double ay, double az, double bx, double by, double bz,\n                          double cx, double cy, double cz, double* x, double* y, double* z)\n```\n_Parameters:_   \n\n| Name | Type | Description|   \n|-----:|------|------------|   \n| *ax, ay, az, bx, by, bz, cx, cy, cz* | double | 3D Cartesian coordinates of ABC triangle vertices |   \n| *x, y, z* | double* | pointers to result variables for 3D Cartesian coordinates of electrostatic center |   \n\n_Remark:_\n\nPerformance and return value depend on ELECTROCENTERDEBUG preprocess variable being defined in __electrostaticCenter.h__.\n\n_Return value:_\n\n| Value | Description |\n|------:|-------------|\n| *< 0* | If calculation failed and ELECTROCENTERDEBUG is defined. It can vary between -8 and -1 depending on where the problem occurred. |\n| *0* | If ELECTROCENTERDEBUG not defined. |\n| *1* | If calculation is successfully executed and ELECTROCENTERDEBUG is defined. |\n\n### Example\n```C\n#include <stdio.h>\n#include \"..\\src\\electrostaticCenter.h\"\n\nint main(void)\n{\n    double x, y, z;\n\n    // compute electrostatic center for triangle ABC\n    // A(-1,0), B(2,0), C(0,2)\n    electrostaticCenter2D(-1, 0, 2, 0, 0, 2, &x, &y);\n    printf(\"electrostatic center (x, y) = (%lf, %lf)\\n\", x, y);\n\n    // compute electrostatic center for triangle ABC\n    // A(-1,0,1), B(2,0,2), C(0,2,3)\n    electrostaticCenter3D(-1, 0, 1, 2, 0, 2, 0, 2, 3, &x, &y, &z);\n    printf(\"electrostatic center (x, y, z) = (%lf, %lf, %lf)\\n\", x, y, z);\n\n    return 0;\n}\n```\n\n![alt tag](https://raw.githubusercontent.com/ahrvoje/electrostatic-center/master/resources/ElectrostaticCenter_CExample.png)\n\n\nPython\n------\n\nA brief documentation for Python functions available in __electrostaticCenter.py__. These functions use approximate estimation of *lambda* parameter described in section 6 of the article mentioned in the header of this document. Estimation is implemented in a way which reduces the probability of numerical overflow or underflow.\n\n### Functions\n```Python\n[x, y] = electrostaticCenter2D([[ax, ay], [bx, by], [cx, cy]])\n```\n\nReturns electrostatic center of triangle defined as a triplet of 2D Cartesian coordinates of its vertices.\n\n```Python\n[x, y, z] = electrostaticCenter3D([[ax, ay, az], [bx, by, bz], [cx, cy, cz]])\n```\n\nReturns electrostatic center of triangle defined as a triplet of 3D Cartesian coordinates of its vertices.\n\n### Example\n```Python\nfrom electrostaticCenter import *\n\nprint 'electrostatic center [x, y] =', electrostaticCenter2D([[-1, 0], [2, 0], [0, 2]])\nprint 'electrostatic center [x, y, z] =', electrostaticCenter3D([[-1, 0, 1], [2, 0, 2], [0, 2, 3]])\n```\n\n![alt tag](https://raw.githubusercontent.com/ahrvoje/electrostatic-center/master/resources/ElectrostaticCenter_PythonExample.png)\n\nLicense\n-------\nAll material in this repository is available under MIT license.\n", 
  "id": 22306317
}