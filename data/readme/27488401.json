{
  "read_at": 1462557257, 
  "description": "Lattice Gauge Fixing on GPUs", 
  "README.md": "Copyright 2012-2016 Mario Schrock, Hannes Vogt (culgt.com)\n\ncuLGT comes with stand-alone lattice gaugefixing applications in lib/gaugefixing and\nan (very experimental!) interface to the MILC framework in lib/milcinterface.\n\n\n# SUPPORTED GAUGEFIXING #\nThis version (cuLGT 2.0) supports gaugefixing on a single GPU for\n\n* **Landau gauge**, **Coulomb gauge** \n* single (SP), double (DP) and mixed precision (MP)\n* SU(2) and SU(3)\n\nIf you are interested in applications for **maximally Abelian gauge** or **direct maximal center gauge**,\nplease contact one of the authors.\n\nFor multi-GPU support (Landau gauge) please use the culgt1 branch in the github repository.\n\n# USING THE STANDALONE APPLICATIONS #\nThe standalone applications are located in lib/gaugefixing:\n\n### DEPENDENCIES ###\n* boost::program_options\n* Random123 (is included in cuLGT, see license in include/external/Random123): https://www.deshawresearch.com/resources_random123.html\n* google test and google mock [only for unit tests]\n* c-lime and tinyxml [for ILDG file support (see below)]\n\n### COMPILER/LIBRARY SUPPORT ###\nTested with\n\n* NVCC version 6.5, 7.0, 7.5\n* host compiler g++ version 4.8.3, 4.9.0\n* BOOST version 1.50, 1.53, 1.58, 1.59, 1.60 \n* -std=c++11 (and without)\n\nNot all combinations work:\n\n* BOOST 1.60 has a problem with NVCC if std != c++11 (http://stackoverflow.com/q/34959032/5085250)\n* NVCC 6.5 does not allow g++-4.9 as host compiler\n\nSome combinations will emit more warnings than others.\n\n### BUILD ###\n\ncuLGT comes with CMake build files. All relevant parameters can be set using CMake variables.\n\nMandatory parameters are (they are initialized to a default value, but most probably they won't fit):\n\n* `CUDA_ARCH`: set to sm_XX according to your hardware\n* `SUN`: set to 2 for SU(2) or 3 for SU(3)\n* `CULGT_HOME`: path to the cuLGT root directory (alternative: set CULGT_HOME as environmental variable)\n\nOptional parameters:\n\n* `DISABLE_AUTOTUNE` (on/OFF): the optimal kernel configuration is tuned at runtime; the correspondant\n   kernels are generated at compile-time which slows down compilation; for debugging purposes one might\n   limit the compilation to one kernel with this option.\n* `CULGT_ALLOW_C++11` (ON/off): possibility to disable c++11 compilation (automatically disabled for older compilers)\n* `USE_TIMESLICEPATTERN` (on/OFF): run Landau gauge in timeslices\n\nIf you are not familiar with cmake, just run the following commands from `lib/gaugefixing`:\n\n\n```\nmkdir -p build\ncd build\ncmake .. -DCUDA_ARCHITECTURE=<your arch> -DSUN=<2 or 3> -DCULGT_HOME=<path to cuLGT root>\nmake\n```\n\n \n### RUN ###\n\nTo test the application on a random lattice run\n\n```\n./LandauGaugeSP --sethot 1\n```\n\nThe application uses boost::program_options to manage command line options (or configuration file options).\nType ./LandauGaugeSP --help for a list of all options. Here we list the most important options:\n\n* `--nx --nt (--ny --nz)`: lattice dimensions; if ny, nz is ommitted they default to nx)\n* `--filetype`: MDP, NERSC, ILDG file types are supported\n* `--fbasename`: path to a common name of all configurations, i.e. the part before numbering starts\n* `--fextension`: file extension (if no extension is given it will default to a commonly used extension for the filetype)\n* `--fnumberformat`: # of (min.) digits to use in the numbering\n* `--reinterpret` FLOAT/DOUBLE: if you want to use the DP version of the program for a SP configuration you need to give FLOAT,\n   i.e. the precision of the configuration, and vice versa.\n* `--seed` for RNG (used in simulated annealing)\n\nExample:\nThe configurations are called `/myconfigs/config_n16t16_000.dat`, filetype is MDP in DP (fermiqcd.net)\n\n```\n./LandauGaugeSP --nx 16 --nt 16 --fbasename /myconfigs/config_n16t16_ --fnumberformat 3 --filetype MDP --fextension .dat --reinterpret DOUBLE\n```\n\nor\n\n```\n./LandauGaugeDP --nx 16 --nt 16 --fbasename /myconfigs/config_n16t16_ --fnumberformat 3 --filetype MDP --fextension .dat\n```\n\n# TESTS #\n\nThe CMake interface for the unit tests needs some cleanup...\nFor the tests you need to install google test and google mock (https://github.com/google/googletest).\nThen execute (in `test/build/`)\n`cmake .. -DGTEST_HOME=<path to gtest home> -DGMOCK_HOME=<path to gmock home>`\n\nThe CMake script is looking for the static libraries `libgmock.a` in `${GMOCK_HOME}/build/` and `libgtest.a` in `${GTEST_HOME}/build/libgtest.a.`\nIf you use other locations specify `GTEST_LIBDIR` and `GMOCK_LIBDIR`.\n\nAfter compilation you will find 3 executables: `test_all` (all tests), `test_cuda` (all cuda tests) and `test_host` (all host tests)\n\nAdditionally, you can compile the unit tests in each subdirectory separately (to save compilation time).\n\nIf you encounter any problems, please contact one of the authors.\n\n\n# FILETYPES #\n\nSome filetypes are not fully supported.\nFully supported:\n\n* MDP\n* HIREP\n\nPartly supported:\n\n* NERSC: If a NERSC file is loaded, the header information is used to write the file\n          If a NERSC file is written (from a different file), only parts of the header information is written: DATATYPE, DIMENSION_X, FLOATING_POINT; other\n          header information is set to 0 or n/a.\n* ILDG:  Needs c-lime (https://github.com/usqcd-software/c-lime) and tinyxml (should be provided by repositories of your OS) otherwise the support is disabled\n          at compile-time.\n          If a file is written without prior load, the file will be damaged because the xml information is not written.\n\nThe limitations are only important if you choose to have a different output filetype compared to your input configuration.\n\nFor other (commonly used) file types we recommend the QCDUTILS by Massimo Di Pierro, see http://arxiv.org/abs/1202.4813 and https://code.google.com/archive/p/qcdutils/\n\n\n# MILC INTERFACE #\n\nIf you want to use the MILC interface, please contact one of the authors.\n\n\n# Known issues #\n\n* (Very) large lattices are not supported at this stage for compute capability < 3.5. As a workaround you may disable the use of textures. Feel free to contact one of the authors.\n* SP and MP use the same tune cache. If you are switching between SP and MP consider using separate directories for the application.", 
  "id": 27488401
}