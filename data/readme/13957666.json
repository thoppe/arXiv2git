{
  "read_at": 1462550450, 
  "description": "Genoogle is a software for fast similar DNA sequence searching. It is a full functional similar genetics searching tool, having a text mode interface with simple scripting language, web interface, and web service interface. Genoogle is fast, easy and completely free. More info at https://www.evernote.com/pub/felipealbrecht/genoogle and http://arxiv.org/abs/1507.02987", 
  "README.md": "Genoogle\r\n========\r\n\r\nFundamental Information\r\n-----------------------\r\nGenoogle is software for similar DNA sequences searching developed by Felipe Albrecht: [home page](http://www.pih.bio.br), [ email contact](felipe.albrecht@gmail.com).\r\n\r\nGenoogle uses indexing and parallel processing techniques and it is developed in Java.\r\nGenoogle is free and open source.\r\nThe name Genoogle comes from Genes + Google, the final world domination plan is to develop a software to locate genes likes Google is to locate information in the Web and Genoogle does *not* have *any* affiliation with Google Inc and I hope its name will not cause problem.\r\n\r\nIt is a Beta Version of Genoogle, it means: it lacks some features and have some know and a lot of unknow bugs. \r\nSo, I hope that the users (YOU!) will inform me about bugs and features which you will like to have.\r\n\r\nIf you really want to develop something in to Genoogle, contact me.\r\n\r\nFeatures\r\n--------\r\n\r\n### Actual Features:\r\n * Fast similar sequences searching.\r\n * Really good sensibility.\r\n * Text mode interfaces.\r\n * Web Services Interface.\r\n * Very Simple Web interface, but support for JSP.\r\n * Good memory requirements. (For a 4 gigabytes data bank, it is necessary not more than 4 gigabytes of RAM memory).\r\n * Working (and tested) at Windows and Linux.\r\n * Data banks with more than 8 gigabytes. \r\n * Console and batch interfaces.\r\n\r\n### Missing and planned features:\r\n * Better web interface.\r\n * RNA indexing and searching sequences.\r\n\r\n### Missing and not (for so soon) planned features:\r\n * Proteins indexing and searching. (It will be a big work to implement it, but it is possible)\r\n * Clusters implementation. (May be my Ph.D. project)\r\n\r\nIntallation\r\n-----------\r\n\r\n### Requirements\r\nTo run Genoogle it is necessary:\r\n * JRE >= 1.6 and the environment variable JAVA_HOME should inform where the JRE is, by example:  ```JAVA_HOME=\"/usr/lib/jvm/java-6-sun\"```\r\n * Ram Memory: The Genoogle memory requirement is approximately 80% of the data bank size more approximately 40Mbs for Java run time.\r\n\r\n### Installation process\r\n * Download the package here (TBA)\r\n * Unpack\r\n * Copy the fasta files data banks into the fasta/files folder.\r\n * Configure the conf/genoogle.xml file and insert the copied files at the `<genoogle:split-databanks>` section as new `<genoogle:databank>`:\r\n * ```xml\r\n<genoogle:split-databanks name=\"RefSeq\" path=\"files/fasta\" mask=\"111010010100110111\" number-of-sub-databanks=\"1\" sub-sequence-length=\"11\">\r\n       <genoogle:databank name=\"Cow\"       path=\"cow.rna.fna\"       />\r\n       <genoogle:databank name=\"Frog\"      path=\"frog.rna.fna\"      />\r\n       <!-- ... more files -->\r\n     </genoogle:split-databanks>\r\n     ```\r\n * Run the format_db.sh script.\r\n * Wait while the data bank is formatted and the inverted index processed.\r\n * Execute :\r\n    * run_web.sh, for webservices, web page and col), \r\n    * or run_standalone_web.sh, for web page that will access Genoogle by webservice,\r\n    * or run_console.sh, for console only interface.\r\n * Have fun!\r\n\r\nSearching\r\n---------\r\nGenoogle has two interfaces: a **very** simple web page, text mode console, and WebServices interface.\r\n\r\nTo do the search using the web page is very simples. Open the address *localhost:8080* at your browser and put the query sequence in the input box and click *Search sequence* button. Wait and the results will be shown. The console interface is much better!\r\n\r\nTo use the WebServices, please check their wiki.\r\n\r\n### Console interface\r\n\r\nThe console interface has the following commands:\r\n * search <data bank> <input file> <output file> <parameters>: does the search.\r\n * list : lists the data banks.\r\n * parameters : shows the search parameters and their values.\r\n * set <parameter>=<value> : set the parameter value.\r\n * gc : executes the java garbage collection.\r\n * prev or l : executes the last command.\r\n * batch <batch file> : runs the commands listed in this batch file.\r\n * exit : finish Genoogle execution.\r\n\r\nThe search parameters are:\r\n * MaxSubSequenceDistance : maximum index entries distance to be considered in the same HSPs.\r\n * SequencesExtendDropoff : drop off for sequence extension.\r\n * MaxHitsResults : maximum quantity of returned results.\r\n * QuerySplitQuantity : how many slices the input query will be divided. \r\n * MinQuerySliceLength : minimum size of each input query slice.\r\n * MaxThreadsIndexSearch : quantity of threads which will be used to index search. ( Should be MaxThreadsIndexSearch <= QuerySplitQuantity * 2).\r\n * MaxThreadsExtendAlign : quantity of threads which will be used to extend and align the HSPs.\r\n * MatchScore : score when has a match at the alignment.\r\n * MismatchScore : score when has a mismatch at the alignment.\r\n \r\nAn example of search is shown bellow: \r\n\r\n```search Genomes_RefSeq BA000002 result_file QuerySplitQuantity=2 MaxThreadsIndexSearch=2 MaxHitsResults=20```\r\n\r\nThis search, make a search at the Genomes_RefSeq databank, using as input the file BA000002 and the results will be saved at \"result_file.xml\" file.\r\nThe input query will be split in to 2 parts and will be used 2 threads to do the search of the input query sub-sequences at the inverted index.\r\nAt the end will be returned to the user, the 20 better scores.\r\n\r\n\r\n-----\r\n\r\n\r\nDependencies\r\n------------\r\n\r\nGenoogle uses:\r\n * [Dom4j](http://www.dom4j.org/) for XML parsing.\r\n * [JUnit4](http://www.junit.org/) for unit testing.\r\n * [Easy Mock](http://easymock.org/) and [CgLib](http://cglib.sourceforge.net/) for Mock creation at the JUnits.\r\n * [Google Collections](http://code.google.com/p/google-collections/)\r\n * [Protocol Buffers](http://code.google.com/intl/pt-BR/apis/protocolbuffers/) for Data bank and index serialization.\r\n * [Log4J](http://logging.apache.org/log4j/) for loggin.\r\n * [Jetty](http://www.mortbay.org/) for embedded web server.\r\n * [Jax-WS](https://jax-ws.dev.java.net/) for WebServices implementation.\r\n\r\nAll these libraries are in the directory [https://github.com/felipealbrecht/Genoogle/tree/master/lib](https://github.com/felipealbrecht/Genoogle/tree/master/lib)\r\n\r\n\r\n", 
  "id": 13957666
}