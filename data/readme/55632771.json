{
  "read_at": 1462548492, 
  "description": "Tensor network contraction function for Julia.", 
  "README.md": "# NCon\n\n[![Build Status](https://travis-ci.org/mhauru/NCon.jl.svg?branch=master)](https://travis-ci.org/mhauru/NCon.jl)\n\nNCon exports the function `ncon`, which provides a convenient interface for\ncontracting networks of tensors in a given order.  It is a Julia port of the\nMATLAB function described in\n[arXiv:1402.0939](https://arxiv.org/abs/1402.0939), although without some of\nthe fancier features. NCon relies on the\n[TensorOperations](https://github.com/Jutho/TensorOperations.jl) package for\nimplementation of pair-wise tensor contractions.\n\n## Installation\n`Pkg.clone(\"git://github.com/mhauru/NCon.jl\")`\n\n## Usage\n```\nncon(L, v; forder=nothing, order=nothing, check_indices=false)\n```\nThe first argument `L` is a Tuple of tensors (multidimensional Arrays).\nThe second argument `v` is a Tuple of Vectors, one for each tensor in\n`L`.\nEach `v[i]` consists of Ints, each of which labels an index of `L[i]`.\nPositive labels mark indices which are to be contracted (summed over).\nSo if for instance `v[m][i] == 2` and `v[n][j] == 2`, then the `i`th index of\n`L[m]` and the `j`th index of `L[n]` are to be summed over.\nNegative labels mark indices which are to remain free (uncontracted).\n\nThe keyword argument `order` is an Array of all the positive labels, which\nspecifies the order in which the pair-wise tensor contractions are to be done.\nBy default it is `sort(all-positive-numbers-in-v)`. Note that whenever an index\njoining two tensors is about to be contracted together, ncon contracts at the\nsame time all indices connecting these two tensors, even if some of them only\ncome up later in order.\n\nCorrespondingly `forder` specifies the order to which the remaining free\nindices are to be permuted.  By default it is `sort(all-negative-numbers-in-v,\nrev=true)`, meaning for instance `[-1,-2,...]`.\n\nIf `check_indices=true` (by default it's `false`) then checks are performed to\nmake sure the contraction is well-defined. If not, an `ArgumentError` with a\nhelpful description of what went wrong is provided.\n\n#### Examples\n\nA matrix product:\n```julia\njulia> using NCon\njulia> A = rand(3,4);\njulia> B = rand(4,5);\njulia> C = ncon((A, B), ([-1,1], [1,-2]));\njulia> size(C)\n(3,5)\n```\nHere the last index of `A` and the first index of `B` are contracted.\nThe result is a tensor with two free indices, labeled by `-1` and `-2`.\nThe one labeled with `-1` becomes the first index of the result. If we gave the\nadditional argument `forder=[-2,-1]` the tranpose would be returned instead.\n\nA more complicated example:\n```julia\njulia> A = rand(3,4,5);\njulia> B = rand(5,3,6,7,6);\njulia> C = rand(7,2);\njulia> D = ncon((A, B, C), ([3,-2,2], [2,3,1,4,1], [4,-1]));\njulia> size(D)\n(2,4)\n```\nBy default, the contractions are done in the order [1,2,3,4]. This may not be\nthe optimal choice, in which case we should specify a better contraction order\nas a keyword argument.\n\nDisconnected networks are also possible:\n```julia\njulia> A = rand(2,3);\njulia> B = rand(4);\njulia> C = ncon((A, B), ([-3,-2], [-1]));\njulia> size(C)\n(4,3,2)\n```\nThis is the same as the tensor product of `A` and `B`, with the indices\npermuted to the desired order. When contracting disconnected networks, the\nconnected parts are always contracted first, and their tensor product is taken\nat the end.\n\n`L` and `v` may also be a single tensor and its index list, if a trace is taken:\n```julia\njulia> A = rand(3,2,3);\njulia> B = ncon(A, [1,-1,1]);\njulia> size(B)\n(2,)\n```\n\n", 
  "id": 55632771
}