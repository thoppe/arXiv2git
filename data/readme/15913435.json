{
  "DeveloperREADME.md": "# Developer README\nThe exposed API focuses around the same two classes\nas the CLI: `sand.gcs.system.Orion` and `sand.gcs.system.Rigel`.\n\nFor details, please view the Scaladoc API at\nhttp://current.cs.ucsb.edu/rigel/scala-gcs/api/#package.\n\n## Embedding\nThree methods are exposed for embedding distances into\na newly spawned instance of a GCS: `embed`, `embedLandmarks`,\nand `embedNonLandmarks`. \n\n## Saving/Loading\n### From Memory\nThe `storeCoordinate` method will take a node ID (`Int`) and a\ncoordinate embedding and store (or override) the value into\nthe coordinate system. You will need to specify an additional\n`Boolean` parameter indicating if it is a landmark or a\nnon-landmark.\n\n### From Disk\nTwo methods are exposed for saving and loading the GCS to disk,\nthe aptly named `save` and `load` methods. They both\ntake a filename as a `String` and save/load the data to that\nfile.\n\nThe files are formatted like so:\n\n```\n[L if landmark, N if non-landmark] [node id] [coord #1] [coord #2] ... [coord #n]\n```\n\n## Querying\nThe methods `query` and `distanceBetween` will take two node IDs\nand return the embedded distance between the two. The two methods\nare aliases for the same method, so either one works.\n", 
  "read_at": 1462547038, 
  "description": "Scala implementation of GCS.", 
  "README.md": "# Graph Coordinate Systems\nGraph Coordinate System (GCS) implementation for the JVM in\nthe Scala language. Both the Orion and Rigel system have\nbeen implemented, with necessary components to experiment\nwith your own GCS provided.\n\n## Immediately Relevant\nAPI Online: http://current.cs.ucsb.edu/rigel/scala-gcs/api/#package\n\nDownload JAR: http://current.cs.ucsb.edu/rigel/scala-gcs/scala-gcs-0.1.0-RC2.jar\n\nThe JAR file contains all non-JDK6 dependencies including the Scala\nstandard library and the dependencies used, so the only dependencies\nneeded to run the JAR is JDK 6.\n\n## Usage\nThe two classes that will be of particular interest are\n`sand.gcs.system.Orion` and `sand.gcs.system.Rigel`.\n\n### Command Line Interface\nThe CLI for each is simple. When calling the `main`\nmethod for the class, you must specify the following\nparameters:\n\n1. The filename of the file containing the list of distances to embed.\n   This file must have 3 columns, formatted like so:\n\n```\n[landmark id] [destination id] [distance]\n```\n   \n   For a graph of L landmarks and V vertices, there\n   should be L * V lines in the file.\n\n   An example file is provided called `RandomGraph100SP.txt`.\n\n2. An integer denoting the dimensionality of the system.\n\n3. A filename denoting the file to write the results of the\n   embedding out to. The format of the output will be formatted like so:\n\n```\n[L if landmark, N if non-landmark] [node id] [coord #1] [coord #2] ... [coord #n]\n```\n\n   For a graph of V vertices, there will be V lines in the output file.\n\n4. For Rigel, you will also need to specify an integer denoting the curvature\n   of the system.\n\n5. For both Orion and Rigel, you can optionally specify a file containing a\n   single column which denotes the IDs of the landmark nodes that should be\n   embedded first (the \"primary\" landmarks that the rest of the landmarks will\n   be embedded against).\n\n\nExamples:\n```\n# Embeds the distances specified in the MyDistances.txt file in a 10 dimension Euclidean\n# (Orion) space and store the results in MyResults.txt\n$ java -cp gcs.jar sand.gcs.system.Orion MyDistances.txt 10 MyResults.txt\n\n# Embeds the distances specified in an 8 dimension -1 curvature hyperbolic (Rigel) space,\n# using the primary landmarks specified in PrimaryLandmarks.txt, and store\n# the results in MyResults.txt.\n$ java -cp gcs.jar sand.gcs.system.Rigel MyDistances.txt 10 MyResults.txt -1 PrimaryLandmarks.txt\n```\n\n### Programmatic Interface\nPlease see the separate developer README for details.\n\n## Configuration\nThe default configuration parameters can be found in\n`src/main/resources/reference.conf`. You can override any\nof the parameters by providing an `application.conf` file\nin the directory in which you will be running the code,\ntypically the root project directory. Note that some\nparameters will need to be provided in `application.conf`\nif you are running the distributed versions of the system.\nMore details can be found below.\n\n## Distributed\nPlease note that the distributed implementation is intended\nto be used as a command line tool only!\n\nFor the distributed implementation, the following series of\nsteps should be taken.\n\n1. In your `application.conf` file in the root project directory,\n   specify a list of strings in the `gcs.deploy.active` scope\n   denoting the addresses of your worker machines. For each of\n   those active machines, specify an additional value for\n   `gcs.deploy.[worker address].nr-of-workers` that denotes how\n   many Worker \"actors\" you want to spawn on that machine. A\n   sample configuration file can be found below.\n\n```\ngcs {\n    deploy {\n        active = [\"worker1.address.here\"]\n\n        worker1.address.here.nr-of-workers = 8\n        worker2.address.here.nr-of-workers = 8\n    }\n}\n```\n\nHere we specify we will only spawn one Worker machine, which is\nthe machine with address `worker1.address.here`. When the system\nfinishes starting up, we will have 8 worker \"actors\" spawned on that\nmachine (corresponding roughly to 8 worker threads).\n\nNote that there is a second worker machine specified with `nr-of-workers`,\nbut because it is not specified in the `active` list, it will be\nignored. This is done so you can keep a \"permanent\" list of address-to-threads\nmapping while being able to change the list of active workers.\n\n2. Once the `application.conf` file is finished, start an instance of\n   `sand.gcs.system.distributed.Worker` on each machine in the `active` list.\n\n3. Once the Worker machines load the instance, start\n   `sand.gcs.system.distributed.DistributedOrion/Rigel` on a machine that can\n   communicate with the Worker machines. The interface for this is the same as\n   the local versions. This machine will then begin by embedding\n   the landmarks in a single-threaded manner, after which it will begin distributing\n   the work to the remote machines. \n\n## Building from source\nThe project is built using the [Simple Build Tool](http://www.scala-sbt.org/).\nIt is an easy to use build tool that will grab all dependencies and install them\nonto your machine. You can install SBT via a\n[package manager](http://www.scala-sbt.org/release/docs/Getting-Started/Setup.html)\nor\n[manually](http://www.scala-sbt.org/release/docs/Getting-Started/Setup.html#manual-installation)\n(it is downloaded as a single JAR file).\n\nTo begin grabbing all dependencies and compiling the code, run `sbt ~compile`.\nTo package all the dependencies needed into a single JAR, run `sbt assembly`.\nThe JAR can then be found in the `target/scala-2.10` folder.\n\n## Bugs\nPlease submit any bug reports through GitHub via the Issues page for the\nproject. If you do not have/wish to create a GitHub account, please email\nAdelbert Chang at adelbertc at gmail dot com.\n\n## Publications\n* Xiaohan Zhao, Alessandra Sala, Haitao Zheng, Ben Y. Zhao. [Efficient Shortest\n  Paths on Massive Social Graphs](http://current.cs.ucsb.edu/rigel/documents/rigel.pdf).\n  Proceedings of the The 7th International\n  Conference on Collaborative Computing: Networking, Applications, and\n  Worksharing (CollaborateCom 2011) (Invited Paper). Orlando, USA, Oct 2011.\n* Xiaohan Zhao, Alessandra Sala, Haitao Zheng, Ben Y. Zhao. [Fast and Scalable\n  Analysis of Massive Social Graphs](http://arxiv.org/abs/1107.5114).\n  In arXiv preprint arXiv:1107.5114.\n* Xiaohan Zhao, Alessandra Sala, Christo Wilson, Haitao Zheng, Ben Y. Zhao.\n  [Orion: Shortest Path Estimation for Large Social Graphs](http://current.cs.ucsb.edu/rigel/documents/orion.pdf). \n  Proceedings of The 3rd Workshop on Online Social Networks (WOSN). Boston, MA, June 2010.\n\n## License\nCopyright 2013 SAND Lab @ UC Santa Barbara\n\nLicensed under the BSD 3-clause License:\n[http://opensource.org/licenses/BSD-3-Clause](http://opensource.org/licenses/BSD-3-Clause)\n", 
  "id": 15913435
}