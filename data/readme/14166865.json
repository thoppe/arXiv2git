{
  "read_at": 1462556881, 
  "description": "", 
  "README.md": "This Python code tries to compute dominators for a given graph. It (tries to)\nimplement the Algorithm GD, Version 2 in \"Finding Dominators via Disjoint Set\nUnion\" by Wojciech Fraczak, Loukas Georgiadis, Andrew Miller and Robert E.\nTarjan. See http://arxiv.org/abs/1310.2118 for the article.\n\nNote that the implementation is not working for the attached data. Needs more\nwork.\n\n* dominators.py:\n    * The implementation. Run it with downloading UnionFInd.py and LCA.py described as below. It reads *.json files in the same directory.\n* OrderedUnionFind.py:\n    * A wrapper of UnionFind. It always unifies into the first argument.\n* UnionFind.py and LCA.py:\n    * Required external libraries which are not in the repository. Download it as described below.\n* *.json:\n    * Data files. edges.json is edges in the original graph, parents.json is p() in the DFS spanning tree (root=0) and postorder.json represents a bottom-up order.\n* RESULT.txt:\n    * A dominator result for the data files. You can see some dominators are \"None\" (e.g. for node 13) which are failing to compute at this time.\n\nNote that it is a slow implementation because it uses naive Python lists\nto represent sets \"same\", \"out\" and \"in\". It can be faster by replacing them\nby singly-circular linked lists.\n\nIt uses the following libraries for disjoint set union and least common\nancestors.\n* Union-find:\n    * http://www.ics.uci.edu/~eppstein/PADS/UnionFind.py\n* LCA (least common ancestors):\n    * http://www.ics.uci.edu/~eppstein/PADS/LCA.py\n\nIt assumes Python 2.7.\n", 
  "id": 14166865
}