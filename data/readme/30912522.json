{
  "id": 30912522, 
  "read_at": 1462552059, 
  "README.rst": "MCEq - Matrix cascade equation\n==============================\n\nThis scientific package might be useful fo all who deal with high-energy inclusive atmospheric fluxes of muons and neutrinos. In particular it might be useful for experiments, for example  `IceCube <https://icecube.wisc.edu>`_ or `MINOS <http://www-numi.fnal.gov/PublicInfo/index.html>`_, for calculations of systematic uncertainties and atmospheric backgrounds.\n\nStatus\n------\n\nThe current development status is **alpha**. Although the numerical part of the program is rather stable, the parts related to user interaction, installation etc. are not finished, yet. Check `the wiki <https://github.com/afedynitch/MCEq/wiki>`_ for further items on the *ToDo-list*. Also feel free to open issues.\n\n`Documentation <http://mceq.readthedocs.org/en/latest/>`_\n---------------------------------------------------------\n\nAs mentioned above the project is development. The current state of the documentation is more suited for developers rather than end-users. Mostly it is auto-generated `sphinx`-docs. Check it out before touching the code.  The latest version of the documentation can be found `here <http://mceq.readthedocs.org/en/latest/>`_.\n\nSystem requirements\n-------------------\n\n- Some kind of modern CPU (Core2Duo++)\n- 4GB (currently 8GB of RAM is strongly recommended. The solver is not optimized for memory usage, however there's lots of room for improvement)\n- ~1GB of disk space\n- a recent Linux or Mac OS X operating system. Windows might be suitable, but was not checked.\n\nSoftware requirements\n---------------------\n\nThe majority of the code consists of pure Python modules. Some functions are accelerated through Just-In-Time (JIT) compilation using `numba <http://numba.pydata.org>`_, which requires the `llvmlite` package.\n\nDependencies:\n\n* python-2.7 (Python 3 not compatible yet)\n* numpy\n* scipy\n* matplotlib\n* ipython + notebook (optional, but needed for examples)\n* numba\n* progressbar\n\n\nInstallation\n------------\nThe installation simplest method relies on the Python package manager `Anaconda/Miniconda <https://store.continuum.io/cshop/anaconda/>`_ by `Continuum Analytics <http://www.continuum.io>`_. It doesn't just improve your life, but also provides most of the scientific computing packages by default. It will not spoil your system Python paths and will install itself into a specified directory. The only action which is needed for activation, is to add this directory to your system `$PATH` variable. To un-install just delete this directory.\n\n#. Download one of the installers for your system architecture from here:\n\n\t* `Anaconda <http://continuum.io/downloads>`_ - larger download, already containing most of the scientific packages and the package manager `conda` itself\n\t* `Miniconda <http://conda.pydata.org/miniconda.html>`_ - minimal download, which contains the minimum requirements for the package manager `conda`.\n\n#. Run the installer and follow the instructions:\n\n\t.. code-block:: bash\n\n\t   $ bash your-chosen-conda-distribution.sh\n\n\tOpen a new terminal window to reload your new `$PATH` variable.\n\n\n#. `Cd` to you desired working directory. And clone this project including submodules:\n\n\t.. code-block:: bash\n\n\t   $ git clone --recursive https://github.com/afedynitch/MCEq.git\n\n\tIt will clone this github repository into a folder called `MCEq` and download all files.\n\tEnter this directory. \n\n#. To install all dependencies into you new conda environment\n\n\t.. code-block:: bash\n\n\t   $ conda install --file conda_req.txt\n\n\tThis will ask conda to download and install all needed packages into its default environment. \n\n#. (**Optional**) If you know what a `virtualenv` is, the corresponding commands to download and install all packages in a newly created environment `mceq_env` are\n\n\t.. code-block:: bash\n\n\t   $ conda create -n mceq_env --file conda_req.txt\n\t   $ source activate mceq_env\n\n\tTo quit this environment just\n\n\t.. code-block:: bash\n\n\t   $ deactivate\n\n#. (**Optional**) Acceleration of the integration routines can be achieved using `Intel Math Kernel Library <https://software.intel.com/en-us/intel-mkl>`_ (MKL). Anaconda offers MKL-linked numpy binaries free for academic use. It is necessary to register using your *.edu* mail address to receive a license. The demo period is 30 days. If you want to give it a try\n\n\t.. code-block:: bash\n\n\t\t   $ conda install mkl\n\n\tChange in `mceq_config.py` the `kernel` entry to 'MKL'.\n\n#. Run some example\n\n\t.. code-block:: bash\n\n\t   $ ipython notebook\n\n\tclick on the examples directory and select `basic_flux.ipynb`. Click through the blocks and see what happens.\n\n\nTroubleshooting\n--------------\nYou might run into `problems with Anaconda <https://github.com/conda/conda/issues/394>`_ if you have previous \nPython installations. A workaround is to set the environment variable\n\t.. code-block:: bash\n\n\t   $ export PYTHONNOUSERSITE=1\n\t   \nThanks to F.C. Penha for pointing this out.\n\nCitation\n--------\nIf you are using this code in your scientific work, please cite \n\n   | *Calculation of conventional and prompt lepton fluxes at very high energy*\n   | A. Fedynitch, R. Engel, T. K. Gaisser, F. Riehn, T. Stanev,\n   | `arXiv:1503.00544 <http://arxiv.org/abs/1503.00544>`_\n\nPlease, also cite or footnote this Github site and revisit this page from time to time, \nto get the most up2date information.\n\nThe models inside this code need to be cited separately. Please\n`see the documentation <http://mceq.readthedocs.org/en/latest/citations.html>`_ for the complete list of references.\n\n\nContributers\n------------\n\n*Anatoli Fedynitch*\n\nCopyright and license\n---------------------\nCode and documentation copyright 2014-2015 Anatoli Fedynitch. Code released under `the MIT license <https://github.com/afedynitch/MCEq/blob/master/LICENSE>`_.\n", 
  "description": "Matrix cascade equation core code"
}