{
  "read_at": 1462551844, 
  "description": "A user interface and Monte Carlo generator for studying dynamical Dark Energy", 
  "README.md": "Welcome to DE_Mod_Gen! This piece of software is designed to allow the user to test dynamical dark enery models in the framework of an effective field theory with an arbitrary\nnumber of fields. The following sections of this file will guide you through the setup and use of this program. For further information please reference the paper associated with\nthis code at http://arxiv.org/abs/1506.05088, and please be sure to reference Hinton et al. and this repository if you use the code in your research.\n\nSection 1: System Requirements\n\n\tSoftware:\n\t\t\n\t\tThe code for DE_Mod_Gen is based on the Python 2.7 build. In order to run the code the user will need several third party modules. These modules are numpy, scipy,\n\t\tmatplotlib/pylab, and sympy. The first three of these modules are generally included with the major Python distributions, however you will likely need to manually\n\t\tinstall sympy onto your machine.\n\t\t\n\t\tIf you need to install any of the required modules, there is a common and simple way to get them. In the computer command line you will need to type the following\n\t\t\"python easy_install 'module'\"\n\t\twhere the parantheses are removed and 'module' is the name of the module you would like installed. Note that the name for sympy that must be passed to this argument\n\t\tsimpy. If this method does not work it is strongly recommended that you download a newer distribution of Python. Third party add ons, such as iPython, may also\n\t\thave their own unique ways of installing modules, which should be well documented on their associated web pages.\n\n\tHardware:\n\n\t\tIn order to shorten the amount of time that a user must sit waiting for results, the Monte Carlo code provided with DE_Mod_Gen is designed to take full advantage\n\t\tof multicore processors. This will put processors under a fair deal of stress, so if your machine gets hot easily or if you are doing other things while running \n\t\tthis code it may be best to set the number of processors used by the code to be less than the maximum number available to it. Also, the memory requirements of the\n\t\tcode should only be several MB, so modern computers should face no difficulty unless you are also running numerous other programs in the background.\n\n\nSection 2: The Monte Carlo Generator\n\n\tRunning the Code:\n\n\t\tThe Monte Carlo code provided with DE_Mod_Gen has been designed to require as little user input as possible to make it very easy to use. The first entry that you\n\t\twill need to provide is the name of the model that you are testing. This name will be used in the user interface to access information about this model. Note that\n\t\tif you use the same name as a model that has already been run it will overwrite the fiducial values for that model. Once a name has been selected you must also\n\t\tspecify how many different initial conditions you would like the code to test. By default this value is set to 10,000, however there are no restrictions on this \n\t\tvalue other than being a positive integer. After this you must input the equation for g(Y) that uniquely describes the model that you are testing. For a full\n\t\tdescription of what this equation is please reference our paper.\n\n\t\tOnce the model has been specified, the range of the initial conditions must be chosen. The first thing to choose is the number of fields that the set of tests will\n\t\tbe run with. All of the instances of the model with have the same number of fields for each run of the Monte Carlo code. After this the user selects the range of\n\t\tinitial conditions for several parameters relating to the kinetic and potential energy of the fields. A full description and definition of these parameters is found\n\t\tin the paper. Each new universe tested by the code will have its initial conditions generated by selecting a random number from a flat distribution over the \n\t\tselected range of each parameter.\n\n\t\tAfter the range of the initial conditions is selected, there are two more optional parameters to adjust. The first is the parameter GC. If your model is based on\n\t\tideas similar to the ghost condensate model, there may need to be limits on the ratio between the initial kinetic and potential energy of the fields. By setting\n\t\tthis parameter to \"True\", the ratio of x_i/y_i will be randomly selected to be between .5 and sqrt(2). This condition at least allows the model of ghost condensates\n\t\ttested by us to run correctly. If you model is not running even with this selection, you can attempt to change this ratio in the monte_pack.py module. After this\n\t\tparameter there is also the option to manually select how many processors the tests are distrubuted to. By default the program will use all available processors\n\t\ton the machine.\n\n\tData Output:\n\n\t\tWhen the Monte Carlo code is finished running it will output three files. The first of these files goes into the Parameters folder. This file holds the name and \n\t\ttested initial conditions of the model that you ran. This allows the user interface to run single instances of the model and suggest fiducial values and tested \n\t\tranges of each parameter. The second file is placed in the Data folder. This file contains all of the initial conditions and output parameters of every model tested\n\t\tby the Monte Carlo code that produced results. If any of the models fail to work (such as producing errors or giving values of nan), its results are simply omitted\n\t\tfrom the output file. This will allow you to still analyze the models that do work in the user interface without raising any more errors. The last file that is \n\t\tsaved contains values of D/a for each model out to a redshift of z = 20. Currenly this data is not used by the user interface, however if the user is interested\n\t\tthese data points should be able to be used to interpolate the growth of linear structure in each model.\n\nSection 3: The User Interface\n\n\tIntro:\n\n\t\tAfter a model has been run through the Monte Carlo generator, the user interface will automatically have access to all of the data that was generated. With this the\n\t\tuser will have two main options. The first is to run a single instance of the model with specifically chosen initial conditions. This will allow the user to see how\n\t\tthe components of the universe will evolve under those conditions. The second option will be to analyze the bulk data from a run of the Monte Carlo code. This\n\t\twill allow the user to be able to determine the most important parameters leading to dark energy in their models. There is also a button on the Home window which\n\t\tcan open the Monte Carlo code to be used quickly if you have a third party add on such as iPython. If this button does not work for you, you just have to open the\n\t\tcode manually in whatever program you use to edit code.\n\n\tSingle Runs:\n\n\t\tIf you select to run a single instance of a model, you will need to make several selections. The first selection that you need to make is what model you would like\n\t\tto use. By clicking on the drop down menu, a list of all the models having been tested with the Monte Carlo generator will appear. After this is selected you must\n\t\thit the button specified to the right. This will load a set of fiducial values into the parameter fields. These values are the average values from the suggested\n\t\trange, which is the range that each of the parameters was tested over in the Monte Carlo code. Within each of these parameter fields, you may also choose to supply\n\t\tyour own values as well. If the model does not work you will either see a blank graph appear, or nothing at all. If this happens, all you need to do is select new\n\t\tparameters.\n\n\t\tOn the right hand side of the window you will also see a series of check boxes. First you will need to select whether you want the x axis of the graph to be \n\t\tdisplayed in either scalefactor a, or redshift z. If you select either none or both of these boxes, a message will remind you to only pick one. Below this you can\n\t\talso choose which parameters you would like to see on this graph. The options are the density parameters for dark energy, matter, and radiation, as well as the\n\t\tequation of state, w, for dark energy and the linear growth function D/a. You may select as many or as few of these parameters as you would like.\n\n\tResults Page:\n\n\t\tFrom the results page you can analyze the data from a run of the Monte Carlo generator. You are able to make up to two graphs which will appear simultaneously. The\n\t\tfirst step is to select which run you want the data to be pulled from. Each option gives the model name and the number of fields that the models were tested with.\n\t\tAfter a model is selected, you simply need to select what data you would like to see on both the x and y axes of the graphs. The inputs in these fields can be any\n\t\tfunction of the available parameters listed on the window. These functions must be written in Python syntax, and can include either built in Python functions or\n\t\tany function from the numpy package using the np. prefix. A full list of numpy functions can be found in the documentaion at http://docs.scipy.org/doc/.", 
  "id": 29948269
}