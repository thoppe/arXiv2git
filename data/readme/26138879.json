{
  "read_at": 1462553866, 
  "description": "A Golang consistent hashing proxy for statsd", 
  "README.md": "StatsRelay\n==========\n\nStatsRelay is a Golang implementation of a proxy or load balancer for Etsy's\nexcellent nodejs statsd utility.  This utility will listen for UDP metrics\nin the same format as Etsy's statsd and forward them to one statsd service\nfrom a pool of available host:port combinations.  Each metric is hashed with\na consistent hashing algorithm so that the same metric is always sent to\nthe same statsd server.\n\nThis is written in Go with a simple goal: Be fast.  Current statsd\ndistributions come with a nodejs proxy tool that does much the same thing.\nHowever, that proxy daemon is unable to keep up in high-traffic situations.\n\nYou can layer statsrelay as needed to build a tree, or run multiple versions\nbehind a generic UDP load balancer, like IPVS.  Provided the configuration is\nthe same all statsrelay daemons will route metrics to the same statsd server.\n\nUsage\n-----\n\nCommand synopsis:\n\n    statsrelay [options] HOST:PORT:INSTANCE [HOST:PORT:INSTANCE ...]\n\n    -b=\"0.0.0.0\": IP Address to listen on\n    -bind=\"0.0.0.0\": IP Address to listen on\n    -p=9125: Port to listen on\n    -port=9125: Port to listen on\n    -prefix=\"statsrelay\": The prefix to use with self generated stats\n\n\nYou must specify at least one HOST:PORT combination.  The INSTANCE can be\nused to further populate or weight the consistent hashing ring as you see fit.\nThe instance is stripped before using the HOST and PORT to create a UDP\nsocket.\n\nAlgorithms and Performance\n---------------------------\n\nUse Go 1.3 or better.  Go 1.5 is quite a bit faster.\n\nThis used to depend on an external consistent hashing algorithm which has\nbeen replaced with an internal implementation of Google's Jump Hash.\n\n   http://arxiv.org/pdf/1406.2294.pdf\n\nFNV1a hashing is used to hash the string values into a long integer.\n\nCombined with Go 1.5 this spreads out metrics to the underlying statsd daemons\nmuch more evenly than before and is quite a bit faster.  I'm easily seeing\n700,000 packets per second processed by StatsRelay on my test machine.  Using\nonly 11 MB of RAM.\n\nMy Use Case\n-----------\n\nI run a Statsd service for a large collection of in-house web apps.  There are\nmetrics generated per host -- where you would usually run a local statsd daemon\nto deal with high load.  But most of my metrics are application specific and\nnot host specific.  So running local statsd daemons means they would each\nsubmit the same metrics to Graphite resulting in corrupt data in Graphite or\nvery large and time consuming aggregations on the Graphite side.  Instead, I\nrun a single Statsd service scaled to handle more than 1,000,000 incoming\nstatsd metrics per second.\n\nI do this using LVS/IPVS to create a UDP load balancer.  You'll want to use\na new enough kernel and ipvsadm tool to have the --ops command which treats\neach incoming UDP packet as its own \"connection\" and routes each independently.\n\n    ipvsadm -A -u 10.0.0.222:9125 -s wlc -o\n\nThen add your real servers that run identically configured StatsRelay daemons\nto the LVS service:\n\n    ipvsadm -a -u 10.0.0.222:9125 -r 10.0.0.156:9125 -g -w 100\n    ...\n\nI use [Keepalved][1] for the details here.\n\nI run [Etsy's statsd][2] daemon on a pool of machines and StatsRelay on a much\nsmaller pool.  I can simply add more machines to the pools for more\nthroughput.  My incantation for StatsRelay looks something like this upstart\njob.  (A Puppet ERB template.)\n\n    description \"StatsRelay statsd proxy on port 9125\"\n    author      \"Jack Neely <jjneely@42lines.net>\"\n\n    start on startup\n    stop on shutdown\n\n    setuid nobody\n\n    exec /usr/bin/statsrelay --port 9125 --bind 0.0.0.0 \\\n        --prefix statsrelay.<%= @hostname %> \\\n\t<%= @dest.join(\" \\\\\\n    \") %>\n\n[1]: http://keepalived.org/\n[2]: https://github.com/etsy/statsd\n", 
  "id": 26138879
}