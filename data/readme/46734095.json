{
  "read_at": 1462554453, 
  "description": "", 
  "README.md": "# ISR_uniandes\n\n## **Instructions to copy the repository**\n1. Create an account in github\n2. Set up your user details in your laptop/dzero:\n\t* git config --global user.name \"Your github Name here\"\n\t* git config --global user.email \"your_email@domainname.com\"\n3. Set up you ssh key:\n\t* Follow the instructions: https://help.github.com/articles/generating-ssh-keys/#platform-linux\n4. Create a folder with the name of the repository:\n\t* mkdir ISR_uniandes\n5. Make a local copy of the repository:\n\t* git clone git@github.com:jotadram6/ISR_uniandes.git ISR_uniandes\n\n## **To edit this README file**\nFollow the instructions here: https://guides.github.com/features/mastering-markdown/\n\n## **Minimal instructions**\nA git repository is based on retrivieng (pull) and sending (push) from and for the repository.\n\n_Don't forget to **always pull before start working** and to **commit and push when you are done**!!!_\n\nThis repository is intended to share code, please don't submit any samples (root, lhe, hep files)!\n* Get all the changes from other contributors: git pull origin master\n* Add the new files you want to submit to the repository: git add _filename_\n* Commit your changes: git commit -a -m \"Your commit message\"\n\t* Don't be shy with your message! Clear (long) messages allow a better collaboration. \n* And push! : git push origin master\n\nIn order to create and submit to your own branch, please follow these instructions:\n* Create your branch: git branch branch_name\n* Get the list of branches: git branch\n* Switch to your branch: git checkout branch_name\n* Pull and push from your branch:\n\t* git pull origin branch_name\n\t* git push origin branch_name\n\n## **Running the code**\n1) Se debe realizar el correspondiente ajuste de los directorios en donde van a quedar los .root en el archivo ISR_matching.cpp y en el config_file.txt para el \nISR_matching, ISR_tagging y el ISR_jet_analysis.\n2) Primero se compila el ISR_Matching con el comando \"make compile_ROOT_Delphes\" que permite compilar ROOT con DELPHES.\n3) Ahora se corre el ejecutable con \"./ISR_matching config_file.txt\".\n4) Se realiza el mismo procedimiento de compilar y correr el ejecutable para el ISR tagging (\"make compile_ROOT_Delphes\" y luego \"./ISR_tagging config_file.txt\")\n y el ISR jet Analysis (\"make compile_ROOT_Delphes\" y luego \"./ISR_jet_analysis config_file.txt\").\n5) Es importante realizar las compilaciones de esta forma lineal, teniendo en cuenta que el ISR jet Analysis corre sobre los resultados arrojados por el algoritmo de \nmatching.\n\n## **Bibliography**\n\n1. Final report from Andres Felipe Garcia:\n\t* https://github.com/andresfgarcia150/ISR_tagging_project/blob/master/Documentation/Final_report.pdf\n2. David Krohn and Lisa Randal:\n\t* http://arxiv.org/pdf/1101.0810v1.pdf\n3. Teruki:\n\t* PRD 92, 095009\n\t* PRD 90, 095002\n4. http://arxiv.org/pdf/1506.07885v1.pdf\n5. Lian-Tao:\n\t* http://arxiv.org/pdf/1506.00653v1.pdf\n\nCMS-related:\n\n1. XS's:\n\t* https://twiki.cern.ch/twiki/bin/view/LHCPhysics/SUSYCrossSections\n\t* https://twiki.cern.ch/twiki/bin/view/CMSPublic/WinoCn\n\t* http://pauli.uni-muenster.de/~akule_01/nllwiki/index.php/NLL-fast\n2. https://twiki.cern.ch/twiki/bin/view/CMS/SMSTChiSlepSnuMadgraph8TeV\n3. https://twiki.cern.ch/twiki/bin/view/CMS/SMST2DegenerateStopMadgraph8TeV\n4. https://twiki.cern.ch/twiki/bin/viewauth/CMS/SMST2ccMadgraph8TeV\n5. Analysis: https://cds.cern.ch/record/2010110/files/SUS-14-021-pas.pdf\n\n", 
  "id": 46734095
}