{
  "read_at": 1462552992, 
  "description": "", 
  "README.md": "# Generalized Double GNC (GDGNC)\n\n## Overview\n\nThis project contains scripts used for my PhD research on software graph shape and generated software graphs.\n\n## Dependencies\n\nThose scripts runs on __Python 2__. Following libraries are requires:\n\n - networkx\n - numpy\n - matplotlib\n - scipy\n\nOn Linux:\n\n    aptitude install python-networkx python-numpy\n\n## Running\n\n### Extracting software dependencies\n\nSoftware dependencies extractions can be found in the `graphs/real` folder for my dataset used in my paper (see Research Papers section).\n\n#### Prerequisite\n\nTo extract real graph dependencies you need to download [dependency finder](http://sourceforge.net/projects/depfind/). Extract the content of the archive somewhere in your system.\n\n#### Dependency finder XML file\n\nTo extract the dependency finder xml file, use:\n\n```\n$ xmldepgraph.py <folder> <output_xmlfile> <pathtodepfindbin>\n```\n\nFor instance: \n```\n$ python2 xmldepgraph.py /home/vince/Temp/ant/ ant.xml /home/vince/Temp/depfinder/bin\n```\n\nThis command will extract the xml file to `<output_xmlfile>`. The file will contains all dependencies contained in the jars found recursively in `<folder>`. Note that `<pathtodepfindbin>` is the absolute path to the `bin` folder of the dependency finder project (ie. if I do extract dependency finder in my home dir: `/home/vince/DependencyFinder-1.2.1-beta4/bin/`).\n\n\n#### Dependencies\n\nOnce you produced an XML file, you can obtain dependencies using:\n\n```\ndepgraph.py <xmlfile> <outfile> <mode> <granluarity> <depfinder_root> <signaturefilter ...>\n```\nLet assume I do installed ant in `/home/vince/Temp/ant/` and dependency finder in `/home/vince/Temp/depfinder`. Those two lines will produce `ant.xml` XML file and `and.csv` graph file for internal connections only and at the class granularity:\n\n```\n$ python2 src/depgraph.py ant.xml ant.csv internal class /home/vince/Temp/depfinder/bin ant '!'\n```\n\nParameters:\n\n- `<xmlfile>` the input xml file;\n- `<outfile>` the output dependency file;\n- `<mode>` indicated if only endo dependencies should be considered. To do so, use __internal__. The opposite is obtained using __external__. Use __all__ to consider all;\n- `<granluarity>` indicates the granularity of extracted items, can be: __package__, __class__ or __feature__;\n  - `<depfinder_root>`  specify the absolute path to the dependency finder bin folder;\n  - `<signaturefilter ...>` specify string which validate an item (according to its signature). Use '!' for default package.\n\n\n### Digraph generation\n\nGenerations can be found in the `graphs/experiment-arxiv-1410.7921` and `graphs/generated-examples` folders for my dataset used in my paper (see Research Papers section).\n\nExecute `python2 graphgen.py` to display the help for graph generation.\nTo generate a graph to the standard output, use:\n\n```\n$ python2 src/graphgen.py [graph-type-id] [parameters]\n```\n\nParameters are dependent of the chosen generator. Some generator requires a number of nodes (`nodes=x`), some other a number of edges (`edges=x`). Moreover, almost all generators requires some parameters.\n\n#### Available generators\n\n\n| Nr | Name | Nodes | Edges | Floats parameters | Constants parameters |\n|----|------|-------|-------|-------------------|----------------------|\n| 0 |                  GNC |  True | False |  |  \n| 1 |               GD-GNC |  True | False |                 p, q |  \n| 2 |       Baxter & Frean | False |  True |                gamma |  \n| 3 |              Vazquez |  True | False |                    p |  \n| 4 |          Dorogovtsev |  True | False |  |                 m, A\n| 5 |             Grindrod |  True | False |        alpha, lambda |  \n| 6 |         Kumar Linear |  True | False |           copyfactor |                    d\n| 7 |          Erdos Renyi |  True | False |                    p |  \n| 8 |                R-MAT |  True |  True |           a, b, c, d |  \n| 9 |             Bollobas | False |  True |   alpha, beta, gamma |    deltain, deltaout\n| 10 |                  Goh |  True |  True |  alpha_in, alpha_out |  \n\n#### Examples\n\nGDGNC (graph type id *1*) requires a number of nodes and two parameters, *p* and *q*, thus we can, by example, generate a graph with 50 nodes, p and q = 0.5 by invoking:\n\n```\npython2 graphgen.py 1 nodes=50 p=0.5 q=0.5\n```\n\nOther examples:\n\n```\npython2 graphgen.py 8 nodes=50 edges=50 a=.2 b=.3 c=.4 d=.9\npython2 graphgen.py 9 edges=50 alpha=.2 beta=.3 gamma=.4 deltain=10 deltaout=20\n```\n\n### Comparing kolmogorov-smirnov distances of programs\n\nUse `ks_scores.py`:\n\n```\n$ python2 src/ks_scores.py <file1> [<fileorfolder2>]\n```\n\nThis script takes as input a csv file `<file1>` which describe the software graph and a file or a folder containing a set of csv files `<fileorfolder2>` to compare with.\nIn the case if `<fileorfolder2>` is omitted, then the distance of `<file1>` will be computed with all other programs in the same folder than `<file1>`.\n\n### Computing mann-whitney p-value of generated graphs\n\nUse `mw_scores.py`:\n\n```\nmw_scores.py <realcsvfile> <generationfolder> [<<othergenerationfolder>]\n```\n\nThis script takes as input a csv file `<realcsvfile>` which describe the software graph and two folders (`<generationfolder>` and `<othergenerationfolder>`) each containing a set of csv files of generated graphs with two different algorithms. If `<othergenerationfolder>` is omitted, then the generated graphs will be compared to all other software contained in the same folder than `<realcsvfile>`.\n\n### Comparing software shapes using kolmogorov-smirnov p-value\n\nUse `softwareshape.py`:\n\n```\nsoftwareshape.py <softwarefolder>\n```\n\nCalculate the komlogorov-smirnov p-value with each pair of software cumulative in-/out- degree distrbution.\nPrint to the standard output each pair computation details and a summary.\n\n### Plot the software cumulative in-/out- degree distribution\n\nUse `softwareshape_plot.py`:\n\n```\nsoftwareshape_plot.py <softwarefolder> <graphplotfile>\n```\n\nPlot the cumulative degree distribution for all software contained in `<softwarefolder>`. Software graphs are __.csv__ files which describes the graph. Two files ares produced (one for in- and another for out- degree): `<graphplotfile>_in.pdf` and `<graphplotfile>_out.pdf`.\n\n## Research Papers\n\nThis project is used in the following papers:\n\n  - __Vincenzo Musco__, Martin Monperrus, Philippe Preux. A Generative Model of Software Dependency Graphs to Better Understand Software Evolution (http://arxiv.org/abs/1410.7921).\n\nIn this section, I do present the dataset used in this paper and specify values used to obtains my results. Some informations may be redundant with the paper. For a full scientific presentation, please refer to http://arxiv.org/abs/1410.7921.\n\n### Software graph extraction\n\nThis section reports the signature filter parameter used for importing the projects.\n\n| Project | Version | Signature filter |\n|---------|---------|------------------|\n|ant|1.9.2|`ant`, `!`|\n|jfreechart|1.0.16|`jfree`, `!`|\n|jftp|1.57|`jftp`, `!`|\n|jtds|1.3.1|`jtds`, `!`|\n|maven|3.3.1|`maven`, `!`|\n|hsqldb|2.3.1|`hsqldb`, `!`|\n|log4j|2.0b9|`log4j`, `!`|\n|squirrelsql|3.5.0|`squirrel`, `!`|\n|argouml|0.34|`argouml`, `!`|\n|mvnforum|1.3|`mvnforum`, `!`|\n|atunes|3.1.2|`atunes`, `!`|\n|jedit|5.2.0|`jedit`, `!`|\n|weka|3.7.12|`weka`, `!`|\n|jetty|9.2.7|`jetty`, `!`|\n|vuze|5.5|`aelitis`, `!`|\n\n### Software generation best parameters\n\nThis section report the parameters used to generate graphs for each software.\n\n| Project | #Nodes | #Edges | Erdos | GDGNC | Baxter & Frean |\n|---------|--------|--------|-------|-------|----------------|\n|ant|1252|5763|p=0.00368|p=0.4, q=1.0|gamma=0.4|\n|jfreechart|858|4783|p=0.00650|p=0.5, q=0.7|gamma=0.3|\n|jftp|173|736|p=0.02459|p=0.5, q=0.6|gamma=0.3|\n|jtds|90|328|p=0.04049|p=0.9, q=0|gamma=0.3|\n|maven|1515|6933|p=0.00302|p=0.8, q=0.1|gamma=0.3|\n|hsqldb|602|4976|p=0.01373|p=0.7, q=0.5|gamma=0.2|\n|log4j|895|4136|p=0.00516|p=0.5, q=0.6|gamma=0.3|\n|squirrelsql|2288|10141|p=0.00194|p=0.6, q=0.5|gamma=0.4|\n|argouml|2664|13445|p=0.00189|p=0.4, q=1.0|gamma=0.4|\n|mvnforum|282|1614|p=0.02030|p=0.7, q=0.4|gamma= 0.2|\n|atunes|1881|8502|p=0.00240|p=0.4, q=1.0|gamma=0.4|\n|jedit|1277|5674|p=0.00348|p=0.7, q=0.2|gamma=0.4|\n|weka|2860|14082|p=0.00172|p=0.4, q=0.9|gamma=0.4|\n|jetty|1908|8798|p=0.00242|p=0.4, q=0.9|gamma=0.4|\n|vuze|4633|18493|p=0.00086|p=0.6, q=0.5|gamma=0.4|\n\n## Data structures\n\nAll graphs are descried in CSV files where each line describe a directed edge separated by `;`.\n\n\n## Contact\n\nSee: http://www.vmusco.com or http://www.vincenzomusco.com\n", 
  "id": 50173705
}