{
  "README_spr_supertrees.txt": "################################################################################\r\nspr_supertree\r\n\r\n################################################################################\r\n\r\nUsage: spr_supertree [OPTIONS]\r\n       spr_supertree-omp [OPTIONS]\r\nCalculate supertrees that minimize the SPR distance from the input\r\ntrees. By default calculates a rooted SPR supertree from a list\r\nof rooted binary trees from STDIN in newick format. An initial\r\ntree is built by greedily adding taxa in decreasing order of\r\nocurrence. The tree is then improved by SPR rearrangements.\r\nAdditional options allow for unrooted and/or multifurcating input trees.\r\n\r\nCopyright 2013-2014 Chris Whidden\r\nwhidden@cs.dal.ca\r\nhttp://kiwi.cs.dal.ca/Software/SPR_Supertrees\r\nMarch 3, 2014\r\nVersion 1.2.1\r\n\r\nThis file is part of spr_supertrees.\r\n\r\nspr_supertrees is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nspr_supertrees is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with spr_supertrees.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n*******************************************************************************\r\nALGORITHM\r\n*******************************************************************************\r\n\r\nThese options control what algorithm is used to determine the SPR distance\r\nfrom the supertree to the input trees. By default -bb is used.\r\n\r\n-fpt        Calculate the exact rSPR distance with an FPT algorithm\r\n\r\n-bb         Calculate the exact rSPR distance with a branch-and-bound\r\n            FPT algorithm. This is the default option.\r\n\r\n-approx     Calculate just a linear -time 3-approximation of the rSPR distance\r\n\r\n-max k      Calculate the exact rSPR distance if it is k or less and\r\n            otherwise use the 3-approximation\r\n\r\n-split_approx\r\n-split_approx x  Calculate the exact rSPR distance if it is k or less and\r\n                 otherwise use the exponential-time approximation\r\n\r\n*******************************************************************************\r\nOPTIMIZATIONS\r\n*******************************************************************************\r\n\r\nThese options control the use of optimized branching. All optimizations are\r\nenabled by default. Specifying any subset of -cob, -cab, and -sc will use\r\njust that subset of optimizations. See the README for more information.\r\n\r\n-allopt   Use -cob -cab -sc and a new set of optimizations. This is the default\r\n          option\r\n\r\n-noopt    Use 3-way branching for all FPT algorithms\r\n\r\n-cob      Use \"cut one b\" improved branching\r\n\r\n-cab      Use \"cut all b\" improved branching\r\n\r\n-sc       Use \"separate components\" improved branching\r\n\r\n-bipartition_cluster x  Do not consider supertree rearrangements that violate\r\n                        biparitions supported by x% of gene trees containing\r\n                        at least two members from each side of the bipartition.\r\n                        Enabled by default with x=0.5\r\n\r\n*******************************************************************************\r\nMULTIFURCATING COMPARISON OPTIONS\r\n*******************************************************************************\r\n\r\n-allow_multi   Allow multifurcating gene trees\r\n\r\n-support x     Collapse bipartitions with less than x support\r\n\r\n*******************************************************************************\r\nUNROOTED COMPARISON OPTIONS\r\n*******************************************************************************\r\n\r\n-unrooted   Compare the supertree to each rooting of the input trees.\r\n            Use the best found distance\r\n\r\n-unrooted_min_approx    Compare the supertree to each rooting of the\r\n                        input trees.\r\n                        Run the exact algorithm on the rooting with the\r\n                        minimum approximate rspr distance\r\n\r\n-simple_unrooted        Root the gene trees at each iteration using\r\n                        a bipartition balanced accuracy measure\r\n                        (fast but potentially less accurate)\r\n                        Reports an unrooted SPR distance comparison\r\n                        at the end of each iteration for comparable\r\n                        iteration scores\r\n\r\n-simple_unrooted x      Root the gene trees at the first x iterations\r\n\r\n-simple_unrooted_fast   The same as -simple_unrooted but does not use\r\n                        an unrooted comparison at the end of each\r\n                        iteration\r\n\r\n-outgroup FILE          Root the gene trees with the outgroup taxa\r\n                        listed in FILE, one per line. Trees with a\r\n                        polyphyletic outgroup are considered invalid.\r\n\r\n-reroot                 Reroot the super tree at each iteration using\r\n                        a bipartition balanced accuracy measure\r\n\r\n-rspr_reroot            Root trees using the SPR distance instead\r\n                        of the bipartition balanced accuracy\r\n\r\n\r\n\r\n*******************************************************************************\r\nSEARCH STRATEGY OPTIONS\r\n*******************************************************************************\r\n\r\n-i x    Run for x iterations of the global rearrangement search\r\n\r\n-r x    Only consider transfers of length x in the global rearrangement\r\n        search. Default is infinite (All SPRs). For NNI search use\r\n        -r 1\r\n\r\n-include_only <file>  Build the supertree only from taxa included in\r\n                      <file>, one per line\r\n\r\n-initial_tree <file>  Begin the search with the tree in <file>\r\n\r\n-num_leaves x         Build the supertree from the x taxa that are found\r\n                      in the largest number of trees\r\n\r\n-random_insert_order  Insert taxa in random order when building the\r\n                      greedy addition tree. The default order is\r\n                      descending occurence\r\n\r\n-rf_ties              Break SPR distance ties with the RF distance\r\n\r\n*******************************************************************************\r\nLGT ANALYSIS\r\n*******************************************************************************\r\n\r\n-lgt_analysis          Conduct an LGT analysis with the initial user-specified\r\n                       or greedy addition tree\r\n\r\n-lgt_evaluate          Print inferred transfers for each tree with the initial\r\n                       user-specified or greedy addition tree\r\n\r\n-lgt_csv               Output the LGT analysis seperated by commas rather than\r\n                       spaces.\r\n\r\n-lgt_groups FILE       Specify a set of groups (e.g. genus or class) to analyze\r\n                       with -lgt_analysis. The group FILE contains a set of\r\n                       groups consisting of a group name on one line, group\r\n                       members one per line, and a blank line to seperate each\r\n                       group.\r\n                       \r\n*******************************************************************************\r\nOTHER OPTIONS\r\n*******************************************************************************\r\n-time                  Print iteration and total CPU time used at each\r\n                       iteration\r\n\r\n-cc                    Calculate a potentially better approximation with a\r\n                       quadratic time algorithm\r\n\r\n-valid_trees           Output the set of trees that appear valid\r\n-valid_trees_rooted    Output the set of trees that appear valid after applying\r\n                       any rooting options.\r\n\r\n-multi_trees           Output the set of multifurcating or invalid trees\r\n\r\n################################################################################\r\n\r\nCONTACT INFORMATION\r\n\r\nChris Whidden\r\nwhidden@cs.dal.ca\r\nhttp://kiwi.cs.dal.ca/Software/SPR_Supertrees\r\n\r\n################################################################################\r\n\r\nFILES\r\n\r\nClusterForest.h   Cluster Decomposition\r\nClusterInstance.h Cluster Decomposition\r\nForest.h          Forest data structure\r\ngen_rooted_trees.pl Generate all rootings of an unrooted binary tree\r\ngpl.txt           The GPL license\r\nLCA.h             Compute LCAs of tree leaves\r\nlgt.h             LGT Analysis\r\nMakefile          Makefile\r\nNode.h            Node data structure\r\nREADME.txt        This README\r\nrspr.h            Calculate rSPR distances between pairs of trees\r\nSiblingPair.h     Sibling pair data structure\r\nspr_supertree.cpp Main file\r\nspr_supertree     Compute supertrees that minimize spr distance\r\nUndoMachine.h     Structure to record and undo tree alterations\r\n\r\n################################################################################\r\n\r\nINSTALLATION\r\n\r\nSPR Supertrees is a command-line program written in C++. To use it, simply\r\ncompile spr_supertree.cpp and execute the resulting program. On systems\r\nwith the g++ compiler and make program, the included make file will\r\ncompile spr_supertree; simply run `make'.\r\n\r\nSPR Supertrees can also use multiple cores on SMP machines through OpenMP.\r\nCompile with the -fopenmp flag or run `make omp'. The multicore executable\r\nwill be called spr_supertree-omp\r\n\r\n################################################################################\r\n\r\nINPUT\r\n\r\nSPR Supertrees requires a list of Newick format trees with arbitrary labels\r\nas input.  A sample Newick tree is shown below:\r\n\r\n((1,2),(3,4),(5,6));\r\n\r\nBy default the trees must be rooted and binary.\r\nIf you wish to allow multifurcating input trees use the -allow_multi\r\noption. Bipartitions with less than x% support can be collapsed with\r\n-support x.\r\n\r\nSPR Supertrees can also construct a rooted tree from unrooted gene\r\ntrees. Use the -unrooted, -unrooted_min_approx, -simple_unrooted, or\r\n-simple_unrooted_fast options rSPR will find the best rooting of each input\r\ntree with respect to the current supertree using the -unrooted option, guess\r\nthe best rooting based on the approximation algorithm with the\r\n-unrooted_min_approx option, and guess the best rooting based on\r\na bipartition balanced accuracy measure with the -simple_unrooted or\r\n-simple_unrooted_fast options. These are much faster but may be less accurate.\r\n\r\nThe -outgroup <FILE> option roots gene trees based on a list of outgroup taxa.\r\nThis option ignores gene trees with a polyphyletic outgroup or no outgroup\r\nmembers. To root these trees, one can construct a supertree from just the trees\r\nwhere the outgroup is monophyletic and then root the remainder of the trees\r\nwith the -simple_unrooted 1 option.\r\n\r\nWith the -lgt_analysis option, the program conducts\r\nan LGT analysis of an initial or greedy addition supertree. The gene trees\r\nshould be rooted, either as input or using -simple_unrooted_fast. This analysis\r\nconsiders a single minimal reconciliation scenario between the supertree and\r\neach gene tree. The output is a series of matrices (comma-seperated with the\r\n-lgt_csv option) showing the number of inferred SPR moves, transfers, and\r\ntransfers ignoring direction between groups of taxa or to \"mixed\" portions of\r\nthe tree. The -lgt_groups <FILE> option is required and specifys taxonomic\r\ngroups or individual taxa.\r\n\r\n################################################################################\r\n\r\nOUTPUT\r\n\r\nrspr writes to standard output.\r\n\r\nA sample command line and output are shown below:\r\n\r\n/////////////////////\r\n\r\n$ ./spr_supertree -i 1 < test_trees/trees2.txt \r\nNUM_ITERATIONS=1\r\nskipped 0 lines with no opening bracket \r\nskipped 0 multifurcating or invalid trees\r\nskipped 0 trees with less than 4 leaves\r\n2 gene trees remaining\r\n\r\nInitial Supertree:  ((15,14),(13,12))\r\nAdding leaf 11  (5/16)\r\n(((16,15),(14,13)),12)\r\nAdding leaf 10  (6/16)\r\n(((16,15),(14,13)),(12,11))\r\nAdding leaf 9   (7/16)\r\n(((16,15),(14,13)),((12,11),10))\r\nAdding leaf 8   (8/16)\r\n((((16,15),(14,13)),9),((12,11),10))\r\nAdding leaf 7   (9/16)\r\n(((((16,15),(14,13)),9),((12,11),10)),8)\r\nAdding leaf 6   (10/16)\r\n(((((16,15),(14,13)),9),((12,11),10)),(8,7))\r\nAdding leaf 5   (11/16)\r\n(((((16,15),(14,13)),9),((12,11),10)),((8,7),6))\r\nAdding leaf 4   (12/16)\r\n(((((16,15),(14,13)),9),((12,11),10)),((8,7),(6,5)))\r\nAdding leaf 3   (13/16)\r\n(((((16,15),(14,13)),9),((12,11),10)),((8,7),((6,4),5)))\r\nAdding leaf 2   (14/16)\r\n(((((16,15),(14,13)),9),((12,11),10)),((8,7),((6,(4,3)),5)))\r\nAdding leaf 1   (15/16)\r\n(((((16,15),(14,13)),9),((12,11),10)),((8,7),((6,(4,3)),(5,2))))\r\nAdding leaf 0   (16/16)\r\n(((((16,15),(14,13)),9),((12,11),10)),((8,7),((6,(4,3)),((5,2),1))))\r\n\r\nInitial Supertree:\r\n(((((16,15),(14,13)),9),((12,11),10)),((8,7),((6,(4,3)),((5,2),1))))\r\nTotal Distance: 5\r\nCurrent Supertree:\r\n(((((16,15),(14,13)),9),((12,11),10)),((6,(8,7)),((4,3),((5,2),1))))\r\nTotal Distance: 4\r\nFinal Supertree:\r\n(((((16,15),(14,13)),9),((12,11),10)),((6,(8,7)),((4,3),((5,2),1))))\r\nFinal Distance: 4\r\n\r\n/////////////////////\r\n\r\nThe first set of lines indicate the options chosen, the number of invalid\r\ntrees and the number of valid trees.\r\nThe program then builds a supertree greedily by placing the most\r\nfrequent taxa first. Finally, the program applies 25 iterations of\r\nglobal SPR rearrangements (or a user-specified number using the -i option\r\nas shown here ) and outputs the best tree and distance found at the end of\r\neach iteration. To build larger trees the -r x option will limit the\r\nSPR rearrangements to transfers of length at most x. For example,\r\n-r 1 uses only NNI rearrangements.\r\n\r\n\r\n################################################################################\r\n\r\nEFFICIENCY\r\n\r\nThe 3-approximation algorithm runs in O(n) time, where n is the number of\r\nleaves in the trees.\r\n\r\nthe exact algorithms run in  O(2.42^k n) time, where $k$ is the computed\r\nSPR distance. Using a set of new optimizations we conjecture that\r\nthe running time has been improved to O(2^k n) time.\r\n\r\nWhen using the -unrooted option, the exact algorithms run in O(2.42^k\r\nn^2) time. (conjectured O(2^k n^2)). The -simple_unrooted option\r\nhas the same worst case performance as the regular exact algorithms.\r\n\r\nWhen using the -max x option, the exact algorithms will run up to\r\na distance of x and then the approximation is used. This provides\r\na running time of O(n + 2^x n) or O(n + 2^x n^2) for rooted\r\ntrees and allows for a trade-off between space and efficiency.\r\nThe -split_approx x option works similarly but is both much more\r\naccurate and slower. -split_approx is recommended over -max.\r\n\r\nSince there are O(n^2) possible SPR rearrangements, the total running\r\ntime is O(i * n^2 * X), where i is the number of iterations and X\r\nis the running time of the chosen SPR computation method.\r\nNOTE: The exact algorithms are exponential algorithms that exactly solve an\r\nNP-hard problem.  Thus the algorithms may not finish in a reasonable amount\r\nof time for very large rSPR distances without the -split_approx or -max\r\noptions. For very large supertrees, it may also be necessary to\r\nlimit the scope of the search with the -r option.\r\n\r\nThe -bipartition_cluster x option ignores SPR rearrangments that violate any\r\nbipartition that agrees with x% of the gene trees that contain at least two\r\ntaxa from each side of the bipartition. This is enabled by default with x=0.5\r\nand grealy accelerates tree searches at the expense of some searching power.\r\nThis option can be disabled with -bipartition_cluster 1, requiring total\r\nagreement.\r\n\r\n################################################################################\r\n\r\nREFERENCES\r\n\r\nFor more information on the algorithms see:\r\n\r\nWhidden, C., Zeh, N., Beiko, R.G.  Fixed-Parameter and Approximation\r\nAlgorithms for Maximum Agreement Forests of Multifurcating Trees.\r\n(In Preparation). 2013. Preprint available at\r\nhttp://arxiv.org/abs/1305.0512\r\n\r\nWhidden, C., Beiko, R.G., Zeh, N. Fixed-Parameter Algorithms for Maximum\r\nAgreement Forests. SIAM Journal on Computing 42.4 (2013), pp. 1431-1466.\r\nAvailable at http://epubs.siam.org/doi/abs/10.1137/110845045\r\n\r\nWhidden, C., Zeh, N., Beiko, R.G.  Supertrees based on the subtree\r\nprune-and-regraft distance. Syst. Biol. 63 (4): 566-581. 2014.\r\ndoi:10.1093/sysbio/syu023.\r\n\r\nWhidden, C., Beiko, R.G., Zeh, N. Fast FPT Algorithms for Computing\r\nRooted Agreement Forests: Theory and Experiments. Experimental Algorithms.\r\nEd. by P. Festa. Vol. 6049. Lecture Notes in Computer Science. Springer\r\nBerlin Heidelberg, 2010, pp. 141-153. Available at\r\nhttp://link.springer.com/chapter/10.1007/978-3-642-13193-6_13\r\n\r\nWhidden, C., Zeh, N. A Unifying View on Approximation and FPT of\r\nAgreement Forests. In: WABI 2009. LNCS, vol. 5724, pp. 390.401.\r\nSpringer-Verlag (2009). Available at\r\nhttp://www.springerlink.com/content/n56q2846v645p655/\r\n\r\nWhidden, C. A Unifying View on Approximation and FPT of Agreement Forests.\r\nMasters Thesis. Dalhousie University, Canada. 2009. Available at\r\nwww.cs.dal.ca/~whidden\r\n\r\n################################################################################\r\n\r\nCITING SPR Supertrees\r\n\r\nIf you use SPR Supertrees in your research, please cite:\r\nWhidden, C., Zeh, N., Beiko, R.G.  Supertrees based on the subtree\r\nprune-and-regraft distance.  Syst. Biol. 63 (4): 566-581. 2014.\r\ndoi:10.1093/sysbio/syu023.\r\n\r\n################################################################################\r\n", 
  "read_at": 1462511384, 
  "description": "rSPR is a software package for calculating rooted subtree-prune-and-regraft distances and rooted agreement forests.", 
  "README.txt": "################################################################################\r\nrspr\r\n\r\n################################################################################\r\n\r\nUsage: rspr [OPTIONS]\r\nCalculate approximate and exact Subtree Prune and Regraft (rSPR)\r\ndistances and the associated maximum agreement forests (MAFs) between pairs\r\nof rooted binary trees from STDIN in newick format. Supports arbitrary labels.\r\nThe second tree may be multifurcating. \r\n\r\nCan also compare the first input tree to each other tree with -total or\r\ncompute a pairwise distance matrix with -pairwise.\r\n\r\nCopyright 2009-2014 Chris Whidden\r\nwhidden@cs.dal.ca\r\nhttp://kiwi.cs.dal.ca/Software/RSPR\r\nApril 29, 2014\r\nVersion 1.3.0\r\n\r\nThis file is part of rspr.\r\n\r\nrspr is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\nrspr is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with rspr.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n*******************************************************************************\r\nALGORITHM\r\n*******************************************************************************\r\n\r\nThese options control what algorithm is used\r\n\r\n-fpt        Calculate the exact rSPR distance with an FPT algorithm\r\n\r\n-bb         Calculate the exact rSPR distance with a branch-and-bound\r\n            FPT algorithm. This is enabled by default.\r\n\r\n-approx     Calculate just a linear-time 3-approximation of the rSPR distance\r\n\r\n-split_approx\r\n-split_approx x  Calculate the exact rSPR distance if it is k or less and\r\n                 otherwise use the exponential-time approximation\r\n\r\n-cluster_test   Use the cluster reduction to speed up the exact algorithm.\r\n                This is enabled by default.\r\n\r\n-total          Find the total SPR distance from the first input tree to\r\n                the rest of the list of trees. Uses the other algorithm\r\n                options as specified (including unrooted options).\r\n\r\n*******************************************************************************\r\nOPTIMIZATIONS\r\n*******************************************************************************\r\n\r\nThese options control the use of optimized branching. All optimizations are\r\nenabled by default. Specifying any subset of -cob, -cab, and -sc will use\r\njust that subset of optimizations.\r\n\r\n-allopt    Use -cob -cab -sc and a new set of improvements. This is the\r\n           default\r\noption\r\n\r\n-noopt     Use 3-way branching for all FPT algorithms\r\n\r\n-cob       Use \"cut one b\" improved branching\r\n\r\n-cab       Use \"cut all b\" improved branching\r\n\r\n-sc        Use \"separate components\" improved branching\r\n\r\n*******************************************************************************\r\nMULTIFURCATING COMPARISON OPTIONS\r\n*******************************************************************************\r\n\r\n-support x     Collapse bipartitions with less than x support\r\n\r\n*******************************************************************************\r\nUNROOTED COMPARISON OPTIONS\r\n*******************************************************************************\r\n\r\n-unrooted   Compare the first input tree to each other input tree.\r\n            Output the best found distance and agreement forest.\r\n            This option can be used with gen_rooted_trees.pl to provide\r\n            the rootings.\r\n            Note that this option is a bit unintuitive to maintain\r\n            compatibility with previous versions of rSPR.\r\n            If -total or -pairwise analysis is used then there is no need\r\n            to specify rootings.\r\n\r\n-unrooted_min_approx    Compare the first input tree to each other input tree.\r\n                        Run the exact algorithms on the pair with the\r\n                        minimum approximate rspr distance\r\n\r\n-simple_unrooted        Root the gene trees using\r\n                        a bipartition balanced accuracy measure\r\n                        (fast but potentially less accurate). Only\r\n                        used with -total.\r\n\r\n*******************************************************************************\r\nPAIRWISE COMPARISON OPTIONS\r\n*******************************************************************************\r\n\r\n-pairwise\r\n-pairwise a b\r\n-pairwise a b c d        Compare each input tree to each other tree and output\r\n                         the resulting SPR distance matrix. If -unrooted is\r\n                         enabled this will compute the \"best rooting\" SPR\r\n                         distance by testing each rooting of the trees. The\r\n                         optional arguments a b c d compute only rows a-b and/or\r\n                         columns c-d of the matrix.\r\n\r\n-no-symmetric-pairwise   By default, -pairwise will ignore the symmetric lower\r\n                         left triangle of the matrix. With this option the\r\n                         lower triangle is filled in.\r\n\r\n-pairwise_max x          Use with -pairwise to only compute distances at most x.\r\n                         Larger values are output as -1. Very efficient for\r\n                         small distances (e.g. 1-10).\r\n\r\n*******************************************************************************\r\nOTHER OPTIONS\r\n*******************************************************************************\r\n-cc         Calculate a potentially better approximation with a quadratic time\r\n            algorithm\r\n\r\n-q          Quiet; Do not output the input trees or approximation\r\n*******************************************************************************\r\n\r\nExample:\r\n$ ./rspr -fpt <test_trees/trees2.txt\r\nT1: ((((1,2),(3,4)),((5,6),(7,8))),(((9,10),(11,12)),((13,14),(15,16))))\r\nT2: (((7,8),((1,(2,(14,5))),(3,4))),(((11,(6,12)),10),((13,(15,16)),9)))\r\n\r\nF1: (((1,2),(3,4)),(7,8)) 14 13 5 12 11 6 9 10 (15,16)\r\nF2: ((7,8),((1,2),(3,4))) 14 5 13 12 6 11 9 (15,16) 10\r\napprox drSPR=9\r\n\r\n3 4\r\nF1: ((((1,2),(3,4)),(7,8)),((10,(11,12)),(13,(15,16)))) 14 6 9 5\r\nF2: (((7,8),((1,2),(3,4))),(((11,12),10),(13,(15,16)))) 14 6 9 5\r\nexact drSPR=4\r\n\r\n################################################################################\r\n\r\nCONTACT INFORMATION\r\n\r\nChris Whidden\r\nwhidden@cs.dal.ca\r\nhttp://kiwi.cs.dal.ca/Software/RSPR\r\n\r\n################################################################################\r\n\r\nFILES\r\n\r\n\r\nClusterForest.h   Cluster Decomposition\r\nForest.h          Forest data structure\r\ngen_rooted_trees.pl    Generate all rootings of an unrooted binary tree\r\ngpl.txt           The GPL license\r\nLCA.h             Compute LCAs of tree leaves\r\nMakefile          Makefile\r\nNode.h            Node data structure\r\nREADME.txt        This README\r\nrspr.h            Library to calculate rSPR distances between pairs of trees\r\nrspr.cpp          Calculate rSPR distances between pairs or sets of trees\r\ntest_trees/       Folder of test tree pairs\r\nSiblingPair.h     Sibling Pair class\r\n\r\n################################################################################\r\n\r\nINSTALLATION\r\n\r\nrSPR is a command-line program written in C++. To use it, simply\r\ncompile rspr.cpp and execute the resulting program. On systems with\r\nthe g++ compiler and make program, the included make file will\r\ncompile rspr; simply run `make'.\r\n\r\n################################################################################\r\n\r\nINPUT\r\n\r\nrSPR requires pairs of Newick format trees with arbitrary labels\r\nas input. The first tree must be binary and rooted. The second tree\r\nmay be multifurcating and rooted. A sample Newick tree is shown below:\r\n\r\n((1,2),(3,4),(5,6));\r\n\r\nrSPR can also compare a rooted reference tree to an unrooted test tree.\r\nFirst use gen_rooted_trees.pl to generate all rootings of the unrooted\r\ntest tree. Then use the -unrooted or -unrooted_min_approx options and\r\ninput the test tree and the set of rootings. rSPR will find the best\r\nrooting of the test tree with the -unrooted option and guess the best \r\nrooting based on the approximation algorithm with the\r\n-unrooted_min_approx option. Alternatively, the -total option with\r\nthe -unrooted or -unrooted_min_approx options will provide just the\r\ndistance. The -total option with -simple_unrooted will use a faster\r\nbiparition based measure to approximate the optimal rooting.\r\n\r\nThe -support x option can be used to collapse poorly supported branches\r\nof the second tree.\r\n\r\nWith the -pairwise option, rSPR will compare each pair of input trees\r\nand output the results as a distance matrix. To save time, only the\r\nupper right triangle is output as the lower left triangle is symmetric.\r\nUse the included fill_matrix program to fill in missing values or the\r\n-no-symmetric-pairwise option to explicitly compute these values.\r\nOptional arguments to -pairwise can be used to compute subsets of the\r\nmatrix (e.g. for partitioning computation over multiple processes).\r\nThe -pairwise_max x option can be used to quickly find trees with\r\nSPR distance at most x when x is small (e.g. 1-10).\r\n\r\n\r\n################################################################################\r\n\r\nOUTPUT\r\n\r\nrspr writes to standard output.\r\n\r\nA sample command line and output are shown below:\r\n\r\n/////////////////////\r\n\r\n$ ./rspr < test_trees/trees2.txt\r\nT1: ((((1,2),(3,4)),((5,6),(7,8))),(((9,10),(11,12)),((13,14),(15,16))))\r\nT2: ((((3,4),(8,(2,((11,12),1)))),((15,16),(7,(6,5)))),(14,((10,13),9)))\r\n\r\nF1: ((3,4),(5,6)) 13 14 10 (11,12) 9 1 8 7 2 (15,16)\r\nF2: ((3,4),(6,5)) 13 10 14 (11,12) 1 9 8 2 7 (15,16)\r\napprox drSPR=12\r\n\r\n4\r\nF1: ((((1,2),(3,4)),((5,6),7)),((9,10),14)) 13 (11,12) 8 (15,16)\r\nF2: ((((3,4),(2,1)),(7,(6,5))),(14,(10,9))) 13 (11,12) 8 (15,16)\r\nexact BB drSPR=4\r\n\r\n/////////////////////\r\n\r\nThe first set of lines show the input trees. The second set of lines are the\r\napproximate agreement forests and the corresponding approximate rSPR distance.\r\nThe third set of lines are the maximum agreement forests and the corresponding\r\nexact rSPR distance. When calculating exact distances, the distance\r\ncurrently being considered is printed on the first line of this section.\r\n\r\nEach component of an agreement forest corresponds to an rSPR operation. \r\nThe set of rSPR operations required to turn one tree into the other can\r\nbe found by applying rSPR operations that move these components to their\r\ncorrect place in the other tree.\r\n\r\nAn agreement forest may contain p (rho) as a component. This represents\r\nthe root of the trees and indicates that an extra rSPR operation is\r\nrequired to correctly root the tree.\r\n\r\n################################################################################\r\n\r\nOUTPUT WITH CLUSTERING\r\n\r\n/////////////////////\r\n\r\n$ ./rspr < test_trees/cluster_test \r\nT1: (((x,((b1,b3),b2)),y),(f,(a,c)))\r\nT2: (((x,y),f),((a,((b1,b2),b3)),c))\r\n\r\nF1: (((0,((1,2),3)),4),(5,(6,7))) \r\nF2: (((0,4),5),((6,((1,3),2)),7)) \r\napprox drSPR=9\r\n\r\n\r\nCLUSTERS\r\nC1_1: ((1,2),3) \r\nC1_2: ((1,3),2) \r\ncluster approx drSPR=3\r\n\r\n1 \r\nF1_1: (1,2) 3 \r\nF1_2: (1,2) 3 \r\ncluster exact drSPR=1\r\n\r\nC2_1: (((0,(1,2)),4),(5,(6,7))) \r\nC2_2: (((0,4),5),((6,(1,2)),7)) \r\ncluster approx drSPR=6\r\n\r\n2 \r\nF2_1: (5,(6,7)) (1,2) (0,4) \r\nF2_2: (5,(6,7)) (1,2) (0,4) \r\ncluster exact drSPR=2\r\n\r\nF1: (f,(a,c)) b2 (b1,b3) (x,y) \r\nF2: (f,(a,c)) b2 (b1,b3) (x,y) \r\ntotal exact drSPR=3\r\n\r\n/////////////////////\r\n\r\nWhen clustering is enabled (as it is by default), each solved\r\ncluster is displayed along with its approximate and exact distance in\r\nan intermediate representation with labels mapped from 0-(N-1) where\r\nN is the number of labels. The final agreement forest and distance\r\nare output last.\r\n\r\n################################################################################\r\n\r\nOUTPUT WITH PAIRWISE\r\n\r\n$ cat test_trees/big_test* | ./rspr -pairwise\r\n0,46,0,46\r\n,0,46,50\r\n,,0,46\r\n,,,0\r\n\r\n$ cat test_trees/big_test* | ./rspr -pairwise | ./fill_matrix\r\n0,46,0,46\r\n46,0,46,50\r\n0,46,0,46\r\n46,50,46,0\r\n\r\n################################################################################\r\n\r\nEFFICIENCY\r\n\r\nThe 3-approximation algorithm runs in O(n) time, where n is the number of\r\nleaves in the trees.\r\n\r\nThe unoptimized FPT and branch-and-bound algorithms run in O(3^k n) time, where\r\nk is the rSPR distance and n is the number of leaves in the trees. The\r\nbranch-and-bound algorithm should be significantly faster in practice.\r\n\r\nUsing all 3 of the -cob -cab and -sc optimizations improves the running times of\r\nthe algorithms to O(2.42^k n) time. This provides a significant improvement in\r\npractice and is provably correct, thus this is the default.\r\n\r\nIn addition, this version contains new improvements that\r\ngive a bound of O(2^k n). This provides another significant improvement\r\nand is provably correct so these options are also enabled by default.\r\n\r\nFor much larger trees, the -split_approx option will compute an\r\nexponential time approximation of the distance that is exact for\r\nsmall distances and generally within a few percent of the optimal \r\ndistance otherwise.\r\n\r\nWhen using the -unrooted option, the exact algorithms run in O(2^k n^2) time.\r\n\r\nThe cluster reduction improves the running time of the\r\nalgorithm to O(2^k n) time where k is the largest rSPR distance of\r\nany cluster (as opposed to the full rSPR distance). This provides a large\r\nspeedup when the trees are clusterable.\r\n\r\nWith the -pairwise option on m rooted trees, the program takes O(m^2\r\n2^k n) time, where k is the largest SPR distance computed. With -unrooted\r\nthis becomes O(m^2 2^k n^3). The -pairwise_max x option limits k to x, \r\nbut does not use clustering and is slow for large distances.\r\n-\r\n\r\nNOTE: This is an exponential algorithm that exactly solves an NP-hard problem.\r\nThus the algorithms may not finish in a reasonable amount of time for large\r\nrSPR distances (> 20 without optimizations and > 70 with optimizations).\r\n\r\n################################################################################\r\n\r\nREFERENCES\r\n\r\nFor more information on the algorithms see:\r\n\r\nWhidden, C., Zeh, N., Beiko, R.G.  Fixed-Parameter and Approximation\r\nAlgorithms for Maximum Agreement Forests of Multifurcating Trees.\r\n(Submitted). 2013. Preprint available at\r\nhttp://arxiv.org/abs/1305.0512\r\n\r\nWhidden, C., Zeh, N., Beiko, R.G.  Supertrees based on the subtree\r\nprune-and-regraft distance. Syst. Biol. 63 (4): 566-581. 2014.\r\ndoi:10.1093/sysbio/syu023.\r\n\r\nWhidden, C., Beiko, R.G., Zeh, N. Fixed-Parameter Algorithms for Maximum\r\nAgreement Forests. SIAM Journal on Computing 42.4 (2013), pp. 1431-1466.\r\nAvailable at http://epubs.siam.org/doi/abs/10.1137/110845045\r\n\r\nWhidden, C. Efficient Computation of Maximum Agreement Forests and their\r\nApplications. PhD Thesis. Dalhousie University, Canada. 2013. Available at\r\nwww.cs.dal.ca/~whidden\r\n\r\nWhidden, C., Beiko, R.G., Zeh, N. Fast FPT Algorithms for Computing\r\nRooted Agreement Forests: Theory and Experiments. Experimental Algorithms.\r\nEd. by P. Festa. Vol. 6049. Lecture Notes in Computer Science. Springer\r\nBerlin Heidelberg, 2010, pp. 141-153. Available at\r\nhttp://link.springer.com/chapter/10.1007/978-3-642-13193-6_13\r\n\r\nWhidden, C., Zeh, N. A Unifying View on Approximation and FPT of\r\nAgreement Forests. In: WABI 2009. LNCS, vol. 5724, pp. 390.401.\r\nSpringer-Verlag (2009). Available at\r\nhttp://www.springerlink.com/content/n56q2846v645p655/\r\n\r\nWhidden, C. A Unifying View on Approximation and FPT of Agreement Forests.\r\nMasters Thesis. Dalhousie University, Canada. 2009. Available at\r\nwww.cs.dal.ca/~whidden\r\n\r\n################################################################################\r\n\r\nCITING rSPR\r\n\r\nIf you use rSPR in your research, please cite:\r\n\r\nWhidden, C., Beiko, R.G., Zeh, N.  Computing the SPR Distance of Binary\r\nRooted Trees in O(2^k n) Time. (In Preparation). 2013.\r\n\r\nWhidden, C., Beiko, R.G. Zeh, N.  Fixed-Parameter and Approximation\r\nAlgorithms for Maximum Agreement Forests of Multifurcating Trees.\r\n(Submitted). 2013.\r\n\r\nWhidden, C., Zeh, N., Beiko, R.G.  Supertrees based on the subtree\r\nprune-and-regraft distance. Syst. Biol. 63 (4): 566-581. 2014.\r\ndoi:10.1093/sysbio/syu023.\r\n\r\nWhidden, C., Beiko, R.G., Zeh, N. Fixed-Parameter Algorithms for Maximum\r\nAgreement Forests. SIAM Journal on Computing 42.4 (2013), pp. 1431-1466.\r\nAvailable at http://epubs.siam.org/doi/abs/10.1137/110845045\r\n\r\nWhidden, C., Beiko, R.G., Zeh, N. Fast FPT Algorithms for Computing\r\nRooted Agreement Forests: Theory and Experiments. Experimental Algorithms.\r\nEd. by P. Festa. Vol. 6049. Lecture Notes in Computer Science. Springer\r\nBerlin Heidelberg, 2010, pp. 141-153. Available at\r\nhttp://link.springer.com/chapter/10.1007/978-3-642-13193-6_13\r\n\r\nWhidden, C., Zeh, N. A Unifying View on Approximation and FPT of\r\nAgreement Forests. In: WABI 2009. LNCS, vol. 5724, pp. 390.401.\r\nSpringer-Verlag (2009).\r\n\r\n################################################################################\r\n\r\n", 
  "id": 24774276
}