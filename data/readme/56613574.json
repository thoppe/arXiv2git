{
  "README_MNIST_Example.txt": "Instructions to run MNIST experiment:\n\nDownload mnist data from http://yann.lecun.com/exdb/mnist/\n\n1) python train_bridge_corrnet.py <PATH TO DOWNLOADED MNIST DATA> <PATH TO STORE GENERATED MNIST LEFT/RIGHT/PIVOT VIEWS> <PATH TO STORE TRAINED MODEL>\n\neg. python train_bridge_corrnet.py ../mnist_images/ /home/akashb/Desktop/Acads/Sem2/Projects/WMT/Corr_net_author/CorrNet/mnistExample/generated_views/ ../Model/saved_model/\n\n2) python project_bridge_corrnet.py <PATH TO STORE GENERATED MNIST LEFT/RIGHT/PIVOT VIEWS> <PATH TO STORE TRAINED MODEL> <PATH TO STORE PROJECTED VIEWS>\n\neg. python project_bridge_corrnet.py /home/akashb/Desktop/Acads/Sem2/Projects/WMT/Corr_net_author/CorrNet/mnistExample/generated_views/ /home/akashb/Desktop/Acads/Sem2/Projects/WMT/Corr_net_author/CorrNet/Model/saved_model/ ./TGT_DIR/projected_views/\n\n3) python evaluate_bridge_corrnet.py <PATH TO STORED PROJECTED VIEWS>\n\neg. python evaluate_bridge_corrnet.py ./TGT_DIR/projected_views/\n\n\n\nUsing the mnist data found at http://yann.lecun.com/exdb/mnist/ , you should obtain the following result:\n\nLeft_only and Right_only\n28.7177037552\nview1 to view2\n0.6891\nview2 to view1\n0.7304\nLeft_only and pivot_only\n37.3754298182\nview1 to view2\n0.7975\nview2 to view1\n0.7865\nRight_only and pivot_only\n41.8844806119\nview1 to view2\n0.8327\nview2 to view1\n0.7642\nLeft_pivot and right_pivot\n43.600299611\nview1 to view2\n0.8589\nview2 to view1\n0.8601\nLeft_pivot and right_only\n36.6328180087\nview1 to view2\n0.7581\nview2 to view1\n0.7943\nRight_pivot and left_only\n32.108290323\nview1 to view2\n0.7501\nview2 to view1\n0.7471\n", 
  "read_at": 1462547757, 
  "description": "This is an implementation of Bridge Correlation Net as described in (http://arxiv.org/abs/1504.07225). This implementation builds off of a similar implementation in (https://github.com/apsarath/CorrNet).", 
  "README.md": "# CorrNet\n\nThis is an implementation of Correlational Neural Network (CorrNet) described in the following paper :\n\nSarath Chandar, Mitesh M Khapra, Hugo Larochelle, Balaraman Ravindran. [Correlational Neural Networks](http://arxiv.org/abs/1504.07225). To appear in Neural Computation, 2015.\n\nPlease site this paper if you are using this code for any of your publications.\n\n## Dependencies\n\nTo run the representation learning code, you need Python and Theano.\n\nTo run the MNIST example, you need scikit-learn.\n\n## Running MNIST example\n\nRefer section 5 in the paper for details about the two-view setup for MNIST and the transfer learning experiment. First you should download the dataset from [this link](https://drive.google.com/file/d/0B9dqzboiV5u-OW1GMW5mVG1UYzg/view?usp=sharing) and extract all the files to some directory say MNIST_DIR. You also need a target directory where the models will be saved, say TGT_DIR.\n\nIn terminal, go to mnistExample folder.\n\nTo create the dataset for training, run the following command:\n\n```\n$ python create_data.py MNIST_DIR/\n```\n\nNext, to train the CorrNet, run the following command.\n\n```\n$ python train_corrnet.py MNIST_DIR/ TGT_DIR/\n```\n\nTo project the data to the learnt space, run the following command.\n\n```\n$ python project_corrnet.py MNIST_DIR/ TGT_DIR/\n```\nTo evaluate the learnt model for transfer learning task, run the following command.\n\n```\n$ python evaluate.py tl TGT_DIR/\n```\n\nWith batch_size=100, training_epochs=50, l_rate=0.01, optimization=\"rmsprop\", tied=True, n_hidden=50, lambda=2, hidden_activation=sigmoid, output_activation=sigmoid, loss_fn = \"squarrederror\", you should get 77.05% accuracy for view1 to view2 and 78.81% accuracy for view2 to view1.\n\nTo compute sum correlation in the projected space, run the following command.\n\n```\n$ python evaluate.py corr TGT_DIR/\n```\n\nWith the same configuration as above, you should get 42.57 as test correlation.\n\n## Bilingual Word Representation Learning\n\nScripts to run the bilingual word representation learning algorithm will be made available soon.\n\n", 
  "id": 56613574
}