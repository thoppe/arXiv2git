{
  "read_at": 1462553696, 
  "description": "Implementation of algorithms from the paper Fuzzy Extractors: How to Generate Strong Keys from Biometrics and Other Noisy Data", 
  "README.md": "\nINTRODUCTION\n\nThe files pinsketch.h, sketch.cpp, differ.cpp, io.cpp and bch.cpp contain\nan implementation of PinSketch, the BCH-based secure sketch from \"Fuzzy\nExtractors: How to Generate Strong Keys from Biometrics and Other Noisy\nData\" by Dodis, Ostrovsky, Reyzin and Smith (SIAM Journal on Computing,\nvolume 38, number 1, pages 97-139, 2008; on-line at\nhttp://eprint.iacr.org/2003/235 and http://arxiv.org/abs/cs/0602007).  The\nimplementation is by Kevin Harmon and Leonid Reyzin (reyzin@cs.bu.edu).  It\nuses Victor Shoup's NTL (A Library for doing Number Theory), which must be\ninstalled before it will compile; see http://www.shoup.net.\n\nGiven an input set A of any number of (nonzero) m-bit strings and a\nparameter t, the program \"sketch\" will produce as output a sketch of A of\nsize tm bits.  Then, if the size of the symmetric difference between sets A\nand B is at most t, the program \"differ\" will find the symmetric difference\nbetween A and B given only B and the sketch of A (thus, in particular,\nrecovering elements of A that are not in B without seeing A).  In fact,\n\"differ\" can work given just the sketches of A and B (even if the sketches\nwere computed with different values of t, as long as the number of\ndifferences is at most the smaller of the two).\n\nThese programs provide an efficient way to find differences between two\nsets without having to communicate the sets.  They also allow for\ninformation-reconciliation with minimum information leakage.  For more\ndetails and applications, see the aforementioned \"Fuzzy Extractors\" paper.\n\nSee also companion implementation of Improved Juels-Sudan (IJS) Secure\nSketch, another secure sketch from the same paper, at\nhttp://www.cs.bu.edu/~reyzin/code/fuzzy.html. Note that the user interface\nfor the two implementations is slightly different (in particular, because\nIJS, unlike this implementation, cannot produce symmetric differences from\nonly two sketch files), that PinSketch is more efficient, and that PinSketch,\nunlike IJS, does not require the two sets of be of the same size.\n\nThe mathematical meat of the implementation is in bch.cpp, which is based\non \"Syndrome Encoding and Decoding of BCH Codes in Sublinear Time\"\n(excerpted from the aforementioned \"Fuzzy Extractors\" paper).  The code in\nbch.cpp is of greatest general interest; the rest of the code is specific\nto the formats chosen by this implementation.\n\nWARNINGS AND LIMITATIONS\n\nThe programs will not behave correctly if any of the following occurs.\n\n1) There are duplicate elements in A or duplicate elements in B (i.e., if A\nor B are multisets).\n\n2) A or B contains a string of all zeroes.\n\n3) t is greater than or equal to 2^{m-1}\n\n4) The input or sketch files do not follow the prescribed format.\n\n5) The size of the symmetric difference between the two sets is greater\nthan t (then \"differ\" will output an error message unless there is a set C\nthat has the same sketch as A and whose symmetric difference with B has no\nmore than t elements, in which case C will be output).\n\nNote that cases 1, 2, 3, and 4 can be taken care of at the input stage (but\ncurrently are not).  Case 5 is impossible to fix completely, although there\nare techniques that will reduce the likelihood of an incorrect output at\nthe expense of a larger sketch.\n\n\nUSAGE DETAILS\n\nTo compile, make sure you have NTL (A Library for doing Number Theory)\ninstalled (see http://www.shoup.net) and issue command \n\nmake\n\nIf the compilation fails, see the comments in the file called Makefile.\nOnce everything compiles, invoking\n\n./sketch A.set\n\nwill produce A.ss (note that file must end in .set).  The format of A.set\nis\n\nt=<integer>\nm=<integer>\n[<int1> <int2> ... ]\n\nwhere <intj> is a nonzero m-bit integer written in decimal. \n\nFor example,\n\nt=2\nm=10\n[2 347 532 87 876 39]\n\n(Note that the choice to have inputs be decimal integers was arbitrary, and\nthe program can be easily modified to accept other inputs.  Also note that\nno spaces around the equal signs are allowed; otherwise, spaces and\nlinebreaks can be added anywhere.)\n\nThe sketch file A.ss will contain information on the input parameters and\ngenerating polynomial of GF(2^m), followed by the tm bits of the sketch in\nhuman-readable form as t elements of GF(2^m).  Of course, in a system where\nthe input parameters are fixed, only the tm bits are needed.\n\nInvoking\n\n./differ A.ss B.set\n\nwill output the symmetric difference between A and B if it has at most t\nelements.  More generally, if a set C exists such that the symmetric\ndifference between B and C is of size at most t and the sketch of C is\nequal to the sketch in A.ss, then the symmetric difference between B and C\nwill be output (note that such a C is unique if it exists).  If such a C\ndoes not exist, then an error message will be printed.\n\nNote that A and B are sets, not sequences: the order of elements doesn't\nmatter, and, therefore, the order of elements in the symmetric difference\nis arbitrary.  The format of B.set is the same as of A.set; however, its t\nand m values will be ignored.\n\nInvoking\n\n./differ A.ss B.ss\n\n(assuming B.ss was computed using sketch B.set) will also output the\nsymmetric difference between A and B (with the same generalization).  If A\nand B were computed with respect to different m (or the same m but\ndifferent generating polynomials, which should not happen the way sketch is\ncurrently coded), an error message will be output.  If A.ss was computed\nwith respect to t1 and B.ss was computed with respect to t2, then the\ndifference must have no more than min(t1, t2) elements; else an error\nmessage will be output, or possibly an incorrect answer.\n\nSample files X.set, Y.set X.ss, Y.ss are included with the implementation.\n", 
  "id": 18131583
}