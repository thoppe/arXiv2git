{
  "read_at": 1462549991, 
  "description": "MERLiN: Mixture Effect Recovery in Linear Networks (cf. http://arxiv.org/abs/1512.01255)", 
  "README.md": "# MERLiN: Mixture Effect Recovery in Linear Networks\n\n*This is code accompanying the manuscript of the same title by Sebastian Weichwald, Moritz Grosse-Wentrup, Arthur Gretton [arXiv:1512.01255](http://arxiv.org/abs/1512.01255). The non-linear extension is described in \"Recovery of non-linear cause-effect relationships from linearly mixed neuroimaging data\", Sebastian Weichwald, Arthur Gretton, Bernhard Scholkopf, Moritz Grosse-Wentrup [arXiv:1605.00391](https://arxiv.org/abs/1605.00391).*\n\nMERLiN is a causal inference algorithm that can recover from an observed linear mixture a causal variable that is an effect of another given variable.\nMERLiN implements a novel idea on how to (re-)construct causal variables and is robust against hidden confounding.\n\nAs a motivational example consider the following causal structure\n\n![examplegraph](http://sweichwald.bplaced.net/MERLiN/examplegraph.png)\n\nwhere S is a randomised variable, C=[C1,...,Cd]' are causal variables, and h is a hidden confounder.\nOften the causal variables C1,...,Cd cannot be measured directly but only a linear mixture F=[F1,...,Fd]'=AC thereof can be observed.\nIn such scenarios, MERLiN is still able to establish the cause-effect relationship C1-C2.\nGiven\n\n* samples of S,\n* samples of F, and\n* a vector v such that C1=v'F\n\nthe algorithm searches for a vector w such that w'F is an effect of C1, e.g. recovering C2=w'F as an effect of C1.\n\nOne practical example is the application to electroencephalographic (EEG) data recorded during a neurofeedback experiment.\nHere, F1,...,Fd denote the EEG channel recordings that are a linear mixture F=AC of the underlying cortical sources C1,...,Cd.\nS denotes the randomised instruction to up-/downregulate the neurofeedback signal C1=v'F.\nIn this setup, MERLiNbp and MERLiNbpicoh are able to recover from F a causal effect C2=w'F of C1, i.e. establish a cause-effect relationship between two cortical sources C1 and C2.\n\nThis repository provides python and matlab implementations of the following algorithms:\n\n* **MERLiN**: precision matrix based algorithm that works on iid samples\n* **MERLiNbp**: precision matrix based algorithm that works on iid sampled timeseries chunks and searches for a certain cause-effect relationship between the resulting log-bandpower features\n* **MERLiNbpicoh**: extends MERLiNbp by an imaginary coherency regularisation\n* **MERLiNnlbp**: non-linear extension of the MERLiNbp algorithm as described in [arXiv:1605.00391](https://arxiv.org/abs/1605.00391) (Python only)\n\nNote that the python implementation should be preferred over the matlab implementation. While the provided matlab implementation implements the algorithms MERLiN/-bp/-bpicoh as first described in the original manuscript, only the python implementation includes all newer modifications/extensions/improvements.\n\nThe MERLiN*bp* algorithms may be applied to any type of timeseries data.\nIn [arXiv:1512.01255](http://arxiv.org/abs/1512.01255) and [arXiv:1605.00391](https://arxiv.org/abs/1605.00391), for example, they have been employed in the analysis of EEG data.\n\n\n---\n\n\n## python3\n\nThe file [MERLiN_example.py](python3/MERLiN_example.py) provides a simple example of use --- call `python3 MERLiN_example.py` or `%run MERLiN_example.py` in ipython3.\n\n### get going\n\nThe file [MERLiN.py](python3/MERLiN.py) provides the main functionality --- in a nutshell:\n\n```python\nfrom MERLiN import MERLiN\n\nmerlin = MERLiN()\n\n# the basic algorithm\n# S: (m x 1) np.array that contains the samples of S\n# F: (d x m) np.array that contains the linear mixture samples\n# v: (d x 1) np.array, the linear combination corresponding to C1 in S->C1,\n#     instead the middle node's samples arranged as (m x 1) np.array can\n#     also be handed over as optional argument C\nres = merlin.run(S, F, v=v)\n\n# the bp algorithms for iid sampled timeseries chunks\n# S: (m x 1) np.array that contains the samples of S\n# Ftw: (d x m x n) np.array that contains the linearly mixed timeseries of\n#       length n (d channels, m trials)\n# v: (d x 1) np.array, the linear combination corresponding to C1 in S->C1\n# fs: sampling rate\n# omega: tuple of (low, high) cut-off of desired frequency band\nres = merlin.run(S, Ftw, v=v, fs=fs, omega=omega)\nres = merlin.run(S, Ftw, v=v, fs=fs, omega=omega, variant='bpicoh')\nres = merlin.run(S, Ftw, v=v, fs=fs, omega=omega, variant='nlbp')\n\n# the solution vector\nw = res[0]\n```\n\n### notes\n\n* Requires numpy, scipy, theano, and [pymanopt](https://pymanopt.github.io/)\n* Tested with python3.4.3.\n* No validation of user input to functions.\n\n\n## python2\n\nCurrently the python3 implementation is also compatible with python2. Tested with python2.7.6.\n\nThe file [MERLiN_example.py](python3/MERLiN_example.py) provides a simple example of use --- call `python2 MERLiN_example.py` or `%run MERLiN_example.py` in ipython2.\n\n\n## matlab\n\nNote that the python implementation should be preferred over the matlab implementation. While the provided matlab implementation implements the algorithms MERLiN/-bp/-bpicoh as first described in the original manuscript, only the python implementation includes all newer modifications/extensions/improvements.\n\nThe file [MERLiN_example.m](matlab/MERLiN_example.m) provides a simple example of use --- call `MERLiN_example` in matlab.\n\n### get going\n\nThe file [MERLiN.m](matlab/MERLiN.m)/[MERLiNbp.m](matlab/MERLiNbp.m)/[MERLiNbpicoh.m](matlab/MERLiNbpicoh.m) provides the MERLiN/-bp/-bpicoh function --- in a nutshell:\n\n```matlab\n% the basic algorithm\n% S: (m x 1) vector of samples of S\n% F: (d x m) matrix of linear mixture samples\n% v: (d x 1) vector corresponding to C1 in S->C1\n[w, converged, curob] = MERLiN(S,F,v)\n\n% the bp algorithms for iid sampled timeseries chunks\n% S: (m x 1) vector of samples of S\n% Ftw: (d x m x n) tensor containing timeseries of length n (d channels, m trials)\n% v: (d x 1) vector corresponding to C1 in S->C1\n% fs: sampling rate\n% omega1, omega2: low/high limit of desired frequency band\n[w, converged, curob] = MERLiNbp(S,Ftw,v,fs,omega1,omega2)\n[w, converged, curob] = MERLiNbpicoh(S,Ftw,v,fs,omega1,omega2)\n\n% the solution vector\nw\n```\n\n### notes\n\n* Requires [ADiGator](http://adigator.sourceforge.net/) (tested with V1.1.1). Download and add to matlab search path via `addpath(genpath('/path/to/adigator'))`.\n* Requires [Manopt](http://manopt.org/) (tested with V2.0). Download and add to matlab search path via `addpath(genpath('/path/to/manopt'))`.\n* Tested with Matlab R2014a.\n* No validation of user input to functions.\n", 
  "id": 47187199
}