{
  "read_at": 1462509943, 
  "description": "Learning to Discover Efficient Mathematical Identities", 
  "README.md": "Learning to Discover Efficient Mathematical Identities\n======================================================\n  We explore how machine learning techniques can be\n  applied to the discovery of efficient mathematical identities. We\n  introduce an attribute grammar framework for representing symbolic\n  expressions. Given a grammar of math operators, we build trees that\n  combine them in different ways, looking for compositions that are analytically equivalent to a target\n  expression but of lower computational complexity. However, as the\n  space of trees grows exponentially with the complexity of the\n  target expression, brute force search is impractical for all but the\n  simplest of expressions. Consequently, we introduce two novel\n  learning approaches that are able to learn from simpler expressions\n  to guide the tree search. The first of these is a simple $n$-gram\n  model, the other being a recursive neural-network. We show how\n  these approaches enable us to derive complex identities, beyond\n  reach of brute-force search, or human derivation.\n\n\nMore information at: http://arxiv.org/abs/1406.1584\n\nExecution\n=========\nRun ./main.py to compute some equivalent expressions for (\\sum AA^T)k .\nLast lines of main.py define target.\n\n\nComputation Trees visualization\n===============================\nCall ./print_trees.py on any \\*.tree file. This are files generated in \nresults/trees/\n\n\nTesting\n=======\nRun ./all_tests.py from tests directory to execute all tests.\n\n\n\n", 
  "id": 26000891
}