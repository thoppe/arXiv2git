{
  "read_at": 1462557958, 
  "description": "Programming with attribute in Erlang", 
  "README.md": "# AttributeErlang\nProgramming attribute-based communication in Erlang\n\n## Introduction\nAErlang is a middleware and an extension of Erlang concurrent constructs for enabling Input and Output actions of the AbC process calculus (http://arxiv.org/pdf/1602.05635.pdf) in Erlang programs.\n* attribute environment: in an AbC system, components are equipped with a set of attributes describing some interesting aspects that they want to expose to each other. Attributes have specific values that depends on the system to be modelled.\n* attribute-based send: A send is decorated with a predicate over attributes of partners, which allows dynamic selecting the group of partners at the communication time.\n* attribute-based receive: Similarly, a predicate at receiver side can be used to filter out uninteresting senders.\n\n## How to use\n\n### Registering process's attribute environment\nStart AErlang in your application by calling function start/0 from aerlang module:\n\n    aerlang:start().\n\nErlang processes should define an attribute environment in the form of a list of 2-tuples, for example:\n\n    Env = [{'Color', red},{'Role', explorer},{'Battery', 30}].\n\nThen each process needs to register their information by calling function register/2:\n\n    aerlang:register(Key, Env).\n    \nKey should be unique for each process.\n\nProcesses can update their attribute values by calling update/2:\n\n    aerlang:update(Key, Data).\n\nwhere Data has the similar form to Environment: [{'Attribute1', Value1},....].\n\n### Attribute-based send\nIn the module that you are going to use attribute-based primitives, you should include the aerlang transformation module:\n\n    -module(test_AbC).\n    -compile({parse_transform, aerl_trans}).\n\nThen in the code, one process can send with predicate!. For example:\n\n    Predicate = \"Battery > 30\",\n    to(Predicate) ! Msg\nThat means, send message Msg to all processes whose attributes satisfy the predicate Predicate.\n\n### Attribute-based receive \nYou can declare a Predicate before Erlang receive construct. And use it to filter out all senders do not satisfy the predicate:\n\n    Predicate = \"Color = red and Battery < 30\",\n    from(Predicate),\n    receive\n        ....\n    end.\n    \nWhenever a from is used, it must be followed by a receive construct.\nSee the test and example folder for more details on how to use\n", 
  "id": 51424286
}