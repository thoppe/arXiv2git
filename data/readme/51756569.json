{
  "read_at": 1462557460, 
  "description": "Blue Brain Python Optimisation Library", 
  "README.md": "[![Build Status](https://travis-ci.org/BlueBrain/BluePyOpt.svg?branch=master)](https://travis-ci.org/BlueBrain/BluePyOpt)\n[![codecov.io](https://codecov.io/github/BlueBrain/BluePyOpt/coverage.svg?branch=master)](https://codecov.io/github/BlueBrain/BluePyOpt?branch=master)\n[![Join the chat at https://gitter.im/BlueBrain/BluePyOpt](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/BlueBrain/BluePyOpt?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Code Climate](https://codeclimate.com/github/BlueBrain/BluePyOpt/badges/gpa.svg)](https://codeclimate.com/github/BlueBrain/BluePyOpt)\n[![Binder](http://mybinder.org/badge.svg)](http://mybinder.org/repo/BlueBrain/BluePyOpt)\n[![Documentation Status](https://readthedocs.org/projects/bluepyopt/badge/?version=latest)](http://bluepyopt.readthedocs.io/en/latest/?badge=latest)\n\nIntroduction\n============\n\nThe Blue Brain Python Optimisation Library (BluePyOpt) is an extensible \nframework for data-driven model parameter optimisation that wraps and \nstandardises several existing open-source tools. \n\nIt simplifies the task of creating and sharing these optimisations, \nand the associated techniques and knowledge. \nThis is achieved by abstracting the optimisation and evaluation tasks \ninto various reusable and flexible discrete elements according to established \nbest-practices. \n\nFurther, BluePyOpt provides methods for setting up both small- and large-scale \noptimisations on a variety of platforms, \nranging from laptops to Linux clusters and cloud-based compute infrastructures. \n\nCitation\n========\n\nWhen you use the BluePyOpt software or method for your research, we ask you to cite the following Arxiv preprint in your publications:\n\n[Van Geit W, Gevaert M, Chindemi G, Rossert C, Courcol J, Muller EB, Schurmann F, Segev I and Markram H (2016). BluePyOpt: Leveraging open source software and cloud infrastructure to optimise model parameters in neuroscience. Front. Neuroinform. 10:17. doi: 10.3389/fninf.2016.00017](http://www.frontiersin.org/neuroinformatics/10.3389/fninf.2016.00017/abstract)\n\n```bibtex\n@ARTICLE{bluepyopt,\n AUTHOR={Van Geit, Werner  and  Gevaert, Michael  and  Chindemi, Giuseppe  and  Rossert, Christian  and  Courcol, Jean-Denis  and  Muller, Eilif Benjamin  and  Schurmann, Felix  and  Segev, Idan  and  Markram, Henry},\nTITLE={BluePyOpt: Leveraging open source software and cloud infrastructure to optimise model parameters in neuroscience},\nJOURNAL={Frontiers in Neuroinformatics},\nVOLUME={10},\nYEAR={2016},\nNUMBER={17},\nURL={http://www.frontiersin.org/neuroinformatics/10.3389/fninf.2016.00017/abstract},\nDOI={10.3389/fninf.2016.00017},\nISSN={1662-5196}}\n```\nSupport\n=======\nWe are providing support using a chat channel on [Gitter](https://gitter.im/BlueBrain/BluePyOpt).\n\nNews\n====\n- 2016/05/03: The API documentation was moved to [ReadTheDocs](http://bluepyopt.readthedocs.io/en/latest/)\n- 2016/04/20: BluePyOpt now contains the code of the IBEA selector, no need to install a BBP-specific version of DEAP anymore\n- 2016/03/24: Released version 1.0\n\nRequirements\n============\n\n* [Python 2.7+](https://www.python.org/download/releases/2.7/)\n* [Pip](https://pip.pypa.io) (installed by default in newer versions of Python)\n* [BlueBrain version of DEAP](https://github.com/BlueBrain/deap)\n* [Neuron 7.4](http://neuron.yale.edu/) (compiled with Python support)\n* [eFEL eFeature Extraction Library](https://github.com/BlueBrain/eFEL) (automatically installed by pip)\n* [Numpy](http://www.numpy.org) (automatically installed by pip)\n* [Pandas](http://pandas.pydata.org/) (automatically installed by pip)\n* The instruction below are written assuming you have access to a command shell\non Linux / UNIX / MacOSX / Cygwin\n\nInstallation\n============\n\nIf you want to use the ephys module of BluePyOpt, you first need to install Neuron with Python support on your machine.\n\nAnd then bluepyopt itself:\n\n```bash\npip install bluepyopt\n```\n\nCloud infrastructure\n====================\n\nWe provide instructions on how to set up an optimisation environment on cloud\ninfrastructure or cluster computers \n[here](https://github.com/BlueBrain/BluePyOpt/tree/master/cloud-config)\n\nQuick Start\n===========\n\nSingle compartmental model\n--------------------------\n\nAn iPython notebook with an introductory optimisation of a one compartmental \nmodel with 2 HH channels can be found at\n\nhttps://github.com/BlueBrain/BluePyOpt/blob/master/examples/simplecell/simplecell.ipynb\n\nThere is a Binder Virtual Machine available that allows you to run this notebook in your browser:\n\nhttp://mybinder.org/repo/BlueBrain/BluePyOpt/examples/simplecell/simplecell.ipynb\n\n![Landscape example](https://github.com/BlueBrain/BluePyOpt/blob/master/examples/simplecell/figures/landscape_example.png)\n**Figure**: The solution space of a single compartmental model with two parameters: the maximal conductance of Na and K ion channels. The color represents how well the model fits two objectives: when injected with two different currents, the model has to fire 1 and 4 action potential respectively during the stimuli. Dark blue is the best fitness. The blue circles represent solutions with a perfect score.\n\nNeocortical Layer 5 Pyramidal Cell\n----------------------------------\nScripts for a more complex neocortical L5PC are in \n[this directory](https://github.com/BlueBrain/BluePyOpt/tree/master/examples/l5pc)\n\nWith a notebook:\n\nhttps://github.com/BlueBrain/BluePyOpt/blob/master/examples/l5pc/L5PC.ipynb\n\nAnd you can run this in a VM:\n\nhttp://mybinder.org/repo/BlueBrain/BluePyOpt/examples/l5pc/L5PC.ipynb\n\nAPI documentation\n==================\nThe API documentation can be found on [ReadTheDocs](http://bluepyopt.readthedocs.io/en/latest/).\n", 
  "id": 51756569
}