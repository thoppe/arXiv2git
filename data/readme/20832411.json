{
  "id": 20832411, 
  "read_at": 1462547425, 
  "README.rst": "Example Structured Commons utilities\n====================================\n\nThis repository provides an example implementation of the `Structured\nCommons`__ [#]_ [#]_ [#]_, an alternative publication and dissemination\nmodel for scientific works.\n\nThis directory contains a **Python library** ``sc`` for manipulating\nStructured Commons objects and fingerprints; and two front-end\n**command-line utilities**:\n\n**objtool.py**\n   Convert between object representations and compute object fingerprints.\n\n**fptool.py**\n   Convert between fingerprint representations and compare fingerprints.\n\nInstallation\n------------\n\nRequirements: Python 2 or 3 (the code was tested with Python 2.7 and 3.3)\n\nThe utilities can be run directly from the source directory without\n\"installing\" them elsewhere.\n\nFor a separate installation::\n\n     python setup.py build\n     python setup.py install\n\nThis installs to the default ``site-packages`` directory for that\nversion of the Python interpreter. To change the target directory, add\nthe argument ``--prefix=DIR`` after ``install``.\n\nUsage: objtool.py\n-----------------\n\nExamples\n````````\n\nTo compute the fingerprint of the single file named \"``1404.7753v2.pdf``\"::\n\n     $ python objtool.py fs:1404.7753v2.pdf\n     fp:FvYPWVbnhezNY5vdtqyyef0wpvj149A7SquozxdVe3jigg\n\nTo compute the \"long\" fingerprint of an entire Python source tree\nstarting at directory \"``sc``\", excluding compiled bytecode objects,\nwith verbose reporting::\n\n     $ python objtool.py -i '*.pyc' -i __pycache__ -v fs:sc fp:long\n     dictionary, entering:\n     entry u'__init__.py': file, sz 33 (fp:nquSc-41kbl6K2QfhiYQxJZFgKO4YPpeS6iz3SmlY1Dkhw)\n     entry u'fp.py': file, sz 13731 (fp:Uxs7Oczd4boiEoqCdFDgCKnBXDo3K4h2rY5wu9LnDLdjSw)\n     entry u'fs.py': file, sz 3857 (fp:uIuqi_hOvEhd9in2LPcNrVXubrRcv13dR52FteK9fJSqqA)\n     entry u'pyrepr.py': file, sz 2593 (fp:xivrx77SyVJyWvVTwm2wialKuRprZB47uuRSgn6WGoPrxg)\n     leaving dictionary (fp:C49RMXE36qDzdc9r61JiwfCl9_KCOdVlrgQ-sy9DiKkaAw)\n     fp::BOHV-CMLR-G7VK-B43V-Z5V6-WUTC-YHYK-L57S-QI45-KZNO-AQ7L-GL2D-RCUR-UAY\n\nTo convert an object from its filesystem representation to a representation\nas Python dictionary tree::\n\n     $ python objtool.py -i '*.pyc' -i __pycache__ -v fs:sc py:-\n     {u'fs.py': u'#! /usr/ .... '}\n\n\nCommand-line syntax\n```````````````````\n\nThe general syntax for ``objtool.py`` is the following::\n\n     objtool.py [OPTIONS] [SOURCE] [DESTINATION]\n\nWhere ``SOURCE`` is any of the following:\n\n``fs:PATH``\n   Filesystem representation starting from ``PATH``.\n\n``raw:FILE`` or ``raw:-``\n   Read a single file object as byte stream from ``FILE`` or stdin.\n\n``utf8:FILE`` or ``utf8:-``\n   Read a single file object as an UTF-8 encoded byte stream from ``FILE`` or stdin.\n\n``pickle:FILE`` or ``pickle:-``\n   Read a pickled Python object from ``FILE`` or stdin.\n\n``json:FILE`` or ``json:-``\n   JSON syntax read as associative arrays / strings / numbers from ``FILE`` or stdin.\n\nand ``DESTINATION`` is any of the following:\n\n``fp:FORMAT``\n   Compute and print the input object's fingerprint using ``FORMAT``. See\n   the description of ``fptool.py`` below for possible formats.\n\n``fs:PATH``\n   Write the filesystem representation starting from ``PATH`` (which must not exist yet).\n\n``json:FILE`` or ``json:-``\n   Emit the JSON syntax as associative arrays / strings to ``FILE`` or stdout.\n\n``raw:FILE`` or ``raw:-``\n   Write a single file object as byte stream to ``FILE`` or stdout.\n\n``utf8:FILE`` or ``utf8:-``\n   Write a single file object as UTF-8 encoded byte stream to ``FILE`` or stdout.\n\n``py:FILE`` or ``py:-``\n   Write an quivalent Python syntax  to  ``FILE`` or stdout.\n\n\nThe defaults for ``SOURCE`` and ``DESTINATION`` are ``raw:-`` and ``fp:compact``, respectively.\n\nCommand-line options:\n\n``-h``\n   Print a command-line help and exit.\n\n``-v``\n   Explore recursive structures verbosely.\n\n``-i PAT``\n   Ignore filesystem names matching the pattern ``PAT`` (fnmatch syntax).\n\n``-a``\n   Also include filesystem names starting with a dot (by default, they are ignored).\n\n``-b``\n   Use Base64 encoding when outputting JSON.\n\nUsage: fptool.py\n----------------\n\nExamples\n````````\n\nTo convert a fingerprint to long format (eg. for easier communication over the phone)::\n\n     $ python fptool.py -f long fp:FvYPWVbnhezNY5vdtqyyef0wpvj149A7SquozxdVe3jigg\n     fp::C33A-6WKW-46C6-ZTLD-TPO3-NLFS-PH6T-BJXY-6XR5-AO2K-VOUM-6F2V-PN4O-FAQ\n\nTo show all possible representations of a fingerprint::\n\n     $ python fptool.py -a fp:FvYPWVbnhezNY5vdtqyyef0wpvj149A7SquozxdVe3jigg\n     Argument: 'fp:FvYPWVbnhezNY5vdtqyyef0wpvj149A7SquozxdVe3jigg' (compact)\n       compact: fp:FvYPWVbnhezNY5vdtqyyef0wpvj149A7SquozxdVe3jigg\n       long:    fp::C33A-6WKW-46C6-ZTLD-TPO3-NLFS-PH6T-BJXY-6XR5-AO2K-VOUM-6F2V-PN4O-FAQ\n       hex:     16f60f59-56e785ec-cd639bdd-b6acb279-fd30a6f8-f5e3d03b-4aaba8cf-17557b78\n       dec:     10385632981549898505027615664606801012501301866546186765965067533389527350136\n\nRecognized options:\n\n``-h``\n   Print a help text and exit.\n\n``-a``\n   Print all representations of a fingerprint.\n\n``-f FMT``\n   Print a particular representation.\n\nRecognized formats:\n\n======= ================================= ========================================\nName    Format / Encoding                 Target use\n======= ================================= ========================================\nbinary  32 bytes (256 bits), no encoding  Binary storage, network protocols\ncompact 46 characters, Base64 + checksum  Print and hypertext media\nlong    55 characters, Base32 + checksum  Mouth-to-ear, analog phone/radio\nhex     64 characters, hexadecimal        Databases w/o proper support for binary\ndec     1-78 decimal digits               Academic / teaching\ncarray  C char array definition           Academic / teaching\n======= ================================= ========================================\n\n\nReferences\n----------\n\n.. __: http://www.structured-commons.org/\n\n.. [#] `Academia 2.0: removing the publisher middle-man while retaining\n   impact`__. Poss, R.; Altmeyer, S.; Thompson, M.; and Jelier, R.  In\n   Proc 1st ACM SIGPLAN Workshop on Reproducible Research\n   Methodologies and New Publication Models in Computer Engineering\n   (TRUST'14), Edinburgh, UK, June 2014. ACM\n\n.. [#] http://arxiv.org/abs/1404.7753\n\n.. [#] http://science.raphael.poss.name/aca2-draft-spec.html\n\n.. __: http://www.bibbase.org/network/publication/poss-altmeyer-thompson-jelier-academia20removingthepublishermiddlemanwhileretainingimpact-2014\n", 
  "description": "SC-related reference tools, libraries and utilities"
}