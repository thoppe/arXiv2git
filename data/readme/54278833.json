{
  "read_at": 1462555753, 
  "description": "A Neural Approach to Blind Motion Deblurring", 
  "README.md": "# Neural Blind Motion Deblurring\nCopyright (C) 2016, Ayan Chakrabarti <ayanc@ttic.edu>\n\nThis is a reference implementation of the algorithm described in the\npaper, [\"**A Neural Approach to Blind Motion Deblurring**\"\n*arXiv:1603.04771 [cs.CV]*](http://arxiv.org/abs/1603.04771). It is\nbeing made available for non-commercial research use only. If you find\nthis code useful in your research, please consider citing the paper.\n\nContact <ayanc@ttic.edu> with any questions.\n\n### Requirements\n\n1. You will need to download the trained neural model, available as\n   MAT file [here](http://www.ttic.edu/chakrabarti/ndeblur/model.mat).\n   \n2. This implementation requires a modern CUDA-capable GPU (it has been\n   tested on an NVIDIA Titan X), and a recent version of MATLAB's\n   Parallel Computing Toolbox that supports the `GPUArray` class.\n   \n3. To run the full algorithm with the final non-blind deconvolution\n   step, you will also need to download an implementation of the EPLL\n   method described in the ICCV 2011 paper \"**From Learning Models of\n   Natural Image Patches to Whole Image Restoration**\", by Daniel\n   Zoran and Yair Weiss, and add it to your MATLAB path. This\n   implementation can be downloaded from Daniel Zoran's\n   [page](http://people.csail.mit.edu/danielzoran/).\n   \n4. We provide a couple of utility functions in the `sunUtil/`\n   directory for running experiments on the Sun *et al.* 2013\n   benchmark. After you download the dataset from this\n   [page](http://cs.brown.edu/~lbsun/deblur2013/deblur2013iccp.html),\n   please edit the `loadSDB.m` file to set paths accordingly.\n\n### Usage\n\nThe two top level functions for performing deblurring are `ndeblur1`\nand `ndeblur2`. The first function applies the local neural network on\nall patches, and forms an initial estimate of the sharp image by\naveraging their outputs. The second function then uses this initial\nestimate to estimate a global motion blur kernel, and then calls EPLL\nto do non-blind deconvolution. The following shows example usage of\nthese functions (see their documentation, using `help funcname` in\nMATLAB, for more information):\n\n```MATLAB\n>>> model = load('/path/to/model.mat'); % Load trained neural model\n>>> out_navg = ndeblur1(blurry_input,model); % Compute neural average output\n>>> out_final = ndeblur2(blurry_input,out_navg); % Compute final output\n```\n\n\n", 
  "id": 54278833
}