{
  "README": "CRMC v1.5.3 Last modifications 2014/07/17\n\n**********************************************************\n                     The Program \"crmc\"\n**********************************************************\n\nThe program \"crmc\" (Cosmic Ray Monte Carlo) is an interface giving\naccess to different cosmic ray and non cosmic ray event generators by\nan easy-to-use command line interface. The output can be stored in\ndifferent formats, i.e. in a root TTree or HepMC event file\n(http://lcgapp.cern.ch/project/simu/HepMC/).\n\n**********************************************************\n                         Authors\n**********************************************************\n\nC++ interface : Colin Baus (colin.baus@kit.edu)\n                Ralf Ulrich (ralf.ulrich@kit.edu)\nFortran interface : Tanguy Pierog (tanguy.pierog@kit.edu)\n\n\"crmc\" is based on the first epos-root interface by X. Garrido (2009)\n\n**********************************************************\n                         References\n**********************************************************\n\n-- CRMC :\n\nReference : C. Baus, T. Pierog and R. Ulrich. To be published (2015)\n           (please ask colin.baus@kit.edu when needed)\n\n\n-- Hadronic interaction models :\n\n* Post LHC :\n\nEPOS LHC (-m0) : T. Pierog et al.\n                 arXiv:1306.0121 [hep-ph]\n\nQGSJETII-04 (-m7) : S.Ostapchenko,\n                    Phys.Rev. D83 (2011) 014018\n\n* Pre LHC :\n\nDPMJET 3.06 : 10.1103/PhysRevC.77.014904\n\nEPOS 1.99 (-m1) : K. Werner, F.M. Liu and T. Pierog,\n                  Phys.Rev. C74 (2006) 044902\n                 and\n                  T. Pierog and K. Werner,\n                  Nucl.Phys.Proc.Suppl. 196 (2009) 102-105\n\nQGSJET01 (-m2) : N.N. Kalmykov, S. Ostapchenko, and A.I. Pavlov,\n                 Nucl.Phys. B (Proc. Suppl.) 52B (1997) 17\n\nQGSJETII-03 (-m11) : S. Ostapchenko,\n                     Nucl.Phys.Proc.Suppl. 151 (2006) 143\n\nSIBYLL2.1 (-m6) : R. Engel, T.K. Gaisser, P. Lipari, and T. Stanev,\n                  Proc. 26th Int. Cosmic Ray Conf., Salt Lake City (USA), 1 (1999) 415\n                 and\n                  E.-J. Ahn, R. Engel, T.K. Gaisser, P. Lipari, and T. Stanev,\n                  Phys.Rev. D80 (2009) 094003\n\n**********************************************************\n                       Installation\n**********************************************************\n\nTo install please get the latest version from the authors and\ninstall the following pre-requisites: BOOST, HEPMC, CMAKE.\nThe next optional step is to modify the CMakeLists.txt file to\nyour needs of which models should be compiled. After you have\ndone so, you can compile the program:\n\n\nmkdir -p installed\ncd installed\ncmake DIRECTORY_WHERE_YOUR_SOURCE_IS\nmake --jobs=8\nmake install\n\nTo test the installation you can use\nmake test ARGS=-V\nor\nbin/crmc -T <your options>\nif you want to test some specific set of options.\n\n**********************************************************\n                       Troubleshoot\n**********************************************************\n\nPlease first try in your build diretory to run:\nmake clean\nrm CMakeCache.txt\n\nSometime it can happen that the CMake cache still contains\nold options or set paths that should be updated. In this\ncase the issues can be resolved by doing that.\n\n**********************************************************\n                            Run\n**********************************************************\n\nRun the program by executing\n\n./bin/crmc -h\n\nto get the following help:\n\nOptions of CRMC:\n  -h [ --help ]                     description of options\n  -v [ --version ]                  show version and exits\n  -o [ --output ] arg               output mode: hepmc (default), hepmc.gz, root, lhe, lhe.gz\n  -s [ --seed ] arg                 random seed (default: random)\n  -n [ --number ] arg               number of collisions\n  -m [ --model ] arg                model [0=EPOS_LHC (default), 1=EPOS_1.99, 2=QGSJET01,\n                                    6=Sibyll_2.1, 7=QGSJETII-04, 11=QGSJETII-03]\n  -p [ --projectile-momentum ] arg  momentum/(GeV/c) (usually  >0)\n  -P [ --target-momentum ] arg      momentum/(GeV/c) (usually =<0)\n  -i [ --projectile-id ] arg        PDG or Z*10000+A*10 (default=proton)\n  -I [ --target-id ] arg            PDG or Z*10000+A*10 (default=proton)\n  -c [ --config ] arg               config file\n  -f [ --out ] arg                  output file name (auto if none provided)\n  -t [ --produceTables ] [=arg(=1)] create tables if none are found\n  -T [ --Test ] [=arg(=1)]          Test mode\n\n\nfor projectile and target Id the following shortcuts are allowed :\n 1    = PDG(2212)       = proton\n-1    = PDG(-2212)      = anti-proton\n 12   = PDG(1000060120) = Carbon\n 120  = PDG(211)        = pion+ (not for -I)\n-120  = PDG(-211)       = pion- (not for -I)\n 208  = PDG(1000822080) = Lead\nusing these shortcuts with automatic output file name generation will create more human readable names.\n\nThe environment variable $CRMC_OUT can be set to define the path the path of the output files,\notherwise $PWD is used as default path.\n\n**Example to generate 100 7 TeV pp collisions with EPOS LHC:\nbin/crmc -o hepmc -p3500 -P-3500 -n100 -m0\n\n**Example to generate 100 1.38 ATeV PbPb collisions with EPOS 1.99:\nbin/crmc -o hepmc -p1380 -P-1380 -n100 -i208 -I208 -m1\n\n**Example to generate 100 4.4 ATeV pPb collisions with QGSJetII-04:\nbin/crmc -o hepmc -p3500 -P-1380 -n100 -m7 -i2112 -I822080\n\n**Example to test Sibyll2.1\nbin/crmc -T -m6\n\n**********************************************************\n                         Options\n**********************************************************\n\nThe details of the run can be controlled by the file \"crmc.param\".\n\nIn this file the 3 first commented options are valid for EPOS 1.99 and EPOS LHC only.\n\n- By defaults EPOS models use a simplified treatment of QGP in events where the energy density is high enough (including in pp). If you\nuncomment the line \"!switch fusion off\" this will be disable and running time will be shorter (but data description will be worth since\nthe physics model will be incomplete). In that mode EPOS is comparable to PYTHIA model (no final state interaction).\n\n- By default only the final particles are recorded in the output file like for other cosmic ray models.\nUncommenting \"!set istmax 1\" allows the user to have the full chain of mother/daughter from the beam to the final particles with EPOS models.\nThe outfile is at least 2 times larger but includes the decayed particles and some special intermediate particles between the beam and\nthe real particles which allow the user to know where the particles were generated. The ids of such particles are the following :\n\n90 : sum of all spectators in case of nuclear beam. It is the mother particle of final nuclear fragments (nucleons and light nuclei).\n91 : cluster which will produce particle statistically. Mother of particles coming from mini-(quark-gluon) plasma in EPOS.\n92 : string. Mother of particles coming directly from string fragmentation of initial Pomerons (which do not participate to plasma formation).\n93 : remnant. Mother of particles coming from the beam remnants.\n\nEach primary particle has a mother with id 9x. For technical reasons all particles with the same id and same momentum are in fact the same\ninitial object (cluster, string or remnant) which was split in different local pieces to keep the correct production vertexes of the final\nparticles. If a set of particles with the same id (91 or 92) and the same momentum has 2 different mothers (one from the projectile and one\nfrom the target) it means that the string was produced by the interaction of this pair of nucleons or for a cluster that it was the closest\npair of nucleon which participate at the formation of the cluster (a cluster is formed by string pieces of different pairs but hepmc format\nallows only one mother in that case).\n\n- By default the cross-section is calculated by a numerical method with is valid only for h-p or h-A\n(h being pion, kaon or nucleon) but not AB (nucleus-nucleus). If you uncomment \"!set isigma 2\" the inelastic\ncross-section will be always correct but it takes several minutes to compute it (see Note on simulating Heavy Ion events).\n\n**********************************************************\n           Note on Simulating Heavy Ion (HI) Events\n******I****************************************************\n\nQGSJET01 and SIBYLL2.1 are limited to hA collisions with A<64 and h being a pion, a kaon or a nucleon.\nOnly EPOS (1.99 and LHC) and QGSJETII (03 and 04) models can run (h)AB collisions with A and B up to 208.\nQGSJETII was never designed for HI collisions, so results should be interpreted with care (no final\nstate interactions).\nEPOS 1.99 and LHC include a simplified treatment of final state interaction but doesn't include full hydro\nsimulations as already possible in EPOS 2. It gives a good overall description of HI data but it should not be\nused to interpret QGP related observables (flow, jet quenching, etc ...) since the model is oversimplified in\nthis distribution.\n* For detailed simulations of HI collisions within EPOS 2, please contact K. Werner (werner@subatech.in2p3.fr).*\n\nConcerning the cross-section calculation in EPOS, to avoid unnecessary long time calculation needed\nfor HI interactions, the default type of cross-section calculation is fast and good for hA but not reliable for\nAB collisions (OK for p-Pb, pi-C but not for C-C or Pb-Pb for instance). So if you really need to have\na correct cross-section for PbPb scattering for example, you should uncomment the line \"set isigma 2\" in the\ncrmc.param file but it will take several minutes to compute the cross-section each time you start CRMC.\nThe number of loops is hard-coded (20000 check models.F) and does not depend on \"-n\" option.\n\nThe HepMC (2.06) IO library has a default limitation of the number of produced particles of 10000.\nThus, events with more than that number of secondaries are either truncated or skipped. For heavy ion\ncollisions this easily can become a problem in crmc. Please consider changing thie limiation to a\nhigher value. We suggest 200000, which works for all models at LHC energies so far. We are happy for\nfeedback on this issue if problems are encountered.\nThe CRMC code automatically checks for the\nlimit in the HepMC library and uses this during compile time. In order to change the limit, you\nneed to re-compile HepMC package and change the value in the line\n    #define HEPEVT_EntriesAllocation 199990\nin the top of the file HepMC/HEPEVT_Wrapper.h\nWhen you run into this limitation you will receive lots of warning messages.\n\n**********************************************************\n           Example For Analysing HepMC Files\n******I****************************************************\nIn the directory ./ExampleAnalyser you can find code for a small\nexample that loops over the hepmc events and its particles.  To\ninstall make sure you have boost, hepmc, and root setup as for the\nnormal installation of crmc then run\n\n\"make\" and \"bin/analyse\"\n\nto run the code.\n", 
  "read_at": 1462549045, 
  "description": "CRMC clone", 
  "id": 43004766
}