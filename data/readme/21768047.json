{
  "README": "T-par\n=============================\nWritten by Matthew Amy\n\nT-par is a quantum circuit optimizer utilizing sum-over-paths representations\nto analyze and re-synthesize Clifford+T circuits.\n\nThe default algorithm is described in the paper \"Polynomial-time T-depth\nOptimization of Clifford+T circuits via Matroid Partitioning\" (arXiv:1303.2042).\nIt creates a semantic representation of a quantum circuit where the phase of a\nbasis state in the output is given by a polynomial over the input and \"path\"\nvariables. This representation causes individual phase gates to be combined or\ncancelled in the polynomial, reducing the total number of phase gates (notably,\nT gates). Matroid partitioning is then used to optimally parallelize the\nremaining phase gates during resynthesis.\n\nWe kindly request that anyone using this code to optimize circuits\nacknowledges the tool and/or the paper on which it is based in their work\n\nBUILD\n------------------------------\n\nTo build T-par, run make in the top level folder.\n\ntpar requires the following libraries:\n\n-- Boost\n\nBoost should be available through your package manager. Additionally, \nyour compiler needs to support the c++0x/c++11 standard, or otherwise\nthe code will likely require some (minor) modifications.\n\nUSAGE\n------------------------------\nRun T-par with\n  ./t-par [options]\n\ntpar takes a circuit in the .qc format (a description can be found at\nhttps://github.com/aparent/QCViewer) from standard input and outputs the\nresulting .qc circuit to standard output. The circuit can only contain the \nsingle qubit gates H, P, P*, T, T*, X, Y, Z, and the two qubit tof (CNOT) gate.\nIt also accepts doubly controlled Z gates, i.e. Z a b c.\n\nDemos are also available in the subfolder \"demos\". For example, to compute an\noptimized 6-bit cucarro adder, use the command\n\n  ./t-par < demos/cucarro_adder.qc\n\nOPTIONS\n------------------------------\nCurrently, the available options are\n\n  -ancillae [0.., unbounded] - Specify the number of ancillae to add during\n                               resynthesis. A natural number argument adds that\n                               number of ancillae, while \"unbounded\" allows the\n                               synthesizer to use as many ancillae as needed to\n                               maximally parallelize phase gates\n\n  -no-hadamard - Perform the T-par algorithm only on {CNOT, T} subcircuits. It\n                 may provide better T-parallelization in some circuits\n\n  -synth=[ADHOC,GAUSS,PMH] - Specify the synthesis method for linear reversible\n                             circuits (i.e. {CNOT} circuits). ADHOC is an\n                             informal (but correct) Gaussian elimination type \n                             algorithm, GAUSS is formal Gaussian elimination,\n                             and PMH is the asymptotically optimal algorithm\n                             described in \"Optimal synthesis of linear\n                             reversible circuits\"\n\n  -no-post-process - Turns off post processing of the synthesized circuit to\n                     remove swap gates and trivial identities. Turning this off\n                     may speed up synthesis for very large circuits\n\n  -log - Display a log of the algorithm's process\n\nThis README is far from complete, so please feel free to email me at \nmatt.e.amy@gmail.com if you have any questions or if you find any bugs.\n", 
  "read_at": 1462550985, 
  "description": "A quantum circuit optimizer based on sum-over-paths representations", 
  "id": 21768047
}