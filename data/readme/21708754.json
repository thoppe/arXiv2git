{
  "read_at": 1462550893, 
  "description": "Roaring bitmaps in Go (golang)", 
  "README.md": "roaring [![Build Status](https://travis-ci.org/RoaringBitmap/roaring.png)](https://travis-ci.org/RoaringBitmap/roaring)[![GoDoc](https://godoc.org/github.com/RoaringBitmap/roaring?status.svg)](https://godoc.org/github.com/RoaringBitmap/roaring) [![Go Report Card](https://goreportcard.com/badge/RoaringBitmap/roaring)](https://goreportcard.com/report/RoaringBitmap/roaring)\n=============\n\nThis is a go port of the Roaring bitmap data structure.\n\nRoaring is  used by Apache Spark (https://spark.apache.org/), Apache Kylin (http://kylin.io),\nDruid.io (http://druid.io/), Whoosh (https://pypi.python.org/pypi/Whoosh/)\nand  Apache Lucene (http://lucene.apache.org/) (as well as supporting systems\nsuch as Solr and Elastic).\n\nThe original java version can be found at https://github.com/RoaringBitmap/RoaringBitmap\n\nThe Java and Go version are meant to be binary compatible: you can save bitmaps\nfrom a Java program and load them back in Go, and vice versa.\n\n\nThis code is licensed under Apache License, Version 2.0 (ASL2.0).\n\nContributors: Todd Gruben (@tgruben), Daniel Lemire (@lemire), Elliot Murphy (@statik), Bob Potter (@bpot), Tyson Maly (@tvmaly), Will Glynn (@willglynn), Brent Pedersen (@brentp)\n\n### References\n\n-  Samy Chambi, Daniel Lemire, Owen Kaser, Robert Godin,\nBetter bitmap performance with Roaring bitmaps,\nSoftware: Practice and Experience Volume 46, Issue 5, pages 709-719, May 2016\nhttp://arxiv.org/abs/1402.6407 This paper used data from http://lemire.me/data/realroaring2014.html\n- Daniel Lemire, Gregory Ssi-Yan-Kai, Owen Kaser, Consistently faster and smaller compressed bitmaps with Roaring, Software: Practice and Experience (accepted in 2016, to appear) http://arxiv.org/abs/1603.06549\n\n\n\n### Dependencies\n\n  - go get github.com/smartystreets/goconvey/convey\n  - go get github.com/willf/bitset\n\nNaturally, you also need to grab the roaring code itself:\n  - go get github.com/RoaringBitmap/roaring\n\n\n### Example\n\nHere is a simplified but complete example:\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/RoaringBitmap/roaring\"\n    \"bytes\"\n)\n\n\nfunc main() {\n    // example inspired by https://github.com/fzandona/goroar\n    fmt.Println(\"==roaring==\")\n    rb1 := roaring.BitmapOf(1, 2, 3, 4, 5, 100, 1000)\n    fmt.Println(rb1.String())\n\n    rb2 := roaring.BitmapOf(3, 4, 1000)\n    fmt.Println(rb2.String())\n\n    rb3 := roaring.NewBitmap()\n    fmt.Println(rb3.String())\n\n    fmt.Println(\"Cardinality: \", rb1.GetCardinality())\n\n    fmt.Println(\"Contains 3? \", rb1.Contains(3))\n\n    rb1.And(rb2)\n\n    rb3.Add(1)\n    rb3.Add(5)\n\n    rb3.Or(rb1)\n\n    // prints 1, 3, 4, 5, 1000\n    i := rb3.Iterator()\n    for i.HasNext() {\n        fmt.Println(i.Next())\n    }\n    fmt.Println()\n\n    // next we include an example of serialization\n    buf := new(bytes.Buffer)\n    rb1.WriteTo(buf) // we omit error handling\n    newrb:= roaring.NewBitmap()\n    newrb.ReadFrom(buf)\n    if rb1.Equals(newrb) {\n    \tfmt.Println(\"I wrote the content to a byte stream and read it back.\")\n    }\n}\n```\n\nIf you wish to use serialization and handle errors, you might want to\nconsider the following sample of code:\n\n```go\n\trb := BitmapOf(1, 2, 3, 4, 5, 100, 1000)\n\tbuf := new(bytes.Buffer)\n\tsize,err:=rb.WriteTo(buf)\n\tif err != nil {\n\t\tt.Errorf(\"Failed writing\")\n\t}\n\tnewrb:= NewBitmap()\n\tsize,err=newrb.ReadFrom(buf)\n\tif err != nil {\n\t\tt.Errorf(\"Failed reading\")\n\t}\n\tif ! rb.Equals(newrb) {\n\t\tt.Errorf(\"Cannot retrieve serialized version\")\n\t}\n```\n\nGiven N integers in [0,x), then the serialized size in bytes of\na Roaring bitmap should never exceed this bound:\n\n`` 8 + 9 * ((long)x+65535)/65536 + 2 * N ``\n\nThat is, given a fixed overhead for the universe size (x), Roaring\nbitmaps never use more than 2 bytes per integer. You can call\n``BoundSerializedSizeInBytes`` for a more precise estimate.\n\n\n### Documentation\n\nCurrent documentation is available at http://godoc.org/github.com/RoaringBitmap/roaring\n\n### Coverage\n\nWe test our software. For a report on our test coverage, see\n\nhttps://gocover.io/github.com/RoaringBitmap/roaring\n\n### Benchmark\n\nType\n\n         go test -bench Benchmark -run -\n\n\n### Compatibility with Java RoaringBitmap library\n\nYou can read bitmaps in Go (resp. Java) that have been serialized in Java (resp. Go)\nwith the caveat that the Go library does not yet support run containers. So if you plan\nto read bitmaps serialized from Java in Go, you might want to call ``removeRunCompression``\nprior to serializing your Java instances. This is a temporary limitation: we plan to\nadd support for run containers to the Go library.\n\n### Alternative\n\nFor an alternative implementation in Go, see https://github.com/fzandona/goroar\nThe two versions were written independently.\n", 
  "id": 21708754
}