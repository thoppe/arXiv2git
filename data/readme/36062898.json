{
  "read_at": 1462558992, 
  "description": "Multi-Frequency Sparse Radio Interferometric imaging", 
  "README.md": "\n=========\n\n`Muffin.jl` is a julia implementation of MUFFIN: Multi-Frequency Sparse Radio Interferometric imaging\n\nsee http://arxiv.org/abs/1504.06847\n\n#Getting Started\n\n####Installation\n\n`Muffin.jl` uses the following Julia packages :\n\n* FITSIO.jl : reading and writing FITS.\n* Images.jl : Fast Fourier Transform implementation.\n* Wavelets.jl : package for fast wavelet transforms. \n* HDF5.jl : for writing JLD (\"Julia data\") variables.\n* GHF.jl : generation of Gaussian homogeneous spatial field.\n* PyPlot.jl : provides a Julia interface to the Matplotlib plotting library.\n\nThe installation is as simple as : \n\n```julia   \n Pkg.clone(\"https://github.com/andferrari/GHF.jl.git\")  \n Pkg.add(\"PyPlot\")   \n Pkg.add(\"FITSIO\")   \n Pkg.add(\"Images\")    \n Pkg.add(\"Wavelets\")   \n Pkg.add(\"HDF5\")    \n```\n \n \nTo install `Muffin.jl`, type from a Julia session the following command :\n\n```julia\n\tPkg.clone(\"https://github.com/andferrari/Muffin.jl.git\")\n```\n\n\n\n\n\n####Usage\n\nTo load the `Muffin.jl` module, type from a Julia session :\n\n```julia\n\tusing Muffin\n```\n\nTo use parallel computing, start Julia with **nprocs** local process and load the module :\n\n```julia\n\t$ julia -p nprocs\n\tjulia> @everywhere using Muffin\n```\n\nYou just need to add the keyword **parallel** in the MUFFIN function, for an example :\n\n\t\n```julia\n\tjulia> psfst, skyst, algost, admmst, toolst = muffin(nitermax = 10,parallel=\"true\");\n```\n\t\n#Functions\n\n####Main Function \n`muffin(...)`\n\n* **muffin** is called with parameters definition :\n\n```julia\n\t  psfst, skyst, algost, admmst, toolst = muffin(folder, dataobj, datapsf, nitermax, rhop, rhot, rhov, rhos, mt, mv, mueps)\n```\n\n* It returns 5 structures :\n\t* psfst : datas related to the PSF\n\t* skyst : datas related to the SKY\n\t* algost : contains algorithm parameters\n\t* admmst : datas related to the admm method\n\t* toolst : contains error calculation arrays\n\t\n* Parameters are :\n\t* folder : path to the folder containing FITS files. Default : installation folder, containing FITS files for the demo\n\t* dataobj : FITS object.\n\t* datapsf : FITS psf.\n\t* nitermax : maximum number of  ADMM iterations. Default : `500`\n\t* rhop : ADMM parameter for positivity constraint. Default : `1`\n\t* rhot : ADMM parameter for spatial constraint. Default : `5`\n\t* rhov : ADMM parameter for spectral constraint. Default : `2`\n\t* rhos : ADMM parameter for spectral constraint. Default : `1`\n\t* mt : Spatial regularization parameter. Default : `5e-1`\n\t* mv : Spectral regularization parameter. Default : `1`\n\t* mueps : Ridge/Tikhonov regularization parameter : `1e-3`\n\t* ws : warm start\n\t* parallel : to start parallel Muffin\n \n \n####Save data\n`savedata(...)`\n\n* **savedata** is called by :\n\n```julia\n\tsavedata(savepath, psfst, skyst, algost, admmst, toolst)\n```\n\nwhere `savepath` is the path/JLD file name where datas will be saved. \n\n\n#Muffin Demo\n\n`Muffin.jl` contains a demo file `muffindemo.jl` in the default installation folder.\n \nTo run the demo, type :\n\n\tusing Muffin\n\tdemo = string(Pkg.dir(\"Muffin\"),\"/src/muffindemo.jl\")\n\tinclude(demo);\n\t\nIf you want to visualize your results, just type after the simulation :\n\n\tplot = string(Pkg.dir(\"Muffin\"),\"/src/readdata.jl\")\n\tinclude(plot);\n\n\nThe demo will run with the following parameters :\n\n\tmyfolder = string(Pkg.dir(\"Muffin\"))\n\tmydataobj =  \"data/M31.fits\"\n\tmydatapsf =  \"data/meerkat_m30_25pix.psf.fits\"\n\tmynitermax = 1\n\tmyrhop = 1\n\tmyrhot = 5\n\tmyrhov = 2\n\tmyrhos = 1\n\tmymt = 5e-1\n\tmymv = 1\n\tmymueps = 1e-3\n\tmysavepath = string(myfolder,myfolder[1],\"data/demo_results.jld\")\n\t\nand the results will be saved in the `demo_results.jld` file.\n\n\n\n\n\n\n\n\n\n\n", 
  "id": 36062898
}