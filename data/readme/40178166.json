{
  "README": "GM2Calc\n=======\n\nGM2Calc calculates the SUSY contributions to the anomalous magnetic\nmoment of the muon a_mu = (g-2)/2 in the real MSSM at the 1- and\nleading 2-loop level.\n\nHomepage:                https://gm2calc.hepforge.org\nSource code repository:  https://github.com/gm2calc\nReferences:              arxiv:1510.08071\n\n\nRequirements\n============\n\n * C++ compiler (g++ >= 4.6.3 or clang++ >= 3.4 or icpc >= 14.0.3)\n * Boost (version 1.37.0 or higher)   http://www.boost.org\n * Eigen 3 (version 3.1 or higher)    http://eigen.tuxfamily.org\n\nOptional:\n\n * LAPACK                             http://www.netlib.org/lapack/\n\n\nCompilation\n===========\n\nTo compile GM2Calc run GNU `make':\n\n  $ make\n\nThe used compiler and include paths can be passed as an argument to\nGNU `make'.  For example:\n\n  $ make \\\n       CXX=icpc \\\n       EIGENFLAGS=\"-I/opt/eigen3/eigen3\" \\\n       BOOSTFLAGS=\"-I/opt/boost/include\"\n\nThe following default values are set in the makefile:\n\n  CXX             := g++\n  CPPFLAGS        := -Isrc\n  CXXFLAGS        := -O2 -std=c++11\n  CXX_DEP_GEN     := g++\n  MAKELIB         := ar cru\n  BOOSTFLAGS      := -I/usr/include\n  EIGENFLAGS      := -I/usr/include/eigen3\n\nThe command line arguments passed to `make' are stored in the file\n`make.args'.  To (re-)run `make' with the command line arguments\nstored in `make.args' run\n\n  $ cat make.args | xargs make\n\n\nCompilation of the example programs\n-----------------------------------\n\nGM2Calc ships two C++ example programs:\n\n  examples/example-gm2calc.cpp\n  examples/example-slha.cpp\n\nand two C example programs:\n\n  examples/example-gm2calc_c.c\n  examples/example-slha_c.c\n\nThese example programs illustrate how to use routines of GM2Calc at\nthe C/C++ level.  The examples can be compiled by running\n\n  $ make examples\n\nFor the compilation of the C programs a C compiler is needed.  The\nused C compiler, the compiler flags and the linked libraries can be\ncustomized as:\n\n  $ make examples \\\n       CC=icc CFLAGS=\"-O2\" CLIBS=\"-lstdc++ -lm\" LDLIBS=\"-lirc\"\n\n\nUsing LAPACK (optional)\n-----------------------\n\nThe routines which diagonalize the mass matrices by default use the\nalgorithms provided by Eigen.  However, the routines provided by\nLAPACK can be used alternatively.  In order to make use of the LAPACK\nroutines one has to pass `ENABLE_LAPACK=1' to the make command.  In\naddition, the LAPACK and BLAS libraries to be linked have to be passed\nin the `LDFLAGS' variable to the make command:\n\n  $ make ENABLE_LAPACK=1 LDLIBS=\"-llapack -lblas\"\n\n\nRunning GM2Calc\n===============\n\nGM2Calc can be run with (i) either an SLHA interface or with (ii) a\ncustom GM2Calc interface (similar to SLHA, but different definition of\ninput parameters).  See `bin/gm2calc.x --help' for all options.\n\nExample using the SLHA interface:\n\n  $ bin/gm2calc.x --slha-input-file=input/example.slha\n\nor\n\n  $ cat input/example.slha | bin/gm2calc.x --slha-input-file=-\n\nExample using the GM2Calc interface:\n\n  $ bin/gm2calc.x --gm2calc-input-file=input/example.gm2\n\nor\n\n  $ cat input/example.gm2 | bin/gm2calc.x --gm2calc-input-file=-\n\n\nSLHA interface\n==============\n\nWhen the input parameters are provided in SLHA-compliant form, GM2Calc\nreads the input parameters from the following blocks:\n\n * SMINPUTS: Standard Model fermion masses, W and Z pole masses,\n   alpha_s(MZ)\n\n * MASS: pole masses of SUSY particles, W pole mass.  If the W pole\n   mass is given in MASS[24], then this value will be used instead of\n   the W pole mass given in SMINPUTS[9].\n\n * HMIX: tan(beta), mu parameter, renormalization scale\n\n * AU, AD, AE: soft-breaking trilinear couplings, renormalization\n   scale\n\n * MSOFT: soft-breaking gaugino masses, soft-breaking sfermion masses,\n   renormalization scale\n\n * GM2CalcInput: alpha_em(MZ), alpha_em in the Thomson limit\n\n\nGM2Calc interface\n=================\n\nWhen the input parameters are provided in GM2Calc specific form,\nGM2Calc reads the input parameters from the following blocks:\n\n * SMINPUTS: Standard Model fermion masses, W and Z pole masses,\n   alpha_s(MZ)\n\n * GM2CalcInput: renormalization scale, alpha_em(MZ), alpha_em in the\n   Thomson limit, tan(beta), mu parameter, soft-breaking gaugino\n   masses, soft-breaking Bmu parameter, soft-breaking sfermion masses,\n   soft-breaking trilinear couplings\n\n\nC/C++ interface\n===============\n\nGM2Calc provides a C and a C++ interface.  To use the routines of\nGM2Calc in a C++ program, the following C++ header files have to be\nincluded:\n\n   src/gm2_1loop.hpp\n   src/gm2_2loop.hpp\n   src/gm2_uncertainty.hpp\n   src/MSSMNoFV_onshell.hpp\n\nTo use the routines of GM2Calc in a C program, the following C header\nfiles have to be included:\n\n   src/gm2_1loop.h\n   src/gm2_2loop.h\n   src/gm2_uncertainty.h\n   src/MSSMNoFV_onshell.h\n\nPlease refer to the content of these header files for a precise\ndefinition of all interface functions.  The C/C++ example programs\nalso serve as an illustration of the interface routines.\n\n\nConfiguration options\n=====================\n\nThe calculation of a_mu can be controlled in the GM2CalcConfig block.\n\n * GM2CalcConfig[0]: output format (0 ... 4)\n\n   0: minimal output (a single number)\n   1: detailed (a detailed output of the various contributions)\n   2: write the value of (g-2)/2 into LOWEN block, entry 6\n   3: write the value of (g-2)/2 into SPhenoLowEnergy block, entry 21\n   4: write the value of (g-2)/2 into GM2CalcOutput block, entry 0\n\n * GM2CalcConfig[1]: loop order of the calculation (0, 1 or 2)\n\n * GM2CalcConfig[2]: disable/enable tan(beta) resummation (0 or 1)\n\n * GM2CalcConfig[3]: force output even if physical problem has occured\n   (0 or 1).  WARNING: The result might not be trusted if a problem\n   has occured!\n\n * GM2CalcConfig[4]: disable/enable verbose output (0 or 1).\n\n * GM2CalcConfig[5]: disable/enable uncertainty estimation (0 or 1).\n\n   Depending on the chosen output format, GM2CalcConfig[0], the\n   uncertainty is written\n\n   as a sigle number to stdout    in case of minimal output,\n   to the first line              in case of detailed output,\n   to GM2CalcOutput[1]            otherwise.\n\n\nSource code documentation\n=========================\n\nGM2Calc uses Doxygen to document the source code.  The complete source\ncode documentation can be generated by running\n\n  $ make doc\n\nAfterwards, the generated HTML pages can be found in doc/html/ and can\nbe openend with your favourite web browser, e.g.\n\n  $ firefox doc/html/index.html\n", 
  "read_at": 1462546013, 
  "description": "Calculates MSSM contributions to the anomalous magnetic moment of the muon", 
  "id": 40178166
}