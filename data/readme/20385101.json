{
  "read_at": 1462547184, 
  "description": "Fourier PCA code from http://arxiv.org/abs/1306.5825", 
  "README.TXT": "\nlibFPCA\nFourier PCA package\n(Ying Xiao)\n\nIntroduction:\n\nThis library contains a variety of Matlab implementations for the\nFourier PCA algorithm. The main paper describing the approach can be\nfound at http://arxiv.org/abs/1306.5825\n\nCode Structure:\n\nThe code is roughly divided into three parts:\n\n1) Algorithms\nI implemented a number of versions of the FPCA algorithms, in\nascending order of sophistication.\n\nNaiveFPCA: Fully determined. This is essentially the 2nd order version\nfrom the paper. This finds complex eigenvalues.\n\nInverseFPCA: Fully determined. This takes the product of two matrices\nMN^-1 and then goes after the eigenvalues.\n\nRecursiveFPCA: Fully determined. This recursively goes after the best\neigenvalue gaps of the real part of the derivative and then partitions\nthe problem into subproblems over a smaller subspace.\n\nunderdeterminedFPCA: Underdetermined. This is the analogue of\nInverseFPCA for the underdetermined case. We use this as a major\nbuilding block for the tests below. In many ways, this is our\ncanonical underdetermined algorithm.\n\nFPCA: Underdetermined. This is a recursive partitioning version, much\nlike RecursiveFPCA except for the underdetermined case.\n\n2) Evaluation metrics \nThere are a number of functions here that we use to evaluate our\nalgorithm. The major one is basisEvaluation which constructs the best\npossible bijection, in terms of inner product squared (whether it's a\nscalar or Hermitian product is inconsequential now) between two bases\nand then rearranges the second basis to be similar to the first\none. We use a max weight bipartite matching code here.\n\nAs auxiliary functions, we also have realProjections for individual\ncomplex vectors which uses a SVD to compute the best possible rotation\nin the complex plane (multiplication by exp(i \\theta) to move as much\nof the norm onto the real line as possible. Similary, getRankOnes does\nthis for a \"squared\" vector.\n\n3) Test\nThe test scripts show you how to run the algorithms -- they are\nessentially the unit tests for this package. Of particular interest is\ntestMain which runs the underdeterminedFPCA algorithm, note that\ngetRankOnes and evaluation metrics have to be run separately from the\nFPCA algorithm.\n\nUsage:\n\nRun testMain and see what happens. Really, this contains the most\ninteresting part of the package.\n\nThoughts:\n\nThe implementation of the underdetermined code is highly nontrivial,\nand its performance is actually a little disappointing. The best\nperformance I seem to be able to extract out of it is to iterate the\nFPCA underdetermined algorithm many times, and then to run k-means\nclustering on the output columns to obtain the most accurate estimates\nof the columns.\n", 
  "id": 20385101
}