{
  "read_at": 1462554822, 
  "description": "Unbiased random samplers for distance-hereditary and three-leaf power graphs", 
  "README.md": "# unlabeled-graph-samplers\n## Unbiased random samplers for distance-hereditary and three-leaf power graphs (Paper: http://arxiv.org/abs/1511.06037)\n\n### Samplers (Maple)\n\n#### Dependencies\n\n  * **combstruct** package\n  * **proba_laws.mpl** (standard probability laws - by Carine Pivoteau)\n\n#### Usage\n\n##### distance_hereditary_sampler.mpl\n\n  ```\n  gen_dh_cycle_pointed(z)\n  ```\n  For a parameter 0 < *z* <= 0.137935, this function randomly samples a\n  (split-tree of a) distance-hereditary graph. This is a Boltzmann sampler for\n  cycle-pointed three-leaf power graphs, hence an unbiased sampler for\n  three-leaf power graphs.\n\n  By unbiased, we mean that for a fixed value of *z*, any two graphs of the same\n  size (size = number of leaves in the split tree = number of vertices in the\n  graph) are equally likely to be drawn.\n\n##### three_leaf_power_sampler.mpl\n\n  ```\n  gen_3lp_cycle_pointed(z)\n  ```\n  For a parameter 0 < *z* <= 0.259845, this function randomly samples a\n  (split-tree of a) three-leaf power graph. This is a Boltzmann sampler for\n  cycle-pointed three-leaf power graphs, hence an unbiased sampler for\n  three-leaf power graphs.\n\n##### sampler_tools.mpl\n\n  ```\n  radius(poly)\n  ```\n  Returns an estimate of the radius of convergence of the formal power series\n  given by *poly* (see the first two .mpl files for the various power series\n  that are used).\n\n  ```\n  num_Z(split_tree_string)\n  num_cliques(split_tree_string)\n  num_stars(split_tree_string)\n  ```\n  Return the number of leaf, clique, and star nodes (respectively) in the\n  specified *split_tree_string*.\n\n#### Examples\n\n```\nread \"distance_hereditary_sampler.mpl\":\n\nradius(dhpoly);\n>> 0.1379358986434849\n\ndistance_hereditary_sample:=gen_dh_cycle_pointed(0.137935);\n>> distance_herediary_sample:=SR(K(SC(SX(SC(Z, Z, SX(Z, SX(K(Z, SX(Z, Z)),\n\t\t\t\t\t\t\t  SX(SC(Z, SX(Z, Z, Z)), Z)))), SX(Z, Z)),\n\t\t\t\t\t\t\t  SX(SC(SX(Z, Z), Z), Z)), Z), Z, Z)\n\nnum_Z(distance_hereditary_sample);\n>> 20\nnum_cliques(distance_hereditary_sample);\n>> 2\nnum_stars(distance_hereditary_sample);\n>> 14\n```\n\n```\nread \"three_leaf_power_sampler.mpl\":\n\nradius(threelppoly);\n>> 0.259845809752822\n\nthree_leaf_power_sample:=gen_3lp_cycle_pointed(0.259845);\n>> three_leaf_power_sample:=KR(SX(Z, SX(Z, SX(Z, SX(Z, Z, SX(Z, SX(Z, SX(Z,\n\t\t\t\t\t\t\tSX(K(Z, Z, Z, Z), Z), SX(Z, SX(Z, SX(Z, SX(Z,\n\t\t\t\t\t\t\tSX(Z, SX(Z, SX(Z, SX(K(Z, Z, Z, Z), K(Z, Z))), Z),\n\t\t\t\t\t\t\tK(Z, Z)), Z)), SX(Z, Z, Z)))))))), SX(Z, SX(Z, Z),\n\t\t\t\t\t\t\tK(Z, Z, Z))), K(Z, Z)), Z, Z)\n\nnum_Z(three_leaf_power_sample);\n>> 43\nnum_cliques(three_leaf_power_sample);\n>> 7\nnum_stars(three_leaf_power_sample);\n>> 19\n```\n\n#### Notes\n\n  * The namespaces of **distance_hereditary_sampler.mpl** and\n    **three_leaf_power_sampler.mpl** overlap, so one should not read them into\n    the same Maple worksheet.\n\n  * **sampler_tools.mpl** is read by each of the first two .mpl files, so it is\n    not necessary to read it as well.\n\n---\n\n### Split-tree string representation\n\n#### Semantics\n\nSymbol | Meaning\n:----: | :------\n**Z** | A leaf node\n**KR** | A clique root (can only appear as the root of the tree)\n**SR** | A star root (can only appear as the root of the tree)\n**K** | A clique that has been entered from another node\n**SX** | A star that has been entered from another node at one of its extremities\n**SC** | A star that has been entered from another node at its center\ne(**A**, **B**) | An edge that connects nodes **A** and **B**\n**A**(**B<sub>1</sub>**, ..., **B<sub>k</sub>**) | **B<sub>1</sub>**, ..., **B<sub>k</sub>** are neighbors of **A** (if **A** is **SR** or **SX**, then **B<sub>1</sub>** is connected to the center of **A**)\n\n#### Examples\n\nSymbol | Meaning\n:----: | :------\n**Z**(**K**(**Z**, **Z**)) | A leaf node connected to a clique that has two other leaves as neighbors\n**KR**(**Z**, **Z**, **Z**) | A clique with three leaves as neighbors (same as previous)\n**Z**(**SC**(**Z**, **Z**)) | A leaf connected to the center of a star that has two leaves as its extremities\n**Z**(**SX**(**Z**, **Z**)) | A leaf connected to an extremity of a star that has a leaf as its center and a leaf as its other extremity (same as previous)\ne(**SC**(**Z**, **Z**), **SC**(**Z**, **Z**)) | An edge joining two star nodes at their centers, each of which has two leaves as its extremities\n**SR**(**K**(**Z**, **Z**), **Z**, **Z**, **Z**) | A star with three leaves as its extremities and whose center is connected to a clique with two other leaves as neighbors\n\n---\n\n### Parsing module (Python)\n\n#### Dependencies\n\n  * **networkx**\n  * **matplotlib.pyplot**\n\n\n#### Usage\n\n##### split_tree.py\n\n  ```\n  string_to_split_tree(split_tree_string)\n  ```\n  Returns an internal split_tree representation corresponding to the specified\n  distance-hereditary or three-leaf power *split_tree_string* (typically this\n  string will have been returned by the distance-hereditary or three-leaf\n  power samplers described above).\n\n  ```\n  split_tree_to_graph(split_tree)\n  ```\n  Returns the graph, expressed as a list of adjacencies over a set {1, ..., n}\n  of vertices, corresponding to the specified internal *split_tree*\n  representation (typically computed by the previous function).\n\n  ```\n  draw_graph(graph)\n  ```\n  Draws the specified *graph* to the screen.\n\n  ```\n  export_graph(graph, file_path)\n  ```\n  Exports a drawing of the *graph* to the specified *file_path*. An format\n  extension may be provided from the list: *bmp, eps, gif, jpeg, jpg, pdf, pgf,\n  png, ps, raw, rgba, svg, svgz, tif, tiff*; otherwise, *png* is used by\n  default.\n\n\n#### Example\n\n```python\nfrom split_tree import *\nsplit_tree = string_to_split_tree(\"SR(K(SC(Z, SX(K(SC(Z, Z), Z), \\\n\t\t\t\t\t\t\t\t  K(Z, Z, Z))), Z), Z, Z)\")\ngraph = split_tree_to_graph(split_tree)\ndraw_graph(graph) # Draws graph to the screen\nexport_graph(graph, \"drawing.pdf\") # Saves drawing of graph in pdf format\nexport_graph(graph, \"drawing.png\") # Saves drawing of graph in png format\nexport_graph(graph, \"drawing\") # If no format is specified, defaults to png\n```\n", 
  "id": 46154616
}