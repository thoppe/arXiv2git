{
  "README": "\n********************************************************************************\n\n                         openQCD Simulation Programs\n\n********************************************************************************\n\n\nLATTICE THEORY\n\nCurrently the common features of the supported lattice theories are the\nfollowing:\n\n* 4-dimensional hypercubic lattice with even sizes N0xN1xN2xN3. Open or\n  Schrodinger functional boundary conditions in the time direction, periodic\n  boundary conditions in the space directions.\n\n* SU(3) gauge group, plaquette plus rectangle gauge action (Wilson,\n  Symanzik, Iwasaki,...).\n\n* O(a)-improved Wilson quarks in the fundamental representation of the gauge\n  group. Among the supported quark multiplets are the classical ones (pure\n  gauge, two-flavour theory, 2+1 and 2+1+1 flavour QCD), but doublets with a\n  twisted mass and theories with many doublets, for example, are also\n  supported.\n\nThe O(a) improvement includes the boundary counterterms required for the\nimprovement of the correlation functions near the boundaries of the lattice in\nthe time direction.\n\n\nSIMULATION ALGORITHM\n\nThe simulation program is based on the HMC algorithm. For the heavier quarks,\na version of the RHMC algorithm is used. Several advanced techniques are\nimplemented that can be configured at run time:\n\n* Nested hierarchical integrators for the molecular-dynamics equations, based\n  on any combination of the leapfrog, 2nd order Omelyan-Mryglod-Folk (OMF) and\n  4th order OMF elementary integrators, are supported.\n\n* Twisted-mass Hasenbusch frequency splitting, with any number of factors \n  and twisted masses. Optionally with even-odd preconditioning.\n\n* Twisted-mass determinant reweighting.\n\n* Deflation acceleration and chronological solver along the molecular-dynamics\n  trajectories.\n\n* A choice of solvers (CGNE, MSCG, SAP+GCR, deflated SAP+GCR) for the Dirac\n  equation, separately configurable for each force component and\n  pseudo-fermion action.\n\nAll of these depend on a number of parameters, whose values are passed to the\nsimulation program together with those of the action parameters (coupling\nconstants, quark masses, etc.) through a structured input parameter file.\n\n\nPROGRAM FEATURES\n\nAll programs parallelize in 0,1,2,3 or 4 dimensions, depending on what is\nspecified at compilation time. They are highly optimized for machines with\ncurrent Intel or AMD processors, but will run correctly on any system that\ncomplies with the ISO C89 (formerly ANSI C) and the MPI 1.2 standards.\n\nFor the purpose of testing and code development, the programs can also\nbe run on a desktop or laptop computer. All what is needed for this is\na compliant C compiler and a local MPI installation such as Open MPI.\n\n\nDOCUMENTATION\n\nThe simulation program has a modular form, with strict prototyping and a\nminimal use of external variables. Each program file contains a small number\nof externally accessible functions whose functionality is described at the top\nof the file.\n\nThe data layout is explained in various README files and detailed instructions\nare given on how to run the main programs. A set of further documentation\nfiles are included in the doc directory, where the normalization conventions,\nthe chosen algorithms and other important program elements are described.\n\n\nCOMPILATION\n\nThe compilation of the programs requires an ISO C89 compliant compiler and a\ncompatible MPI installation that complies with the MPI standard 1.2 (or later). \n\nIn the main and devel directories, a GNU-style Makefile is included which\ncompiles and links the programs (just type \"make\" to compile everything; \"make\nclean\" removes the files generated by \"make\"). The compiler options can be set\nby editing the CFLAGS line in the Makefiles.\n\nThe Makefiles assume that the following environment variables are set:\n\n  GCC             GNU C compiler command [Example: /usr/bin/gcc].\n\n  MPI_HOME        MPI home directory [Example: /usr/lib64/mpi/gcc/openmpi]. \n                  The mpicc command used is the one in $MPI_HOME/mpicc and \n                  the MPI libraries are expected in $MPI_HOME/lib. \n\n  MPI_INCLUDE     Directory where the mpi.h file is to be found.\n\nAll programs are then compiled using the $MPI_HOME/bin/mpicc command. The\ncompiler options that can be set in the CFLAGS line depend on which C compiler\nthe mpicc command invokes (the GCC compiler command is only used to resolve\nthe dependencies on the include files).\n\n\nSSE/AVX ACCELERATION\n\nCurrent Intel and AMD processors are able to perform arithmetic operations on\nshort vectors of floating-point numbers in just one or two machine cycles,\nusing SSE and/or AVX instructions. The arithmetic performed by these\ninstructions fully complies with the IEEE 754 standard.\n\nMany programs in the module directories include SSE and AVX inline-assembly\ncode. On 64bit systems, and if the GNU or Intel C compiler is used, the code\ncan be activated by setting the compiler flags -Dx64 and -DAVX, respectively. \nIn addition, SSE prefetch instructions will be used if one of the following\noptions is specified:\n\n  -DP4     Assume that prefetch instructions fetch 128 bytes at a time\n           (Pentium 4 and related Xeons).\n\n  -DPM     Assume that prefetch instructions fetch 64 bytes at a time\n           (Athlon, Opteron, Pentium M, Core, Core 2 and related Xeons).\n\n  -DP3     Assume that prefetch instructions fetch 32 bytes at a time\n           (Pentium III).\n\nThese options have an effect only if -Dx64 or -DAVX is set. The option\n-DAVX implies -Dx64.\n\nOn recent x86-64 machines with AMD Opteron or Intel Xeon processors, for \nexample, the recommended compiler flags are\n\n    -std=c89 -O -mno-avx -DAVX -DPM\n\nFor older machines that do not support the AVX instruction set, the \nrecommended flags are \n\n    -std=c89 -O -mno-avx -Dx64 -DPM\n\nMore aggressive optimization levels such as -O2 and -O3 tend to have little\neffect on the execution speed of the programs, but the risk of generating\nwrong code is higher. \n\nAVX instructions and the option -mno-avx may not be known to old versions\nof the compilers, in which case one is limited to SSE accelerations with\noption string -std=c89 -O -Dx64 -DPM.\n\n\nDEBUGGING FLAGS\n\nFor troubleshooting and parameter tuning, it may helpful to switch on some\ndebugging flags at compilation time. The simulation program then prints a\ndetailed report to the log file on the progress made in specified subprogram.\n\nThe available flags are:\n\n-DCGNE_DBG         CGNE solver.\n\n-DFGCR_DBG         GCR solver.\n\n-FGCR4VD_DBG       GCR solver for the little Dirac equation.\n\n-DMSCG_DBG         MSCG solver.\n\n-DDFL_MODES_DBG    Deflation subspace generation.\n\n-DMDINT_DBG        Integration of the molecular-dynamics equations.\n\n-DRWRAT_DBG        Computation of the rational function reweighting\n                   factor.\n\n\nRUNNING A SIMULATION\n\nThe simulation programs reside in the directory \"main\". For each program,\nthere is a README file in this directory which describes the program\nfunctionality and its parameters. \n\nRunning a simulation for the first time requires its parameters to be chosen,\nwhich tends to be a non-trivial task. The syntax of the input parameter files\nand the meaning of the various parameters is described in some detail in\nmain/README.infiles and doc/parms.pdf. Examples of parameter files that were\nused in actual simulations are contained in the directory main/examples.\n\n\nEXPORTED FIELD FORMAT\n\nThe field configurations generated in the course of a simulation are written\nto disk in a machine-independent format (see modules/misc/archive.c).\nIndependently of the machine endianness, the fields are written in little\nendian format. A byte-reordering is therefore not required when machines with\ndifferent endianness are used for the simulation and the physics analysis.\n\n\nAUTHORS\n\nThe initial release of the openQCD package was written by Martin Luscher and\nStefan Schaefer. Support for Schrodinger functional boundary conditions was\nadded by John Bulava. Several modules were taken over from the DD-HMC program\ntree, which includes contributions from Luigi Del Debbio, Leonardo Giusti,\nBjorn Leder and Filippo Palombi.\n\n\nLICENSE\n\nThe software may be used under the terms of the GNU General Public Licence\n(GPL).\n\n\nBUG REPORTS\n\nIf a bug is discovered, please send a report to <luscher@mail.cern.ch>.\n\n", 
  "read_at": 1462551830, 
  "description": "Mass and twisted-mass reweighting based on openQCD", 
  "README.md": "\n********************************************************************************\n      \n            mrw - Mass and twisted-mass reweighting based on openQCD\n\n********************************************************************************\n\nmrw is a module for the openQCD software package \n(http://luscher.web.cern.ch/luscher/openQCD/)\nproviding additional reweighting factors for mass and twisted-mass\nreweighting. Details on the stochastic estimator used in the module can\nbe found in \n\n      J. Finkenrath, F. Knechtli and B. Leder, \"One flavor mass reweighting in lattice QCD,\"\n      Nucl. Phys. B 877, 441 (2013), arXiv:1306.3962 [hep-lat]\n\nThe latest release is based on openQCD-1.2.\n\n\n      FEATURES\n\n- openQCD reweighting type I and II (even-odd preconditioned) with interpolation\n- factorization with non-equidistant interpolations\n- mass reweighting with twisted-mass term only on even sites\n- isospin mass reweighting\n- strange quark mass reweighting (simultaneous reweighting of light and strange quark mass)\n- several check routines for all parts of the module\n\n\n      DESCRIPTION OF THE MODULE\n\nThe module adds two new directories (modules/mrw and devel/mrw) and a new main \nprogram (main/ms5.c) to the original\nopenQCD package. A full list of the added and changed files:\n\nmodules/mrw\ndevel/mrw\nmain/ms5.c\nmain/ms5.in\nmain/ms5_test_*.in\nmain/Makefile\ndoc/mrw.pdf\ninclude/mrw.h\nCHANGELOG.mrw\n\nDetails on the implementation of the reweighting factors can be found\nin the documentation included in the package (doc/mrw.pdf). For\ncompilation and linking with MPI see the openQCD part of the package.\n\n\n      KNOWN ISSUES OF THE LATEST RELEASE\n\n- some check routines (check4 and check9) are statistical with limited \nsignificance\n- no even-odd preconditioning for mass reweighting yet\n- file format of ms5.dat differs from the one of ms1.dat\n\n\n      OCTAVE ANALYSIS SCRIPTS\n\nOctave/Matlab scripts for importing the output of the programs can be downloaded from \nhttp://www-ai.math.uni-wuppertal.de/~leder/mrw/octave-mrw-1.0.tar.gz.\nScripts for plotting and simple analysis are included as\nwell. The scripts assume Octave version 3.8 or newer.\n\n\n      AUTHORS\n\nThe mrw module was written by Bjorn Leder (leder(at)math.uni-wuppertal.de) and \nJacob Finkenrath. The\nOctave/Matlab scripts have been written by Bjorn Leder. For the authors\nof openQCD see its webpage http://luscher.web.cern.ch/luscher/openQCD/.\n\n\n      LICENSE\n\nThe software may be used under the terms of the GNU General Public License (GPL)", 
  "id": 29529292
}