{
  "read_at": 1462553038, 
  "description": "A tool to verify PGP keyserver behaviour.", 
  "README.md": "Keywatch\n========\n**Automatic key change detection for PGP**\n\nPublic keyservers are inherently untrustworthy: anyone can submit a key,\nand even servers such as the PGP Global Directory, which provides email\nverification, can only be as secure as the email verification process.\n\nIdeally we would all use the web of trust, however this does not occur\nvery often in practice.  If PGP is used at all, in many cases it is used\nwith a key downloaded directly from a website, or&mdash;more\nprecariously&mdash;from a keyserver.\n\nKeywatch audits these sources in order to prevent malicious users or\nservers from providing incorrect keys.  Should a malicious user\nsubmit a new key to the keyserver, the true user will be made\naware.  A unique feature of Keywatch is the ability to act against\nmalicious _keyservers_ as well.  By connecting to the keyserver\nusing Tor, it is possible to provide a conditional guarantee that the\nkeyserver is not selectively providing different keys to different\nusers.\n\nKeywatch is provided under the MIT licence.\n\n**Note:** A preprint is available, describing the approach in more detail\nalong with the security guarantees that it provides:\n\nL. J. Gunn, A. Allison, D. Abbott,\n_Verifying public keys without trust:\n    how anonymity can guarantee data integrity_,\n<a href=\"http://arxiv.org/abs/1602.03316\">ArXiV:1602.03316</a>, 2016.\n\nSynopsis\n--------\n\nConnect to a keyserver via specified proxy and watch for changes in the\nfingerprint of the first response.\n```\n  keywatchd [-s keyserver] [-p proxy] <email> ...\n```\nBy default, keywatchd will use Tor to connect to\nhttp://jirk5u4osbsr34t5.onion:11371,\na hidden service that provides access to the SKS Keyserver network.\nThis is defensive design decision to ensure that a bug cannot cause the\nsite to be resolved directly, without the use of Tor.\n\nYou can test the program by putting a sample HKP response onto a local\nwebserver at `/pks/lookup`:\n```\ninfo:1:2\npub:F3E3889185605B82933D6180D28891D2136B33B0:1:4096:1445547156::\nuid:Lachlan Gunn <lachlan@twopif.net>:1449261644::\nuid:Lachlan Gunn <lachlan.gunn@adelaide.edu.au>:1449262330::\npub:AE75A45641CD9EC9FF468912B679F3623E7B3C06:1:4096:1433251694::\nuid:Lachlan Gunn <lachlan@twopif.net>:1433254056::\nuid:Lachlan Gunn <lachlan.gunn@adelaide.edu.au>:1433254020::\n```\nThen, run `keywatchd` as follows:\n```\nkeywatchd -s http://localhost -p \"\" lachlan@twopif.net\n```\nSometime during the first twenty seconds, it will load the file from\nthe web server.  Now modify the fingerprint in the first key somehow\n(we have added an initial 'X').  The next time the key is downloaded,\nthe changed fingerprint will be detected and the new key will be printed:\n```\n> keywatchd -s http://localhost -p \"\" lachlan@twopif.net\nKey: XF3E3889185605B82933D6180D28891D2136B33B0\n    UID: Lachlan Gunn <lachlan@twopif.net>\n    UID: Lachlan Gunn <lachlan.gunn@adelaide.edu.au>\n```\nThis will continue until the file is returned to its original state.\n\nBuilding keywatchd\n------------------\n\nKeywatch is written in C++, and requires the following libraries:\n  - Boost (including program_options),\n  - libcurl, and\n  - Crypto++.\n\nThe build infrastructure uses CMake, and has been tested on Linux with both\nGCC and clang.  It can be built as follows:\n```\nkeywatch > mkdir build && cd build && cmake .. && make\n-- The C compiler identification is GNU 4.8.4\n-- The CXX compiler identification is GNU 4.8.4\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Boost version: 1.55.0\n-- Found the following Boost libraries:\n--   program_options\n-- Found CURL: /usr/lib/x86_64-linux-gnu/libcurl.so (found version \"7.35.0\") \n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/lachlan/source/keywatchd/build\nScanning dependencies of target keywatchd\n[ 16%] Building CXX object src/CMakeFiles/keywatchd.dir/main.cc.o\n[ 33%] Building CXX object src/CMakeFiles/keywatchd.dir/keys/keys.cc.o\n[ 50%] Building CXX object src/CMakeFiles/keywatchd.dir/hkp/hkp.cc.o\n[ 66%] Building CXX object src/CMakeFiles/keywatchd.dir/hkp/parser.cc.o\n[ 83%] Building CXX object src/CMakeFiles/keywatchd.dir/daemon/config.cc.o\n[100%] Building CXX object src/CMakeFiles/keywatchd.dir/daemon/worker.cc.o\nLinking CXX executable keywatchd\n[100%] Built target keywatchd\n```\nThe resulting executable is `build/src/keywatchd`.\n", 
  "id": 50178835
}