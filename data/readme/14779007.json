{
  "read_at": 1462556798, 
  "description": "Arc-flow Vector Packing Solver (VPSolver)", 
  "README.md": "## Arc-flow Vector Packing Solver (VPSolver)\n\nCopyright (C) 2013-2016, Filipe Brandao  \nFaculdade de Ciencias, Universidade do Porto  \nPorto, Portugal. All rights reserved. E-mail: <fdabrandao@dcc.fc.up.pt>.\n\n---\n[VPSolver](https://github.com/fdabrandao/vpsolver) is a multiple-choice vector packing solver based on an arc-flow formulation with graph compression (see, e.g., [\\[1\\]](#references)). VPSolver generates very strong models (equivalent to Gilmore and Gomory's) that can be solved using general-purpose mixed-integer programming\nsolvers such as Gurobi and GLPK (see, e.g., [\\[2\\]](#references) and [\\[3\\]](#references)). VPSolver does not explicitly require any MIP\nsolver in particular, though a good  MIP solver may be necessary for solving\nlarge models.\n\n![](https://img.shields.io/badge/license-AGPLv3+-blue.svg)\n[![](https://travis-ci.org/fdabrandao/vpsolver.svg?branch=master)](https://travis-ci.org/fdabrandao/vpsolver)\n[![Coverage Status](https://coveralls.io/repos/github/fdabrandao/vpsolver/badge.svg?branch=develop)](https://coveralls.io/github/fdabrandao/vpsolver)\n\nFor modelling other problems easily, VPSolver includes a [Python API](https://github.com/fdabrandao/vpsolver/wiki/Python-API), a modelling toolbox ([PyMPL](https://github.com/fdabrandao/pympl/)), and a [Web App](#vpsolver-web-app). VPSolver has been successfully compiled and run on Linux and Mac OS X. VPSolver also runs on a large variety of platforms including Windows using a [Docker container](#docker).\n\nFor more details, please refer to the [project wiki](https://github.com/fdabrandao/vpsolver/wiki) or to the [manual](https://github.com/fdabrandao/vpsolver/tree/master/docs/vpsolver_manual.pdf).\n\n#### Repositories\n* Project Homepage: <http://vpsolver.dcc.fc.up.pt>\n* GiHub repository: <https://github.com/fdabrandao/vpsolver>\n* BitBucket repository: <https://bitbucket.org/fdabrandao/vpsolver>\n* Docker repository: <https://hub.docker.com/r/fdabrandao/vpsolver>\n* PyPI repository: <https://pypi.python.org/pypi/pyvpsolver>\n\n## Requirements\n#### Mandatory\n\n* MIP solver: Gurobi, CPLEX, GLPK, COIN-OR, SCIP, lp_solve, ...  \n* UNIX-like operating system or a UNIX-like environment such as [Cygwin](https://www.cygwin.com/)\n* `g++ >= 4.8`; `make >= 3.0`; `bash >= 3.0`\n      \n#### Optional\n\nFor the [Python API](https://github.com/fdabrandao/vpsolver/wiki/Python-API) and [Web App](#vpsolver-web-app):\n\n* `python-2.7` or `python-3.x`\n* `python-pip`\n* `python-dev`\n* `glpk-utils`\n \n#### Platforms\nIt has been successfully compiled and run on the following platforms:\n\n* **Linux**\n* **Mac OS X**\n* On a large variety of platforms including **Windows** using a [Docker container](#docker)\n* It also runs on **Windows** using [Cygwin](https://www.cygwin.com/) (a Unix-like environment and command-line interface)\n\n## Setup\nWithout the python interface: \n\n```bash\n$ ./configure CXXFLAGS=\"\" LDFLAGS=\"\"\n$ make\n$ sudo make install\n```\nNote: In order to compile only the components that do not require Gurobi, use `./configure GUROBI_HOME=\"\"`. In order to link the optional components that require Gurobi, the environment variable `$GUROBI_HOME` must be set, and some additional flags may also need to be set (e.g., `./configure LDFLAGS=\"-L${GUROBI_HOME}/lib/ -lgurobi_stdc++\"`).\n\nWith the python interface: \n\n```\n$ pip install -r requirements.txt\n$ pip install . --upgrade\n$ cd examples; py.test -v --cov pyvpsolver\n```\nOr simply install from the [repository](https://pypi.python.org/pypi/pyvpsolver):\n\n```\n$ pip install pyvpsolver\n```\nNote: use `pip install pyvpsolver --pre` if you want to install the latest pre-release.\n\n## Python interface\n\nThe python interface is fully compatible with both python 2 and 3. \n\nJupyter Notebooks for a quick introduction:\n\n* [Simple VBP example](https://github.com/fdabrandao/vpsolver/blob/master/examples/notebooks/example_vbp.ipynb)\n* [Simple MVP example](https://github.com/fdabrandao/vpsolver/blob/master/examples/notebooks/example_mvp.ipynb)\n\n## Docker\n\n### Docker Setup\n\nDocker is an open platform for building, shipping and running applications. Docker allows VPSolver to run on a large variety of platforms with very little effort.\n\nInstall Docker [[Docker installation instructions](https://docs.docker.com/installation/)].\n\nOption 1: simply `pull` VPSolver from Docker repository (without building):\n\n```bash\n$ docker pull fdabrandao/vpsolver\n```\n\nOption 2: `clone` VPSolver and `build` locally:\n\n```bash \n$ git clone https://github.com/fdabrandao/vpsolver.git vpsolver\n$ docker build -t fdabrandao/vpsolver vpsolver\n```\n\n### Usage\nDirectly using the command line interface:\n\n```bash\n$ docker run --rm -it fdabrandao/vpsolver bash\nroot@55d14f6b6f32:~# source venv2.7/bin/activate # load a virtualenv\n(venv2.7)root@55d14f6b6f32:~# python examples/vpsolver/example_vbp.py\n...\n```\n\nor through the VPSolver Web App (example URL: `http://172.17.0.60:5555/`):\n\n```bash\n$ docker run --rm -it -p 5555 fdabrandao/vpsolver \neth0      Link encap:Ethernet  HWaddr 02:42:ac:11:00:3c  \n          inet addr:172.17.0.60  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::42:acff:fe11:3c/64 Scope:Link\n          UP BROADCAST  MTU:1500  Metric:1\n          RX packets:2 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:2 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:168 (168.0 B)  TX bytes:180 (180.0 B)\n\nURL: http://172.17.0.60:5555/\n * Running on http://0.0.0.0:5555/\n...\n```\n\nFor more details, please refer to the [project wiki](https://github.com/fdabrandao/vpsolver/wiki/docker).\n\n## VPSolver Web App\nVPSolver includes a Web App that can be started as follows:\n\n```\n$ python -m pyvpsolver.webapp.app\n```\n\nThe Web App can then be accessed on a web browser at `http://127.0.0.1:5555/`.\n\n## VPSolver binaries\n\n* `$ bin/vpsolver intance.vbp/.mvp`: solves a multiple-choice vector packing instance using the method described in [\\[1\\]](#references). Note: requires Gurobi 5.0.0 or superior;\n* `$ bin/vbp2afg instance.vbp/.mvp graph.afg`: builds an arc-flow graph `graph.afg` for `instance.vbp/.mvp`;\n* `$ bin/afg2mps graph.afg model.mps`: creates a MPS model `model.mps` for `graph.afg`;\n* `$ bin/afg2lp graph.afg model.lp`: creates a LP model `model.lp` for `graph.afg`;\n* `$ bin/vbpsol graph.afg vars.sol`: extracts a vector packing solution from an arc-flow solution `vars.sol` associated with the graph `graph.afg`.\n\nUsage:\n\n```\n# 1. Build the arc-flow graph graph.afg for example.vbp:  \n$ bin/vbp2afg example.vbp graph.afg  \n# 2. Convert the arc-flow graph into a .mps file model.mps:  \n$ bin/afg2mps graph.afg model.mps  \n# 3. Solve the MIP model and store the solution in vars.sol:\n$ scritps/vpsolver_gurobi.sh --mps model.mps --wsol vars.sol\n# 4. Extract the vector packing solution:  \n$ bin/vbpsol graph.afg vars.sol  \n```\n\nFor more details, please refer to the [manual](https://github.com/fdabrandao/vpsolver/tree/master/docs/vpsolver_manual.pdf).\n\n## VPSolver Scripts\nVPSolver includes several scripts for solving arc-flow models using different\nsolvers:\n\n* `scripts/vpsolver_gurobi.sh`: Gurobi\n* `scripts/vpsolver_cplex.sh`: IBM CPLEX\n* `scripts/vpsolver_coinor.sh`: COIN-OR CBC\n* `scripts/vpsolver_glpk.sh`: GLPK\n* `scripts/vpsolver_scip.sh`: SCIP\n* `scripts/vpsolver_lpsolve.sh`: lp_solve\n\nUsage:\n\n```bash\n$ vpsolver_X.sh --vbp/--mvp instance.vbp/.mvp\n$ vpsolver_X.sh --afg graph.afg\n$ vpsolver_X.sh --mps/--lp model.mps/.lp\n$ vpsolver_X.sh --mps/--lp model.mps/.lp --afg graph.afg\n```\n\nFor more details, please refer to the [manual](https://github.com/fdabrandao/vpsolver/tree/master/docs/vpsolver_manual.pdf).\n\n## Folders\n\n* [docs](https://github.com/fdabrandao/vpsolver/tree/develop/docs): documentation\n* [scripts](https://github.com/fdabrandao/vpsolver/tree/develop/scripts): vpsolver scripts\n* [src](https://github.com/fdabrandao/vpsolver/tree/develop/src): vpsolver source code in C++\n* [pyvpsolver](https://github.com/fdabrandao/vpsolver/tree/develop/pyvpsolver): pyvpsolver source code in Python\n* [examples](https://github.com/fdabrandao/vpsolver/tree/develop/examples): vpsolver and pyvpsolver examples\n* [examples/notebooks](https://github.com/fdabrandao/vpsolver/tree/develop/examples/notebooks/): jupyter notebooks\n* [docs/reports](https://github.com/fdabrandao/vpsolver/tree/develop/examples/docs/reports/): technical reports on the underlying algorithms and models\n\n## References\n\nThe current solution method is described in:\n\n* [1] Brandao, F. (2016). _VPSolver 3: Multiple-choice Vector Packing Solver._ [arXiv:1602.04876](http://arxiv.org/abs/1602.04876).\n\nVPSolver was proposed in:\n\n* [2] Brandao, F. and Pedroso, J. P. (2016). _Bin packing and related problems: General arc-flow formulation with graph compression._\nComputers & Operations Research, 69:56 - 67.  \ndoi: [http://dx.doi.org/10.1016/j.cor.2015.11.009](http://dx.doi.org/10.1016/j.cor.2015.11.009).\n\n* [3] Brandao, F. and Pedroso, J. P. (2013). _Bin Packing and Related Problems:\nGeneral Arc-flow Formulation with Graph Compression._ Technical Report\nDCC-2013-08, Faculdade de Ciencias da Universidade do Porto, Universidade do\nPorto, Portugal. [arXiv:1310.6887](http://arxiv.org/abs/1310.6887).\n\nSee also:\n\n* [4] Brandao, F. and Pedroso, J. P. (2013). _Multiple-choice Vector Bin Packing:\nArc-flow Formulation with Graph Compression._ Technical Report DCC-2013-13,\nFaculdade de Ciencias da Universidade do Porto, Universidade do Porto, Portugal. [arXiv:1312.3836](http://arxiv.org/abs/1312.3836)\n\n* [5] Brandao, F. and Pedroso, J. P. (2013). _Cutting Stock with Binary Patterns:\nArc-flow Formulation with Graph Compression._ Technical Report DCC-2013-09,\nFaculdade de Ciencias da Universidade do Porto, Universidade do Porto, Portugal. [arXiv:1502.02899](http://arxiv.org/abs/1502.02899).\n\n* [6] Brandao, F. (2012). _Bin Packing and Related Problems: Pattern-Based Approaches._ \nMaster's thesis, Faculdade de Ciencias da Universidade do Porto, Portugal.\n\n* [7] Computational results on several benchmark test data sets:  \nhttp://www.dcc.fc.up.pt/~fdabrandao/research/vpsolver/results/\n\n\n***\nCopyright (c) 2013-2016 [Filipe Brandao](http://www.dcc.fc.up.pt/~fdabrandao/) <[fdabrandao@dcc.fc.up.pt](mailto:fdabrandao@dcc.fc.up.pt)>. All rights reserved.", 
  "id": 14779007
}