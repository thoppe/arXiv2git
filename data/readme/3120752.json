{
  "read_at": 1462543261, 
  "description": "A WGS de novo assembler based on the FMD-index for large genomes", 
  "README.md": "Getting Started\n---------------\n\n1. Acquire the fermi source code from the [download page][5] and compile with\n   (`x.y` is the version number):\n\n   \t\ttar -jxf fermi-x.y.tar.bz2\n   \t\t(cd fermi-x.y; make)\n\n2. Download the *C. elegans* reads [SRR065390][8] from SRA and convert to the\n   FASTQ format with the `fastq-dump` tool from the [SRA toolkit][9]:\n\n   \t\tfastq-dump --split-spot SRR065390.lite.sra\n\n3. Perform assembly with:\n\n   \t\tfermi-x.y/run-fermi.pl -ct8 -e fermi-x.y/fermi SRR065390.fastq > fmdef.mak\n   \t\tmake -f fmdef.mak -j 8 > fmdef.log 2>&1\n\nThe entire procedure takes about several hours with 8 CPU cores. File\n`fmdef.p5.fq.gz` contains the final contigs. The quality line in the FASTQ-like\nformat gives the per-base read depth computed from non-redundant\nerror-corrected reads.\n\n\nFAQ\n---\n\n####0. In addition to this FAQ, are there any other documentations?\n\nThe algorithms and evaluations are described in the [fermi paper][11] with the\n[preprint][1] available from arXiv. The detailed usage is documented in the\n[fermi manpage][2].\n\n####1. What is fermi?\n\nFermi is a de novo assembler for Illumina reads from whole-genome short-gun\nsequencing. It also provides tools for error correction, sequence-to-read\nalignment and comparison between read sets. It uses the FMD-index, a novel\ncompressed data structure, as the key data representation.\n\n####2. How is fermi different from other assemblers?\n\nFor small genomes, fermi is not much different from other assemblers in terms\nof performance. Nonetheless, for mammalian genomes, fermi is one of the few\nchoices that can do the job in a relatively small memory footprint. It can\nassemble 35-fold human data in 90GB shared memory with an overall similar\ncontiguity and accuracy to other mainstream assemblers.\n\nIn addition to de novo assembly, fermi ultimately aims to preserve all the\ninformation in the raw reads, in particular heterozygous events. SNP and INDEL\ncalling can be achieved by aligning the fermi unitigs to the reference genome\nand has been shown to be advantageous over other approaches in some aspects (see\nalso the [preprint][1]).\n\n####3. What is the relationship between fermi and SGA?\n\nFermi is substantially influenced by [SGA][3]. It follows a similar workflow,\nincluding the idea of contrasting read sets.  On the other hand, the internal\nimplementation of fermi is distinct from that of SGA. Fermi is based on a novel\ndata structure and uses different algorithms for almost every step. As to the\nend results, fermi has a similar performance to SGA for features shared between\nthem, and is arguably easier to use. In all, both fermi and SGA are viable\noptions for de novo assembly and contrast variant calling.\n\n####4. Are there release notes?\n\nYes, below this FAQ.\n\n####5. How to install fermi?\n\nYou may clone the [fermi github repository][4] to get the latest source code,\nor acquire the source code of stable releases from the [download page][5]. You\ncan compile fermi by invoking `make` in the source code directory. The only\nlibrary dependency is [zlib][6]. After compilation, you may copy `fermi` and\n`run-fermi.pl` to your `PATH` or simply use the executables in the source code\ndirectory.\n\n####6. How to run fermi for de novo assembly?\n\nThe [fermi manpage][2] shows an example. Briefly, if you have Illumina\nshort-insert paired-end reads `read1.fq.gz` and `read2.fq.gz`, you can run:\n\n    run-fermi.pl -Pe ./fermi -t12 read1.fq.gz read2.fq.gz > fmdef.mak\n    make -f fmdef.mak -j 12\n\nto perform assembly using 12 CPU cores. The `fmdef.p5.fq.gz` gives the final\ncontigs using the paired-end information. If you only want to correct errors,\nyou may use\n\n    make -f fmdef.mak -j 12 fmdef.ec.fq.gz\n\n####7. What is contrast assembly? How can I use it?\n\nThe idea of contrast assembly was first proposed and has been implemented by\nJared Simpson and Richard Durbin. It works by assembling reads containing a\nk-mer that is present in one set of reads but absent from another set of reads.\nThe contigs we get this way will span variants, including mutations and\nbreakpoints, only seen from the first set of reads. Mapping the contigs back\nprovides the locations. This approach directly focuses on the differences\nbetween read sets and helps to reduce the complication of structural variations\nand the imperfect reference genome.\n\nTo perform contrast assembly given two sets of reads, we need to generate\nerror-corrected FMD-index for both sets, use the `contrast` command to pick\nreads unique to one read set, and then apply the `sub` command to extract\nthe FMD-index of selected reads. The following shows an example:\n\n\t# error correction for sample1; paired reads are interleaved in sample1.fq.gz\n    run-fermi.pl -ct12 -p sample1 sample1.fq.gz > sample1.mak\n\tmake -f sample1.mak -j 12 sample1.ec.rank\n\t# error correction for sample2\n    run-fermi.pl -ct12 -p sample2 sample2.fq.gz > sample2.mak\n\tmake -f sample2.mak -j 12 sample2.ec.rank\n\t# identify reads unique to one sample\n\tfermi contrast -t12 sample1.ec.fmd sample1.ec.rank sample1.sub sample2.ec.fmd sample2.ec.rank sample2.sub\n\t# generate the FMD-index for reads unique to sample1; similar applied to sample2\n\tfermi sub -t12 sample1.fmd sample1.sub > sample1.sub.fmd\n\t# assemble unique reads and perform graph simplification\n\tfermi unitig -l50 -t12 sample1.sub.fmd > sample1.sub.mag\n\tfermi clean -CA -l150 sample1.sub.mag > sample1-cleaned.sub.mag\n\nWe can align the resulting contigs `sample1-cleaned.sub.mag` to the reference\ngenome with [BWA-SW][10] to pinpoint the mutations and break points. It is also\npossible to compare one sample to multiple samples by intersecting selected\nreads using the `bitand` command and then performs the assembly.\n\nA more convenient command-line interface is likely to be added in future.\n\n\n[1]: http://arxiv.org/abs/1203.6364\n[2]: https://github.com/lh3/fermi/blob/master/fermi.1\n[3]: https://github.com/jts/sga\n[4]: https://github.com/lh3/fermi\n[5]: https://github.com/lh3/fermi/downloads\n[6]: http://zlib.net/\n[7]: https://github.com/lh3/fermi/blob/master/README.md\n[8]: http://www.ncbi.nlm.nih.gov/sra?term=SRR065390\n[9]: http://www.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?cmd=show&f=software&m=software&s=software\n[10]: https://github.com/lh3/bwa\n[11]: http://bioinformatics.oxfordjournals.org/content/28/14/1838\n[12]: http://www.springerlink.com/content/b55m96rj18462152/\n\nRelease Notes\n-------------\n\n###Release 1.1 (2012-08-22)\n\nThis release reduces the runtime of assembly by introducing an improved version\nof the [BCR algorithm][12] for constructing FMD-index and by deploying\nheuristics in error correction. On two human data sets, fermi takes 30% less\nwall-clock time and produces slightly longer scaftigs, though at the cost of\nmarginally increased assembly break points in comparison to release 1.0.\n\n(1.1: 2012-08-22, r744)\n\n###Release 1.0 (2012-04-09)\n\nThis is the first public release of fermi, a de novo assembler and analysis\ntool for whole-genome shot-gun sequencing. Source code can be acquired from\nthe [download page][5]. Please read the [manpage][2] and the [FAQ][7] for\ndetailed usage.\n\n(1.0: 2012-04-09, r700)\n", 
  "id": 3120752
}