{
  "read_at": 1462557208, 
  "description": "Data-driven Uncertainty Sets for the JuMPeR framework", 
  "README.md": "# Data-Driven Uncertainty Sets (DDUS)\n\n[![Build Status](https://travis-ci.org/vgupta1/DDUS.jl.svg?branch=master)](https://travis-ci.org/vgupta1/DDUS.jl)\n[![Coverage Status](https://coveralls.io/repos/vgupta1/DDUS.jl/badge.svg)](https://coveralls.io/r/vgupta1/DDUS.jl)\n\n**DDUS.jl** contains implementations of many of the uncertainty sets from the paper\n\n> [D. Bertsimas, V. Gupta and N. Kallus, \"Data-Driven Robust Optimization\"](http://arxiv.org/abs/1401.0212)\n\nas \"oracles\" for use with [JuMPeR.jl](https://github.com/IainNZ/JuMPeR.jl). Specifically, we have implemented oracles for each of the following sets (Eq. numbers refer to previous paper):\n- UM (Eq. 28) \n- UI (Eq. 18) \n- UFB (Eq. 23)\n- UCS (Eq. 35)\n- ULCX (Eq. 31)\n\nMore sets and additional features may be added going forward based on interest.  For the most part, our implementations closely follow the descriptions in the paper.  In a few places, we have opted for simpler, approximate formulae for improved efficiency where we felt the difference in practice was negligible.\n\n## Usage\n\nAll our sets support JuMPeR's cutting plane functionality, but do not provide reformulations. Reformulation may be supported in the future based on need.  A typical invocation might be:\n\n```julia\nusing JuMPeR, DDUSets\ndd_oracle = UCSOracle(data, epsilon, alpha)\n\nm = RobustModel()\n# ... Build up the model #\n\nsetDefaultOracle!(m, dd_oracle)  # to uses this oracle for all constraints\n```\n\nor \n``` julia\naddConstraint(m, x[1] * us[1] + xs[2] * us[2] <= 5, dd_oracle)  #only for this one constraint\n```\n\nMost oracles support a simple constructor as above, taking in the data and two parameters, `epsilon` and `alpha`.  Some oracles require additional information, such as the support of the uncertainty. (When in doubt, check the source file for the interface marked \"preferred interface.\") \n\nAll oracles assume that the data are given with each example in a row, and each column representing one component of the uncertainty.  **The ordering of the columns is important** and is assumed to correspond to the index of the uncertainties in the optimization model.  (That is, u[1] is the uncertainty whose data is given by column 1.)  The parameters epsilon and alpha are described in detail the above paper, and roughly control the probability of infeasibility and the decision maker's tolerance for ambiguity, respectively.  See also below on tuning these parameters.\n\nAlthough fairly robust (*punny*), the preferred constructors for oracles can sometimes be slow because they perform all of the data analysis required to construct the set.  When possible, one can reuse the same oracle for multiple constraints.  When solving different optimization problems in a loop, one can also used the specialized constructors for the oracles to customize the data analysis step.  (See the comments in the source code.)\n\n## Examples\nThe examples folder contains a simple portfolio allocation demonstrating typical usage of the sets.  \n\n## Choosing the \"Right\" set and Tuning Epsilon and Alpha in Practice\nThe cited paper proves that under certain conditions, each of the above sets satisfy a strong probabilistic guarantee.  In applications where it is important to have a provable guarantee on feasibility, those results can help guide the choice of set. \n\nMany applications, however, do not require provably good performance, just *practically* good performance.  In these cases, we suggest following the suggestions in Section 10 of the paper, and choosing the set, epsilon and alpha via cross-validation.  Some generic functionality to do this will (hopefully) be added soon.  In the meantime, ????? in the examples folder illustrates one possible cross-validation scheme for a particular example.  \n\n## Citation\nIf you find this package useful, please consider citing the above paper as:\n\n```bibtex\n@ARTICLE{2014arXiv1401.0212B,\n   author = {Bertsimas, D. and Gupta, V. and Kallus, N.},\n   title = \"{Data-Driven Robust Optimization}\",\n   journal = {ArXiv e-prints},\n   eprint = {1401.0212},\n   keywords = {Mathematics - Optimization and Control},\n   year = 2014,\n   month = dec,\n   url = {http://arxiv.org/abs/1401.0212},\n}\n```\n", 
  "id": 28521970
}