{
  "read_at": 1462547456, 
  "description": "Repository containing the examples and scripts for the experiments belonging to the paper \"Improved Static Analysis of Parameterised Boolean Equation Systems using Control Flow Reconstruction\"", 
  "README.md": "pbesstategraph-experiments\n==========================\nRepository containing the examples and scripts for the experiments belonging to\nthe paper \"Liveness Analysis for Parameterised Boolean Equation Systems\".\n\nUsage\n-----\n\nExperiments should be run iff the mcrl2 binaries are in the PATH. Then invoke\n\n    python run.py [-v[v[v[...]]]] [-jN] [-dpn] [yamlfile]\n\nto run the experiments. More v's means more verbose. For `N` a positive\ninteger, `N` jobs are started if `-jN` is given. If a filename is given on\nthe command line, results are put in that file. The file is not \noverwritten: if it already exists, then the experiments for which it\ncontains results are skipped.\nIf the option `-d` is provided than only some small cases are run to debug the scripts. With the optio `-p` only those cases reported in the paper are run. If the option `-n` is provided, no timing or memory limits are imposed.\n\nFor convenience, the script `run.sh` is provided that sets the path consistently with the output of `install_prerequisites.sh`, see below. Using that script, the experiments as reported in the paper can be reproduced using\n\n    ./run.sh\n\nInstallation\n------------\n\nTo execute the script make sure that PyYAML is installed. The mCRL2 tools can be installed using:\n\n    ./install_prequisites.sh\n    \nThis installs revision 13039 of the mCRL2 toolset.\n\nDescription\n-----------\nTwo classes of problems are considered in this script: modelchecking problems and equivalence checking problems. The experiment consists of two phases. First, a PBES has to be obtained, and then tranformations are applied to the PBES, and the size of the underlying BES is determined.\n\n### Obtaining a PBES\nFor each of the instances a number of tools is executed, as described below.\n\n#### Model checking\nThe code that performs the steps below can be found in `cases/modelchecking/__init__.py`\n\nBy default, we produce a `.lps` file from `<case>.mcrl2` using:\n\n    mcrl22lps -nf <case>.mcrl2 <case>.lps\n\nThe specifications for which this default is used are:\n\n* Lossy buffer\n* ABP\n* ABP(BW)\n* Hesselink\n* SWP\n* BRP\n* Elevator\n* Leader\n* Hanoi\n\nFor some specifications we first unfold some some data types using `lpsparunfold`, in this case we perform the following sequence of commands:\n\n    mcrl22lps -nf <case>.mcrl2 | lpsparunfold -l -nN -sSORT | lpsconstelm -ct > <case>.lps\n\nwhere `N` is the number of times parameters of `SORT` need to be unfolded. Exactly which sort is unfolded depends on the case we consider. Sometimes lpsparunfold is repeated for multiple sorts. The specifications for which `lpsparunfold` is applied (values of `SORT` and `N` are included) are:\n\n* Onebit (`Frame`, `10`)\n* CCP (`Region`, `10`)\n* CABP (`Frame`, `10`)\n* Par (`Frame`, `10`)\n* Lift (Correct) (`Message`, `10`)\n* Lift (Incorrect) (`Message`, `10`)\n* IEEE1994 (`SIG_TUPLE`, `10`) (`SIGNAL`, `10`), (`LDC`, `10`), (`LDI`, `10`)\n* Othello (`Board`, height) (`Row`, width)\n* Clobber (`Board`, height) (`Row`, width)\n* Snake (`Board`, height) (`Row`, width)\n* Hex (`Board`, height) (`Row`, width)\n* Domineering (`Board`, height) (`Row`, width)\n\nFinally, for each `.lps` file, and for each property to be considered, we generate a `.pbes` file using the command:\n\n    lps2pbes -f <property>.mcf <case>.lps <case>.<property>.pbes\n\n#### Equivalence checking\nThe code that performs the steps below can be found in `cases/equivchecking/__init__.py`\n\nIn equivalence checking we check each instance for strong bisimilarity, branching bisimilarity, branching similarity and weak bisimilarity. For this we consider two classes of specification.\n\nFirst we consider all combinations of the following communication protocols:\n\n* Buffer\n* ABP\n* ABP(BW)\n* CABP\n* Par\n* SWP\n* Onebit\n\nThe `.lps` for these cases are obtained using:\n\n    mcrl22lps -nf <spec>.mcrl2 | lpsparunfold -l -sFrame -n10 | lpsparunfold -l -sFrameOB -n10 | lpsconstelm > <spec>.lps\n\nSecond we consider the equivalence of a specification of Hesselink's register with its implementation.\n\nThe `.lps` for this case is obtained using:\n\n    mcrl22lps -nf <spec>.mcrl2 <spec>.lps\n\nFinally, for each pair of LPSs, and each equivalence, the PBES is obtained as follows:\n\n    lpsbisim2pbes -b<equivalence> <spec1>.lps <spec2>.lps <spec1>_<spec2>_<equivalence>.pbes\n\n### Transforming PBES and obtaining results\nThe common code performing the steps described below can be found in `cases/__init__.py`. This consists of three phases.\n\n#### Preprocessing\nFirst, every PBES is preprocessed using the following commands:\n\n    pbesrewr -psimplify <name>.pbes | pbesrewr -pquantifier-one-point | pbesrewr -psimplify > <simplified>.pbes\n\n#### Reduction\n\nDepending on the reduction, the following commands are performed.\n\n##### Original\n\n    pbesconstelm <simplified>.pbes <reduced>.pbes\n\n##### Parelm\n\n    pbesparelm <simplified>.pbes | pbesconstelm > <reduced>.pbes\n\n##### Stategraph (local algorithm)\n\n    pbesstategraph <simplified>.pbes -l1 | pbesconstelm > <reduced>.pbes\n\n##### Stategraph (global algorithm)\n\nFor the global algorithm of stategraph we resort to an older version of the mCRL2 toolset:\n\n    pbesstategraph <simplified>.pbes -s1 -l0 | pbesconstelm > <reduced>.pbes\n\n#### Instantiation & solving\n\nFinally, the PBES is instantiated and solved, and the statistics about the generated BES are collected.\n\n    pbes2bes -rjittyc <reduced>.pbes <reduced>.bes\n    besinfo <reduced>.bes\n    pbespgsolve -srecursive <reduced>.bes\n\nResults\n-------\n\nThe full results reported in the ATVA 2014 submission J.J.A. Keiren,\nJ.W. Wesselink and T.A.C. Willemse. \"Liveness Analysis for Parameterised Boolean Equation Systems\" can be found in `results/20140427/run.yaml`. Those results were obtained using r12637 of the mCRL2 toolset. A version of the paper with full proofs, and a selection of the results is also available from [arXiv:1304.6482v2 [cs.LO]](http://arxiv.org/abs/1304.6482v2)\n\nThe results reported in [arXiv:1304.6482v1 [cs.LO]](http://arxiv.org/abs/1304.6482v1) can\nbe found in `results/20130316/run.yaml`, those results were obtained using r11682 of the mCRL2 toolset. In this version only the global version of pbesstategraph was available.\n", 
  "id": 6540870
}