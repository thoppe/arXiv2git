{
  "id": 13574420, 
  "README.old": "/* An implementation of the Weisfeiler-Leman graph stabilization procedure \n    see http://arxiv.org/abs/1002.1921 and references therein for more info.\n    Complete sources can be found at http://www.ntu.edu.sg/home/dima/software.htm\n\n    Copyright (C) 1989-2010 Luitpold Babel, Dmitrii V. Pasechnik, and others \n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n    Authors can be contacted at\n    e-mail: Luitpold Babel <luitpold.babel@unibw.de>\n    e-mail: Dmitrii Pasechnik <dimpase@gmail.com>                          */\n\n(this file is outdated!)\nPROGRAM IMPLEMENTATIONS OF THE WEISFEILER-LEMAN ALGORITHM\n\n   You have access to two different implementations:\n       1. the program   stabil\n       2. the program   stcol\n\n   For detailed descriptions of both programs we refer\n   to the technical report by\n       L. Babel, I.V. Chuvaeva, M. Klin, D.V. Pasechnik:\n         'Algebraic Combinatorics in Mathematical Chemistry.\n                   Methods and Algorithms.\n       II. Program Implementation of the Weisfeiler-Leman Algorithm'\n\n   The programs compute the cellular algebra W which is generated\n   by the adjacency matrix of any colored directed or undirected graph Gamma.\n \n   Both programs are written in programming language C\n   and will work on Unix computers. \n\n   In the current versions, the programs stabil and stcol will handle \n   graphs with up to 200 respectively 150 vertices.\n\nINPUT:\n   \n   Both programs require as an input a file containing the\n   following information about the colored graph Gamma:\n       1. Number of colors\n       2. Number of vertices\n       3. Adjacency matrix of Gamma\n\n   Note that the colors have to be denoted consecutively by 0,1,2,...\n   Furthermore, the colors in the diagonal of the adjacency matrix \n   have to be different from the other colors.\n   \n   Feasibility of the input is checked within the programs in \n   a preprocessing routine.\n\nOUTPUT:\n\n   Both programs provide as an output the following information\n   about the computed cellular algebra W:\n       1. Number of colors\n       2. Number of cells\n       3. Adjacency matrix of W\n\n\nHOW TO RUN THE PROGRAM:\n \n       Start the program with the command\n               stabil input_file                     resp.\n                stcol input_file \n\n\nEXAMPLE:\n \n     1. Create a file called input_file \n        (or choose any other name for this file)\n        which contains data like the following:\n\n\n              4\n              8\n              3  1  2  1  1  2  2  2\n              1  0  1  2  2  1  2  2\n              2  1  3  1  2  2  1  2\n              1  2  1  0  2  2  2  1 \n              1  2  2  2  0  1  2  1\n              2  1  2  2  1  3  1  2\n              2  2  1  2  2  1  0  1\n              2  2  2  1  1  2  1  3\n\n     \n     2. Run the program using the command:\n\n\n              stabil input_file \n\n\n     3. The output on the screen is:\n\n\n              number of colors: 8\n\n              number of cells:  2\n\n              adjacency matrix of the cellular algebra:\n\n              0   2   3   2   2   3   5   3 \n              4   1   4   6   6   4   6   7 \n              3   2   0   2   5   3   2   3 \n              4   6   4   1   6   7   6   4 \n              4   6   7   6   1   4   6   4 \n              3   2   3   5   2   0   2   3 \n              7   6   4   6   6   4   1   4 \n              3   5   3   2   2   3   2   0 \n\n\n\n    _____________________________________________________\n\n", 
  "read_at": 1462550512, 
  "README.rst": ".. This README file is formatted using the lightweight markup language\n   reStructuredText. Vanilla reStructuredText does not support inline\n   LaTeX, so converting this file to HTML using docutils is not\n   ideal. Try using `Sphinx <http://sphinx.pocoo.org/>`_ instead.\n.. default-role:: math\n\n\n\nwlrefine\n========\n\nThis is an implementation of the Weisfeiler-Leman algorithm for\nfinding the coarsest *cellular* refinement of a given partition of the\nCartesian square of a finite set. This is implemented fundamentally in\na matrix paradigm, where the finite set is realized as `\\{0, 2, \\dots,\nn-1\\}`, and the Cartesian square of the finite set is realized as the\nset of entries of an `n \\times n` matrix.\n\n\n\nLicense\n-------\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at\nyour option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\nGeneral Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\n\nAuthors\n-------\n\n- Keshav Kini <kini@member.ams.org> is me, the maintainer of this\n  collection and author of a revised STABIL implementation, found in\n  ``STABIL.c`` and associated files.\n\n- Luitpold Babel <luitpold.babel@unibw.de> and Dmitrii Pasechnik\n  <dimpase@gmail.com> are the authors of the original implementation\n  (found in ``rus2.c``) of the STABIL algorithm described in [Bab]_,\n  from which description it departs somewhat. Luitpold Babel is also\n  an author of the algorithm STABCOL and wrote the implementation of\n  it found in ``ger1.c``. Both of these files were made available by\n  Dmitrii Pasechnik at <http://bit.ly/aVF0BH> under the terms of the\n  GNU General Public License v3.\n\n\n\nBackground\n----------\n\nA *cellular* partition of the Cartesian square of a finite set\n`\\Omega` is one satisfying two conditions:\n\n1. Given any three (not necessarily distinct) classes `i`, `j`, and\n   `k` in the partition, the number of `w` in `\\Omega` such that\n   `(u,w)` is in class `i` and `(w,v)` is in class `j` is constant\n   over all pairs `(u,v)` in class `k`.\n2. Every class `i` in the partition must have a corresponding class\n   `j` such that `(u,v)` is in class `i` if and only if `(v,u)` is in\n   class `j`, for all `u` and `v` in `\\Omega`.\n\nThis definition can be restated in terms of the matrix paradigm\ndescribed above. Supposing there are `d` many distinct entries in the\nmatrix `A` representing the partition, create a series of matrices\n`A_i` with `0 < i \\leq d`, such that the entries of `A_i` are equal to\n`1` where the corresponding entries of `A` were equal to `i`, and `0`\nwhere the entries of `A` were anything other than `i`. (Note that\n`\\sum_{i=1}^d A_i` is the identity matrix.)\n\nThen the partition represented by `A` is *cellular* if and only if for\nevery `i` and `j`, the matrix `A_i A_j` can be written as a linear\ncombination of the various `A_k` for `0 < k \\leq d`. The coefficients\nmay come from any ring containing the integers, but it can be shown\nthat circumstances of these matrices then force the coefficients to be\nnonnegative integers. This means that the matrices `A_i` form the\nbasis for a matrix algebra, which is one of the motivations for the\nconcept.\n\nA partition is furthermore called *coherent* if it is cellular and\neach of its classes lies fully on or fully off the diagonal of the\nCartesian square in question. Equivalently in matrix terms, no entries\non the diagonal can be equal to any entries off the diagonal of the\nmatrix representing the partition.\n\n\n\nWeisfeiler-Leman Algorithm\n--------------------------\n\nThe *Weisfeiler-Leman refinement algorithm* accepts as input an\narbitrary partition of the Cartesian square of a finite set\n`\\Omega`. It then finds the coarsest partition which is a refinement\nof the input partition and is also a cellular partition. This exists\nand is unique. The main application of the algorithm is in graph\ntheory, where the Cartesian square of a finite set `V` is viewed as\nthe list of all edges and vertices of the complete graph on the vertex\nset `V`.  A partition of this set is then a coloring of the edges and\nvertices of the complete graph on `V`.\n\nA non-complete graph on `V` can be identified with a coloring of the\ncomplete graph using two colors, \"existent\" and \"non-existent\" for the\nedges, and a third color for the vertices. Then the *automorphism\npartition* of the resulting graph can be defined as the finest\nrefinement of the coloring that is still invariant under all\nautomorphisms of the original graph (i.e. no vertex or edge will\nchange color when the vertex permutation described by a particular\nautomorphism of the graph is applied to the vertex set).\n\nIt is known that the Weisfeiler-Leman refinement of a partition\narising from a graph coloring as described above is a both a\nrefinement of the original coloring and a coarsening of the\nautomorphism partition. The determination of the automorphism\npartition is an important problem in graph theory, and the\nWeisfeiler-Leman refinement can be considered a polynomial-time\napproximation.\n\nFor a more in-depth treatment of how the algorithm works, please refer\nto [Bab]_.\n\n\n\nFiles\n-----\n\nThe files provided in this package are as follows:\n\n- ``LICENSE``: the GNU General Public License v3, under which this\n  code is released.\n- ``Makefile``: the makefile.\n- ``germ1.c``: Luitpold Babel's implementation of the STABCOL\n  algorithm, slightly modified to uniformize how it handles input and\n  output. Builds to ``STABCOL``.\n- ``rus2.c``: Luitpold Babel's and Dmitrii Pasechnik's implementation\n  of the STABIL algorithm, similarly I/O-uniformized. Builds to\n  ``STABIL.old``.\n- ``STABIL.c``, ``STABIL.h``, ``STABIL-tests.h``, ``main.c``: My\n  implementation of the STABIL algorithm based on the above. Various\n  changes/improvements are detailed in the code comment at the\n  beginning of ``STABIL.c``. Builds to ``STABIL``.\n- ``*.in``: input files for STABIL, STABIL.old, and STABCOL.\n- ``wlrefine.pyx``: a Cython file implementing a wrapper for my new\n  STABIL code, which allows it to be called from the Sage mathematical\n  software distribution. It also provides a function which directly\n  interprets a Sage graph (or NetworkX graph).\n- ``README``: this file.\n- ``README.old``: the README that Luitpold Babel and Dmitrii Pasechnik\n  published with their code, for reference.\n\n\n\nUsage\n-----\n\nCommand Line\n************\n\nTo use the command line version of STABIL, run ``make`` in the\ndirectory where you have extracted the files. If you need to use a\ncompiler other than GCC, please edit ``Makefile`` appropriately. An\nexecutable file ``STABIL`` should be produced. You may supply input to\nSTABIL either through stdin or by supplying a pathname on the command\nline as a single argument. The input should be an `n \\times n` square\nmatrix `A` containing `d` distinct entries, specifically `0, \\dots,\nd-1`. The matrix should be supplied in the following form::\n\n    d\n    n\n    ? ? ... ?\n    ? ? ... ?\n    . . .   .\n    . .  .  .\n    . .   . .\n    ? ? ... ?\n\nSee the various ``.in`` files included in this package for\nexamples. After providing STABIL with your input, you need only wait\nfor it to produce the Weisfeiler-Leman refinement of your\npartition. This will be provided in the same format as the input.\n\nSTABIL also has a debug flag that can be set by telling the C\npreprocessor to define \"DEBUG\" before compiling. The provided makefile\nhas a line which will do this for you - simply uncomment the line\nmarked \"Debugging\" and comment the ones marked \"Development\" and\n\"Release\" in order to set the correct CFLAGS variable. When STABIL is\ncompiled with the debug flag set, it will dump a lot of data about the\nrefinement process into stdout. You can of course pipe this to a file\nfor further perusal if you so desire.\n\nIf you would like to use STABIL.old or STABCOL as well, run ``make\nall`` in the directory. The operating procedures for the resulting\nexecutables ``STABIL.old`` and ``STABCOL`` are the same as just\ndescribed. Alternatively, ``make test`` will first run ``make all``\nand then automatically test all three programs using the input file\n``1.in``.\n\nNote that while the Weisfeiler-Leman refinement of a given partition\nis unique, the output of these three programs may differ, because they\nmay number the partition's classes in a different order.\n\nSage\n****\n\nTo use the Cython version of STABIL from the Sage interpreter, simply\ntype ``load \"wlrefine.pyx\"`` from the interpreter prompt, after which\nyou will be able to run the WL and GraphWL functions. For information\nabout how to use them, see the comments in ``wlrefine.pyx`` or type\n``WL?`` or ``GraphWL?`` at the Sage prompt.\n\nI am also exploring other ways to incorporate this code into Sage, but\nthat is beyond the scope of this package.\n\n\n\nReferences\n----------\n\n.. [Bab] L. Babel, I. V. Chuvaeva, M. Klin, D. V. Pasechnik. Program\n   Implementation of the Weisfeiler-Leman Algorithm.  arXiv preprint\n   1002.1921v1 <http://arxiv.org/abs/1002.1921>.\n", 
  "description": "Some old C code for cellular refinement of graphs, based on http://arxiv.org/abs/1002.1921"
}