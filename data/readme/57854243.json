{
  "read_at": 1462556743, 
  "description": "Literate Python implementation of 'A Neural Algorithm of Artistic Style'", 
  "README.md": "# cs6475\\_neural\\_style\n\nThis was a final project for\n[CS6475](http://www.omscs.gatech.edu/cs-6475-computational-photography)\nat Georgia Tech.  Most of the material here is duplicated in\n`final_report.tex` and in the Python notebook.\n\n## Goal\n\nThe goal of this project was to create a literate implementation (as\nin\n[literate programming](https://en.wikipedia.org/wiki/Literate_programming))\nof the algorithm described in the recent paper, (A Neural Algorithm of\nArtistic Style)[http://arxiv.org/abs/1508.06576] by Leon A. Gatys,\nAlexander S. Ecker, and Matthias Bethge.\n\nThe paper is sufficiently well-known by now that it has many\nopen-source and commercial implementations that are quite good:\n\n- https://github.com/jcjohnson/neural-style\n- https://github.com/kaishengtai/neuralart\n- https://github.com/andersbll/neural_artistic_style\n- https://github.com/fzliu/style-transfer\n- https://github.com/woodrush/neural-art-tf\n- https://deepart.io\n\nHowever, I found that many of these lacked clear explanations on why\nthey were implemented how they were.  The hope was that students in\nCS6475 (and maybe\n[CS4495/CS6476](http://www.cc.gatech.edu/~hays/compvision/)) could\nunderstand and use this implementation, starting from their existing\nfamiliarity with Python, NumPy, SciPy, and OpenCV in the algorithms of\ncomputational photography.\n\n## Notebook\n\nThe eventual result was an IPython notebook (via\n[Jupyter](https://jupyter.org/)) which gives a simplified (but still\nfunctional) example of how to actually implement this algorithm with\n[Caffe](http://caffe.berkeleyvision.org/).\n\nThat notebook is available in\n[\"Neural Algorithm of Style\" Notebook.ipynb](./\"Neural Algorithm of\nStyle\" Notebook.ipynb) in this repository.  The conversion of this to\na PDF is available in\n[neural-style-notebook.pdf](./neural-style-notebook.pdf).\n", 
  "id": 57854243
}