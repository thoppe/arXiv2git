{
  "read_at": 1462548988, 
  "description": "Statistical inference of vine copulas", 
  "README.md": "VineCopula\n==========\n\n> Statistical inference of vine copulas\n\n[![Build status Linux](https://travis-ci.org/tnagler/VineCopula.svg?branch=master)](https://travis-ci.org/tnagler/VineCopula)\n[![Windows Build status](http://ci.appveyor.com/api/projects/status/github/tnagler/VineCopula?svg=true)](https://ci.appveyor.com/project/tnagler/VineCopula)\n[![CRAN version](http://www.r-pkg.org/badges/version/VineCopula)](https://cran.r-project.org/web/packages/VineCopula/index.html) \n[![CRAN downloads](http://cranlogs.r-pkg.org/badges/VineCopula)](https://cran.r-project.org/web/packages/VineCopula/index.html)\n\nVine copulas are a flexible class of dependence models consisting of bivariate \nbuilding blocks (see e.g., Aas et al., 2009). You can find a comprehensive \nlist of publications and other materials on [vine-copula.org](http://www.statistics.ma.tum.de/en/research/vine-copula-models/).\n\nThis package is primarily made for the statistical analysis of **vine copula\nmodels**. The package includes tools for parameter estimation, model selection,\nsimulation, goodness-of-fit tests, and visualization. Tools for estimation,\nselection and exploratory data analysis of **bivariate copula** models are also\nprovided. \n\n\nTable of contents\n-----------------\n\n- [How to install](#how-to-install)\n- [Package overview](#package-overview)\n\t- [Bivariate copula modeling: the BiCop-family](#bivariate-copula-modeling-the-bicop-family)\n\t- [Vine copula modeling: the RVine-family](#vine-copula-modeling-the-rvine-family)\n\t- [Additional features](#additional-features)\n\t- [Bivariate copula families](#bivariate-copula-families)\n- [Associated shiny apps](#associated-shiny-apps)\n- [References](#references)\n\n\n------------------------------------------------------------------------\n\n\nHow to install\n--------------\n\n\nYou can install:\n\n-   the stable release on CRAN:\n\n    ``` r\n    install.pacakges(\"VineCopula\")\n    ```\n\n-   the latest development version:\n\n    ``` r\n    devtools::install_github(\"tnagler/VineCopula\")\n    ```\n\n------------------------------------------------------------------------\n\nPackage overview\n----------------\n\nBelow, we list most functions and features you should know about. As usual in \ncopula models, data are assumed to be serially independent and lie in the unit\nhypercube. \n\n### Bivariate copula modeling: the BiCop-family\n\n  * `BiCop`: Creates a bivariate copula by specifying the family and parameters\n    (or Kendall's tau). Returns an object of class `BiCop`. The class has the\n    following methods:\n     \n     * `print`, `summary`: a brief or comprehensive overview of the bivariate\n        copula, respectively. \n            \n     * `plot`, `contour`: surface/perspective and contour plots of the copula\n        density. Possibly coupled with standard normal margins (default for\n        `contour`). \n        \n  * `BiCopSim`: Simulates from a bivariate copula.\n\n  * `BiCopEst`: Estimates parameters of a bivariate copula with a prespecified\n    family. Estimation can be done by maximum likelihood (`method = \"mle\"`) or\n    inversion of the empirical Kendall's tau (`method = \"itau\"`, only available\n    for one-parameter families). Returns an object of class `BiCop`.\n     \n  * `BiCopSelect`: Estimates the parameters of a bivariate copula for a set \n    of families and selects the best fitting model (using either AIC or BIC). \n    Returns an object of class `BiCop`.\n    \n  * `BiCopGofTest`: Goodness-of-Fit tests for bivariate copulas.\n    \n  * `BiCopVuongClarke`: Vuong and Clarke tests for model comparison within a \n    prespecified set of copula families.\n     \n  * `BiCopPar2Tau`, `BiCopTau2Par`, `BiCopPar2Beta`, `BiCopPar2TailDep`: \n    Conversion between dependence measures and parameters (for a given family).\n    Functions are vectorized in all arguments.\n     \n  * Evaluate functions related to a bivariate copula: `BiCopPDF`, `BiCopCDF`, \n    `BiCopDeriv`, `BiCopDeriv2`, `BiCopHfunc`, `BiCopHfuncDeriv`, \n    `BiCopHfuncDeriv2`, `BiCopHinv`. Functions are vectorized in the `family`,\n    `par`, and `par2` arguments. \n    \n  * `BiCopMetaContour`: Contour plots for a bivariate copula. If data is\n    provided, you can create a plot of a kernel estimate of the copula density.\n    In the latter case, we recommed to use the \n    [kdecopula](https://github.com/tnagler/kdecopula) package (Nagler, 2015)\n    which implements state-of-the art kernel smoothers for bivariate copula\n    densities.\n    \n  * `BiCopLambda`, `BiCopKPlot`, `BiCopChiPlot`: Further plot types for the \n    analysis of bivariate copulas.\n    \nFor most functions, you can provide an object of class `BiCop` instead of\nspecifying `family`, `par` and `par2` manually.\n\n\n### Vine copula modeling: the RVine-family\n\n  * `RVineMatrix`: Creates a vine copula model by specifying structure, family\n    and parameter matrices. Such matrices have been introduced by Dissman et al. \n    (2013). Returns an object of class `RVineMatrix`. The class has\n    the following methods:\n    \n    * `plot`: Plots the trees of the the R-vine tree structure. Optionally,\n      you can annotate the edges with pair-copula families and parameters.\n      \n    * `contour`: Creates a matrix of contour plots associated with the\n      pair-copulas.\n\n  * `RVineSim`: Simulates from a vine copula model.\n      \n  * `RVineSeqEst`: Estimates the parameters of a vine copula model with \n    prespecified structure and families.\n    \n  * `RVineCopSelect`: Estimates the parameters and selects the best family for a\n    vine copula model with prespecified structure matrix.\n    \n  * `RVineStructureSelect`: Fits a vine copula model assuming no prior knowledge.\n    It selects the R-vine structure using Dissmann et al. (2013)'s \n    method, estimates parameters for various families, and selects the best \n    family for each pair.\n\n  * `RVineGoFTest`: Goodness-of-Fit tests for a vine copula model (c.f., \n    Schepsmeier, 2013, 2015). Related functions are `RVineGrad`, \n    `RVineHessian`, `RVineStdError`, and `RVinePIT`.\n    \n  * `RVineVoungTest`, `RVineClarkeTest`: Vuong and Clarke tests for comparing\n    two vine copula models.\n\n  * `RVinePar2Tau`, `RVinePar2Beta`: Calculate dependence measures \n    corresponding to a vine copula model.\n    \n  * `RVinePDF`, `RVineLogLik`, `RVineAIC`, `RVineBIC`: Calculate the density, \n    log-likelihood, AIC, and BIC of a vine copula.\n\n\n### Additional features\n  \nThe functions `C2RVine` and `D2RVine` create `RVineMatrix` objects for C- and \nD-vine copulas. This is particularly useful for former users of the CDVine\npackage. \n\nFurthermore, bivariate and vine copula models from this packages can be used\nwith the [copula](https://r-forge.r-project.org/R/?group_id=600) package \n(Hofert et al., 2015). For example, `vineCopula` transforms an `RVineMatrix` \nobject into an object of class `vineCopula` which provides methods for\n`dCopula`, `pCopula`, and `rCopula`. For more details, we refer to the package \nmanual.\n\n\n### Bivariate copula families\n\nIn this package several bivariate copula families are included for bivariate \nand multivariate analysis using vine copulas. It provides \nfunctionality of elliptical (Gaussian and Student-t) as well as Archimedean \n(Clayton, Gumbel, Frank, Joe, BB1, BB6, BB7 and BB8) copulas to cover a large\nrange of dependence patterns. For Archimedean copula families,\nrotated versions are included to cover negative dependence as well.\n\nThe Tawn copula is an asymmetric extension of the Gumbel copula with three \nparameters. For simplicity, we implemented two versions of the Tawn copula with\ntwo parameters each. Each type has one of the asymmetry parameters fixed to 1, \nso that the corresponding copula density is either left- or right-skewed (in\nrelation to the main diagonal). In the manual we will call these two new copulas \n\"Tawn type 1\" and \"Tawn type 2\".\n\nThe following table shows the parameter ranges of bivariate copula families with \nparameters `par` and `par2` and internal coding `family`:\n\n| Copula family                               | `family`     | `par`        | `par2`       |\n|:--------------------------------------------|:-------------|:-------------|:-------------|\n| Gaussian                                    | `1`          | `(-1, 1)`    | -            |\n| Student t                                   | `2`          | `(-1, 1)`    | `(2,Inf)`    |\n| (Survival) Clayton                          | `3`, `13`    | `(0, Inf)`   | -            |\n| Rotated Clayton (90 and 270 degrees)        | `23`, `33`   | `(-Inf, 0)`  | -            |\n| (Survival) Gumbel                           | `4`, `14`    | `[1, Inf)`   | -            |\n| Rotated Gumbel (90 and 270 degrees)         | `24`, `34`   | `(-Inf, -1]` | -            |\n| Frank                                       | `5`          | `R \\ {0}`    | -            |\n| (Survival) Joe                              | `6`, `16`    | `(1, Inf)`   | -            |\n| Rotated Joe (90 and 270 degrees)            | `26`, `36`   | `(-Inf, -1)` | -            |\n| (Survival) Clayton-Gumbel (BB1)             | `7`, `17`    | `(0, Inf)`   | `[1, Inf)`   |\n| Rotated Clayton-Gumbel (90 and 270 degrees) | `27`, `37`   | `(-Inf, 0)`  | `(-Inf, -1]` |\n| (Survival) Joe-Gumbel (BB6)                 | `8`, `18`    | `[1 ,Inf)`   | `[1, Inf)`   |\n| Rotated Joe-Gumbel (90 and 270 degrees)     | `28`, `38`   | `(-Inf, -1]` | `(-Inf, -1]` |\n| (Survival) Joe-Clayton (BB7)                | `9`, `19`    | `[1, Inf)`   | `(0, Inf)`   |\n| Rotated Joe-Clayton (90 and 270 degrees)    | `29`, `39`   | `(-Inf, -1]` | `(-Inf, 0)`  |\n| (Survival) Joe-Frank (BB8)                  | `10`, `20`   | `[1, Inf)`   | `(0, 1]`     |\n| Rotated Joe-Frank (90 and 270 degrees)      | `30`, `40`   | `(-Inf, -1]` | `[-1, 0)`    |\n| (Survival) Tawn type 1                      | `104`, `114` | `[1, Inf)`   | `[0, 1]`     |\n| Rotated Tawn type 1(90 and 270 degrees)     | `124`, `134` | `(-Inf, -1]` | `[0, 1]`     |\n| (Survival) Tawn type 2                      | `204`, `214` | `[1, Inf)`   | `[0, 1]`     |\n| Rotated Tawn type 2 (90 and 270 degrees)    | `224`, `234` | `(-Inf, -1]` | `[0, 1]`     |\n\n\n------------------------------------------------------------------------\n\nAssociated shiny apps\n---------------------\n\n### Copulatheque\nThis small shiny app illustrates a couple of bivariate copula families \nimplemented in the [copula](http://cran.r-project.org/web/packages/copula/index.html), [VineCopula](http://cran.r-project.org/web/packages/VineCopula/index.html) and [spcopula](http://r-forge.r-project.org/projects/spcopula/) R packages. Density\nand pairs plots are drawn as well as Kendall's tau and tail dependence \ncoefficients.  \nAuthor: Benedikt Graler (Universtity of Munster) \n\nhttp://ifgi.uni-muenster.de/~b_grae02/indexCopulatheque.html\n\n\n### rvinegraph\nThis small shiny app enables the user to draw nice tree plots of an R-Vine\ncopula model using the package \n[d3Network](https://cran.r-project.org/package=d3Network). Models have to be\nset up locally in an `RVineMatrix` object and uploaded as .RData file. The page\nis still under construction.  \nAuthor: Ulf Schepsmeier\n\nhttps://rvinegraph.shinyapps.io/rvinegraph\n\n------------------------------------------------------------------------\n\nReferences\n----------\n\nAas, K., C. Czado, A. Frigessi, and H. Bakken (2009). Pair-copula constructions of multiple dependence. Insurance: Mathematics and Economics 44 (2), 182-198.\n\nBedford, T. and R. M. Cooke (2001). Probability density decomposition for conditionally dependent random variables modeled by vines. Annals of Mathematics and Artificial intelligence 32, 245-268.\n\nBedford, T. and R. M. Cooke (2002). Vines - a new graphical model for dependent random variables. Annals of Statistics 30, 1031-1068.\n\nBrechmann, E. C., C. Czado, and K. Aas (2012). Truncated regular vines in high dimensions with applications to financial data. Canadian Journal of Statistics 40 (1), 68-85.\n\nBrechmann, E. C. and C. Czado (2011). Risk management with high-dimensional vine copulas: An analysis of the Euro Stoxx 50. Statistics & Risk Modeling, 30 (4), 307-342.\n\nBrechmann, E. C. and U. Schepsmeier (2013). Modeling Dependence with C- and D-Vine Copulas: The R Package CDVine. Journal of Statistical Software, 52 (3), 1-27. <http://www.jstatsoft.org/v52/i03/>.\n\nCzado, C., U. Schepsmeier, and A. Min (2012). Maximum likelihood estimation of mixed C-vines with application to exchange rates. Statistical Modelling, 12(3), 229-255.\n\nDissmann, J. F., E. C. Brechmann, C. Czado, and D. Kurowicka (2013). Selecting and estimating regular vine copulae and application to financial returns. Computational Statistics & Data Analysis, 59 (1), 52-69.\n\nEschenburg, P. (2013). Properties of extreme-value copulas Diploma thesis, Technische Universitaet Muenchen <http://mediatum.ub.tum.de/node?id=1145695>.\n\nHofert, M., I. Kojadinovic, M. Maechler, and J. Yan (2015). copula: Multivariate\nDependence with Copulas. R package version 0.999-13 \n<http://CRAN.R-project.org/package=copula>\n\nJoe, H. (1996). Families of m-variate distributions with given margins and m(m-1)/2 bivariate dependence parameters. In L. Rueschendorf, B. Schweizer, and M. D. Taylor (Eds.), Distributions with fixed marginals and related topics, pp. 120-141. Hayward: Institute of Mathematical Statistics.\n\nJoe, H. (1997). Multivariate Models and Dependence Concepts. London: Chapman and Hall.\n\nKnight, W. R. (1966). A computer method for calculating Kendall's tau with ungrouped data. Journal of the American Statistical Association 61 (314), 436-439.\n\nKurowicka, D. and R. M. Cooke (2006). Uncertainty Analysis with High Dimensional Dependence Modelling. Chichester: John Wiley.\n\nKurowicka, D. and H. Joe (Eds.) (2011). Dependence Modeling: Vine Copula Handbook. Singapore: World Scientific Publishing Co.\n\nNelsen, R. (2006). An introduction to copulas. Springer\n\nNagler, T. (2015). kdecopula: Kernel Smoothing for Bivariate Copula Densities. R package\nversion 0.5.0. <http://cran.r-project.org/web/packages/kdecopula>\n\nSchepsmeier, U. and J. Stoeber (2012). Derivatives and Fisher information of bivariate copulas. Statistical Papers, 55 (2), 525-542. <http://link.springer.com/article/10.1007/s00362-013-0498-x>.\n\nSchepsmeier, U. (2013) A goodness-of-fit test for regular vine copula models. Preprint. <http://arxiv.org/abs/1306.0818>.\n\nSchepsmeier, U. (2015) Efficient information based goodness-of-fit tests for vine copula models with fixed margins. Journal of Multivariate Analysis 138, 34-52.\n\nStoeber, J. and U. Schepsmeier (2013). Estimating standard errors in regular vine copula models. Computational Statistics, 28 (6), 2679-2707 <http://link.springer.com/article/10.1007/s00180-013-0423-8>.\n\nWhite, H. (1982) Maximum likelihood estimation of misspecified models, Econometrica, 50, 1-26.\n", 
  "id": 43024505
}