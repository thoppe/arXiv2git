{
  "read_at": 1462551867, 
  "description": "", 
  "README.txt": "KL1p v0.4.2 - A portable C++ compressed sensing library.\nhttp://kl1p.sourceforge.net\n\n\n\n\nTable of contents\n=================\n\n1: General Information\n   1.1: Introduction\n   1.2: Features\n\n2: Installation\n   2.1: Preliminaries\n   2.2: Installation on Linux\n   2.3: Installation on Mac OS X\n   2.4: Installation on MS Windows\n   2.5: Manual installation\n   \n3: Compiling and Linking\n   3.1: Compiling and linking on Linux\n   3.2: Compiling and linking on Mac OS X\n   3.3: Compiling and linking on MS Windows\n   3.4: Examples\n   3.5: Test cases\n   \n4: Documentation\n\n5: Bug Reports\n\n6: Credits\n\n7: License\n\n8: References and Resources\n   8.1: References\n   8.2: Resources\n\n\n\n\n1: General Information\n   ===================\n   \n1.1: Introduction\n     ------------\nKL1p is a portable C++ framework for handling sparse recovery of inverse problems\nof underdetermined linear systems, like in compressed sensing technique (CS). \nIt is distributed under a license that is useful in both open-source \nand proprietary contexts.\n\nThe focus of the KL1p library lies on usability and extendability. Several of the \nmost common CS algorithms are implemented and problem definitions are made through\ncombination of operators. These operators played the same role as matrices \nin linear algebra but are implemented with their equivalent efficient functions \nwhen possible (e.g Fourier matrix implemented with FFT function) \nand new ones can be easily added. This method combines the flexibility of \nthe matricial method with the efficiency of the functional method.\n\nPlease note that KL1p is still in development and is not recommended for \na production environment.\n\n\n1.2: Features\n     --------\t \nCurrently implemented compressed sensing algorithms :\n  - Basis Pursuit [1][2]\n  - Orthogonal Matching Pursuit (OMP) [3]\n  - Regularized Orthogonal Matching Pursuit (ROMP) [4]\n  - Compressive Sampling Matching Pursuit (CoSaMP) [5]\n  - Subspace Pursuit [6]\n  - Smoothed L0 (SL0) [7]\n  - Approximate Message Passing (AMP) [8]\n  - Expectation Maximization Belief Propagation (EMBP) [9][10]\n  \nCurrently implemented operators :\n  - Random matrices (normal and uniform random).\n  - Fourier transformation.\n  - Discrete Cosine transformation.\n  - Walsh-Hadamard transformation.\n  - Daubechies Wavelets transformation.  \n  - Combination of operators through addition, multiplication, concatenation, ...\n  - Seeding matrices [9] (some special block tridiagonal sensing matrices used in conjunction \n    with EMBP algorithm to outperform the Donoho-Tanner phase transition). \n  - Some common matrices used in various CS reconstruction techniques \n    like downsampling or permutation matrices.\n  - And many others for various purposes ...\n  \nFor a list of changes please read the file \"VERSIONS.txt\"\n\n\n2: Installation \n   ============\n\n2.1: Preliminaries\n     -------------\nThe KL1p library is dependent on the following tools and libraries :     \n\n  * Standard compliant C++ compiler :\n      KL1p makes use of template meta-programming, recursive templates \n      and template based function overloading. As such, C++ compilers \n      which do not fully implement the C++ standard may not work correctly.\n\t  For information, KL1p was successfully built with the following compilers :\n\t    - Microsoft Visual C++ 2008 Express (32/64 bits compilers on Windows XP)\n\t    - Microsoft Visual C++ 2010 Express (32/64 bits compilers on Windows Seven)\n\t\t- GCC 4.2.1 (64 bits compiler on Mac OS X Snow Leopard)\n\t\t- GCC 4.3.2 (64 bits compiler on Linux Debian)\n\t    - GCC 4.4.3 (32 bits compiler on Linux Ubuntu)\t   \n\n  * The cross platform build system CMake v2.8.1 : \n      KL1p use the open source software CMake as build system. The minimum \n\t  required version is 2.8.1. \n\t  For installation and information about CMake, please refer to \n\t  http://www.cmake.org\n\t   \n  * The C++ linear algebra library Armadillo v3.1.92 [11] : \n      KL1p use the Armadillo C++ linear algebra library for matrix operations.\n\t  The version 3.1.92 of the library is already provided with the KL1p package \n\t  under the folder \"libs/Armadillo\". \n\t  For information about Armadillo or installation of recent version, please refer to \n\t  http://arma.sourceforge.net\n\t   \t  \n\t\t  \nThe following modules are facultative for standard installation of KL1p : \n\n  * The C Fast Fourier Transform library FFTW v3.3.1 :\n      By default, KL1p already provides basic Fast Fourier Transform operations. \n\t  But for performance increase during the computation of FFTs or derived \n\t  operations (DCT, convolution, correlation, ...) the installation of the \n\t  FFTW GPL library is recommended. The minimum required version is 3.3.1.\n\t  For installation and information about FFTW, please refer to \n\t  http://www.fftw.org\n\t  See section 3.3 for example of configuration of KL1p with FFTW.\n\n  * The linear algebra packages BLAS or LAPACK : \n      Linear algebra operations may be sped up with the activation\n\t  of the BLAS or LAPACK packages through the Armadillo library. \n\t  For information about this configuration of the Armadillo library, please refer to \n\t  http://arma.sourceforge.net/download.html\n\t  or see the file \"libs/Armadillo/README.txt\", section 2 Installation.\n\n  * The C++ test framework CppTest v1.1.0 :\n      The KL1p package provides the unit test cases used during the development process (see section 3.4). \n\t  These test cases are essentially provided for documentation purpose. But if \n\t  for any reason you need to build these tests cases, you must install \n\t  the C++ test framework CppTest. The minimum required version is 1.1.0.\n\t  For installation and information about CppTest, please refer to \n\t  http://cpptest.sourceforge.net\n\n\n2.2: Installation on Linux\n     ---------------------\nYou can use the manual installation process as described in section 2.5, \nor the following automatic installation for GCC compilers.\n\nIf CMake is not already be present on your system, download it from http://www.cmake.org\nand install it on your system. On major Linux systems (such as Fedora, Ubuntu, Debian, etc), \ncmake is available as a pre-built package, though it may need to be explicitly installed \n(using a tool such as PackageKit, yum, rpm, apt, aptitude).\t \n\nKL1p provides scripts to automatically build GCC versions of the library. These files \nare located in the \"build/unix\" folder and are named :\n  - \"UnixMakefile_x86_Make.sh\" for 32 bits versions (debug and release).\n  - \"UnixMakefile_x64_Make.sh\" for 64 bits versions (debug and release).\n  \nOpen a shell (command line), change into the directory \"build/unix\" from the directory \nthat was created by unpacking the KL1p archive, and type for example the following command for \nbuilding 32 bits versions of the library :\n  ./UnixMakefile_x86_Make.sh\n  \nFor compilers other than GCC, please use the manual installation process as described in section 2.5.\n\nWhen the build is complete, the binaries will be found into the directory \"bin/unix\". Depending of the build\nchosen, the following files will be present :\n  - \"libKLab_d.a\" for 32 bits debug version.\n  - \"libKLab.a\" for 32 bits release version.\n  - \"libKLab64_d.a\" for 64 bits debug version.\n  - \"libKLab64.a\" for 64 bits release version.  \n\nYou must configure your compiler to link to the corresponding KL1p files : \n  - Configure your compiler to use the location for header files (in addition to the locations \n    it uses already), the folder \"include\" under the directory that was created by unpacking the KL1p archive.\n  - Configure your compiler to link with the previously builded libraries under directory \"bin/unix\". \n\n  \n2.3: Installation on Mac OS X\n     ------------------------\nYou can use the manual installation process as described in section 2.5, \nor the following automatic installation for GCC compilers.\n\nIf CMake is not already be present on your system, download it from http://www.cmake.org\nand install it on your system. \t \n\nKL1p provides scripts to automatically build GCC versions of the library. These files \nare located in the \"build/macos\" folder and are named :\n  - \"UnixMakefile_x86_Make.sh\" for 32 bits versions (debug and release).\n  - \"UnixMakefile_x64_Make.sh\" for 64 bits versions (debug and release).\n  \nOpen a shell (command line), change into the directory \"build/macos\" from the directory \nthat was created by unpacking the KL1p archive, and type for example the following command for \nbuilding 32 bits versions of the library :\n  ./UnixMakefile_x86_Make.sh\n  \nFor compilers other than GCC, please use the manual installation process as described in section 2.5.\n\nWhen the build is complete, the binaries will be found into the directory \"bin/macos\". Depending of the build\nchosen, the following files will be present :\n  - \"libKLab_d.a\" for 32 bits debug version.\n  - \"libKLab.a\" for 32 bits release version.\n  - \"libKLab64_d.a\" for 64 bits debug version.\n  - \"libKLab64.a\" for 64 bits release version.  \n\nYou must configure your compiler to link to the corresponding KL1p files : \n  - Configure your compiler to use the location for header files (in addition to the locations \n    it uses already), the folder \"include\" under the directory that was created by unpacking the KL1p archive.\n  - Configure your compiler to link with the previously builded libraries under directory \"bin/macos\". \n  \n\n2.4: Installation on MS Windows\n     --------------------------\nYou can use the manual installation process as described in section 2.5, \nor the following automatic installation for Visual C++ compilers.\n\t \nIf CMake is not already be present on your system, download it from http://www.cmake.org\nand install it on your system.\n\t \nKL1p provides scripts to automatically build Visual C++ versions of the library. These files \nare located in the \"build/win\" folder and are named :\n  - \"Visual2005_x86_Make.bat\" for 32 bits versions built on Visual C++ 2005 and Visual C++ 2005 Express (debug and release).\n  - \"Visual2005_x64_Make.bat\" for 64 bits versions built on Visual C++ 2005 and Visual C++ 2005 Express (debug and release).\n  - \"Visual2008_x86_Make.bat\" for 32 bits versions built on Visual C++ 2008 and Visual C++ 2008 Express (debug and release).\n  - \"Visual2008_x64_Make.bat\" for 64 bits versions built on Visual C++ 2008 and Visual C++ 2008 Express (debug and release).\n  - \"Visual2010_x86_Make.bat\" for 32 bits versions built on Visual C++ 2010 (debug and release).\n  - \"Visual2010_x64_Make.bat\" for 64 bits versions built on Visual C++ 2010 (debug and release).\n  - \"Visual2010Express_x86_Make.bat\" for 32 bits versions built on Visual C++ 2010 Express (debug and release).\n  - \"Visual2010Express_x64_Make.bat\" for 64 bits versions built on Visual C++ 2010 Express (debug and release).\n  \nOpen a file explorer, change into the directory \"build/win\" from the directory \nthat was created by unpacking the KL1p archive, and run for example the following script for\nbuilding 32 bits versions of the library with Visual C++ 2010 :\n  Visual2010_x86_Make.bat\t  \n  \nAs a courtesy, the KL1p package already contains pre-generated versions of Visual C++ projects. \nThese projects are located in folder \"build/win\" and are named : \n  - \"KLab.vcproj\" for Visual C++ 2008 and Visual C++ 2008 Express environments.\n  - \"KLab.vcxproj\" for Visual C++ 2010 and Visual C++ 2010 Express environments.\n\nFor compilers other than Visual C++, please use the manual installation process as described in section 2.5.\n\nWhen the build is complete, the binaries will be found into the directory \"bin/win\". Depending of the build\nchosen, the following files will be present :\n  - \"KLab_d.lib\" for 32 bits debug version.\n  - \"KLab.lib\" for 32 bits release version.\n  - \"KLab64_d.lib\" for 64 bits debug version.\n  - \"KLab64.lib\" for 64 bits release version. \n  \nYou must configure your compiler to link to the corresponding KL1p files : \n  - Configure your compiler to use the location for header files (in addition to the locations \n    it uses already), the folder \"include\" under the directory that was created by unpacking the KL1p archive.\n  - Configure your compiler to link with the previously builded libraries under directory \"bin/win\". \n\n\n2.5: Manual installation\n     -------------------\nIf CMake is not already be present on your system, download it from http://www.cmake.org\nand install it on your system.\n\t \nOpen a shell (command line), change into the directory \"libs/KLab/main\" from the directory \nthat was created by unpacking the KL1p archive. This directory contains the file \"CMakeLists.txt\"\nrequired by cmake to build the binaries. The \"CMakeLists.txt\" file may need to be configured for your system.\nPlease refer to cmake documentation at http://www.cmake.org/cmake/help/documentation.html\nto see how to create projects from a \"CMakeLists.txt\" file. The standard cmake command looks like :\n  cmake -DCMAKE_BUILD_TYPE=[BUILD_TYPE] -G[COMPILER_NAME] [SOURCE_PATH]\nwhere :\n - [BUILD_TYPE] corresponds to the type of the build (\"Release\" or \"Debug\" for example). \n - [COMPILER_NAME] corresponds to the name of the desired compiler (see cmake documentation for a complete list of compiler names). \n - [SOURCE_PATH] corresponds to the location of the \"CMakeLists.txt\" file.\n  \nAs the project is created by cmake command, build it with the chosen compiler. \nWhen the build is complete, the binaries will be found into the directory \"bin/unix\" for Linux systems\nor into the directory \"bin/macos\" for Mac OS X systems or into the directory \"bin/win\" for Windows systems.\n\nYou must configure your compiler to link to the corresponding KL1p files : \n  - Configure your compiler to use the location for header files (in addition to the locations \n    it uses already), the folder \"include\" under the directory that was created by unpacking the KL1p archive.\n  - Configure your compiler to link with the previously builded libraries under directory \"bin/unix\", \"bin/macos\" or \"bin/win\"\n    depending on your system. \n\n\n3: Compiling and Linking \n   =====================\n\n3.1: Compiling and linking on Linux\n     ------------------------------ \nIn order to use KL1p library, your program need to include the header file \"KL1pInclude.h\" \nlocated in the \"include\" folder :\n  #include <KL1pInclude.h>\n  \nDepending on your build type, your program also need to link to one of KL1p library previously generated\nin the \"build/unix\" folder (see section 2) :\n  - \"libKLab_d.a\" for 32 bits debug version.\n  - \"libKLab.a\" for 32 bits release version.\n  - \"libKLab64_d.a\" for 64 bits debug version.\n  - \"libKLab64.a\" for 64 bits release version.  \n  \nSee section 3.4 to see examples using KL1p.\n\n\n3.2: Compiling and linking on Mac OS X\n     ---------------------------------\nIn order to use KL1p library, your program need to include the header file \"KL1pInclude.h\" \nlocated in the \"include\" folder :\n  #include <KL1pInclude.h>\n  \nDepending on your build type, your program also need to link to one of KL1p library previously generated\nin the \"build/macos\" folder (see section 2) :\n  - \"libKLab_d.a\" for 32 bits debug version.\n  - \"libKLab.a\" for 32 bits release version.\n  - \"libKLab64_d.a\" for 64 bits debug version.\n  - \"libKLab64.a\" for 64 bits release version.  \n  \nSee section 3.4 to see examples using KL1p.\n\n\n3.3: Compiling and linking on MS Windows\n     ----------------------------------- \nIn order to use KL1p library, your program need to include the header file \"KL1pInclude.h\" \nlocated in the \"include\" folder :\n  #include <KL1pInclude.h>\n  \nDepending on your build type, your program also need to link to one of KL1p library previously generated\nin the \"build/win\" folder (see section 2) :\t \n  - \"KLab_d.lib\" for 32 bits debug version.\n  - \"KLab.lib\" for 32 bits release version.\n  - \"KLab64_d.lib\" for 64 bits debug version.\n  - \"KLab64.lib\" for 64 bits release version. \n\nSee section 3.4 to see examples using KL1p.\n\n\n3.4: Examples\n     -------- \nThe \"examples\" directory contains several quick examples that use the KL1p library :\n\n  * CompressedSensingExample\n      A basic reconstruction example. A random sparse signal is created, downsampled and reconstructed with\n\t  each of the algorithms implemented in KL1p.\n  \n  * FourierCompressedSensingExample\n      A reconstruction example based on Fourier transformation. A random sparse signal is created, \n\t  transformed with Fourier transformation, downsampled and reconstructed with each of the algorithms \n\t  implemented in KL1p.\n\t  To speed up the reconstruction process, FFTW may be enabled with one of the following preprocessor \n\t  command (before inclusion of \"KL1pInclude.h\" file) :\n\t\n\t    // Use dynamic library version of FFTW.\n\t    // The FFTW dynamic library must be accessible by the example executable (e.g. must be located\n\t    // in the same folder or in the system folder) and must be named \"libfftw3-3.so\" for linux system \n\t    // or \"libfftw3-3.dll\" for windows system.\n\t    #define KSCI_ENABLE_DYNAMIC_FFTW\t\n\t    #include <KL1pInclude.h>\n\t\n        or\n\t\n\t    // Use static library version of FFTW.\n\t    #define KSCI_ENABLE_STATIC_FFTW\n\t    #include <KL1pInclude.h>\t   \n  \n  * SeededEMBPCompressedSensingExample\n      A reconstruction example with a special sensing matrix called \"seeding matrix\". The combination of\n\t  a seeding matrix and the EMBP algorithm may provide better reconstruction performance [9].\n\t  A random sparse signal is created, measured with the seeding matrix and reconstructed thanks to \n\t  the EMBP algorithm.\n  \n  * ComplexSeededEMBPCompressedSensingExample\n      Same as SeededEMBPCompressedSensingExample above but with the recontruction of a complex (imaginary) signal.\n\n\n3.4: Test cases\n     ---------- \nThe KL1p package provides the unit test cases used during the development process. \nThese test cases are essentially provided for documentation purpose. But if for any reason\nyou need to build these tests cases, you must install the C++ test framework CppTest. \nThe minimum required version is 1.1.0. For installation and information about CppTest, please refer to \nhttp://cpptest.sourceforge.net/\n\nThe unit test cases are located for each sub-libraries under the sub-folder \"maintest\" : \n  - folder \"libs/KLab/maintest\" for unit test cases of KLab library.\n  - folder \"libs/KSci/maintest\" for unit test cases of KSci library.\n  - folder \"libs/KL1p/maintest\" for unit test cases of KL1p library.\n  \nEach \"maintest\" subfolder contains a file named \"CMakeLists.txt\" required by cmake to build \nthe test executable. The \"CMakeLists.txt\" file may need to be configured for your system. \nPlease refer to cmake documentation at http://www.cmake.org/cmake/help/documentation.html\nto see how to create projects from a \"CMakeLists.txt\" file. The standard cmake command looks like :\n  cmake -DCMAKE_BUILD_TYPE=[BUILD_TYPE] -G[COMPILER_NAME] [SOURCE_PATH]\nwhere :\n - [BUILD_TYPE] corresponds to the type of the build (\"Release\" or \"Debug\" for example). \n - [COMPILER_NAME] corresponds to the name of the desired compiler (see cmake documentation for a complete list of compiler names). \n - [SOURCE_PATH] corresponds to the location of the \"CMakeLists.txt\" file.\n  \nAs the project is created by cmake command, build it with the chosen compiler. \nWhen the build is complete, the corresponding test executable will be found into the directory \"bin/unix\" for Linux systems \nor into the directory \"bin/macos\" for Mac OS X systems or into the directory \"bin/win\" for Windows systems.\n\n\n4: Documentation \n   =============\nFor information about KL1p, please visit http://kl1p.sourceforge.net\n\n\n5: Bug Reports\n   ===========\nIf you find a bug in the library, please make a small self-contained program \nwhich exposes the bug and send the program source as well as the bug description \nto kl1p-contact@lists.sourceforge.net\n\nIn the bug description please include:\n  - Information about your system and KL1p version.\n  - If the bug was a crash, supply the exact text that was printed out \n    when the exception or error occured.\n  - Any other relevant information.\n\n\n6: Credits\n   =======\nDeveloper: \n  Rene Gebel\n\n\n7: License\n   =======\nThis library is distributed in the hope that it will be useful, \nbut WITHOUT ANY WARRANTY of fitness for any purpose. \nThis library is free software; You can redistribute it and/or modify it \nunder the terms of the GNU Lesser General Public License (LGPL) as published \nby the Free Software Foundation, either version 3 of the License, \nor (at your option) any later version.\nSee the \"LICENSE.txt\" file and http://www.opensource.org/licenses for more info.\n\n\n8: References and Resources\n   ========================\t\n   \n8.1: References\n     ----------\n[1]  Emmanuel Candes and Justin Romberg.\n     l1-MAGIC : Recovery of Sparse Signals via Convex Programming.\n\t Caltech, 2005\n\t \n[2]  Justin Romberg.\n     l1-MAGIC\n     http://users.ece.gatech.edu/~justin/l1magic, 2005\n\t \n[3]  Joel A. Tropp and Anna C. Gilbert.\n     Signal Recovery From Random Measurements Via Orthogonal Matching Pursuit.\n\t IEEE Transactions on Information Theory, Vol.53, NO.12, 2007\n\t \n[4]  D. Needell and R. Vershynin.\n     Signal recovery from incomplete and inaccurate measurements via regularized orthogonal matching pursuit.\n     IEEE J. Selected Topics in Signal Process., vol.4, pp.310-316, 2010. \t \n\n[5]  D. Needell and J.A. Tropp.\n     CoSaMP: Iterative signal recovery from incomplete and inaccurate samples.\n\t Applied and Computational Harmonic Analysis, 2009\n\n[6]  Wei Dai and Olgica Milenkovic.\n     Subspace Pursuit for Compressive Sensing Signal Reconstruction.\n\t arXiv:0803.0811v3, 2009\n\n[7]  G. Hosein Mohimani, Massoud Babaie-Zadeh and Christian Jutten.\n     Smoothed L0 (SL0) Algorithm for Sparse Decomposition\n\t http://ee.sharif.edu/~SLzero, 2008\n\n[8]  D. L. Donoho, A. Maleki, and A. Montanari.\n     Message-passing algorithms for compressed sensing.\n\t Proc. National Academy of the Sciences, vol.106, no.45, pp.18914-18919, 2009\n\n[9]  F. Krzakala, M. Mezard, F. Sausset, Y. F. Sun and L. Zdeborova.\n     Statistical-physics-based reconstruction in compressed sensing.\n\t arXiv:1109.4424v3, 2012\n\t \n[10] J. Barbier and F. Krzakala. \n     ASPICS: Applying Statistical Physics to Inference in Compressed Sensing.\n     http://aspics.krzakala.org, 2012\n\t \n[11] Conrad Sanderson.\n     Armadillo: An Open Source C++ Linear Algebra Library for Fast Prototyping and Computationally Intensive Experiments.\n     Technical Report, NICTA, 2010.\n\t \n\t \n8.2: Resources\n     ---------\n- Nuit-Blanche, blog of Igor Carron.\n  http://nuit-blanche.blogspot.fr\n    Daily news and a huge list of resources from compressed sensing and matrix factorization communities. \n\t\n- Pursuits in the Null Space, blog of Bob L. Sturm.\n  http://media.aau.dk/null_space_pursuits \n    Many Matlab codes and comparative studies of various compressed sensing algorithms.\n", 
  "id": 28897290
}