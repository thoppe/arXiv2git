{
  "read_at": 1462557334, 
  "description": "", 
  "README.md": "Answer Set Programming Assignments\n----------------------------------\nBojie Li (PB10000603)\n\nEnvironment\n-----------\n* GNU/Linux (Archlinux) 3.5.2 kernel\n* clingo 3.0.4 (clasp 1.3.10)\n* GCC 4.7.1\n* bash 4.2.37\n* python 3.2.3\n\nPlease contact me (boj AT mail.ustc.edu.cn) if you have trouble with the required software environment.\n\nSudoku\n------\n\n    clingo suduku.lp suduku\\_data.lp\n\nTo verify sudoku result and pretty-print:\n\n    gcc sudoku_verify.c -o sudoku_verify\n    clingo sudoku.lp sudoku_data.lp | awk 'NR==2' | ./sudoku_verify\n\nRectangle Covering\n------------------\n\none 1x1 tile, 21 1x3 tiles:\n\n    clingo rectangle.lp\n\ntwo 1x2 tiles, 20 1x3 tiles:\n\n    clingo rectangle23.lp\n\nRamsey\n------\n\n    ./ramsey.sh nodes m n | clingo\n\nFor example, judge whether R(3,3)>=6:\n\n    ./ramsey.sh 6 3 3 | clingo\n\nTo view the ASP program as bash script's output:\n\n    ./ramsey.sh nodes m n\n\nTo calculate R(m,n), use ramsey\\_calc.sh. For example R(4,3) = 9:\n\n    ./ramsey_calc.sh 4 3\n\nThe ramsey problem can be separated into guess and check parts. The guess part generates a edge coloring and the check part verifies whether there is a mono-color clique with size m (n). The check part itself is NP-Complete. Unfortunately there is neither a way to generate atoms dynamically, nor a way to call a subprocedure in ASP.\n\nIMHO The ramsey problem has complexity NP^ NP and cannot be polynomially represented in normal logic program.\n\nIt is possible to follow Godel's approach and encode each edge coloring with a number using Lua script embedded in ASP, thus making a single atom out of a subset of atom. But it is too complicated.\n\nAfter a few days of thinking I give up the `procedure-call' approach and write a bash script to generate ASP program with variable number of atoms (X1..Xn, Y1..Ym), which is not a pure-ASP solution, while IMHO better than not solving it :)\n\nThere is a paper on this topic, which proposes an algorithm to merge two disjunctive programs into a single one. However I cannot understand it. (arXiv:cs/0501084) Towards Automated Integration of Guess and Check Programs in Answer Set Programming\n\nDeductive Reasoning\n-------------------\n\n    clingo reasoning.lp\n\nFor pretty-printing:\n\n    clingo reasoning.lp | awk 'NR==2' | ./reasoning_check.py\n\n\nAdditional Problems (by my own interest)\n----------------------------------------\n\n4-color an indirected graph:\n\n    clingo 4coloring.lp 4coloring_data.lp\n\nChinese Postman Problem:\n\n    clingo postman.lp postman_data.lp\n\n8 queens problem:\n\n    clingo 8queens.lp\n\nDetermine Cliques in Graph: (params: clique size in #const)\n\n    clingo clique.lp clique_data.lp\n", 
  "id": 5637602
}