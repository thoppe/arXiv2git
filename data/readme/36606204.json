{
  "read_at": 1462558865, 
  "description": "Crowdtuning (crowdsourcing experiments, auto tuning and machine learning)", 
  "README.md": "Status\n======\nThis is a relatively stable repository for customizable\nexperiment crowdsourcing across platforms provided by voluteers\n(such as mobile devices and data centers).\nCurrently implemented scenarios include universal,\ncustomizable, multi-dimensional, multi-objective \nGCC/LLVM crowd-tuning.\n\nDescription\n===========\nThis repository is based on CK machine-learning based autotuning.\nIt crowdsources experiments (using optimization knobs exposed\nvia CK such as OpenCL, compiler flag, CUDA, etc)\nacross many machines while building a realistic,\nlarge and representative training set. \n\nThis is a continuation of Grigori Fursin's original postdoctoral\nproposal for the MILEPOST project in 2005, i.e. crowdsource\ntraining of a machine-learning based compiler across\nany shared computational resource such as mobile phones\n(supported by the non-profit cTuning foundation since 2008).\n\nPublications\n============\n* http://arxiv.org/abs/1506.06256\n* http://bit.ly/ck-date16\n* http://arxiv.org/abs/1407.4075\n* http://hal.inria.fr/hal-01054763\n* https://hal.inria.fr/inria-00436029\n\nAuthors\n=======\n* Grigori Fursin, cTuning foundation (France) / dividiti (UK)\n\nLicense\n=======\n* BSD, 3-clause\n\nPrerequisites\n=============\n* Collective Knowledge Framework: http://github.com/ctuning/ck\n\nUsage\n=====\n\nSee https://github.com/ctuning/ck/wiki/Crowdsource_Experiments\n\nNotes\n=====\nWe and the community added various analysis of variation \nof empirical characteristics such as execution time and energy:\nmin, max, mean, expected values from histogram, normality test, etc.\n\nUsers can decide how to calculate improvements based on available statistics\nand their requirements. For example, when trying to improve compilers\nor hardware, we compare minimal characteristics (execution time, energy, etc),\ni.e. the best what we can squeeze from this hardware when there are\nno cache effects, contentions, etc. \n\nLater, we suggest to calculate improvements using expected values -\nwe noticed that computer systems has \"states\" (similar to electron energy \nstates in physics), hence such improvements will show how a given\nprogram will behave in non-ideal conditions.\n\nFurthermore, when there is more than one expected behavior, i.e.\nseveral states, we suggest to analyze such cases by the community\nand find missing experiment features that could explain and separate\nsuch states such as CPU/GPU frequency.\n\nSee our papers for more details.\n", 
  "id": 36606204
}