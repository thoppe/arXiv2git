{
  "README": "MultiNest v 2.17\nFarhan Feroz, Mike Hobson\nf.feroz@mrao.cam.ac.uk\narXiv:0704.3704 & arXiv:0809.3437\nReleased Mar 2012\n\n---------------------------------------------------------------------------\n\nMultiNest Licence\n\nUsers are required to accept to the licence agreement given in LICENCE file.\n\n---------------------------------------------------------------------------\n\nMultiNest library requires lapack library.\n\nThe code is MPI compatible. In order to disable the MPI parallelization, remove -DMPI compilation flag.\n\n---------------------------------------------------------------------------\n\ngfortran compiler:\n\nYou might need to use the following flag while compiling MultiNest with gfortran compiler to remove the\nrestriction imposed by gfortran on line length.\n\n-ffree-line-length-none\n\n---------------------------------------------------------------------------\n\nThe subtoutine to begin MultiNest are as follows:\n\nsubroutine nestRun(mmodal, ceff, nlive, tol, efr, ndims, nPar, nCdims, maxModes, updInt, Ztol, root, seed,\npWrap, feedback, resume, outfile, initMPI, logZero, maxiter, loglike, dumper, context)\n\nlogical mmodal \t \t\t\t\t\t\t\t\t!do mode separation?\ninteger nlive \t \t\t\t\t\t\t\t\t!number of live points\nlogical ceff\t\t\t\t\t\t\t\t\t!run in constant efficiency mode\ndouble precision tol \t\t \t\t\t\t\t\t!evidence tolerance factor\ndouble precision efr \t\t \t\t\t\t\t\t!sampling efficiency\ninteger ndims\t \t\t\t\t\t\t\t\t!number of dimensions\ninteger nPar\t \t\t\t\t\t\t\t\t!total no. of parameters\ninteger nCdims\t\t\t\t\t\t\t\t\t!no. of parameters on which clustering should be performed (read below)\ninteger maxModes\t\t\t\t\t\t\t\t!maximum no. of modes (for memory allocation)\ninteger updInt\t\t\t\t\t\t\t\t\t!iterations after which the output files should be written\ndouble precision Ztol\t\t\t\t\t\t\t\t!null log-evidence (read below)\ncharacter(LEN=100) root  \t\t\t\t\t\t\t!root for MultiNest output files\ninteger seed \t\t \t\t\t\t\t\t\t!random no. generator seed, -ve value for seed from the sys clock\ninteger pWrap[ndims]\t\t\t\t\t\t\t\t!wraparound parameters?\nlogical feedback\t\t\t\t\t\t\t\t!need update on sampling progress?\nlogical resume\t\t\t\t\t\t\t\t\t!resume from a previous run?\nlogical outfile\t\t\t\t\t\t\t\t\t!write output files?\nlogical initMPI\t\t\t\t\t\t\t\t\t!initialize MPI routines?, relevant only if compiling with MPI\n\t\t\t\t\t\t\t\t\t\t!set it to F if you want your main program to handle MPI initialization\ndouble precision logZero\t\t\t\t\t\t\t!points with loglike < logZero will be ignored by MultiNest\ninteger maxiter\t\t\t\t\t\t\t\t\t!max no. of iterations, a non-positive value means infinity. MultiNest will terminate if either it \n\t\t\t\t\t\t\t\t\t\t!has done max no. of iterations or convergence criterion (defined through tol) has been satisfied\nloglike(Cube,ndims,nPar,lnew) \t\t\t\t\t\t\t!subroutine which gives lnew=loglike(Cube(ndims))\ndumper(nSamples,nlive,nPar,physLive,posterior,paramConstr,maxloglike,logZ,c)\t!subroutine called after every updInt*10 iterations with the posterior \n\t\t\t\t\t\t\t\t\t\t!distribution, parameter constraints, max loglike & log evidence values\ninteger context\t\t\t\t\t\t\t\t\t!not required by MultiNest, any additional information user wants to pass\n      \n--------------------------------------------------------------------------- \n\nlikelihood routine: slikelihood(Cube,ndims,nPar,lnew,context)\n\nCube(1:nPar) has nonphysical parameters\nscale Cube(1:n_dim) & return the scaled parameters in Cube(1:n_dim) & additional parameters that you want to\nreturned by MultiNest along with the actual parameters in Cube(n_dim+1:nPar)\nReturn the log-likelihood in lnew\n\n---------------------------------------------------------------------------\n\ndumper routine: dumper(nSamples,nlive,nPar,physLive,posterior,paramConstr,maxloglike,logZ,logZerr,context)\n\nThis routine is called after every updInt*10 iterations & at the end of the sampling allowing the posterior \ndistribution & parameter constraints to be passed on to the user in the memory. The argument are as follows:\n\nnSamples\t\t\t\t\t\t= total number of samples in posterior distribution\nnlive\t\t\t\t\t\t     \t= total number of live points\nnPar\t\t\t\t\t\t     \t= total number of parameters (free + derived)\nphysLive(nlive, nPar+1) \t\t     \t\t= 2D array containing the last set of live points (physical parameters plus derived parameters) along with their loglikelihood values\nposterior(nSamples, nPar+2)\t\t     \t\t= posterior distribution containing nSamples points. Each sample has nPar parameters (physical + derived) along with the their loglike \n\t\t\t\t\t\t\tvalue & posterior probability\nparamConstr(1, 4*nPar):\n     paramConstr(1, 1) to paramConstr(1, nPar)\t     \t= mean values of the parameters\n     paramConstr(1, nPar+1) to paramConstr(1, 2*nPar)   = standard deviation of the parameters\n     paramConstr(1, nPar*2+1) to paramConstr(1, 3*nPar) = best-fit (maxlike) parameters\n     paramConstr(1, nPar*4+1) to paramConstr(1, 4*nPar) = MAP (maximum-a-posteriori) parameters\nmaxLogLike\t\t\t\t\t    \t= maximum loglikelihood value\nlogZ\t\t\t\t\t\t     \t= log evidence value\nlogZerr\t\t\t\t\t\t     \t= error on log evidence value\ncontext\t\t\t\t\t\t\tnot required by MultiNest, any additional information user wants to pass\n\nThe 2D arrays are Fortran arrays which are different to C/C++ arrays. In the example dumper routine provided with C & C++\neggbox examples, the Fortran arrays are copied on to C/C++ arrays.\n\n---------------------------------------------------------------------------\n\nTranformation from hypercube to physical parameters:\n\nMultiNest native space is unit hyper-cube in which all the parameter are uniformly distributed in [0, 1]. User\nis required to transform the hypercube parameters to physical parameters. This transformation is described in\nSec 5.1 of arXiv:0809.3437. The routines to tranform hypercube parameters to most commonly used priors are\nprovided in module priors (in file priors.f90).\n\n---------------------------------------------------------------------------\n\nCheckpointing:\n\nMultiNest is able to checkpoint. It creates [root]resume.dat file & stores information in it after every\nupdInt iterations to checkpoint, where updInt is set by the user. If you don't want to resume your program from\nthe last run run then make sure that you either delete [root]resume.dat file or set the parameter resume to F\nbefore starting the sampling.\n\n---------------------------------------------------------------------------\n\nPeriodic Boundary Conditions:\n\nIn order to sample from parameters with periodic boundary conditions (or wraparound parameters), set pWrap[i],\nwhere i is the index of the parameter to be wraparound, to a non-zero value. If pWrap[i] = 0, then the ith\nparameter is not wraparound.\n\n---------------------------------------------------------------------------\n\nConstant Efficiency Mode:\n\nIf ceff is set to T, then the enlargement factor of the bounding ellipsoids are tuned so that the sampling\nefficiency is as close to the target efficiency (set by efr) as possible. This does mean however, that the\nevidence value may not be accurate.\n\n---------------------------------------------------------------------------\n\nSampling Parameters:\n\nThe recommended paramter values to be used with MultiNest are described below. For detailed description please\nrefer to the paper arXiv:0809.3437\n\nnPar: \nTotal no. of parameters, should be equal to ndims in most cases but if you need to store some additional\nparameters with the actual parameters then you need to pass them through the likelihood routine.\n\n\nefr:\ndefines the sampling efficiency. 0.8 and 0.3 are recommended for parameter estimation & evidence evalutaion\nrespectively.\n\n\ntol:\nA value of 0.5 should give good enough accuracy.\n\n           \nnCdims:\nIf mmodal is T, MultiNest will attempt to separate out the modes. Mode separation is done through a clustering\nalgorithm. Mode separation can be done on all the parameters (in which case nCdims should be set to ndims) & it\ncan also be done on a subset of parameters (in which case nCdims < ndims) which might be advantageous as\nclustering is less accurate as the dimensionality increases. If nCdims < ndims then mode separation is done on\nthe first nCdims parameters.\n\n\nZtol:\nIf mmodal is T, MultiNest can find multiple modes & also specify which samples belong to which mode. It might be\ndesirable to have separate samples & mode statistics for modes with local log-evidence value greater than a\nparticular value in which case Ztol should be set to that value. If there isn't any particularly interesting\nZtol value, then Ztol should be set to a very large negative number (e.g. -1.d90).\n\n---------------------------------------------------------------------------\n\nProgress Monitoring:\n\nMultiNest produces [root]physlive.dat & [root]ev.dat files after every updInt iterations which can be used to\nmonitor the progress. The format & contents of  these two files are as follows:\n\n[root]physlive.dat:\nThis file contains the current set of live points. It has nPar+2 columns. The first nPar columns are the ndim\nparameter values along with the (nPar-ndim)  additional parameters that are being passed by the likelihood\nroutine for MultiNest to save along with the ndim parameters. The nPar+1 column is the log-likelihood value &\nthe last column is the node no. (used for clustering).\n\n[root]ev.dat:\nThis file contains the set of rejected points. It has nPar+3 columns. The first nPar columns are the ndim\nparameter values along with the (nPar-ndim)  additional parameters that are being passed by the likelihood\nroutine for MultiNest to save along with the ndim parameters. The nPar+1 column is the log-likelihood value,\nnPar+2 column is the log(prior mass) & the last column  is the node no. (used for clustering).\n\n---------------------------------------------------------------------------\n\nPosterior Files:\n\nThese files are created after every updInt*10 iterations of the algorithm & at the end of sampling.\n\nMultiNest will produce five posterior sample files in the root, given by the user, as following\n\n\n[root].txt\nCompatable with getdist with 2+nPar columns. Columns have sample probability, -2*loglikehood, parameter values. \nSample probability is the sample prior mass multiplied by its likelihood & normalized by the evidence.\n\n\n[root]post_separate.dat\nThis file is only created if mmodal is set to T. Posterior samples for modes with local log-evidence value\ngreater than Ztol, separated by 2 blank lines. Format is the same as [root].txt file.\n\n\n[root]stats.dat\nContains the global log-evidence, its error & local log-evidence with error & parameter means & standard\ndeviations as well as the  best fit & MAP parameters of each of the mode found with local log-evidence > Ztol.\n\n\n[root]post_equal_weights.dat\nContains the equally weighted posterior samples. Columns have parameter values followed by loglike value.\n\n\n[root]summary.txt\nThere is one line per mode with nPar*4+2 values in each line in this file. Each line has the following values \nin its column mean parameter values, standard deviations of the parameters, bestfit (maxlike) parameter values, \nMAP (maximum-a-posteriori) parameter values, local log evidence, maximum loglike value\n\n---------------------------------------------------------------------------\n\nC/C++ Interface:\n\nC interface to MultiNest is provided in header file multinest.h in example_eggboxC directory.\nC++ interface to MultiNest is provided in header file multinest.h in example_eggboxC++ directory.\n\nYou might need to check the symbol table for your platform (nm libnest3.a | grep nestrun) & edit \nmultinest.h file to define NESTRUN.\n\n---------------------------------------------------------------------------\n\nToy Problems\n\nThere are 8 toy programs included with MultiNest.\n\nexample_obj_detect: The object detection problem discussed in arXiv:0704.3704. The positions, amplitudes &\nwidths of the Gaussian objects can be modified through params.f90 file. Sampling parameters are also set in\nparams.f90.\n\nexample_gauss_shell: The Gaussian shells problem discussed in arXiv:0809.3437. The dimensionality, positions and\nthickness of these shells can be modified through params.f90 file. Sampling parameters are also set in\nparams.f90.\n\nexample_gaussian: The Gaussian shells problem discussed in arXiv:1001.0719. The dimensionality of the problem can \nbe modified through params.f90 file. Sampling parameters are also set in params.f90.\n\nexample_eggboxC/example_eggboxC++: The C/C++ interface includes the egg box problem discussed in arXiv:0809.3437. \nThe toy problem and sampling parameters are set in eggbox.c & eggbox.cc files.\n\nexample_ackley: The Ackley mimimization problem (see T. Bck, Evolutionary Algorithms in Theory and Practice, \nOxford University Press, New York (1996).)\n\nexample_himmelblau: The Himmelblau's minimization problem. (see http://en.wikipedia.org/wiki/Himmelblau's_function)\n\nexample_rosenbrock: Rosenbrock minimization problem. (see http://en.wikipedia.org/wiki/Rosenbrock_function)\n\nexample_gaussian: Multivariate Gaussian with uncorrelated paramters.\n\n---------------------------------------------------------------------------\n\nBuild through CMake\n\nThere is a minimal CMake file called CMakeLists.txt included (courtesy of Brian Kloppenborg). It can be used as follows:\n\ncmake CMakeLists.txt\nmake\n\n---------------------------------------------------------------------------\n\nCommon Problems:\n\n\nProblem: MultiNest crashes after segmentation fault.\n\nSolution: Try increasing the stack size (ulimit -s unlimited on Linux) & resume your job.\n\n\nProblem: Output files (.txt & post_equal_weights.dat) files have very few (of order tens) points.\n\nSolution: If tol is set to a reasonable value (tol <= 1) & the job hasn't finished then it is possible for these files to \nhave very few points in them. If even after the completion of job these files have very few points then increase the stack\nsize (ulimit -s unlimited on Linux) & resume the job again.\n\n\nProblem: Not all modes are being reported in the stats file.\n\nSolution: stats file reports all the modes with local log-evidence value greater than Ztol. Set Ztol to a very large \nnegative number (e.g. -1.d90) in order for the stats file to report all the modes found.\n\n\nProblem: Compilation fails with error something like 'can not find nestrun function'.\n\nSolution: Check the symbol table for your platform (nm libnest3.a | grep nestrun) & edit multinest.h file to define NESTRUN\nappropriately.\n\n---------------------------------------------------------------------------\n", 
  "read_at": 1462546040, 
  "description": "MultiNest is a Bayesian inference tool which calculates the evidence and explores the parameter space which may contain multiple posterior modes and pronounced (curving) degeneracies in moderately high dimensions.", 
  "id": 520249
}