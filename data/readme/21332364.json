{
  "read_at": 1462547370, 
  "description": "Implementation of the connie algorithm, exploiting the latent convexity of the social network inference problem.", 
  "README.md": "# pyconnie\n\npyconnie is an implementation of Seth A. Myers and Jure Leskovec's approach to inferring latent social networks by exploiting the convexity of the problem.\n\nYou can find the paper here: http://arxiv.org/abs/1010.5504\n\n## Installation\n\nThis package requires `numpy==1.8.1` and `scipy==0.14.0`. You should have those installed before you get started. \n\nYou can install `pyconnie` using setup.py like \n\n```\npython setup.py install\n```\n\nOr from the Python Package Index like\n\n```\npip install pyconnie\n```\n\nYou can run the tests with\n\n```\npython setup.py test\n```\n\n## Example\n\nThe example below solves for the 0th column of the adjacency matrix, A with high-precision and low recall.\n\n```python\n\nfrom scipy.optimize import fmin_tnc \nimport numpy\n\nfrom pyconnie.diffusion import Diffusion, Diffusions\nfrom pyconnie.connie import convex_formulation\n\nA_true = numpy.random.rand(4, 4)\nfor i in xrange(4):\n    for j in xrange(4):\n        if i == j:\n            A_true[i][j] = 0\n        else:\n            if A_true[i][j] > 0.5:\n                A_true[i][j] = 0.0\n            else:\n                A_true[i][j] *= 0.50\n\nD = Diffusions(diffusions=[\n        Diffusion(A_true) for d in xrange(1000)]\n)\n\nA_guess = numpy.array(numpy.random.rand(1, 4))\n\nbounds = [(0, 1) for x in A_guess[0]]\nbounds[0] = (0,0)\n\nprint fmin_tnc(func=convex_formulation,\n               x0=numpy.array(A_guess),\n               args=(0, D),\n               bounds=bounds,\n               approx_grad=True)\n```\n", 
  "id": 21332364
}