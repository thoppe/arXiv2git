{
  "read_at": 1462552898, 
  "description": "Support Vector Machines - High Energy Physics Interface", 
  "README.md": "SVM High Energy Physics Interface - SVM-HINT\n============================================\n\nThe SVM-HINT software package is a LIBSVM based ROOT interface developed for tackling two-class HEP classification problems. The software package provides easy to use, automated methods for SVM hyperparameter optimization by taking Asimov Significance as the performance measure.\nCurrently SVM-HINT works with LibSVM v3 [1] and ROOT v5.3 [2] on Scientific Linux distributions [3]. \nTherefore, a ROOT installation is required.\nAn example code is given in the 'svm_hint_tutorial.cpp'. The example code gives a basic usage scenario for the SVM-HINT.\n\nRight now SVM-HINT only supports two-class problems with C penalty parameter. Since it is an abstract factory, other SVM algorithms included in the LibSVM can be implemented easily. \n\nSVM-HINT's performance and usage scenarios are discussed in [4].\n\n[1] http://www.csie.ntu.edu.tw/~cjlin/libsvm/\n\n[2] https://root.cern.ch/\n\n[3] https://www.scientificlinux.org\n\n[4] http://arxiv.org/pdf/1601.02809v2.pdf\n\n**Installation:**\nMake sure that the ROOT path is set correctly:\n\n[sahin@naf-uhhcms06:~] echo $ROOTSYS\n\n/afs/desy.de/products/root/amd64_rhel60/5.34.00\n\ninside of the svm_interface directory: \n\n[sahin@naf-uhhcms06:~/svm_interface] make\n\ng++ -O3 -fPIC -fopenmp -std=c++0x  -c   ./libsvm-weights-3.20//svm.cpp\n\ng++ -O3 -fPIC -fopenmp -std=c++0x  svm_hint_tutor.cpp svm.o fom.cpp csvc_interface.cpp -I/afs/desy.de/products/root/amd64_rhel60/5.34.00/include -L/afs/desy.de/products/root/amd64_rhel60/5.34.00/lib -lCore -lCint -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -pthread -lm -ldl -rdynamic  -o tutor_svm -lm \n\nto run tutorial:\n\n[sahin@naf-uhhcms06:~/svm_interface] root maketree.C\n\n[sahin@naf-uhhcms06:~/svm_interface] ./tutor_svm\n\n\n**Tutorial**\n\nThe tutorial provides a simple classification problem to demonstrate\nSVM-HINT's capabilities. The ROOT trees (event containers) can be\ngenerated using the command: \n\n[sahin@naf-uhhcms06:~/svm_interface] root maketree.C\n\nThis code generates two different ROOT trees: svm_testtrain.root and\nsvm_eval.root. They contain four features for two different classes. \nSVM-HINT uses a C++ container (svm_container) and requires a size\nestimation (number of features/variable and the size of the sample -\nif the actual size is more than the estimate the memory is automatically allocated).\n\n$ svm_container svm(nvar_est,nevent_est);\n\nOnce the variables are read from the trees, they can be assigned to\nthese containers using \n\n$ svm.set_feature(vars.at(0));\n\nIn this example we are using same container for training and test events (SVM-HINT will automatically separate them later), and a\nseparate container for the evaluation.\n\nAfter adding all variables of the given event we can push back the\nevent to the container by using\n\n$ svm.set_event(weight);\n\nhere the argument of the method (\"weight\") is the weight of the\nindividual event (double).\n\n$  svm_interface * csvc = new csvc_interface(nsamp_tot,nbkg_tot,nsig_tot);\n\nnsamp_tot: Total number of events to be trained and tested\n\nnbkg_tot: Total number of background events\n\nnsig_tot: Total number of signal events\n\nis the SVM problem object where we give the total event number, and\ntraining and test event numbers separately - given that they are in\norder (training events + test events).\n\n$ svm_analyze stop;\n\ndeclaration of analyzer object.\n\n$ stop.set_filename(\"tutorial.root\");\n\noutput file name (note the 'root' extension)\n \n$ stop.set_svm_interface(csvc);\n\nassigning the problem to the analyzer \n\n$ stop.setup_svm(svm);\n\nassigning the text and training event container\n \n$ stop.set_eval(svm_eval,nbkg_eval);\n\nassigning the evaluation sample\n\nNow there are two choices if there is an estimate of the hyper\nparameters, one can simply:\n\n$ stop.Obtain_probabilities(c_value, gamma_value, estimated_disc_cut_value)\n\nor you can do a grid search using\n\n$ stop.Scan_parameters(output);\n\nwhere output is a std::vector<int>*, holding the output label values. \n\n **Short class definitions**\n\nsvm_interface: \nAbstract base class deriving: csvc_interface \n\ncsvc_interface : \nThe LIBSVM-csvc interface class. It holds the model containers of the given SVM instance. \n\nsvm_analyze:\nSVM problem analyzer\n\nfom:\nCalculates various figure of merits (i.e. Z_Asimov, Z_{S/sqrt{S+B}}).\n", 
  "id": 49420833
}