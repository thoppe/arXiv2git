{
  "read_at": 1462549902, 
  "description": "Code to generate an (1+e)-approximation of the Cech complex using a Well-Separated Simplical Decomposition (WSSD).", 
  "README.md": "wssd_cech\n=========\n\nCode to generate an (1+e)-approximation of the Cech complex using a Well-Separated Simplical Decomposition (WSSD). The code is based on the paper *\"Approximate Cech Complexes in Low and High Dimensions\"* by Michael Kerber and R. Sharathkumar (ArXiv copy: http://arxiv.org/abs/1307.3272). \n\nUse\n---\nVisual Studio 2012 project files are included. There are no external dependencies except for a C++11 compatible compiler. There are 2 compiler flags _WSSD_VALIDATION_ for enabling the code that can validate the WSSD, and _WSSD_THREADS_ to enable multithreading for finding tuples in the simplices.\n\nDisclaimer\n----------\nThe code is currently working, but not in it's most user-friendly form.\n\nLicense\n-------\nThe code is free to use for academic purposes, with the caveat that the authors should be cited in any paper, and contacted prior to submission. For any commercial use, the authors should be contacted.\n\nChanges with regards to the paper\n---------------------------------\nThere is a vast number of changes:\n\n**QUADTREE**\n- Quadtree is first built with normal construction algorithm, then compressed *O(n log S)* running time, where *S* is the spead of the point set.\n- For each cell, we compute the smallest axis-aligned bounding box\n\n**1-WSSD**\n- We compute distance between 2 bounding boxes (finding the difference is done per dimension), compare this to the diameters of the AABBs of the quadtree cells.\n- We discard tuples that where the diameter of the AABB of the tuple is larger than the largest alpha (since they will never be treated in the Cech complex approximation).\n\n**K-WSSD**\n- We separate the definition of WSSD from quadtrees. We use tight-fitting AABBs, but all properties should hold for bounding volume hierarchies (BVHs) where the bounding volume of descendants is completely contained in the bounding volume of their ancestors (so AABB trees are good, but sphere trees are not).\n-- A corollary of this is that any mention of height should be replaced with diameter. All proofs should still go through with the exception of the size proof using the packing algorithm. For this we need that the BVH was creates from a quadtree (similar to the traditional WSPD proof).\n\n- Lemma 10, we take *(1 + 1/D)/sqrt(1-1/(D*D))* instead of *2*\n- Lemma 9, we take *diam(q') <= (eps*r)/(1+eps)* instead of *(eps*r)/2*\n- We perform the range query by starting at the root and traversing top-down\n\n**FILTRATION**\n- We start by adding all the vertices\n- For every WST we find the correct time to add, and store these in a list\n- Once the cardinality of a tuple decreases, we discard is for a reason similar to Lemma 15.\n- To update from one delta to the next we do:\n-- See if two vertices should be collapsed. If so, do it. We have a scheme in place that always collapses all children of a node to the same vertex.\n-- Go over the nodes in the WSSD that haven't been handled yet. We add a simplex to the filtration if it fulfils the conditions. We test for diameter of the smallest AABB.\n- Use the collapse described in Dey Fen Wang\n-- We don't create any simplices with dimension higher than *D+1*. This yields a subset of the persistence pairs.\n\nCredit\n------\nWe use Bernd Gaertner's Miniball code (http://www.inf.ethz.ch/personal/gaertner/miniball.html), which is under GPLv3, to determine the smallest enclosing ball of a set of quadtree nodes.\n", 
  "id": 12977223
}