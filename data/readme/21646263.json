{
  "read_at": 1462550983, 
  "description": "Multidimensional non-linear minima /  maxima filtering", 
  "README.md": "# MinMaxFilter\n\n[![Build Status](https://travis-ci.org/codles/MinMaxFilter.jl.svg?branch=master)](https://travis-ci.org/codles/MinMaxFilter.jl)\n[![Coverage Status](https://coveralls.io/repos/codles/MinMaxFilter.jl/badge.png?branch=master)](https://coveralls.io/r/codles/MinMaxFilter.jl?branch=master)\n\n\n# This code has been merged in to [Images.jl](https://github.com/timholy/Images.jl) \n\nIt only remains here for historical reasons. Please use Images.jl\n\n\n## Overview\n\nThe filter computes the minima and/or maxima of an array over sliding window with a given size.\n\nThis is a port of the Lemire min max filter as implemented by Bruno Luong.  \nhttp://arxiv.org/abs/cs.DS/0610046  \nhttp://lemire.me/  \nhttp://www.mathworks.com/matlabcentral/fileexchange/24705-min-max-filter\n\n## Install\n\n```julia\nPkg.clone(\"https://github.com/codles/MinMaxFilter.jl.git\")\n\n```\n\n\n## Example usage\n\n### Three dimensional peak finding\n\nRead in three dimensional data, plot and find peaks.  \nUses Winston and EEG packages for plotting.\n\n```julia\nusing Winston\nusing EEG\n\nfilen = matopen(joinpath(dirname(@__FILE__), \"data\", \"3d_array.mat\"))\nA = read(filen, \"image\")\nA = convert(Array{FloatingPoint}, A)\nclose(filen)\n\np = plot_dat(A)\n\nminval, maxval = minmax_filter(A, 6, verbose=false)\n\nmatching = A[2:size(maxval)[1]+1, 2:size(maxval)[2]+1, 2:size(maxval)[3]+1]\nmatching = matching .== maxval\n\npeaks = maxval[matching]\npeaks = peaks[peaks .>= 0.1 * maximum(peaks)]\n\nfor l = 1:length(peaks)\n    x, y, z = ind2sub(size(A), find(A .== peaks[l]))\n    println(\"x=$x, y=$y, z=$z, val=$(A[x,y,z])\")\n    oplot(p, x, y, z)\nend\n```\n\n![Dipoles](/test/images/3D-dipole.png)\n", 
  "id": 21646263
}