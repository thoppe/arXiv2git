{
  "read_at": 1462557931, 
  "description": null, 
  "README.md": "\nString Matching in a Stream\n===========================\nDescription\n---\nThis is a randomised algorithm for string matching in a stream. It uses sublinear space (O(log m)) in pattern size and O(log m) time per input character (where m is the pattern size; |P|=m).\n\nThe implementation is based on Breslauer and Galil's algorithm described in:\n- ACM: http://dl.acm.org/citation.cfm?id=2635814\n-\tGoogle Scholar: https://scholar.google.com/citations?view_op=view_citation&citation_for_view=i6ZjofkAAAAJ:MXK_kJrjxJIC\n\nCurrently I am working on a (1+e) randomised solution for the k-mismatches problem based on: http://arxiv.org/abs/1508.00731.\nThe current algorithm is one of the building blocks for it.\n\nFiles\n---\n- Fingerprint.h: contains a class for implementing Rabin Karp fingerprints\n- Misc.h: has some helper functions that might not be class specific\n- Stream_Match.h: contains the actual implementation\n- Source.cpp: has an example of how to use everything\n\nHow To use it\n---\n###Setup\n1) Standard compilation with your favourite compiler (I used MSVC++).\n\n2) Include \"Stream_Match.h\".\n\n###In code\n1) Create a Stream_Match_Params based on the pattern. It generates a prime number and preprocess some information.\n\n2) Create you Stream_Match object by feeding it the pattern and the params object.\n\n3) Feed one character/elemnt at a time from you stream.\n\nThe template types for all the classes are:\n- type that you want to be used for storing fingerprints (I recommend unsigned long long)\n- type of the elements in your stream (can be pretty much anything)\n\n\nNotes\n---\n- The pattern is not preprocessed as a stream so you need to store it at the beginning for the preprocessing; you can delete it once the Stream_Match object was created.\n- I only checked if it compiles in Visual Studio 2013 (but it should work with any c++ compiler).\n- As I mentioned in the description, this is part of a larger project, thus no commit history. I might make that public once it's finished.\n", 
  "id": 52603121
}