{
  "read_at": 1462550527, 
  "description": "Public repository of the Cosmic Linear Anisotropy Solving System", 
  "README.md": "CLASS: Cosmic Linear Anisotropy Solving System  {#mainpage}\n==============================================\n\nAuthors: Julien Lesgourgues and Thomas Tram\n\nwith several major inputs from other people, especially Benjamin\nAudren, Simon Prunet, Jesus Torrado, Miguel Zumalacarregui, Francesco\nMontanari, etc.\n\nFor download and information, see http://class-code.net\n\n\nCompiling CLASS and getting started\n-----------------------------------\n\n(the information below can also be found on the webpage, just below\nthe download button)\n\nAfter downloading the code, unpack the archive (tar -zxvf\nclass_v*.tar.gz), go to the class directory (cd class_v*/) and compile\n(make clean; make class). If the first compilation attempt fails, you\nmay need to open the Makefile and adapt the name of the compiler\n(default: gcc), of the optimization flag (default: -O4) and of the\nOpenMP flag (default: -fopenmp; this flag is facultative, you are free\nto compile without OpenMP if you don't want parallel execution; note\nthat you need the version 4.2 or higher of gcc to be able to compile\nwith -fopenmp). Several details on the CLASS compilation are given on\nthe wiki page\n\nhttps://github.com/lesgourg/class_public/wiki/Installation\n\n(in particular, for compiling on Mac 10.9 Mavericks).\n\nTo check that the code runs, type:\n\n    ./class explanatory.ini\n\nThe explanatory.ini file is a reference input file, containing and\nexplaining the use of all possible input parameters. We recommend to\nread it, to keep it unchanged (for future reference), and to create\nfor your own purposes some shorter input files, containing only the\ninput lines which are useful for you. Input files must have a *.ini\nextension.\n\nIf you want to play with the precision/speed of the code, you can use\none of the provided precision files (e.g. cl_permille.pre) or modify\none of them, and run with two input files, for instance:\n\n    ./class test.ini cl_permille.pre\n\nThe automatically-generated documentation is located in\n\n    doc/manual/html/index.html\n    doc/manual/CLASS_manual.pdf\n\nOn top of that, if you wish to modify the code, you will find lots of\ncomments directly in the files.\n\nPython\n------\n\nTo use CLASS from python, or ipython notebooks, or from the Monte\nPython parameter extraction code, you need to compile not only the\ncode, but also its python wrapper. This can be done by typing just\n'make' instead of 'make class'. More details on the wrapper and its\ncompilation are found on the wiki page\n\nhttps://github.com/lesgourg/class_public/wiki\n\nPlotting utility\n----------------\n\nSince version 2.3, the package includes an improved plotting script\ncalled CPU.py (Class Plotting Utility), written by Benjamin Audren and\nJesus Torrado. It can plot the Cl's, the P(k) or any other CLASS\noutput, for one or several models, as well as their ratio or percentage\ndifference. The syntax and list of available options is obtained by\ntyping 'pyhton CPU.py --help'. There is a similar script for MATLAB,\nwritten by Thomas Tram. To use it, once in MATLAB, type 'help\nplot_CLASS_output.m'\n\nDeveloping the code\n--------------------\n\nIf you want to develop the code, we suggest that you download it from\nthe github webpage\n\nhttps://github.com/lesgourg/class_public\n\nrather than from class-code.net. Then you will enjoy all the feature\nof git repositories. You can even develop your own branch and get it\nmerged to the public distribution. For related instructions, check\n\nhttps://github.com/lesgourg/class_public/wiki/Public-Contributing\n\nUsing the code\n--------------\n\nYou can use CLASS freely, provided that in your publications, you cite\nat least the paper `CLASS II: Approximation schemes <http://arxiv.org/abs/1104.2933>`_. Feel free to cite more CLASS papers!\n\nSupport\n-------\n\nTo get support, please open a new issue on the\n\nhttps://github.com/lesgourg/class_public\n\nwebpage!\n", 
  "id": 13270363
}