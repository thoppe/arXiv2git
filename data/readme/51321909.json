{
  "read_at": 1462557457, 
  "description": "A fast implementation for varbyte 32bit/64bit integer compression", 
  "README.md": "libvbyte - Fast C Library for 32bit and 64bit Integer Compression\n======================\n\nA C library with a fast implementation for VByte integer compression.\nUses MaskedVbyte (SSE/AVX) for 32bit integers on supported platforms. It works\non Linux, Microsoft Windows and most likely all other sane systems.\n\nlibvbyte can compress sorted and unsorted integer sequences. It uses delta\ncompression for the sorted sequences.\n\nIn addition, the library can perform operations directly on compressed data:\n\n   * select: returns a value at a specified index\n   * linear search: for unsorted sequences, or short sorted sequences\n   * lower bound search: based on binary search, for sorted sequences\n   * append: appends an integer to a compressed sequence\n\nSimple demo\n------------------------\n\n    #define LEN 100\n    uint32_t in[LEN] = {0};\n    uint8_t out[512];\n\n    // Fill |in| with numbers of your choice\n    for (int i = 0; i < LEN; i++)\n      in[i] = i;\n\n    // Now compress; can also use vbyte_compress_sorted() if the numbers\n    // are sorted. This improves compression.\n    uint32_t size = vbyte_compress_unsorted32(&in[0], &out[0], LEN);\n    printf(\"compressing %u integers (%u bytes) into %u bytes\\n\",\n            LEN, LEN * 4, size);\n \n    // Decompress again\n    uint32_t decompressed[LEN];\n    vbyte_uncompress_unsorted32(&out[0], &decompressed[0], LEN);\n\nSee test.cc for more usage examples.\n\nUsage\n------------------------\n\nIt can't be more simple:\n\n    make\n\nTo run the tests:\n\n    ./test\n\nCompile time configuration\n----------------------\n\nThe Makefile automatically enables use of MaskedVbyte (SSE/AVX). If your\ncode should run on older platforms then undefine VBYTE_CFLAGS in the\nMakefile (at the very top of the file).\n\nMaskedVbyte can be compiled with AVX and AVX2. The code currently uses AVX.\nIf you want to use AVX2 instead then change the compiler setting in\nthe Makefile.\n\nWhere is this used?\n----------------------\n\nI use this library to compress 32bit and 64bit integers in upscaledb, a very\nfast embedded key/value store (see https://upscaledb.com). \n\nIf you would like me to add your application to this list then please send\nme a mail at chris@crupp.de.\n\nLicensing\n------------------------\n\nApache License, Version 2.0\n\nRequirements\n------------------------\n\nThis library only works with little-endian CPUs.\n\nTested on Linux and Windows (Visual Studio 2013). Porting it should not\nbe difficult.\n\nAcknowledgement\n------------------------\n\nThis work is based on Daniel Lemire (http://lemire.me)'s ideas and\nimplementation at https://github.com/lemire/MaskedVbyte.\n\nFor further information, see\n* Goldstein J, Ramakrishnan R, Shaft U. Compressing relations and indexes. Proceedings of the Fourteenth International Conference on Data Engineering, ICDE '98, IEEE Computer Society: Washington, DC, USA, 1998; 370-379.\n* Daniel Lemire and Leonid Boytsov, Decoding billions of integers per second through vectorization, Software Practice & Experience 45 (1), 2015.  http://arxiv.org/abs/1209.2137 http://onlinelibrary.wiley.com/doi/10.1002/spe.2203/abstract\n* Daniel Lemire, Leonid Boytsov, Nathan Kurz, SIMD Compression and the Intersection of Sorted Integers, Software Practice & Experience (to appear) http://arxiv.org/abs/1401.6399\n* Jeff Plaisance, Nathan Kurz, Daniel Lemire, Vectorized VByte Decoding, International Symposium on Web Algorithms 2015, 2015. http://arxiv.org/abs/1503.07387\n* Wayne Xin Zhao, Xudong Zhang, Daniel Lemire, Dongdong Shan, Jian-Yun Nie, Hongfei Yan, Ji-Rong Wen, A General SIMD-based Approach to Accelerating Compression Algorithms, ACM Transactions on Information Systems 33 (3), 2015. http://arxiv.org/abs/1502.01916\n\n\n", 
  "id": 51321909
}