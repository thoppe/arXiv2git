{
  "read_at": 1462557041, 
  "description": "Code which computes approximated equilibrium for Social Coordination Games as shown in http://arxiv.org/abs/1404.4718v1", 
  "README.md": "# social-coordination-game\nCode which computes approximated equilibrium for Social Coordination Games as shown by \n[E. Anshelevich and S. Sekar](http://arxiv.org/abs/1404.4718v1). \n\n## Usage\n\nGiven the number of players and strategies, the code generates a random instance. To create a game with ten players\nand four strategies, simply type\n\n```python\ngame = Game(10, 4)\n```\n\nThen you can normalize the weights and find an alpha approximated Nash equilibria with\n\n```python\ngame.normalize()\nresult = game.findEquilibria(alpha)\n```\n\nresult is a dictionary containing several info.\nThere are utility functions to save the results of a test as a CSV file. Furthermore, a function to make batch test in\nparallel is available. The function ```run``` calls a given function for a given number of test cases.\nThe default test function tries several heuristic developed during my master thesis work. For example, to test\n2500 instances of the game, with random number of players and strategies, type\n\n```python\nres = saveCSVResults( run(2500) )\n```\nthis saves the results in a CSV file in the running directory and puts the same results in the variable res.\n", 
  "id": 28088819
}