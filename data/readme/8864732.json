{
  "read_at": 1462549100, 
  "description": "Random matrices package for Julia", 
  "README.md": "RandomMatrices.jl\n=================\n\nRandom matrix package for [Julia](http://julialang.org).\n\n[![RandomMatrices](http://pkg.julialang.org/badges/RandomMatrices_0.4.svg)](http://pkg.julialang.org/?pkg=RandomMatrices)\n[![Build Status](https://travis-ci.org/jiahao/RandomMatrices.jl.png?branch=master)](https://travis-ci.org/jiahao/RandomMatrices.jl)\n[![Coverage Status](https://coveralls.io/repos/jiahao/RandomMatrices.jl/badge.svg?branch=master&service=github)](https://coveralls.io/github/jiahao/RandomMatrices.jl?branch=master)\n[![codecov.io](https://codecov.io/github/jiahao/RandomMatrices.jl/coverage.svg?branch=master)](https://codecov.io/github/jiahao/RandomMatrices.jl?branch=master)\n[![DOI](https://zenodo.org/badge/5087/jiahao/RandomMatrices.jl.svg)](https://zenodo.org/badge/latestdoi/5087/jiahao/RandomMatrices.jl)\n\nThis extends the [Distributions](https://github.com/JuliaStats/Distributions.jl)\npackage to provide methods for working with matrix-valued random variables,\na.k.a. random matrices. State of the art methods for computing random matrix\nsamples and their associated distributions are provided.\n\nThe names of the various ensembles can vary widely across disciplines. Where possible,\nsynonyms are listed.\n\nAdditional functionality is provided when these optional packages are installed:\n- Symbolic manipulation of Haar matrices with [GSL.jl](https://github.com/jiahao/GSL.jl)\n- Invariant ensembles with [ApproxFun.jl](https://github.com/dlfivefifty/ApproxFun.jl)\n\n# Gaussian matrix ensembles\n\nMuch of classical random matrix theory has focused on matrices with matrix elements comprised of\nindependently and identically distributed (iid) real, complex or quaternionic Gaussians.\n(Traditionally, these are associated with a parameter `beta` tracking the number of independent\nreal random variables per matrix element, i.e. `beta=1,2,4` respectively. This is also referred\nto as the Dyson 3-fold way.)\nMethods are provided for calculating random variates (samples) and various properties of these\nrandom matrices.\n\nThe hierarchy of dense matrices provided are\n\n- Ginibre ensemble - all matrix elements are iid with no global symmetry\n- Hermite ensemble - one global symmetry\n  - Gaussian orthogonal ensemble (GOE, `beta=1`) - real and symmetric\n  - Gaussian unitary ensemble (GUE, `beta=2`) - complex and Hermitian\n  - Gaussian symplectic ensemble (GSE, `beta=4`) - quaternionic and self-dual\n- Circular ensemble - uniformly distributed with `|det|=1`\n  - Circular orthogonal ensemble (GOE, `beta=1`)\n  - Circular unitary ensemble (GUE, `beta=2`)\n  - Circular symplectic ensemble (GSE, `beta=4`)\n- Laguerre matrices = white Wishart matrices\n- Jacobi matrices = MANOVA matrices\n- Unitary invariant ensembles\n\nUnless otherwise specified, `beta=1,2,4` are supported. For the symplectic matrices `beta=4`,\nthe 2x2 outer block-diagonal complex representation `USp(2N)` is used.\n\n## Joint probability density functions (jpdfs)\n\nGiven eigenvalues `lambda` and the `beta` parameter of the random matrix distribution:\n\n- `VandermondeDeterminant(lambda, beta)` computes the Vandermonde determinant\n- `HermiteJPDF(lambda, beta)` computes the jpdf for the Hermite ensemble\n- `LaguerreJPDF(lambda, n, beta)` computes the jpdf for the Laguerre(n) ensemble\n- `JacobiJPDF(lambda, n1, n2, beta)` computes the jpdf for the Jacobi(n1, n2) ensemble\n\n## Matrix samples\n\nConstructs samples of random matrices corresponding to the classical Gaussian\nHermite, Laguerre(m) and Jacobi(m1, m2) ensembles.\n\n- `GaussianHermiteMatrix(n, beta)`, `GaussianLaguerreMatrix(n, m, beta)`,\n   `GaussianJacobiMatrix(n, m1, m2, beta)`\n   each construct a sample dense `n`x`n` matrix for the corresponding matrix\n   ensemble with `beta=1,2,4`\n\n- `GaussianHermiteTridiagonalMatrix(n, beta)`,\n  `GaussianLaguerreTridiagonalMatrix(n, m, beta)`,\n  `GaussianJacobiSparseMatrix(n, m1, m2, beta)`\n  each construct a sparse `n`x`n` matrix for the corresponding matrix ensemble\n  for arbitrary positive finite `beta`.\n  `GaussianHermiteTridiagonalMatrix(n, Inf)` is also allowed.\n  These sampled matrices have the same eigenvalues as above but are much faster\n  to diagonalize oweing to their sparsity. They also extend Dyson's threefold\n  way to arbitrary `beta`.\n- `GaussianHermiteSamples(n, beta)`,\n  `GaussianLaguerreSamples(n, m, beta)`,\n  `GaussianJacobiSamples(n, m1, m2, beta)`\n  return a set of `n` eigenvalues from the sparse random matrix samples\n\n- `HaarMatrix(n, beta)`\n  Generates a random matrix from the `beta`-circular ensemble.\n - `HaarMatrix(n, beta, correction)` provides fine-grained control of what kind of correction\n   is applied to the raw QR decomposition. By default, `correction=1` (Edelman's correction) is\n   used. Other valid values are `0` (no correction) and `2` (Mezzadri's correction).\n - `NeedsPiecewiseCorrection()` implements a simple test to see if a correction is necessary.\n\n- `InvariantEnsemble(str,n)`\n   Generates a unitary invariant ensemble, where str determines the\n   potential of the ensemble, see below.\n   Only available if ApproxFun package is installed.\n\nThe parameters `m`, `m1`, `m2` refer to the number to independent \"data\" degrees of freedom.\nFor the dense samples these must be `Integer`s but can be `Real`s for the rest.\n\n# Formal power series\n\nAllows for manipulations of formal power series (fps) and formal Laurent series\n(fLs), which come in handy for the computation of free cumulants.\n\n## Types\n- `FormalPowerSeries`: power series with coefficients allowed only for\n  non-negative integer powers\n- `FormalLaurentSeries`: power series with coefficients allowed for all\n  integer powers\n\n## FormalPowerSeries methods\n\n### Elementary operations\n- basic arithmetic operations `==`, `+`, `-`, `^`\n- `*` computes the Cauchy product (discrete convolution)\n- `.*` computes the Hadamard product (elementwise multiplication)\n- `compose(P,Q)` computes the series composition P.Q\n- `derivative` computes the series derivative\n- `reciprocal` computes the series reciprocal\n\n### Utility methods\n- `trim(P)` removes extraneous zeroes in the internal representation of `P`\n- `isalmostunit(P)` determines if `P` is an almost unit series\n- `isconstant(P)` determines if `P` is a constant series\n- `isnonunit(P)` determines if `P` is a non-unit series\n- `isunit(P)` determines if `P` is a unit series\n- `MatrixForm(P)` returns a matrix representation of `P` as an upper triangular\n  Toeplitz matrix\n- `tovector` returns the series coefficients\n\n# Densities\n\nFamous distributions in random matrix theory\n\n- `Semicircle` provides the semicircle distribution\n- `TracyWidom` computes the Tracy-Widom density distribution\n  by brute-force integration of the Painleve II equation\n\n# Utility functions\n\n- `hist_eig` computes the histogram of eigenvalues of a matrix using the\n  method of Sturm sequences.\n  This is recommended for `SymTridiagonal` matrices as it is significantly\n  faster than `hist(eigvals())`\n  This is also implemented for dense matrices, but it is pretty slow and\n  not really practical.\n\n# Stochastic processes\n\nJulia iterators for stochastic operators.\n\nAll subtypes of `StochasticProcess` contain at least one field, `dt`,\nrepresenting the time interval being discretized over.\n\nThe available `StochasticProcess`es are\n\n- `BrownianProcess(dt)`: Brownian random walk.\n   The state of the iterator is the cumulative displacement of the random walk.\n- `WhiteNoiseProcess(dt)` : White noise.\n   The value of this iterator is `randn()*dt`.\n   The state associated with this iterator is `nothing`.\n- `StochasticAiryProcess(dt, beta)`: stochastic Airy process with real positive `beta`.\n   The value of this iterator in the limit of an infinite number of iterations\n   is known to follow the `beta`-Tracy-Widom law.\n   The state associated with this iteratior is a `SymTridiagonal` matrix whose\n   largest eigenvalue is the value of this process.\n\n# Invariant ensembles\n\n`InvariantEnsemble(str,n)` supports n x n unitary invariant ensemble\n with distribution\n\n`exp(- Tr Q(M)) dM`\n\n `str` specifies an ensemble with precomputed recurrence coefficients.\n  The currently include ensembles are\n\n|                   | Q(M) |\n| ----------------- | ----- |\n| `Quartic`         | n M^4 |\n| `Eighth`          | n M^8 |\n| `HODecay`         | n (M^4/20 - 4/15M^3 +M^2/5 + 8/5M) |\n| `CoshUnscaled`    | cosh(M) |\n| `QuarticUnscaled` | M^4     |\n| `EightUnscaled`   | M^8     |\n\n# References\n- James Albrecht, Cy Chan, and Alan Edelman,\n    \"Sturm Sequences and Random Eigenvalue Distributions\",\n    *Foundations of Computational Mathematics*,\n    vol. 9 iss. 4 (2009), pp 461-483.\n  [[pdf]](www-math.mit.edu/~edelman/homepage/papers/sturm.pdf)\n  [[doi]](http://dx.doi.org/10.1007/s10208-008-9037-x)\n\n- Ioana Dumitriu and Alan Edelman,\n    \"Matrix Models for Beta Ensembles\",\n    *Journal of Mathematical Physics*,\n    vol. 43 no. 11 (2002), pp. 5830-5547\n  [[doi]](http://dx.doi.org/doi: 10.1063/1.1507823)\n  [arXiv:math-ph/0206043](http://arxiv.org/abs/math-ph/0206043)\n\n- Alan Edelman, Per-Olof Persson and Brian D Sutton,\n    \"The fourfold way\",\n    *Journal of Mathematical Physics*,\n    submitted (2013).\n  [[pdf]](http://www-math.mit.edu/~edelman/homepage/papers/ffw.pdf)\n\n- Alan Edelman and Brian D. Sutton,\n    \"The beta-Jacobi matrix model, the CS decomposition,\n     and generalized singular value problems\",\n    *Foundations of Computational Mathematics*,\n    vol. 8 iss. 2 (2008), pp 259-285.\n  [[pdf]](http://www-math.mit.edu/~edelman/homepage/papers/betajacobi.pdf)\n  [[doi]](http://dx.doi.org/10.1007/s10208-006-0215-9)\n\n- Peter Henrici,\n    *Applied and Computational Complex Analysis,\n    Volume I: Power Series---Integration---Conformal Mapping---Location of Zeros*,\n    Wiley-Interscience: New York, 1974\n  [[worldcat]](http://www.worldcat.org/oclc/746035)\n\n- Frank Mezzadri,\n    \"How to generate random matrices from the classical compact groups\",\n    Notices of the AMS, vol. 54 (2007), pp592-604\n  [[arXiv]](http://arxiv.org/abs/math-ph/0609050)\n", 
  "id": 8864732
}