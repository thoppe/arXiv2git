{
  "read_at": 1462550276, 
  "description": "2048 AI", 
  "README.md": "# 2048 AI #\n\nThe best AI Controller for the puzzle [game 2048](https://gabrielecirulli.github.io/2048/) (as of March 2016). Its score depends on the search settings:\n\n| Search limit | Average score | 32768 [%] | 16384 [%] | 8192 [%] | Games | Moves/s\n| -------------|---------------|-----------:|-----------:|----------:|-------:|--------------:\n| 1-ply        | 324710 +- 11043 | 19 | 68 |  90 | 1000 | 258371 \n| 2-ply        | 457079 +- 11112 | 34 | 91 |  99 | 1000 | 20524 \n| 3-ply        | 511759 +- 12021 | 50 | 92 |  99 | 1000 | 1484 \n| 5-ply        | 545833 +- 21500 | 54 | 97 | 100 | 300  | 16 \n| 1 ms         | 527099 +- 11486 | 54 | 95 | 100 | 1000 | 916 \n| 50 ms        | 576655 +- 20839 | 62 | 97 | 99  | 300  | 20 \n| 100 ms       | 589355 +- 20432 | 65 | 96 | 100 | 300  | 10 \n| 200 ms       | 591380 +- 21870 | 67 | 97 | 99  | 300  | 5 \n| 1000 ms      | **609104 +- 38433** | 69 | 97 | 98  | 100  | 1\n\n\n## Algorithm ##\n\nThe program uses expectimax with an n-tuple network for state evaluation function, which has been learned from scratch using a new variant of temporal difference learning. The learning method is described in:\n\n> Wojciech Jaskowski, Mastering 2048 with Delayed Temporal Coherence Learning, Multi-State Weight Promotion, Redundant Encoding and Carousel Shaping, 2016 (http://arxiv.org/abs/1604.05085)\n\nwhich extends our previous work:\n\n> Marcin Szubert and Wojciech Jaskowski, Temporal Difference Learning of N-Tuple Networks for the Game 2048, Proceedings of IEEE Conference on Computational Intelligence and Games, pp. 1-8, August 2014, Dortmund, Germany, ([preprint](http://www.cs.put.poznan.pl/mszubert/pub/szubert2014cig.pdf))\n\n## Authors ##\n* [Wojciech Jaskowski](http://www.cs.put.poznan.pl/wjaskowski) (the learning algorithm)\n* Adam Szczepanski (this code)\n\n## Requirements ##\n\n* C++11 compiler\n* CMake 3.0+\n* Boost 1.49.0+ (program_options, accumulators)\n\nIf you want to use the web application you will also need:\n\n* Python 2\n* Chrome or Firefox\n\nTested on:\n\n* Mac OS X 10.11.1, Apple LLVM version 7.0.2\n* Ubuntu 15.04 64-bit, g++ 4.9.2\n* Windows 7 64-bit, Visual Studio 14 2015\n\n### Evaluation function files ###\n\nThe program requires a file with an evaluation function. Some basic (very poor, but small) evaluation functions are already in ```data/2048_strategies/``` directory. However, for the state-of-the-art results download and unzip our [best evaluation function](http://www.cs.put.poznan.pl/wjaskowski/pub/2048/eval-function.bin.special.zip).\n\n## Building and Running ##\n\n### Console application ###\n\n#### Linux/OS X ####\n\n1. Go to the project root directory\n2. Run ```cmake .```\n3. Run ```make```. The ```lib/``` and ```bin/``` directories will be created.\n\n#### Windows ####\n\n1. Go to the project root directory\n2. Create and go to ```_build/``` directory\n3. Run ```cmake .. -G \"Visual Studio 14 2015 Win64\"```. You may have to set boost directories: ```set BOOST_ROOT=your_boost_root_directory``` and ```set BOOST_LIBRARYDIR=your_boost_library_directory``` first\n4. Open the solution and build the release version of it\n\n### Examples ###\n\nFor running multiple games and testing the AI's capabilities\n\n* 1 game, max depth 1, single thread:\n```bash\n./bin/main --strategy data/2048_strategies/eval-function.bin.special --uncompress false\n```\n* 10 games, max depth 3, uncompressed model (faster, but requires more RAM):\n```bash\n./bin/main --strategy data/2048_strategies/eval-function.bin.special --games 10 --depth 3\n```\n* 10 games, max 100ms per move, uncompressed model, multithreating in expectimax (**best reasonable settings**):\n```bash\n./bin/main --strategy data/2048_strategies/eval-function.bin.special --games 10 --depth 100 --time 100 --eval_multithreading\n```\n* 100 games, max depth 5, uncompressed model, playing 4 games in pararell:\n```bash\n./bin/main --strategy data/2048_strategies/eval-function.bin.special --games 100 --depth 5 --threads 4\n```\n* 10 games, min depth 1, max depth 8, 1 game thread, multithreading in expectimax evaluation, max time 50 ms per round, uncompressed model, prints boards' states to the console:\n```bash\n./bin/main --strategy data/2048_strategies/eval-function.bin.special --games 10 --depth 8 --time 50 --eval_multithreading  -v\n```\n\n### Web application ###\n\nFor observing how the AI works on the [2048 game site](http://gabrielecirulli.github.io/2048/)\n\nYou may need to install the *websocket-client* first:\n```\npip install websocket-client\n```\n\n#### Chrome ####\n\n1. Close all instances of Chrome (including hangouts, etc...)\n2. Run the browser with remote-debugging enabled:\n    ```\n    chrome --remote-debugging-port=9222\n    ```\n3. Go to [2048 game site](http://gabrielecirulli.github.io/2048/)\n4. Run python script (see examples)\n\n#### Firefox ####\n\n1. First you need to install [Remote Control](https://addons.mozilla.org/pl/firefox/addon/remote-control/) plugin\n2. Go to [2048 game site](http://gabrielecirulli.github.io/2048/)\n3. Start remote debugging (click on the plugin's icon)\n4. Run python script (see examples below)\n\nThe Web application was strongly based on the code from https://github.com/nneonneo/2048-ai.\n\n### Examples ###\n\n* chrome, max depth 4, multithreading, no time limit, uncompressed model:\n```\npython 2048.py -b chrome --strategy data/2048_strategies/eval-function.bin.special --depth 4 --multithreading true\n```\n\n* On Windows you will need to specify WebApi library file:\n```\npython 2048.py -b chrome --lib _build/lib/Release/WebApi.dll\n```\n\n## Usage ##\n\n#### Console application ####\n\n+ **--strategy arg** - strategy input file (by default data/2048_strategies/2048_a_weak_player.bin.txt)\n+ **--uncompress arg** - uncompress strategy (true/false, by default true). Faster but requires more RAM.\n+ **--seed arg** - random seed (by default based on time elapsed since epoch)\n+ **--games arg** - number of games (by default 1)\n+ **--time arg** - maximum time for one round [ms], 0 means no time limit (by default 0)\n+ **--depth arg** - maximum depth for expectimax (by default 1)\n+ **--threads arg** - number of threads (each thread plays different game, by default 1)\n+ **--eval_multithreading** - enable multithreading in expectimax algorithm\n+ **-h [ --help ]** - produce help message\n+ **-v [ --verbose ]** - show board and score after each round\n\n#### Web Application ####\n\n+ **-b [ --browser ]** - choose browser (Chrome or Firefox, by default Firefox)\n+ **-p [ --port PORT ]** - port number to control on (default: 32000 for Firefox, 9222 for Chrome)\n+ **--strategy arg** - strategy input file (by default data/2048_strategies/2048_a_weak_player.bin.txt)\n+ **--uncompress arg** - uncompress strategy (true/false, by default true). Faster but requires more RAM.\n+ **--time arg** - maximum time for one round [ms], 0 means no time limit (by default 0)\n+ **--depth arg** - maximum depth for expectimax (by default 1)\n+ **--multithreading arg** - enable multithreading in expectimax algorithm (true/false, by default true)\n", 
  "id": 48186585
}