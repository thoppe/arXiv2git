{
  "read_at": 1462543297, 
  "description": "SmartDiet analysis toolkit for Android", 
  "README.md": "SmartDiet\n=========\n\nSmartDiet is a *proof-of-concept toolkit* for analyzing energy usage of Android applications and\nidentifying constraints regarding mobile code offloading. This is a research toolkit,\ndesigned to highlight the issues related to mobile offloading, *not a polished set of tools\nfor everyday use*.\n\nSmartDiet consists of two tools:\n\n* Constraint analysis tool to highlight offloadability issues in program source\n  code through static code analysis.\n* Energy analysis tool to dynamically profile the energy consumption of an\n  Android program and to virualize it in a fine-grained per-method level.\n\nBackground and publications\n---------------------------\n\nSmartDiet was developed as part of a research project where our goal was to\ninvestigate the feasibility of mobile offloading as well as look for ways to\nprovide insights for the application developer about the offloadability of\nexisting programs. A technical report on SmartDiet is available in\n[arXiv](http://arxiv.org/abs/1111.3806), and a paper based on the measurements\ndone using SmartDiet was published in the [MobiArch 2012\nworkshop](http://www2.research.att.com/~rjana/mobiarch.html). The latter paper\nis not yet available for download.\n\nAuthors and license\n-------------------\n\nSmartDiet is Copyright (C) 2011, Aki Saarinen. \n\nSmartDiet was developed in affiliation with Aalto University School of Science,\nDepartment of Computer Science and Engineering. For more information about the\ndepartment, see http://cse.aalto.fi/.\n\nSmartDiet is distributed under the GNU General Public License v3, which should\nbe distributed with this program, in file COPYING. The license is also\navailable at http://www.gnu.org/licenses/gpl-3.0.txt.\n \nTrafficMonitor kernel module is handled separately, see the\n<code>trafficmonitor</code> subdirectory for details.\n\nExample graph produced by SmartDiet\n-----------------------------------\n\n![examplegraph!](https://github.com/akisaarinen/smartdiet/raw/master/test-data/dynamic-profiling-run-simpleapp/example-graph.png)\n\nWhat does SmartDiet do?\n-----------------------\n\n* Static analysis for Android Java applications to highlight issues that might prevent offloading (i.e.\n  partial remote execution of application code in somewhere else than in the phone). We look for\n  e.g. serializability issues and access to local filesystems, which might cause problems when part of\n  the application is executed somewhere else.\n* Dynamic energy usage profiling for Android Java Applications. We capture all network traffic as well as\n  the program execution flow, and display a graph showing fine-grained analysis which parts of the application\n  caused network traffic, along with estimates how much energy that consumed (based on models).\n* Tools for processing Monsoon PowerMonitor (http://www.msoon.com) power measurement traces to combine\n  actual physical measurements of the device energy consumption to model-based estimates.\n\nWhy would I use SmartDiet?\n--------------------------\n\nSmartDiet is interesting to researchers doing work related to energy-efficiency\nof smartphones. It can provide insights into the energy-usage and offloading\nconstraints of existing Android applications. We released one paper based on\nthe insights we gathered using SmartDiet, but it could be used for more.\n\nSimilar tools could be established for mainstream developers to enable better\ninvestigation of energy usage properties of any application. However, at its\ncurrent state, SmartDiet is probably not ready for mainstream adoption, mainly\nbecause of its quite laboursome installation procedure and customization\nrequirements (only Google Nexus One with Android 2.2.1-r2 at the moment).\n\nWhat do I need to use SmartDiet?\n--------------------------------\n\n### All features require the following\n\n* Source code for the Android apps you want to profile.\n* A Linux or OSX host computer. Tested to work with OSX 10.6 (Snow Leopard) and Ubuntu Linux 11.04.\n* Android SDK installed in the host computer.\n* Java installed in the host computer. Tested with Java 1.6.0\\_26.\n\n### For dynamic energy profiling, you'll also need\n\n* Google Nexus One development phone. To work with other phones, changes are probably required.\n* Android NDK installed in the host computer.\n* Ruby and RubyGems installed with 'faster_csv', 'rubytree' and 'json' gems. Tested with Ruby 1.8.7.\n* R software installed in the host computer, tested with R 2.12.1.\n* Android 2.2.1-r2 source code (available freely from the Internets). Needs to be patched and\n  installed to the Nexus One, so that we can accurately measure the program execution flow.\n* This setup has been tested with Ubuntu Linux 11.04 host computer only.\n\nAdditionally, if you want to measure physical power usage when doing dynamic\nprofiling, you will need Monsoon PowerMonitor power measurement device\n(http://www.msoon.com). This is strictly not required, though.  You can also\nwork only with the model-based estimates if you want.\n\nAcknowledgements\n----------------\nSpecial thanks to Matti Siekkinen, Yu Xiao, Jukka Nurminen, Matti Kemppainen\nand Antti Yla-Jaaski and the whole Department of Computer Science and\nEngineering in Aalto University School of Science.\n\nSetting up constraint analysis tool\n===================================\n\nSetting up the constraint analysis part of SmartDiet is relatively\nstraightforward, but involves a bit of work. You'll need a machine with\nJava installed and sources codes for one or more Android programs. You need to\ncompile the SmartDiet analysis program (written in Scala). You also need to \nunzip Android SDK jars in order to track dependencies to the Android SDK\nfiles. This section covers the setup of this part of SmartDiet.\n\nCompiling the SmartDiet toolkit\n-------------------------------\n* Run <code>./sbt</code> to open up SBT (simple-build-tool) console. SBT documentation at\n  https://github.com/harrah/xsbt/wiki, if you want to dig deeper.\n* Fetch dependencies by running <code>update</code> in sbt console. This will take a while.\n* Assemble a runnable JAR by running <code>assembly:assembly</code> in sbt console.\n* You should see <code>target/smartdiet-{version}.jar</code>, runnable with\n  <code>java -jar smartdiet-{version}.jar</code>.\n\nGetting the bytecode sources for Android SDK\n--------------------------------------------\n\nTo run the constraint analysis tool, you will need <code>.class</code> files of\nall classes the analyzed application is using. All Android apps are referring\nto the Android standard library (coming with the SDK), so in practice you'll\nneed the class files for that library.\n\nMost of the required classes can be fetched from the Android SDK easily by\naccessing one of the <code>android.jar</code> files coming with the SDK\nunder <code>platforms/android-X</code> directory, depending on what android\nAPI version your program is relying on. Just grab the jar and unzip it using\n<pre>\n$ unzip android.jar\n</pre>\n\n...and you'll end up with a series of <code>.class</code> files that can be\nused.\n\nIf you work with the platform apps, they also require some additional class\nfiles that are not included in the SDK. One way to get these files is to follow\nthe Android compilation instructions for the energy profiler and then fetch the\nintermediate class files from the compiling process and extract them somewhere\nwhere the constraint analysis tool can access them. The licenses don't permit\nus to redistribute these intermediate files so you'll have to do it on your own\nor invent some other way of getting those files.\n\nTake a look into <code>out/target/common/obj/JAVA_LIBRARIES</code> and\nthe directories under that which contain <code>classes.jar</code> files.\nWe used the classes from <code>framework_ intermediates/classes.jar</code>\nand <code>sdk_v8_intermediates/classes.jar</code> but you might need something else too,\ndepending on the application. At least platform apps might need also\n<code>android_stubs_current_intermediates/classes.jar</code>.\n\nIn any case, you should end up with a directory which contains for example the following\nfiles:\n\n* Set.class (under <code>java/util/</code>)\n* URI.class (under <code>java/net/</code>)\n* HttpClient.class (under <code>org/apache/http/client/</code>\n* Activity.class (under <code>android/app/</code>)\n* and so on...\n\nConfiguring the constraint analysis tool\n------------------------------------\n\nConfigure applications in <code>sources.json</code> or a file similar to this\n(the name of the configuration file can be specified from the command line).\n\nRemember to point the SDK directory (\"sdkClassFilePath\") to one where you have\n*unzipped* all the SDK <code>.class</code> files, the tool doesn't read the\nlibrary files from inside jars.\n\nFor each program, you should specify:\n\n* \"name\": Just something to describe it.\n* \"appPath\": Directory containing compiled <code>.class</code> files for all application classes.\n* \"appSrcPath\": Directory containing <code>.java</code> source files for all application classes.\n* \"libPath\": Directory containing compiled <code>.class</code> files for all libraries that the application depends on (except for the SDK classes, which are under the sdkClassFilepath). These also need to be unzipped, nothing is looked from inside jars.\n\nRunning the constraint analysis tool\n------------------------------------\n\nRun the analysis with <code>java -jar smartdiet.jar --java-all</code>, for\nmore information about flags, run the jar without arguments and check the help.\nYou can e.g. use <code>--csv</code> to output in CSV format.\n\nSetting up energy analysis tool\n===============================\n\nTo start using dynamic energy profiling part of SmartDiet, you need a more\ncomplex procedure. You will need to root your Nexus One phone, compile the\nAndroid distribution and a custom kernel with some patches. You'll also need to\ncompile the traffic monitor kernel module against this same custom kernel.  The\ncustom stuff then needs to be installed into the phone. This section will cover\nthese topics.\n\nNote that I'm assuming you're familiar with the Android platform and know that\nthere is a risk of bricking your phone, as always when installing custom\nfirmware. You're doing all of this on your own risk. Shouldn't be too big\na risk if you're careful, but still.\n\nCompiling Android 2.2.1-r2\n-------------------------------------------------------\n\nStart by compiling the Android platform.\n\nOfficial instructions are available at http://source.android.com/source/initializing.html,\nthese are the steps that worked for me in Ubuntu 11.04. Another useful resource is\nhttp://source.android.com/source/build-numbers.html for the various build numbers and\nidentifiers for Android.\n\n* Fetch the repo script if you don't already have it. Tested with version (1,13)\n  <pre>\n  $ curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo\n  </pre>\n* Make sure your system is configured with Java 1.5 (Android compilation requires this).\n  For my Ubuntu 11.04 this can be done with the following command:\n  <pre>\n  $ sudo update-alternatives --set java /usr/lib/jvm/java-1.5.0-sun/jre/bin/java\n  </pre>\n* Create a working directory for the platform compilation. Rest of the instructions assume you work under the\n  directory created here.\n  <pre>\n  $ mkdir android-2.2.1-r2\n  $ cd android-2.2.1-r2\n  </pre>\n* Initialize and fetch the repository (last step downloads a *lot* of stuff and takes time)\n  <pre>\n  $ repo init -u https://android.googlesource.com/platform/manifest -b android-2.2.1_r2\n  $ repo sync\n  </pre>\n* Compile the ADB tool and make it available in PATH\n  <pre>\n  $ make adb\n  $ export PATH=`pwd`/out/host/linux-x86/bin:$PATH\n  $ which adb\n  </pre>\n  You should see <code>/home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/adb</code> or something similar.\n* Connect the Nexus One with USB and test connection with adb\n  <pre>\n  $ adb devices\n  List of devices attached\n  HT0B2P800954  device\n  </pre>\n* Fetch required proprietary files from Nexus One (in order to compile the platform). These\n  files are not distributed with the platform sources, so you need to have the stock Android\n  2.2 in the phone to do this.\n  <pre>\n  $ cd device/htc/passion\n  $ ./extract-files.sh\n  </pre>\n* Compile Android platform first without any modifications (to make sure everything works in your environment).\n  This will also take a while, results should appear in <code>out/target/product/passion/</code>\n  <pre>\n  $ source build/envsetup.sh\n  $ echo 4 | lunch\n  $ make -j2\n  </pre>\n  Results will appear in <code>out/target/product/passion/</code> if everything went well.\n* Install the resulting images to your phone to make sure everything works as supposed at this point.\n\nInstalling custom Android distribution to Nexus One\n---------------------------------------------------\n* First compile the distribution, and then go to <code>out/target/product/passion/</code>\n  <pre>\n  $ cd out/target/product/passion/\n  </pre>\n* Reboot the phone to bootloader\n  <pre>\n  $ adb reboot-bootloader\n  </pre>\n* Find path to fastboot (should appear there if you adjusted the PATH earlier in the compile process).\n  <pre>\n  $ which fastboot\n  /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot\n  </pre>\n  Yours should look similar to this. Adjust paths correctly in the following commands.\n* Flash all partitions. Make sure you don't disconnect or boot the phone while flashing.\n  <pre>\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash boot boot.img\n        sending 'boot' (2338 KB)... OKAY [  0.338s]\n                  writing 'boot'... OKAY [  0.975s]\n  finished. total time: 1.313s\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash recovery recovery.img\n    sending 'recovery' (2564 KB)... OKAY [  0.369s]\n              writing 'recovery'... OKAY [  1.063s]\n  finished. total time: 1.433s\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash system system.img\n     sending 'system' (74841 KB)... OKAY [ 10.323s]\n                writing 'system'... OKAY [ 27.256s]\n  finished. total time: 37.580s\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash userdata userdata.img\n       sending 'userdata' (2 KB)... OKAY [  0.014s]\n              writing 'userdata'... OKAY [  2.377s]\n  finished. total time: 2.391s\n  </pre>\n* Reboot the phone\n  <pre>\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot reboot\n  </pre>\n* Phone should boot up normally, goto Settings -> About phone and check that Build number is something like this:\n  <pre>\n  full_passion-userdebug 2.2.1 FRG83D eng.\n  amsaarin.20111024.152752 test-keys\n  </pre>\n\nCompiling a custom kernel\n-------------------------\n\nNext, you'll need to compile your custom kernel. I used kernel version 2.6.32\nand patches are available for that version. Modifications might be needed if\nanother version is used.\n\nAs a result you will have a compiled kernel which will be referred later as\n<code>/path/to/zImage</code>. It will lie under the kernel source tree\nat <code>arch/arm/boot/zImage</code>. You should test this kernel as-is, and\nthen continue applying our patches for it.\n\nShort instructions for compiling the kernel:\n\n1) Clone the msm kernel repository\n\nAs of now (Dec 2th, 2011) the official Android kernel source code repository is\ndown because kernel.org was hacked a few months ago and Google is still in the\nprocess of recovering the hosting of the kernel sources. So you need to use one\nof the unofficial mirrors to get the sources, this one worked for me:\n\n<pre>\n$ git clone https://github.com/android/kernel_msm.git\n</pre>\n\n2) Checkout a new custom branch from 2.6.32 in <code>kernel_msm</code>\n\n<pre>\n$ cd kernel_msm\n$ git checkout remotes/origin/archive/android-msm-2.6.32\n$ git checkout -b smartdiet-2.6.32\n</pre>\n\n3) Get the default kernel configuration\n\nOne is available at with SmartDiet as a patch:\n\n<pre>\n$ git am /path/to/smartdiet/patches/kernel-2.6.32/0002-Add-initial-config.patch\nApplying: Added initial config\n</pre>\n\nAlternatively, if you have a stock 2.2.1-r2 in your phone, you can use the\nfollowing to get your stock configuration from the phone as well:\n\n<pre>\n$ adb pull /proc/config.gz\n$ gunzip config.gz\n</pre>\n\n4) Setup environment for kernel compiling \n\nDo it manually or use the script provided with smartdiet:\n\n<pre>\n$ source /path/to/smartdiet/patches/env_kernel.sh\n</pre>\n\n5) Make the kernel\n\n<pre>\n$ make\n</pre>\n\nAnd you're done. \n\nCompiling custom kernel with SmartDiet patches\n----------------------------------------------------\n\nIn order to work with the traffic monitor kernel module, you need to patch the\nkernel a bit. SmartDiet kernel also includes patches to enable oprofiler and\nTaintDroid support (http://appanalysis.org/), which are not necessary to use\nSmartDiet but will make other debugging tasks easier. You can take a look into\nwhat's under <code>patches/kernel-2.6.32</code> and decide to only use part of\nthe patches, if you wish.\n\nYou can apply all patches to the kernel source tree by running the following\nunder the git checkout of the Android kernel source tree:\n\n<pre>\n$ git am /path/to/smartdiet/patches/kernel-2.6.32/*\nApplying: Add traffic monitor protocol\nApplying: Added initial config\nApplying: Add profiling support to config\nApplying: Remove support for ext2 and ext3 from kernel to make it fit\nApplying: Add patch for oprofile and Nexus One\nApplying: yaffs2: Add xattr patches by TaintDroid guys\nApplying: Enable YAFFS2 support in .config for TaintDroid\n</pre>\n\nCompiling the traffic monitor kernel module\n-------------------------------------------\n\nSee the <code>trafficmonitor</code> subdirectory for more information.  This is\na separate kernel module developed at the Aalto University School of Science\nand it can be compiled against the patched kernel sources. You should get a\n<code>ec.ko</code> file which should be put into the <code>files</code>\nsubdirectory to be used by the measurement scripts later on (they will upload\nand load it into use into the phone). Note that because this is a kernel\nmodule, it has to be compiled against the exact kernel version you are running\nor it won't load up correctly.\n\n\nCompiling Android with custom kernel\n------------------------------------\n\nNext you should compile the Android with your custom kernel and check that it\nworks. \n\nNote that standard kernel modules distributed with the Android distribution\nwill be incompatible with the new kernel and won't hence load up. Most\nimportant one is the driver dealing with WiFi, <code>bcm4329.ko</code>, so\nyou'll want to copy the new driver into the distribution before compiling it.\nCopy the one from the compiled kernel under\n<code>drivers/net/wireless/bcm4329/bcm4329.ko</code> to\n<code>device/htc/passion-common/bcm4329.ko</code> under the Android\ndistribution before compiling, and it'll be shipped to the phone when flashing.\n\nCompile the distribution with your new kernel by running the following in the\nAndroid platform directory (not the kernel source directory):\n\n<pre>\n$ make TARGET_PREBUILT_KERNEL=/path/to/zImage\n</pre>\n\n<code>/path/to/zImage</code> refers now to the custom kernel you built earlier.\n\nBefore continuing, check that everything works by booting up the phone and\nchecking versions (in addition to the platform version, kernel version should\nnow  also change in Settings -> About phone to refer somehow into your\nmachine).\n\nCompiling SmartDiet modifications to Android platform with the custom kernel\n----------------------------------------------------------------------------\n\nThis procedure will allow SmartDiet to get more information about Java threads\nunder Dalvik VM because of some added loggings.\n\n* Compile stock Android 2.2.1-r2 first as instructed above\n* Go to <code>dalvik</code> subdirectory in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ cd dalvik\n  </pre>\n* Apply patch using <code>git am</code>\n  <pre>\n  $ git am /path/to/smartdiet/patches/android-2.2.1-r2/dalvik-logging.patch\n  Applying: Log more clock-related variables and increase buffer size\n  </pre>\n* Verify that patch got applied by running <code>git log</code>\n* Recompile Android, run the following in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ echo 4 | lunch\n  $ make -j2\n  </pre>\n* Install the modified version to the phone using the same procedure as before. This time you only\n  need to re-flash the system partition.\n\nCompiling SmartDiet modifications to Android SDK\n------------------------------------------------\n\nThis procedure will increment the default buffer size that DDMS sets when\nrecording a Java execution trace. This enabled you to capture longer execution\nruns, the default buffer size will overflow rather quickly and you only record\nvery short runs, especially with CPU intensive apps.\n\n* Go to your <code>android-2.2.1-r2</code> platform source directory.\n* Go to <code>sdk/ddms</code> subdirectory in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ cd sdk/ddms\n  </pre>\n* Apply patch using <code>git am</code>\n  <pre>\n  $ git am /path/to/smartdiet/patches/android-2.2.1-r2/ddms-buffer_size_increase.patch\n  Applying: Increase default buffer size in ddms java application\n  </pre>\n* Verify that patch got applied by running <code>git log</code>\n* Compile Android SDK, run the following in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ echo 1 | lunch\n  $ make sdk\n  </pre>\n* Compiled SDK is available under <code>out/host/linux-x86/sdk/</code>, to use DDMS with a bigger\n  tracing buffer size limit, run it from there (<code>tools/ddms</code>).\n\nTo take this new buffer size limit into use, you need to use the newly compiled\nDDMS and not the one which comes with the official SDK from Google.\n\nUsing the energy profiler tool\n==============================\n\nAfter the phone is bundled with our customized version of Android, you can\nstart dynamic profiling.\n\nBefore doing anything, check the following:\n\n* The phone is rooted.\n* You have compiled and installed the patched Android to the phone.\n* You have access to the patched and compiled SDK (you'll need DDMS from there).\n* Synchronize clocks between machines and phones. This is *important* because\n  data is matched based on timestamps. NTP synchronization is preferred.\n\nTesting out with sample data\n----------------------------\n\nThere are profiling results of an example application available in\n<code>test-data/dynamic-profiling-run-simpleapp</code>. You can run\nthe tools for this test data with the following command in\nsmartdiet toolkit root dir:\n\n<pre>\n$ export ANDROID_SDK=/path/to/your/android_sdk\n$ ./process-smartdiet-dynamic-measurements.sh test-data/dynamic-profiling-run-simpleapp/\n</pre>\n\nThen check for <code>test-data/dynamic-profiling-run-simpleapp/</code> \ndirectory for results.\n\nProfiling an application\n------------------------\n\nHere's the guide how to dynamically profile your own application using SmartDiet.\n\n### 1) Before measurements\n\n* Compile and install the program you are profiling so that it allows debugging,\n  i.e. you can connect to it using DDMS (flags in the AndroidManifest.xml file).\n* Start the program in the phone.\n* Run <code>./run-smartdiet-dynamic-measurements.sh DIR</code> with phone\n  connected with either USB or TCP to adb. For more information check the\n  sources of the script. \n* Start up Android DDMS from your customized SDK. This customized DDMS has a\n  larger buffer size for the program tracing, so longer test runs can be done\n  than would be possible with the default settings. From DDMS, select the program\n  you're profiling and select 'start method profiling' to start tracing\n  the program execution.\n* Unplug the USB cable if you're measuring physical power consumption with\n  Monsoon. It will try to load the imaginary battery and mess up the\n  measurements.\n\n### 2) Execute the test sequence\n\nYou can e.g. trigger some network requests from the application by pushing some reload buttons or whatever.\n\n### 3) After you're done\n\n* Re-connect the USB cable and then stop the script by pressing return. This\n  will be fetch measurements to <code>DIR</code> from the phone.\n* Stop method profiling from the DDMS. Wait a while, and a window pops up which\n  shows the graphical UI for inspecting the method trace. You don't need the graphical tool, but\n  from the title text you can see where the raw DDMS file is, it should be\n  something like <code>/tmp/ddms123123123123.trace</code>. Close the window but\n  copy the .trace file into <code>DIR</code> as <code>program.trace</code>.\n* If you did physical measurements with Monsoon, stop recording and export data\n  from Monsoon Power Monitor to pt4 file format and put resulting file as\n  <code>power.pt4</code> under <code>DIR</code> (with the other files).\n* Run <code>process-smartdiet-dynamic-measurement.sh DIR</code> to process\n  the measurements and produce graphs of the results.\n\n", 
  "id": 2694171
}