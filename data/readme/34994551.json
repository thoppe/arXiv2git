{
  "read_at": 1462559005, 
  "description": "Longest Common Subsequence", 
  "README.md": "# NAME\n\nLCS - Longest Common Subsequence\n\n<div>\n    <a href=\"https://travis-ci.org/wollmers/LCS\"><img src=\"https://travis-ci.org/wollmers/LCS.png\" alt=\"LCS\"></a>\n    <a href='https://coveralls.io/r/wollmers/LCS?branch=master'><img src='https://coveralls.io/repos/wollmers/LCS/badge.png?branch=master' alt='Coverage Status' /></a>\n    <a href='http://cpants.cpanauthors.org/dist/LCS'><img src='http://cpants.cpanauthors.org/dist/LCS.png' alt='Kwalitee Score' /></a>\n    <a href=\"http://badge.fury.io/pl/LCS\"><img src=\"https://badge.fury.io/pl/LCS.svg\" alt=\"CPAN version\" height=\"18\"></a>\n</div>\n\n# SYNOPSIS\n\n    use LCS;\n    my $lcs = LCS->LCS( [qw(a b)], [qw(a b b)] );\n\n    # $lcs now contains an arrayref of matching positions\n    # same as\n    $lcs = [\n      [ 0, 0 ],\n      [ 1, 2 ]\n    ];\n\n    my $all_lcs = LCS->allLCS( [qw(a b)], [qw(a b b)] );\n\n    # same as\n    $all_lcs = [\n      [\n        [ 0, 0 ],\n        [ 1, 1 ]\n      ],\n      [\n        [ 0, 0 ],\n        [ 1, 2 ]\n      ]\n    ];\n\n# DESCRIPTION\n\nLCS is an implementation based on the traditional LCS algorithm.\n\nIt contains reference implementations working slow but correct.\n\nAlso some utility methods are added to reformat the result.\n\n## CONSTRUCTOR\n\n- new()\n\n    Creates a new object which maintains internal storage areas\n    for the LCS computation.  Use one of these per concurrent\n    LCS() call.\n\n## METHODS\n\n- LCS(\\\\@a,\\\\@b)\n\n    Finds a Longest Common Subsequence, taking two arrayrefs as method\n    arguments. It returns an array reference of corresponding\n    indices, which are represented by 2-element array refs.\n\n        # position  0 1 2\n        my $a = [qw(a b  )];\n        my $b = [qw(a b b)];\n\n        my $lcs = LCS->LCS($a,$b);\n\n        # same like\n        $lcs = [\n            [ 0, 0 ],\n            [ 1, 1 ]\n        ];\n\n- LLCS(\\\\@a,\\\\@b)\n\n    Calculates the length of the Longest Common Subsequence.\n\n        my $llcs = LCS->LLCS( [qw(a b)], [qw(a b b)] );\n        print $llcs,\"\\n\";   # prints 2\n\n        # is the same as\n        $llcs = scalar @{LCS->LCS( [qw(a b)], [qw(a b b)] )};\n\n- allLCS(\\\\@a,\\\\@b)\n\n    Finds all Longest Common Subsequences. It returns an array reference of all\n    LCS.\n\n        my $all_lcs = LCS->allLCS( [qw(a b)], [qw(a b b)] );\n\n        # same as\n        $all_lcs = [\n          [\n            [ 0, 0 ],\n            [ 1, 1 ]\n          ],\n          [\n            [ 0, 0 ],\n            [ 1, 2 ]\n          ]\n        ];\n\n    The purpose is mainly for testing LCS algorithms, as they only return one of the optimal\n    solutions. If we want to know, that the result is one of the optimal solutions, we need\n    to test, if the solution is part of all optimal LCS:\n\n        use Test::More;\n        use Test::Deep;\n        use LCS;\n        use LCS::Tiny;\n\n        cmp_deeply(\n          LCS::Tiny->LCS(\\@a,\\@b),\n          any(@{LCS->allLCS(\\@a,\\@b)} ),\n          \"Tiny::LCS $a, $b\"\n        );\n\n- lcs2align(\\\\@a,\\\\@b,$LCS)\n\n    Returns the two sequences aligned, missing positions are represented as empty strings.\n\n        use Data::Dumper;\n        use LCS;\n        print Dumper(\n          LCS->lcs2align(\n            [qw(a   b)],\n            [qw(a b b)],\n            LCS->LCS([qw(a b)],[qw(a b b)])\n          )\n        );\n        # prints\n\n        $VAR1 = [\n                  [\n                    'a',\n                    'a'\n                  ],\n                  [\n                    '',\n                    'b'\n                  ],\n                  [\n                    'b',\n                    'b'\n                  ]\n        ];\n\n- align(\\\\@a,\\\\@b)\n\n    Returns the same as lcs2align() via calling LCS() itself.\n\n- sequences2hunks($a, $b)\n\n    Transforms two array references of scalars to an array of hunks (two element arrays).\n\n- hunks2sequences($hunks)\n\n    Transforms an array of hunks to two arrays of scalars.\n\n        use Data::Dumper;\n        use LCS;\n        print Dumper(\n          LCS->hunks2sequences(\n            LCS->LCS([qw(a b)],[qw(a b b)])\n          )\n        );\n        # prints (reformatted)\n        $VAR1 = [ 0, 1 ];\n        $VAR2 = [ 0, 2 ];\n\n- align2strings($hunks, $gap\\_character)\n\n    Returns two strings aligned with gap characters. The default gap character is '\\_'.\n\n        use Data::Dumper;\n        use LCS;\n        print Dumper(\n          LCS->align2strings(\n            LCS->lcs2align([qw(a b)],[qw(a b b)],LCS->LCS([qw(a b)],[qw(a b b)]))\n          )\n        );\n        $VAR1 = 'a_b';\n        $VAR2 = 'abb';\n\n- fill\\_strings($string1, $string2, $fill\\_character)\n\n    Returns both strings filling up the shorter with $fill\\_character to the same length.\n\n    The default $fill\\_character is '\\_'.\n\n- clcs2lcs($compact\\_lcs)\n\n    Convert compact LCS to LCS.\n\n- lcs2clcs($compact\\_lcs)\n\n    Convert LCS to compact LCS.\n\n- max($i, $j)\n\n    Returns the maximum of two numbers.\n\n## EXPORT\n\nNone by design.\n\n# STABILITY\n\nUntil release of version 1.00 the included methods, names of methods and their\ninterfaces are subject to change.\n\nBeginning with version 1.00 the specification will be stable, i.e. not changed between\nmajor versions.\n\n# REFERENCES\n\nRonald I. Greenberg. Fast and Simple Computation of All Longest Common Subsequences,\nhttp://arxiv.org/pdf/cs/0211001.pdf\n\nRobert A. Wagner and Michael J. Fischer. The string-to-string correction problem.\nJournal of the ACM, 21(1):168-173, 1974.\n\n# SOURCE REPOSITORY\n\n[http://github.com/wollmers/LCS](http://github.com/wollmers/LCS)\n\n# AUTHOR\n\nHelmut Wollmersdorfer <helmut.wollmersdorfer@gmail.com>\n\n<div>\n    <a href='http://cpants.cpanauthors.org/author/wollmers'><img src='http://cpants.cpanauthors.org/author/wollmers.png' alt='Kwalitee Score' /></a>\n</div>\n\n# COPYRIGHT\n\nCopyright 2014- Helmut Wollmersdorfer\n\n# LICENSE\n\nThis library is free software; you can redistribute it and/or modify\nit under the same terms as Perl itself.\n\n# SEE ALSO\n", 
  "id": 34994551
}