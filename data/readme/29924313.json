{
  "read_at": 1462551751, 
  "description": "Performs approximate Bayesian computation (ABC) using various distance functions", 
  "README.md": "# ABCDistances\n\nThis pacakge contains several [Approximate Bayesian Computation](https://en.wikipedia.org/wiki/Approximate_Bayesian_computation) (ABC) algorithms.\n\nIt is created for the paper [\"Adapting the ABC distance function\"](http://arxiv.org/abs/1507.00874)\nwith the aim of comparing various approaches to distance selection.\nCode in the `examples` directory performs the analyses in the paper.\nVersion 0.0.1 matches the v1 and v2 arXiv submissions and is written for Julia v0.3.\nVersion 0.1.0 matches the v3 arXiv submission and is written for Julia v0.4.\n\nThis document gives a quick usage example then documents the commands.\n\n## Example\n\nFirst code for the model and summary statistics of interest must be set up. Here the model is the [g-and-k distribution](http://link.springer.com/article/10.1023%2FA%3A1013120305780?LI=true) and the summary statistics are order statistics. Code for simulating from this distribution is included in the package.\n\n```julia\nusing ABCDistances;\nquantiles = [1250*i for i in 1:7];\nndataset = 10000;\n##Simulate from the model and return summary statistics\nfunction sample_sumstats(pars::Array{Float64,1})\n    success = true\n    stats = rgk_os(pars, quantiles, ndataset)\n    (success, stats)\nend\n\n##Generate the observed summary statistics\ntheta0 = [3.0,1.0,1.5,0.5];\nsrand(1);\n(success, sobs) = sample_sumstats(theta0)\n```\n\nNext the prior distribution is specified. This is simply 4 independent Uniform(0,10) random variables.\n```julia\nusing Distributions\nimport Distributions.length, Distributions._rand!, Distributions._pdf ##So that these can be extended\n\ntype GKPrior <: ContinuousMultivariateDistribution\nend\n\nfunction length(d::GKPrior)\n    4\nend\n\nfunction _rand!{T<:Real}(d::GKPrior, x::AbstractVector{T})\n    x = 10.0*rand(4)\nend\n\nfunction _pdf{T<:Real}(d::GKPrior, x::AbstractVector{T})\n    if (all(0.0 .<= x .<= 10.0))\n        return 0.0001\n    else\n        return 0.0\n    end\nend\n```\n\nNext an `ABCInput` type is created and populated using the above.\nNote `abcdist` must be a subtype of `ABCDistance`. Several options are defined in `distances.jl`.\n\n```julia\nabcinput = ABCInput();\nabcinput.prior = GKPrior();\nabcinput.sample_sumstats = sample_sumstats;\nabcinput.abcdist = WeightedEuclidean(sobs);\nabcinput.nsumstats = 7;\n```\n\nNow an ABC algorithm can be run. The following commands run an ABC-rejection algorithm.\n\nThe first command (3rd argument is an integer) returns the 200 best fitting simulations from 10000 total.\n\nThe second command (3rd argument is floating point) returns any simulations from 10000 total with distance below the threshold specified.\n\n```julia\nabcRejection(abcinput, 10000, 200)\nabcRejection(abcinput, 10000, 0.3)\n```\n\nThe next command runs an ABC PMC algorithm.\nSee documentation for details of the arguments.\n\n```julia\nout = abcPMC3(abcinput, 200, 1/2, 10000);\n```\n\nMarginal estimates of parameter mean and variances can be calculated from ABC PMC output as follows.\n\n```julia\nparameter_means(out)\nparameter_vars(out)\n```", 
  "id": 29924313
}