{
  "read_at": 1462553668, 
  "description": "Multiple Document Versions using LaTeX and GNU Make", 
  "README.md": "# MuDoVLaGM: Multiple Document Versions using LaTeX and GNU Make\n\nThis set of scripts attepmt to solve the following problem. While you\nare writing a document (for me the motivation was a scientific paper)\nyou need an output format that looks good in you screen. When you want\nsomeone to make comments on your work it could be good to have it in a\nprinting friendly format or in a tablet friendly format. When you\nfinally want to sumbit it for publication (to a journal), the required\nformat could have several diferences with your present versions. And,\nif you want to submit it to the arXiv other format changes could be\nrequired. Then, it is not trivial to have text files with the\nappropriate format commands without duplicating the body of text, and\nthat could be a problem when making changes.\n\nSince this acronym `MuDoVLaGM` is still too long, we use `MD`.\n\n# Approach of the solution\n\nUse a single file `document.tex` that contains the body of document and the\nformat commands for all the versions you need. The format commands are\ncommented inside `document.tex`, with marks (also commented) that allows\nthe fomat commands to be selectively uncommented when building a\nspecific version of the document. To achieve this the compilation is\nperformed using a `make` command in the following way:\n\n    make document-tablet.pdf\n\t\nin this case `tablet` is the name of the version, and this name could\nbe whatever you want. Inside `document.tex` there are lines like\n\n    %%% \\MDbegin{tablet}\n\t%% This is the conditional class command for tablet version\n\t% \\documentclass[a5paper]{article}\n\t%%% \\MDend{tablet}\n\t\nthat will be compiled as\n\n    \\documentclass[a5paper]{article}\n\t\nnote that between `MDbegin`, and `MDend` are lines starting with\n`%%` that are not attempted to be compiled. The pairs `MDbegin`\n`MDend` can be placed anywhere inside `document.tex`.\n\nTo allow the posibility to compile `document.tex` in the usual way\n\n    pdflatex document.tex\n\t\nit is possible to have lines like \n\n    %%% \\MDbegin{phone}\n\t%% This is the default class for document.tex\n\t\\documentclass[a5paper]{article}\n\t%%% \\MDend{phone}\n\nThe process `make document-tablet.pdf` will comment everything between\nany pair `MDbegin` `MDend` that does not has the word `tablet`\ninside their braces. Note that a `MDbegin` `MDend` block could\napply to multiple vesions, e.g.\n\n\t%%% \\MDbegin{preprint twoColumnA arXiv}\n\t% \\title[Finite volume nonlinear acoustic propagation]{A finite volume approach for the simulation of nonlinear dissipative acoustic wave propagation} \n\t%\n\t% \\author{Roberto Velasco-Segura}\n\t% \\author{Pablo L. Rend\\'{o}n}\n\t%%% \\MDend{preprint twoColumnA arXiv}\n\n# Special versions\n\nSome versions of the document could require special formats for images,\nfile naming, directory structure, packing, etc. All the needed\ncommands to solve this requirements can be placed in a special recipe\ninside the `Makefile`, to avoid confusion with the standard versions\nthe `\\documentclass` command for these special versions must be\nbetween a pair `MDbegin*` `MDend*`, i.e.\n\n\t%%% \\MDbegin*{arXiv}\n\t% \\documentclass[nopreprint]{jasatex}\n\t% \\usepackage{amssymb}\n\t% \\usepackage{amsmath}\n\t% \\usepackage{graphicx}\n\t% \\usepackage[utf8]{inputenc}\n\t% \\usepackage{setspace}\n\t% \\usepackage{multirow}\n\t% \\usepackage{url} \n\t%%% \\MDend*{arXiv}\n\nA couple of examples of recipes for special versions are given in the\npresent `Makefile`.\n\n# Using these scripts for your own document and own versions\n\nContents of the provided file `document.tex` are mainly an example for\nthe use of these scripts. Then, what you could do to use these scripts\nfor your own document is rename `document.tex` to `example.tex`\nthen create a new `document.tex` with your own document, place\n\n    %%% \\MDbegin{default}\n\t\nat the top of your new `document.tex`, and place \n\n    %%% \\MDend{default}\n\t\nafter `\\documentclass{whatever}` and before `\\begin{document}`. Now\nyou should be able yo compile it form command line as \n`make document-default.pdf`, \nor if you simply invoke `make`, the same document will\nbe produced with the name `document.pdf`.\n\nThen, if you want to add a standard version, say `other`, all you have\nto do is add a block\n\n\t%%% \\MDbegin{other}\n\t% \\documentclass{whatever}\n\t%%% \\MDend{other}\n\nhaving the `\\documentclass` for your version, and maybe some other\nheader commands, this block should be placed before the\n`\\begin{document}` command. You could copy this block from\n`example.tex`. After that, add as many `MDbegin` `MDend` blocks as\nneeded, in the body of `document.tex`.\n\nIf you want to add a special version, you have to do what you would do\nfor a standard version, but adding a `*` symbol in the block that goes\nbefore `\\begin{document}` like this\n\n\t%%% \\MDbegin*{other}\n\t% \\documentclass{whatever}\n\t%%% \\MDend*{other}\n\t\nother blocks in the body of `document.tex` don't need the `*`\nsymbol. After that, you have to write a recipe in the `Makefile`, say\nfor `document-other.pdf`. Note that my recipes for special versions\nalso generate a zip file `other.zip`, in the case publisher requires\nsource files (as they normally would), these source files (without\nunnecesary format commands for other versions) are packed in this zip\nfile. Finally, see the code for general recipes `clean`, `all`,\n`document-all.tar.gz`, etc. in case you want to place something there.\nI recommend to create directories under `special_versions`, and place\nthere all the extra information needed for these versions.\n\n# System Requirements\n\nSome standard linux command line tools\n\n* make \n* perl \n* sed\n* tar\n\nA LaTeX distribution to execute the following commands \n\n* pdflatex\n* bibtex\n* de-macro\n\nA few extra tools \n\n* zip\n\nSome LaTeX packages to build the example\n\n* natbib\n* url \n\n# Additional features\n\n## Removing comments\n\nMany times one have personal comments that are not desirable in the\ndistributed versions of the source code. In this particular case, all\nthe commented commands for other versions. Commands in `Makefile` make\nuse of a script\n\n    removeLatexComments.pl\n\nthat remove the comments. This script has been taken from\n\n    http://tex.stackexchange.com/questions/83663/utility-to-strip-comments-from-latex-source\n\n## Custom macros\n\nMany of the journals compile your paper during the submission process,\nand many times this compiler doesn't like your custom macros, but\nwhile writing it's much faster to use custom macros. The `de-macro`\ncommand can be used to solve this problem, it simply generates a new\n`.tex` file where the custom macros are substituted with their\ndefinitions. Commands in the `Makefile` make use of `de-macro`, but\nyour custom macros should be defined in `my-private.sty` and not in\n`document.tex`.\n\nBy now I have used this with `\\newcommand` only. It could work with\n`\\renewcommand`, `\\newenvironment`, etc. but I have not tested it.\n\n## bib-at-work\n\nWhen writing sometimes it's useful to make notes of the references you\nneed to search later, if you write that notes like\n`\\cite{theOneWithManyPlots}` this simple script `bib-at-work.sty` will\ndisplay the missing key in you compiled version. It can also make a\nlist of missing keys and a list of non cited references.\n\nThis script has been taken from\n\n    http://tex.stackexchange.com/questions/123093/replacing-with-citation-key-and-or-making-list-of-unresolved-references-in-nat\n\n## Other make commands\n\nUse `make clean` to remove temporary files, but not final products,\nlike `.pdf` files.\n\nUse `make wipe` to remove everything but source files.\n\nUse `make list` to list the available versions in `document.tex`. \n\nUse `make all` to make all versions.\n\nUse `make document-all.tar.gz` to make all versions and compress them\nin a single file.\n\n# License\n\nSee `LICENSE.txt`\n", 
  "id": 18021019
}