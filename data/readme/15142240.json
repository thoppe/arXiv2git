{
  "read_at": 1462551463, 
  "description": "Cyclops Tensor Framework: distributed-memory tensor algebra", 
  "README.md": "A distributed memory library for efficient decomposition of tensors of arbitrary type and parallel MPI+OpenMP execution of tensor contractions/functions.\n\nBasic build process: ./configure; make; \n\nBasic test process: sequential: 'make test', parallel: 'make test2'\n\nSee examples/ directory to learn usage, or src/ directory to examine library source code.\n\n\nLinks in documentation below redirect to Doxygen documentation hosted at http://inf.ethz.ch/personal/edgar.solomonik/ctf\n\n\n<html>\n<body>\n<div class=\"header\">\n  <div class=\"headertitle\">\n<div class=\"title\">Cyclops Tensor Framework Documentation</div>  </div>\n</div><!--header-->\n<div class=\"contents\">\n<div class=\"textblock\"><h1><a class=\"anchor\" id=\"intro\"></a>\nIntroduction</h1>\n<p>Cyclops Tensor Framework (<a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a>) is a distributed-memory library that provides support for tensor algebra. <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> tensors are multidimensional distributed arrays of arbitrary type, which may be used to represent graphs or hypergraphs. The primary means of specifying <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> tensor operations is assigning `iterator' indices for each way of each tensor and specifying an elementwise function to apply. Partitioning and efficient redistribution of tensor data is also possible via <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a>.</p>\n<p>The software is available on GitHub (github.com/solomonik/ctf) and maybe obtained via the command</p>\n<p>git clone <a href=\"https://github.com/solomonik/ctf\">https://github.com/solomonik/ctf</a></p>\n<p><a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> requires the BLAS and MPI to be built, with MPI being the main parallel execution and communication mechanism. OpenMP and CUDA may additionally be provided for threading and accelerator support, respectively, but <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> will also build without them.</p>\n<p>As a guide to modern usage of <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> for sparse matrix computations, graph computations, and tensor computations, we recommend the following paper</p>\n<p>Edgar Solomonik and Torsten Hoefler; Sparse Tensor Algebra as a Parallel Programming Model; arXiv, Nov 2015. <a href=\"http://arxiv.org/abs/1512.00066\">(link)</a></p>\n<p>Additionally, we recommend starting by looking at example <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> codes provided in the examples/ subdirectory. Specifics of the interface may be found in this doxygen documentation, especially in the functionality description of <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html\" title=\"an instance of a tensor within a CTF world \">CTF::Tensor</a>.</p>\n<p><a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> aims to provide seamless support for distributed memory tensors (scalars, vectors, matrices, etc.). <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> provides summation and contraction routines in Einstein notation, so that any for loops are implicitly described by the index notation. The tensors in <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> are templated and may be defined on any algebraic structure (e.g. semiring, ring, set, monoid) with potentially custom addition and multiplication operators. Each tensor is decomposed on a <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1World.html\" title=\"an instance of the CTF library (world) on a MPI communicator \">CTF::World</a> associated with an MPI communicator. Threading is activated by compiling with -fopenmp and setting OMP_NUM_THREADS appropriately at runtime. Further build-time configurations may be specified as parameters to the configure script (run configure &ndash;help) or modified in the generated config.mk file.</p>\n<p>The algorithms and application of <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> to electronic structure methods are described in detail in the following publications</p>\n<p>Edgar Solomonik, Devin Matthews, Jeff R. Hammond, John F. Stanton, and James Demmel; A massively parallel tensor contraction framework for coupled-cluster computations; Journal of Parallel and Distributed Computing, June 2014. <a href=\"http://www.sciencedirect.com/science/article/pii/S074373151400104X\">(link)</a></p>\n<p>Edgar Solomonik, Devin Matthews, Jeff Hammond, and James Demmel; Cyclops Tensor Framework: reducing communication and eliminating load imbalance in massively parallel contractions; IEEE International Parallel and Distributed Processing Symposium (IPDPS), Boston, MA, May 2013. <a href=\"http://www.eecs.berkeley.edu/Pubs/TechRpts/2013/EECS-2013-11.pdf\">(link)</a></p>\n<p>Edgar Solomonik, Jeff Hammond, and James Demmel; A preliminary analysis of Cyclops Tensor Framework; EECS Department, University of California, Berkeley, March 2012. <a href=\"http://www.eecs.berkeley.edu/Pubs/TechRpts/2012/EECS-2012-29.pdf\">(link)</a></p>\n<p>The lead developer of this code is Edgar Solomonik (University of California-Berkeley). Devin Matthews (University of Austin Texas) has also made significant contributions to <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a>. Additionally, Devin leads the development of Aquarius (<a href=\"https://code.google.com/p/aquarius-chem/\">https://code.google.com/p/aquarius-chem/</a>), a distributed-memory quantum chemistry software suite running on top of the <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> library. Richard Lin (UC Berkeley) has worked on multi-contraction scheduling in (on top of) <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a>. Jeff Hammond (Intel), Torsten Hoefler (ETH Zurich) and James Demmel (University of California-Berkeley) have overseen the high-level development of the ideas in the <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> framework.</p>\n<p>The source to <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> is available for reference and usage under a BSD license. Please email <a href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/#\" onclick=\"location.href='mai'+'lto:'+'sol'+'om'+'on@'+'ee'+'cs.'+'be'+'rke'+'le'+'y.e'+'du'; return false;\">solom<span style=\"display: none;\">.nosp@m.</span>on@e<span style=\"display: none;\">.nosp@m.</span>ecs.b<span style=\"display: none;\">.nosp@m.</span>erke<span style=\"display: none;\">.nosp@m.</span>ley.e<span style=\"display: none;\">.nosp@m.</span>du</a> with all questions and interest.</p>\n<h1><a class=\"anchor\" id=\"interface\"></a>\nInterface</h1>\n<p>The main interface of the library is in include/ctf.hpp (C++) and is documented in the <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> main C++ interface module. A number of example codes using the interface are given in the examples/ subdirectory and documented in the Examples module. The interface is templated (with each function/object foo having the predicate CTF::foo&lt;dtype&gt; and CTF::foo&lt;&gt; equivalent to CTF::foo&lt;double&gt;). For backwards compatiblity it is also possible to create tensors of type double as <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html\" title=\"an instance of a tensor within a CTF world \">CTF::Tensor</a> and complex&lt;double&gt; as cCTF_Tensor, and similarly for other objects.</p>\n<h2><a class=\"anchor\" id=\"destruct\"></a>\nData Structures</h2>\n<p>The basic tensor constructs are <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html\" title=\"an instance of a tensor within a CTF world \">CTF::Tensor</a>, <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Matrix.html\" title=\"Matrix class which encapsulates a 2D tensor. \">CTF::Matrix</a>, <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Vector.html\" title=\"Vector class which encapsulates a 1D tensor. \">CTF::Vector</a>, <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Scalar.html\" title=\"Scalar class which encapsulates a 0D tensor. \">CTF::Scalar</a> (the latter three are simply interface derivations of the <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html\" title=\"an instance of a tensor within a CTF world \">CTF::Tensor</a> class). CTF::Tensors should be defined on a <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1World.html\" title=\"an instance of the CTF library (world) on a MPI communicator \">CTF::World</a>, which is associated with a MPI communicator.</p>\n<p>A <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Scalar.html\" title=\"Scalar class which encapsulates a 0D tensor. \">CTF::Scalar</a> is just a single value distributed over a <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1World.html\" title=\"an instance of the CTF library (world) on a MPI communicator \">CTF::World</a>, which may be used as a 'reducer'. A scalar may also be represented as a zero-dimensional <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html\" title=\"an instance of a tensor within a CTF world \">CTF::Tensor</a>.</p>\n<p>A <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Vector.html\" title=\"Vector class which encapsulates a 1D tensor. \">CTF::Vector</a> is a dense array of values that is distributed over the communicator corresponding to the <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1World.html\" title=\"an instance of the CTF library (world) on a MPI communicator \">CTF::World</a> on which the vector is defined. A vector is a 1-dimensional tensor.</p>\n<p>A <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Matrix.html\" title=\"Matrix class which encapsulates a 2D tensor. \">CTF::Matrix</a> is a dense matrix. The matrix may be defined with a symmetry (AS-antisymmtric, SY-symmetric, SH-symmetric-hollow, NS-nonsymmetric), where asymmteric (skew-symmetric) and symmetric-hollow matrices are zero along the diagonal while symmetric (SY) ones are not. The symmetric matrix stored in packed format internally, but may sometimes be unpacked when operated on if enough memory is available. A <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Matrix.html\" title=\"Matrix class which encapsulates a 2D tensor. \">CTF::Matrix</a> is internal equivalent to a 2-dimensional <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html\" title=\"an instance of a tensor within a CTF world \">CTF::Tensor</a> with symmetry {SY/AS/SH/NS,NS} and edge lengths {nrow,ncol}.</p>\n<p>A <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html\" title=\"an instance of a tensor within a CTF world \">CTF::Tensor</a> is an arbitrary-dimensional distributed array, which can be defined as usual on any <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1World.html\" title=\"an instance of the CTF library (world) on a MPI communicator \">CTF::World</a>. The symmetry is specified via an array of integers (elements of enum {NS&ndash;nonsymmetric, SY&ndash;symmetric, AS&ndash;antisymmetric, and SH&ndash;symmetric hollow}) of length equal to the number of dimensions, with the entry i of the symmetric array specifying the symmetric relation between index i and index i+1. The specifier `SP' defines the tensor as sparse (with no initial data allocated), a dense tensor may also be turned into a sparse one via <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html#a9b53efa5b1c903fb19f964fd43fff852\" title=\"reduce tensor to sparse format, storing only nonzero data, or data above a specified threshold...\">CTF::Tensor::sparsify()</a>. The edge lengths (number of rows and columns for a matrix) are similarly specified by an array of size equal to the number of dimensions, with each successive entry specifying a slower-incremented dimension of the default internal tensor layout.</p>\n<p>The operators (+,-,+=,=,-=) may be used on CTF::Tensors to perform tensor algebra. Given four dimensions CTF::Tensors A(4,...), B(4,...), C(4,...), the operators may be used via the syntax</p>\n<p>C[\"ijkl\"]+=2.0*A[\"ijmn\"]*B[\"mnkl\"],</p>\n<p>C[\"jikl\"]-=A[\"ijlk\"],</p>\n<p>where in the first contraction summation is implied over the 'm' and 'n' indices of the tensors. The operator [] is defined to convert a <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html\" title=\"an instance of a tensor within a CTF world \">CTF::Tensor</a> into a <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Idx__Tensor.html\" title=\"a tensor with an index map associated with it (necessary for overloaded operators) ...\">CTF::Idx_Tensor</a>, which is a tensor with indices such as \"ijkl\". It is also possible to use the <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Idx__Tensor.html\" title=\"a tensor with an index map associated with it (necessary for overloaded operators) ...\">CTF::Idx_Tensor</a> type directly.</p>\n<p>Tensors can be summed and contracted via the <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html#af4ba3325c1295d99e1806e77bb2f6ef3\" title=\"sums B[idx_B] = beta*B[idx_B] + alpha*A[idx_A] \">CTF::Tensor::sum()</a> and <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html#a8d61a488cebe7a5d676b59c8173621ee\" title=\"contracts C[idx_C] = beta*C[idx_C] + alpha*A[idx_A]*B[idx_B] \">CTF::Tensor::contract()</a> calls or via operator notation with index strings e.g. implies contraction over the mn indices. Summations can be done similarly. Indexing over diagonals is possible by repeating the index in the string e.g. \"ii\". Custom elementwise operations may be performed on each element instead of addition and multiplication via the constructs <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Function.html\">CTF::Function</a> (returns new tensor values) and <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Transform.html\">CTF::Transform</a> (modifies existing tensor values). These can be used within <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html#a69fc7da2b9055b360baae6b25d3f82d2\" title=\"scales A[idx_A] = alpha*A[idx_A] \">CTF::Tensor::scale()</a>, <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html#af4ba3325c1295d99e1806e77bb2f6ef3\" title=\"sums B[idx_B] = beta*B[idx_B] + alpha*A[idx_A] \">CTF::Tensor::sum()</a>, and <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html#a8d61a488cebe7a5d676b59c8173621ee\" title=\"contracts C[idx_C] = beta*C[idx_C] + alpha*A[idx_A]*B[idx_B] \">CTF::Tensor::contract()</a>, as well as within the index notation. C++11 Lambdas allow definition and application of arbitrary elementwise operators to <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> tensors in a single line of code, e.g.</p>\n<p>((Transform&lt;force,particle&gt;)([] (force f, particle &amp; p){ p.dx += f.fx*p.coeff; p.dy += f.fy*p.coeff; }))(F[\"i\"], P[\"i\"]);</p>\n<p>For context of above <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Transform.html\">CTF::Transform</a> see <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/bivar__function__cust_8cxx.html\">examples/bivar_function_cust.cxx</a>. For additional sample codes see <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/sssp_8cxx.html\">examples/sssp.cxx</a> and <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/apsp_8cxx.html\">examples/apsp.cxx</a>, for more advanced usage see <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/btwn__central_8cxx.html\">examples/btwn_central.cxx</a> and <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/bitonic_8cxx.html\">examples/bitonic.cxx</a>.</p>\n<h2><a class=\"anchor\" id=\"spio\"></a>\nSparse global data input and output</h2>\n<p>The functions <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html#a382d42543754c56dcc7a0cc9afab96d3\" title=\"gives the values associated with any set of indices The sparse data is defined in coordinate format...\">CTF::Tensor::read()</a> and <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html#a3a4829cd86316e11b7ba1f3e15ea6f58\" title=\"writes in values associated with any set of indices The sparse data is defined in coordinate format...\">CTF::Tensor::write()</a> may be used for sparse global bulk data writes. It is possible to write via an array of structs format of index-value pairs and via indepdent arrays. The operator [] is also overloaded for <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html\" title=\"an instance of a tensor within a CTF world \">CTF::Tensor</a> to take a vector of indices, defining a <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Sparse__Tensor.html\" title=\"a sparse subset of a tensor \">CTF::Sparse_Tensor</a>, which is not currently as good as its name may suggest. The current class is basically a wrapper for the index and value vector and cannot be operated on the same was as a <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html\" title=\"an instance of a tensor within a CTF world \">CTF::Tensor</a>. But someday soon...</p>\n<p>The sparse data is defined in coordinate format. The tensor index (i,j,k,l) of a tensor with edge lengths {m,n,p,q} is associated with the global index g via the formula g=i+j*m+k*m*n+l*m*n*p. The row index is first and the column index is second for matrices, which means they are column major.</p>\n<p>Blocks or 'slices' of the tensor can be extracted using the <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html#a3476c413c912cf2bb8668aedce70fe74\" title=\"cuts out a slice (block) of this tensor A[offsets,ends) \">CTF::Tensor::slice()</a> function. It is possible to slice between tensors which are on different worlds, orchestrating data movement between blocks of arrays on different MPI communicators.</p>\n<p>It is also possible to read/write to a block, 'slice', or sub-tensor (all-equivalent) of any permutation of the tensor via the <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/classCTF_1_1Tensor.html#a31a9947a847cad40b02cdcb7f293b573\" title=\"Apply permutation to matrix, potentially extracting a slice B[i,j,...] = beta*B[...] + alpha*A[perms_A[0][i],perms_A[1][j],...]. \">CTF::Tensor::permute()</a> function. The function can be used to reorder the tensor in any fashion along each dimension, or to extract certain slices (via -1s in the permutation array). This function also works across MPI communicators (CTF::Worlds) and is a generalization of slice.</p>\n<h1><a class=\"anchor\" id=\"build\"></a>\nBuilding and testing the library</h1>\n<p>Begin by running ./configure (see ./configure &ndash;help to specify special compler choices flags) then build the library by 'make' or in parallel by 'make -j'. The library will be placed in './lib/libctf.a'. A <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> program may be compiled by including './include/ctf.hpp' and linking to './lib/libctf.a'. To test the library via an executable execute 'make test_suite' and then run './bin/test_suite' or execute 'make test' to build test_suite and run it sequentially 'make test2' to build and run on two processors, etc. Hostnames of some supercomputers (e.g. Edison, Hopper, Mira) are automatically recognized and a config.mk generated for them. See configure script if building on an analogous Cray/IBM architecture.</p>\n<p>The sub-directory 'examples' contains a suite of sample codes. These can be built all-together via the command 'make examples'.</p>\n<p>To profile internal <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> routines the code should be compiled with -DPROFILE and for MPI routine profile with -PMPI.</p>\n<p>It is possible to compiler <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> with the variable -DVERBOSE=1 to obtain basic reports on contraction mappings and redistributions. Similarly, for DEBUG mode is activated using -DDEBUG=1 (or =2 =3 for even more print outs).</p>\n<p>OpenMP usage and pragmas may be turned off by compiling with -DOMP_OFF, which may also slightly improve single-threaded performance.</p>\n<p>Environment Variables:</p>\n<p>OMP_NUM_THREADS number of threads to use on each MPI process, can be changed from within the code with omp_set_num_threads()</p>\n<p>CTF_MEMORY_SIZE tells <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> how much memory on the node there is for usage. By default <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> will try to read the available memory using system calls.</p>\n<p>CTF_PPN tells <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> how many processes per node you are using. The default is 1.</p>\n<h1><a class=\"anchor\" id=\"source\"></a>\nSource organization</h1>\n<p>include/ contains the interface file ctf.hpp, which should be included when you build code that uses <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a></p>\n<p>examples/ contains various example codes using <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a></p>\n<p>test/ contains unit and end tests of <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> functionality</p>\n<p>bench/ contains benchmarks for nonsymmetric transposition, redistribution, and distributed contraction</p>\n<p>studies/ contains some codes that feature more advanced <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> usage</p>\n<p>src/ contains all source files which are part of the <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a> library</p>\n<p>src/interface/ contains all templated interface files (namespace <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/namespaceCTF.html\">CTF</a>)</p>\n<p>src/tensor/ contains <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/untyped__tensor_8cxx.html\">untyped_tensor.cxx</a> &ndash; the internal tensor object implementation and <a class=\"el\" href=\"http://inf.ethz.ch/personal/edgar.solomonik/ctf/algstrct_8h.html\">algstrct.h</a> &ndash; the abstract class defining the algebraic structure (type/addition/multiplication)</p>\n<p>src/scaling/ contains the implementation of the single tensor scaling operation</p>\n<p>src/summation/ contains the implementation of the two tensor summation operation</p>\n<p>src/contraction/ contains the implementation of the three tensor contraction operation</p>\n<p>src/symmetry/ contains functions for symmetrization and packing</p>\n<p>src/mapping/ contains logical functions for decomposing a dense tensor on a processor grid</p>\n<p>src/redistribution/ contains functions that reshuffle data between two different parallel decompositions</p>\n<p>src/shared/ contains some shared utility functions and definitions </p>\n</div></div><!-- contents -->\n</div><!-- doc-content -->\n<!-- start footer part -->\n<div id=\"nav-path\" class=\"navpath\"><!-- id is needed for treeview function! -->\n  <ul>\n    <li class=\"footer\">Generated on Tue Dec 22 2015 20:49:21 for Cyclops Tensor Framework by\n    <a href=\"http://www.doxygen.org/index.html\">\n    doxygen</a> 1.8.11 </li>\n  </ul>\n</div>\n</body>\n</html>\n", 
  "id": 15142240
}