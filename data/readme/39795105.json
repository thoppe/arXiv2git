{
  "read_at": 1462546433, 
  "description": "", 
  "README.md": "# Single_node_reservoir\n\nIncluded are the verilog files used to collect the data for\nhttp://arxiv.org/abs/1411.1398 . This publication describes an\nexperiment using asynchronous digital logic on a field-programmable gate\narray (FPGA) to construct a physical reservoir computer to solve simple\nclassification problems.\n\nThe Verilog code was compiled using Altera's Quartus II software. The\nFPGA used in the experiment was an Altera Cyclone IV EP4CE115F29C7N on a\nTerasic De2-115 development board. Data was transferred to the computer\nusing a FTDI FT232H USB chip that was attached to the FPGA's GPIO pins\n(see the USB_comm repo for more info).\n\n---------------------------------------------------------------------------\nFile list\n---------------------------------------------------------------------------\nboolean_rc.v\n  Top module for the Quartus project. Instantiates master_fsm, \n  acquire_controller, usb_comm_controller, and reservoir_controller.\n  \nmaster_fsm.v\n  Finite state machine that monitors USB communications and creates global\n  commands to begin acquiring dynamics, send data, or reset FPGA based on \n  data received from PC.\n\nacquire_controller.v\n  Finite state machine that manages the reading and writing of data from\n  RAM. Instantiates ram_to_save_wf1, a single port, dual clock RAM module\n  of 8 bits wide x 1k bits deep. Also instantiates two parallel_shift mods\n  for buffering reservoir dynamics before they're sent to RAM. Dynamics\n  from reservoir are sampled into buffer at 400 MHz.\n  \nusb_comm_controller.v\n  Finite state machine that manages the necessary protocol to read and write\n  data between the FPGA and the PC using the FT232H USB chip in 245 FIFO mode.\n  Modifying this file has a high probability of breaking the USB communication.\n  \nreservoir_controller.v\n  Finite state machine that manages the reservoir. Upon receiving acquire_signal,\n  it enables the reservoir dynamics and inputs the word that was received via \n  USB. It then waits a specified amount of time before shutting off the dynamics\n  and forcing the reservoir back to it's fixed point state. Also instantiates\n  delay_ABN_reservoir.\n  \ndelay_ABN_reservoir.v\n  The dynamical system itself. Instantiates two delay modules that delay input\n  signal by a specific number of (pairs of) inverter gates. XOR's reservoir\n  input and delay line outputs to create reservoir outputs.\n  \ndelay.v\n  The delay lines. By supplying parameter n_delay, a delay line of n_delay * 2\n  inverter gates (wired in series) is constructed. Each delay element adds, on\n  average, ~0.6 ns of delay (~0.3 ns per inverter gate).\n\nparallel_shift.v\n  Synchronous parallel shift register that turns a 8 bits of serial data into\n  8 bits of parallel data.\n  \nAll other .v files are auto-generated Quartus megafunctions. Refer to Quartus\ndocumentation for more info.\n  \n", 
  "id": 39795105
}