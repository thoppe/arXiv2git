{
  "id": 2669531, 
  "read_at": 1462547473, 
  "README.rst": "vmc\n===\n\nPerforms variational Monte Carlo (VMC) calcuations on lattice systems\nthat are of interest to the authors of this code.\n\nThis package is made up of two distinct components:\n\n* ``vmc-core`` is the heart of the Monte Carlo calculation, and is\n  written in C++ for speed\n\n* ``pyvmc`` is a higher-level package that allows setting up,\n  controlling, and analysis of calculations.  It is written in python\n  for ease-of-programming/use and flexibility, and communicates with\n  the C++ code by using `Cython <http://cython.org/>`_.\n\nCompiling ``vmc-core``\n----------------------\n\n`premake4 <http://industriousone.com/premake>`_ is required for the\nbuild.\n\nRequires `boost <http://www.boost.org/>`_ >= 1.55 (headers only) and\n`eigen3 <http://eigen.tuxfamily.org/>`_.\n\nTo compile and run (using e.g. ``clang++``)::\n\n    $ cd vmc-core\n    $ premake4 --os=linux gmake && CXX=clang++ INCLUDES=\"-I/path/to/eigen3/include -I/path/to/boost/include\" make\n\nRun ``premake4 --help`` for a list of options.  Note that it is possible\nfor premake to hook into a different build system instead of using\n``make``.\n\nThe code should compile on recent versions of ``g++``, ``clang++``,\nand possibly even ``icc``.  We are only targeting compilers that\nsupport C++11.\n\nA sample build script, which compiles both ``vmc-core`` and ``pyvmc``,\nis located at ``./do-build.example``.\n\n``vmc-core`` API documentation\n------------------------------\n\nIf `doxygen <http://www.doxygen.org/>`_ is installed, ``vmc-core`` API\ndocumentation can be generated by running::\n\n    $ cd vmc-core/\n    $ mkdir -p docs/\n    $ doxygen\n\nAfterwards, HTML documentation will exist at\nvmc-core/docs/generated/html/index.html\n\nIf PDF output is desired, change directory to\nvmc-core/docs/generated/latex/ and run ``make``.\n\n``vmc-core`` tests\n------------------\n\nWe use assertions liberally within ``vmc-core``.  There are some\ntests/assertions that slow the code significantly if enabled.  To run\nwith these tests, compile with the flag ``-DVMC_CAREFUL`` by running::\n\n    $ make config=careful\n\nBe sure to pass all the appropriate environment variables, given above,\nto ``make``.\n\nThere are also some standalone unit tests, built upon the\n``googletest`` framework.  To build and run these tests::\n\n    $ cd unittests/\n    $ premake4 --os=linux gmake && INCLUDES=\"-I/path/to/eigen3/include -I/path/to/boost/include\" make && ./vmc-core-tests\n\nEventually we should also write a fuzz test for ``CeperleyMatrix``.\n\n``pyvmc``\n---------\n\nDocumentation on performing a simple calculation using ``pyvmc`` is\ncoming soon.\n\nCompiling ``pyvmc``\n-------------------\n\nFirst make sure a recent ``python`` is installed, along with\n``virtualenv``.  (The primary author of this code has been using\nPython 3.3 lately, but the code should still work on Python 2.7.)  The\nfollowing uses ``clang++`` for both compiling (``CC``) and linking\n(``CXX``), and assumes certain (typical) directories for ``boost`` and\n``eigen``.\n\nThe ``pip`` command below compiles all the python dependencies given in\n``requirements.txt``.  Some of these have their own dependencies, which\nmust be installed.\n\n::\n\n    $ virtualenv venv\n    $ source venv/bin/activate\n    $ pip install -r requirements.txt\n    $ CC=clang++ CXX=clang++ python setup.py build_ext -I/usr/include/boost:/usr/include/eigen3 -Lvmc-core --inplace\n\nSometimes you must pass the option ``--force`` to the ``build_ext``\ncommand, since changes to ``vmc-core`` C++ header files are not\nconsidered when determining which ``.pyx`` files to recompile.  In fact,\nif one accelerates compilation using\n`ccache <http://ccache.samba.org/>`_, then there is little penalty from\nusing ``--force`` all the time, and the compilation is guaranteed to be\ncorrect.\n\n``LD_LIBRARY_PATH``\n-------------------\n\nAfter having followed the instructions above, things will have compiled\nbut the operating system will not know where to look for the\n``vmc-core`` library when python needs to load it.  It can either be\ncopied or symlinked to e.g. ``/usr/local/lib``, or the environment\nvariables can be set so that the library path is searched.  For instance,\nin the ``bash`` shell on Linux::\n\n    $ export LD_LIBRARY_PATH=/path/to/vmc/vmc-core\n\nOn Mac OS X, this variable is called ``DYLD_LIBRARY_PATH`` instead.\n\nIt is recommended to construct two scripts, one for building and one for\nexecuting python, to cut down on the effort needed to build and run\nthings.  Otherwise, the environment variables and commands can get out of\nhand.\n\n``pyvmc`` tests\n---------------\n\n``py.test`` is used to perform unit tests of ``pyvmc``::\n\n    $ PYTHONPATH=. py.test pyvmc\n\nThere are also Monte Carlo tests that use both ``pyvmc`` and\n``vmc-core`` to perform calculations and compare to previous (or known)\nquantities.  These are located in ``pyvmc/mc_tests/`` and can be executed\nby running::\n\n    $ python pyvmc/mc_tests/__init__.py\n\nCaveats\n-------\n\nOnly wavefunctions whose (slave) particles obey Pauli exclusion are\ncurrently supported (i.e. fermions and hard-core bosons).\n\nOnly wavefunctions with a definite particle number are supported.\n\nAlso, only wavefunctions that have a definite :math:`S_z` are supported.\nOtherwise, it is not entirely accurate to think of spin-up and spin-down\nparticles as separate species (as the code does), since annihilation\noperators anticommute even if the spins of the two operators are\ndifferent.\n\nAnother way of phrasing the above two requirements is that moves and\noperators must consist only of SiteHop's.\n\nWays in which things are currently in flux\n------------------------------------------\n\nAt the moment the following things are broken:\n\n* Renyi stuff uses only single particle moves, even on wavefunctions\n  where that doesn't work well.\n\n* Projected Fermi sea does not yet use multi-particle moves so does not\n  work at half filling.\n\n* Non-Bravais lattices have never been tested.\n\n* Cylindrical boundary conditions have not yet been fully tested.\n\nResearch based on results of this code\n--------------------------------------\n\n* \"Non-Fermi-liquid d-wave metal phase of strongly interacting\n  electrons,\" Hong-Chen Jiang, Matthew S. Block, Ryan V. Mishmash,\n  James R. Garrison, D. N. Sheng, Olexei I. Motrunich and Matthew P. A.\n  Fisher, Nature 493, 39-44 (2013)\n  [`arXiv:1207.6608 <http://arxiv.org/abs/1207.6608>`_].  (used for\n  Renyi entropy calculations)\n\n* \"Theory of a competitive spin liquid state for |k-(BEDT-TTF)2Cu2(CN)3|\n  and |EtMe3Sb[Pd(dmit)2]2|,\" Ryan V. Mishmash, James R. Garrison,\n  Samuel Bieri and Cenke Xu\n  [`arXiv:1307.0829 <http://arxiv.org/abs/1307.0829>`_].  (used for\n  roughly half of the VMC calculations)\n\n.. |k-(BEDT-TTF)2Cu2(CN)3| replace:: k-(BEDT-TTF)\\ :sub:`2`\\ Cu\\ :sub:`2`\\ (CN)\\ :sub:`3`\n.. |EtMe3Sb[Pd(dmit)2]2| replace:: EtMe\\ :sub:`3`\\ Sb[Pd(dmit)\\ :sub:`2`\\ ]\\ :sub:`2`\n", 
  "description": ""
}