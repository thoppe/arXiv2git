{
  "id": 2660382, 
  "read_at": 1462547470, 
  "README.rst": "`BookwormDB <https://github.com/bookworm-project/BookwormDB>`__ is the\ncode repository for transforming a large set of files and their metadata\ninto an efficient and easily queryable database that can make full use\nof all the metadata and lexical data in the original source.\n\nA quick walkthrough is included below: other documentation is at\n`bookworm.culturomics.org <>`__ and in a `Bookworm\nManual <http://bookworm-project.github.io/Docs>`__ on this repository\n(editable at the repo\n`here <https://github.com/Bookworm-project/Docs>`__).\n\nInstallation\n============\n\n1. Download the latest release, either by cloning this git repo or\n   downloading a zip.\n2. Navigate to the folder in the terminal, and type\n   ``python setup.py install``.\n\n-  If ``/usr/bin`` or ``/usr/lib/cgi-bin`` is not writeable by your\n   account, you may need to type ``sudo python setup.py install``\n\n3. Type ``bookworm --help`` to confirm the executable has worked. If\n   this doesn't work, file a bug report.\n\nReleases\n--------\n\nThe \"master\" branch is under continuous development: it's likely to be\nfaster and incorporate the latest bugfixes, but will also tend to\nincorporate the latest bugs. The most recent tagged version (currently\n0.3 alpha) may be a good replacement.\n\nRelated projects\n----------------\n\nThis builds a database and implements the Bookworm API on particular set\nof texts.\n\nSome basic, widely appealing visualizations of the data are possible\nwith the Bookworm `web\napp <https://github.com/bookworm-project/BookwormGUI>`__, which runs on\ntop of the API.\n\nA more wide-ranging set of visualizations is available built on top of\nD3 in the `Bookworm D3\npackage <http://github.com/bmschmidt/BookwormD3>`__. If you're looking\nto develop on top of Bookworm, that presents a much more flexible set of\ntools.\n\nBookworms\n---------\n\nHere are a couple of Bookworms built using\n`BookwormDB <https://github.com/bookworm-project/BookwormDB>`__:\n\n1. `Open Library <http://bookworm.culturomics.org/OL/>`__\n2. `ArXiv <http://bookworm.culturomics.org/arxiv/>`__\n3. `Chronicling America <http://arxiv.culturomics.org/ChronAm/>`__\n4. `SSRN <http://bookworm.culturomics.org/ssrn/>`__\n5. `US Congress <http://bookworm.culturomics.org/congress/>`__\n\nGetting Started\n---------------\n\nRequired MySQL Database\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe hardest part about setting up Bookworm is properly configuring the\nMySQL installation. Since this is a web application. The easiest way to\ntest out Bookworm on your home computer may be to use a `preconfigured\nVM <http://github.com:bookworm-project/bookwormVM>`__.\n\nAt the very least, there must be a MySQL user with permissions to insert\n+ select data from all databases. The easiest way to handle this is to\nhave a user with root access defined in your system-wide MySQL\nconfiguration files.\n\nThis creates a bit of a security risk, though, so we recommend 2 MySQL\nusers: an admin user with the ability to create new databases (i.e.\nGRANT ALL) and a second user that is only able to select data from\ndatabases (i.e. GRANT SELECT). This is for security: your data is safer\nif the web user can't modify it at all.\n\nFirst, that admin user:\n\nFor example, create a user ``foobar`` with password ``mysecret`` and\nfull access to all databases from ``localhost``:\n\n.. code:: mysql\n\n    CREATE USER 'foobar'@'localhost' IDENTIFIED BY 'mysecret';\n    GRANT ALL PRIVILEGES ON *.* TO 'foobar'@'localhost' WITH GRANT OPTION;\n    FLUSH PRIVILEGES;\n\nThe second user would be the user that the API uses to get data to push\nto the bookworm GUI. The easiest way to configure this user is to just\nlet the Apache user handle getting the data. On Ubuntu, you would do:\n\n.. code:: mysql\n\n    GRANT SELECT ON *.* TO 'www-data'@'localhost';\n    FLUSH PRIVILEGES;\n\nIf you're using a Mac, the Apache user is ``_www``, so replace\n``www-data`` with ``_www`` above.\n\nIf your system doesn't have an apache user or you would like to create\nyour own non-admin user, you can change the system-wide mysql\nconfiguration to use whatever user you want. Those will be at\n``/etc/mysql/my.cnf``, ``/etc/my.cnf``, or a similar location, and\nshould look something like this (if you want a password, add it as for\nthe admin user).\n\n::\n\n    [client]\n    user = www-data\n\nFinally, there must also be a **user** config file at ``~/.my.cnf`` that\nPython can load with your MySQL user/pass (this prevents having to store\nany sensitive information in the Python scripts). Here is an example of\nwhat the ``~/.my.cnf`` file would look like for the user/pass created\nabove:\n\n::\n\n    [client]\n    user = foobar\n    password = mysecret\n\nWith these settings in place, you're ready to begin building a Bookworm.\nSee `the walkthrough <#walkthrough>`__ for a fuller example.\n\nThe query API\n-------------\n\nThis distribution also includes two files, general\\_api.py and\nSQLapi.py, which together constitute an implementation of the API for\nBookworm, written in Python. It primarily implements the API on a MySQL\ndatabase now, but includes classes for more easily implementing it on\ntop of other platforms (such as Solr).\n\nIt is used with the `Bookworm\nGUI <https://github.com/Bookworm-project/BookwormGUI>`__ and can also be\nused as a standalone tool to query data from your database. To run the\nAPI in its most basic form, type ``bookworm query $string``, where\n$string is a json-formatted query.\n\nAn executable is bundled in the distro at\n``bookwormdb/bin/dbbindings.py`` that, when placed in your cgi-bin\nfolder, will serve the API over to and from the web.\n\nWhile the point of the command-line tool ``bookworm`` is generally to\n*create* a Bookworm, the point of the query API is to retrieve results\nfrom it.\n\nFor a more interactive explanation of how the GUI works, see the `D3\nbookworm browser <http://benschmidt.org/D3/APISandbox>`__\n\nInstalling the API.\n~~~~~~~~~~~~~~~~~~~\n\nOn some versions, ``sudo python setup.py install`` should deposit a copy\nin an appropriate location on your system (such as\n``/usr/lib/cgi-bin``).\n\nIf that doesn't work, just run\n``cp ~/bookwormDB/bin/dbbindings.py /usr/lib/cgi-bin`` (exact locations\nmay vary) to place it in the correct place.\n\nIf using homebrew on OS X, the shebang at the beginning of\n``dbbindings.py`` may be incorrect. (It will not load your installed\npython modules). Change it from ``#!/usr/bin/env python`` to\n``#!/usr/local/bin/python``, and it should work.\n\nWalkthrough\n===========\n\nThese are some instructions on how to build a bookworm.\n\n    Indented bits tell you how to build on specific bookworm using `text\n    from the summaries of\n    bills <https://github.com/unitedstates/congress/wiki>`__ introduced\n    in the US Congress from 1973 to the present day. The goal is to\n    provide everything needed to build a Bookworm using publically\n    available data.\n\nGet the Data\n------------\n\nFirst off, you need a collection of texts to analyze. Ideally this\nshould be more than 1000 individual texts, with some year (or other\ntime) description.\n\n    To download the congress data, Matt Nicklay has put together a\n    script in another repo that will download everything you'll need.\n    Clone that repo and run ``get_and_unzip_data.py`` to fetch and unzip\n    the data:\n\n    ::\n\n        git clone git://github.com/bmschmidt/congress_api\n        cd congress_api\n        python get_and_unzip_data.py\n\n    This will take a few minutes depending on your Internet connection\n    and the speed of your computer. The ``get_and_unzip_data.py`` script\n    simply downloads and unzips all the files in parallel using\n    `multiprocessing <http://docs.python.org/2/library/multiprocessing.html>`__.\n    NOTE: Once fully unzipped, the files will take up just under 3GB of\n    disk space.\n\nPrep to Build Bookworm\n----------------------\n\nIf you haven't already, install this repo on your system.\n\n::\n\n    git clone git://github.com/Bookworm-project/BookwormDB\n    python setup.py\n\nRequired Files\n~~~~~~~~~~~~~~\n\nTo build a bookworm, you need to build three files in the directory you\nplan to use. You can have whatever other files you want in the root\ndirectory. But these three names are reserved for bookworm use.\n\n::\n\n    congress/\n      | input.txt\n      | jsoncatalog.txt\n      | field_descriptions.json\n\nRequired files 1: input.txt:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe first is slightly more complicated than it appears. It contains the\nvarious files you'll be reading in as unicode text. These can be input\nin one of three ways.\n\nThe first, which will be faster in most cases, is as a *single file*.\n\n-  ``input.txt``\n\nIn this format, each line consists of the file's unique identifier,\nfollowed by a tab, followed by the **full text** of that file. Note that\nyou'll have to strip out all newlines and returns from original\ndocuments. In the event that an identifier is used twice, behavior is\nundefined.\n\nBy changing the makefile, you can also do some more complex\nsubstitutions. (See the metadata parsers for an example of a Bookworm\nthat directly reads hierarchical, bzipped directories without\ndecompressing first).\n\n**Format 2** is as a directory of files:\n\n-  ``input/``\n\nThis folder should contain a uniquely named .txt file for every item in\nyour collection of texts that you want to build a bookworm around. The\nfiles may be stored in subdirectories: if so, their identifier key\nshould include the full path to the file (but not the trailing '.txt').\n(NOTE: this is currently unimplemented)\n\n**Format 3** is as a shell script named\n\n-  ``input_script``\n\nThat script when executed, should out a stream formatted the same as\ninput.txt. In some cases, this will allow you to save a lot disk space\nand/or time. It must be executable and have a shebang on the first line\ndesignating the interpreter. (NOTE: currently unimplemented).\n\n    To build the congress API, we must create an ``input.txt`` file with\n    raw text from summaries of bills introduced into Congress. Each line\n    contains a unique ID and the text from the summary of a single bill.\n    Then, we will create the ``files/metadata/jsoncatalog.txt`` file\n    which will hold metadata for each bill, including a field that links\n    each JSON object to a line in input.txt. Included in the\n    `congress\\_api <http://github.com/bmschmidt/congress_api>`__ repo is\n    a script ``congress_parser.py`` which we'll run to create\n    ``jsoncatalog.txt`` and the ``input.txt`` file.\n\n    ::\n\n        cd congress_api\n        python congress_parser.py\n\nRequired files 2: Metadata about each file.\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  ``files/metadata/jsoncatalog.txt`` with one JSON object per line. The\n   keys represent shared metadata for each file: the values represent\n   the entry for that particular document. There should be no new line\n   or tab characters in this file.\n\nIn addition to the metadata you choose, two fields are required:\n\n1. A ``searchstring`` field that contains valid HTML which will be\n   served to the user to identify the text.\n\n-  This can be a link, or simply a description of the field. If you have\n   a URL where the text can be read, it's best to include it inside an\n   tag: otherwise, you can just put in any text field you want in the\n   process of creating the jsoncatalog.txt file: something like author\n   and title is good.\n\n2. A ``filename`` field that includes a unique identifier for the\n   document (linked to the filename or the identifier, depending on your\n   input format).\n\n    Congress users have already created this file in the previous step.\n\nRequired Files 3: Metadata about the metadata.\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNow create a file in the ``field_descriptions.json`` which is used to\ndefine the type of variable for each variable in ``jsoncatalog.txt``.\n\nCurrently, you **do** have to include a ``searchstring`` definition in\nthis, but **should not** include a filename definition.\n\n    For the Congress demo, copy the following JSON object into\n    ``field_descriptions.json``:\n\n    .. code:: json\n\n        [\n           {\"field\":\"date\",\"datatype\":\"time\",\"type\":\"numeric\",\"unique\":true,\"derived\":[{\"resolution\":\"month\"}]},\n           {\"field\":\"searchstring\",\"datatype\":\"searchstring\",\"type\":\"text\",\"unique\":true},\n           {\"field\":\"enacted\",\"datatype\":\"categorical\",\"type\":\"text\",\"unique\":false},\n           {\"field\":\"sponsor_state\",\"datatype\":\"categorical\",\"type\":\"text\",\"unique\":false},\n           {\"field\":\"cosponsors_state\",\"datatype\":\"categorical\",\"type\":\"text\",\"unique\":false},\n           {\"field\":\"chamber\",\"datatype\":\"categorical\",\"type\":\"text\",\"unique\":false}\n           ]\n\n    Everything should now be in place and we are ready to build the\n    database.\n\nRunning\n-------\n\nFor a first run, you just want to use ``bookworm init`` to create the\nentire database (if you want to rebuild parts of a large bookworm--the\nmetadata, for example--that is also possible.)\n\n::\n\n    bookworm init\n\nThis will walk you through the process of choosing a name for your\ndatabase.\n\nThen to build the bookworm, type\n\n::\n\n    bookworm build all\n\n    For the demo, that still looks like this.\n\n    ::\n\n        bookworm init\n\n    The database **bookwormcongress** will be created if it does not\n    exist.\n\nDepending on the total number and average size of your texts, this could\ntake a while. Sit back and relax.\n\nFinally, you may want to set up a GUI.\n\n::\n\n    bookworm build linechartGUI\n\nGeneral Workflow\n~~~~~~~~~~~~~~~~\n\nFor reference, the general workflow of the Makefile is the following:\n\n5.  Build the directory structure in ``files/texts/``.\n6.  Derive ``files/metadata/field_descriptions_derived.json`` from\n    ``files/metadata/field_descriptions.txt``.\n7.  Derive ``files/metadata/jsoncatalog_derived.txt`` from\n    ``files/metadata/jsoncatalog.json``, respectively.\n8.  Create metadata catalog files in ``files/metadata/``.\n9.  Create a table with all words from the text files, and save the\n    million most common for regular use.\n10. Encode unigrams and bigrams from the texts into ``files/encoded``\n11. Load data into MySQL database.\n12. Create temporary MySQL table and .json file that will be used by the\n    web app.\n13. Create API settings.\n\nDependencies\n============\n\n-  python 2.7 (with modules):\n-  ntlk (recommended, to be required)\n-  numpy\n-  regex (to handle complicated Unicode regular expressions for\n   tokenization: ``easy_install regex``)\n-  pandas (used by the API, not this precise, set of scripts)\n\n-  parallel (GNU parallel, in versions available from apt-get or\n   homebrew)\n-  MySQL v. 5.6 (will work with 5.5, but future versions may require 5.6\n   for some functionality; MariaDB 10.0+ is also actively supported.\n   Some people have reported that it largely works with MySQL 5.1)\n-  Apache or other webserver (for front end; it is possible to run the\n   API without a webserver at all, but this usage is not documented.)\n", 
  "README.md": "[BookwormDB](https://github.com/bookworm-project/BookwormDB \"BookwormDB\") is the code repository for transforming a large\nset of files and their metadata into an efficient and easily queryable database that can make full use of all the\nmetadata and lexical data in the original source.\n\nA quick walkthrough is included below: other documentation is at [bookworm.culturomics.org]() and in a [Bookworm Manual](http://bookworm-project.github.io/Docs) on this repository (editable at the repo [here](https://github.com/Bookworm-project/Docs)).\n\n# Installation\n\n1. Download the latest release, either by cloning this git repo or downloading a zip.\n2. Navigate to the folder in the terminal, and type `python setup.py install`.\n   * If `/usr/bin` or `/usr/lib/cgi-bin` is not writeable by your account,\n     you may need to type `sudo python setup.py install` \n3. Type `bookworm --help` to confirm the executable has worked. If this doesn't work, file\n   a bug report.\n\n## Releases\n\n**The master branch contains the latest changes, and may be buggy. As of September 2015, version 0.4 now bundled as a python module for installation. Bookworms built under 0.3 can be manipulated using the new server-side API; but if you want to stay on the old version, checkout the version from branch 0.3.1; it may be more stable in certain cases. You *can* run the two branches alongside each other.**\n\n\n## Related projects\n\nThis builds a database and implements the Bookworm API on particular set of texts.\n\nSome basic, widely appealing visualizations of the data are possible with the Bookworm [web app](https://github.com/bookworm-project/BookwormGUI \"Bookworm web app\"), which runs on top of the API. \n\nA more wide-ranging set of visualizations is available built on top of D3 in the [Bookworm D3 package](http://github.com/bmschmidt/BookwormD3).\nIf you're looking to develop on top of Bookworm, that presents a much more flexible set of tools.\n\n## Bookworms ##\nHere are a couple of Bookworms built using [BookwormDB](https://github.com/bookworm-project/BookwormDB \"Bookworm\"):\n\n1. [Open Library](http://bookworm.culturomics.org/OL/ \"Open Library\")\n2. [ArXiv](http://bookworm.culturomics.org/arxiv/ \"ArXiv\")\n3. [Chronicling America](http://arxiv.culturomics.org/ChronAm/ \"Chronicling America\")\n4. [SSRN](http://bookworm.culturomics.org/ssrn/ \"SSRN: Social Science Research Network\")\n5. [US Congress](http://bookworm.culturomics.org/congress/ \"Bills in US Congress\")\n6. [Rate My Professor Gendered Language](http://benschmidt.org/profGender)\n\n\n## Getting Started ##\n\n### Required MySQL Database ###\n\nThe hardest part about setting up Bookworm is properly configuring the MySQL installation. Since this is a web application.\nThe easiest way to test out Bookworm on your home computer may be to use a [preconfigured VM](http://github.com/bmschmidt/bookwormVM). \n\nAt the very least, there must be a MySQL user with permissions to insert + select data from all databases.\nThe easiest way to handle this is to have a user with root access defined in your system-wide MySQL configuration files.\n\nThis creates a bit of a security risk, though, so we recommend 2 MySQL users: an admin user with the ability to create new databases (i.e. GRANT ALL) and a second user that is only able to select data from databases (i.e. GRANT SELECT). This is for security: your data is safer if the web user can't modify it at all.\n\nRunning `bookworm config mysql` will take care of most of these tasks interactively: but if you have a MySQL configuration you do not want to risk hurting, you may want to proceed by hand.\n\nFirst, that admin user:\n\nFor example, create a user `foobar` with password `mysecret` and full access to all databases from `localhost`:\n\n```mysql\nCREATE USER 'foobar'@'localhost' IDENTIFIED BY 'mysecret';\nGRANT ALL PRIVILEGES ON *.* TO 'foobar'@'localhost' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\n```\n\nThe second user would be the user that the API uses to get data to push to the bookworm GUI. The easiest way to configure this user is to just let the Apache user handle getting the data. On Ubuntu, you would do: \n\n```mysql\nGRANT SELECT ON *.* TO 'www-data'@'localhost';\nFLUSH PRIVILEGES;\n```\n\nIf you're using a Mac, the Apache user is `_www`, so replace `www-data` with `_www` above.\n\nIf your system doesn't have an apache user or you would like to create your own non-admin user, you can change the system-wide mysql configuration to use whatever user you want. Those will be at `/etc/mysql/my.cnf`, `/etc/my.cnf`, or a similar location, and should look something like this (if you want a password, add it as for the admin user).\n\n```\n[client]\nuser = www-data\n```\n\nFinally, there must also be a **user** config file at `~/.my.cnf` that Python can load with your MySQL user/pass (this prevents having to store any sensitive information in the Python scripts). Here is an example of what the `~/.my.cnf` file would look like for the user/pass created above:\n\n```\n[client]\nuser = foobar\npassword = mysecret\n```\n\nWith these settings in place, you're ready to begin building a Bookworm. See [the walkthrough](#walkthrough) for a fuller example.\n\n\n## The query API\n\nThis distribution also includes two files, general_api.py and SQLapi.py, which together constitute an implementation of the API for Bookworm, written in Python. It primarily implements the API on a MySQL database now, but includes classes for more easily implementing it on top of other platforms (such as Solr).\n\nIt is used with the [Bookworm GUI](https://github.com/Bookworm-project/BookwormGUI) and can also be used as a standalone tool to query data from your database. To run the API in its most basic form, type `bookworm query $string`, where $string is a json-formatted query.\n\nAn executable is bundled in the distro at `bookwormdb/bin/dbbindings.py` that, when placed in your cgi-bin folder, will serve the API over to and from the web.\n\nWhile the point of the command-line tool `bookworm` is generally to *create* a Bookworm, the point of the query API is to retrieve results from it.\n\nFor a more interactive explanation of how the GUI works, see the [D3 bookworm browser](http://benschmidt.org/D3/APISandbox)\n\n### Installing the API.\n\n\nOn some versions, `sudo python setup.py install` should deposit a copy in an appropriate location on your system (such as `/usr/lib/cgi-bin`).\n\nIf that doesn't work, just run `cp ~/bookwormDB/bin/dbbindings.py /usr/lib/cgi-bin` (exact locations may vary) to place it in the correct place.\n\nIf using homebrew on OS X, the shebang at the beginning of `dbbindings.py` may be incorrect. (It will not load your installed python modules). Change it from `#!/usr/bin/env python` to `#!/usr/local/bin/python`, and it should work.\n\n\nWalkthrough\n===========\n\nThese are some instructions on how to build a bookworm. \n\n> Indented bits tell you how to build on specific bookworm using [text from the summaries of bills](https://github.com/unitedstates/congress/wiki \"text from the summaries of bills\") introduced in the US Congress from 1973 to the present day.\n> The goal is to provide everything needed to build a Bookworm using publically available data.\n\n## Get the Data ##\n\nFirst off, you need a collection of texts to analyze. Ideally this should be more than 1000 individual texts, with some year (or other time) description.\n\n> To download the congress data, Matt Nicklay has put together a script in another repo that will download everything you'll need. Clone that repo and run `get_and_unzip_data.py` to fetch and unzip the data:\n\n> ```\n> git clone git://github.com/bmschmidt/congress_api\n> cd congress_api\n> python get_and_unzip_data.py\n> ```\n\n> This will take a few minutes depending on your Internet connection and the speed of your computer. The `get_and_unzip_data.py` script simply downloads and unzips all the files in parallel using [multiprocessing](http://docs.python.org/2/library/multiprocessing.html \"multiprocessing\"). NOTE: Once fully unzipped, the files will take up just under 3GB of disk space.\n\n\n## Prep to Build Bookworm ##\n\nIf you haven't already, install this repo on your system.\n\n```\ngit clone git://github.com/Bookworm-project/BookwormDB\npython setup.py\n```\n\n### Required Files ###\n\nTo build a bookworm, you need to build three files in the directory you plan to use. You can have whatever other files you want in the root directory. But these three names are reserved for bookworm use.\n\n```\ncongress/\n  | input.txt\n  | jsoncatalog.txt\n  | field_descriptions.json\n```\n\n#### Required files 1: input.txt:\n\nThe first is slightly more complicated than it appears.\nIt contains the various files you'll be reading in as unicode text.\nThese can be input in one of three ways.\n\nThe first, which will be faster in most cases, is as a *single file*.\n\n* `input.txt`\n\nIn this format, each line consists of the file's unique identifier, followed by a tab, followed by the **full text** of that file. Note that you'll have to strip out all newlines and returns from original documents. In the event that an identifier is used twice, behavior is undefined.\n\nBy changing the makefile, you can also do some more complex substitutions. (See the metadata parsers for an example of a Bookworm that directly reads hierarchical, bzipped directories without decompressing first).\n\n**Format 2** is as a directory of files:\n\n*  `input/`\n\nThis folder should contain a uniquely named .txt file for every item in your collection of texts that you want to build a bookworm around. The files may be stored in subdirectories: if so, their identifier key should include the full path to the file (but not the trailing '.txt'). (NOTE: this is currently unimplemented)\n\n\n**Format 3** is as a shell script named\n\n*  `input_script`\n\nThat script when executed, should out a stream formatted the same as input.txt. In some cases, this will allow you to save a lot disk space and/or time. It must be executable and have a shebang on the first line designating the interpreter. (NOTE: currently unimplemented). \n\n> To build the congress API, we must create an `input.txt` file with raw text from summaries of bills introduced into Congress. Each line contains a unique ID and the text from the summary of a single bill. Then, we will create the `files/metadata/jsoncatalog.txt` file which will hold metadata for each bill, including a field that links each JSON object to a line in input.txt. Included in the [congress_api](http://github.com/bmschmidt/congress_api) repo is a script `congress_parser.py` which we'll run to create `jsoncatalog.txt` and the `input.txt` file.\n\n> ```\n> cd congress_api\n> python congress_parser.py\n> ```\n\n#### Required files 2: Metadata about each file.\n\n*  `files/metadata/jsoncatalog.txt` with one JSON object per line. The keys represent shared metadata for each file: the values represent the entry for that particular document. There should be no new line or tab characters in this file.\n\nIn addition to the metadata you choose, two fields are required:\n\n1. A `searchstring` field that contains valid HTML which will be served to the user to identify the text.\n   * This can be a link, or simply a description of the field. If you have a URL where the text can be read, it's best to include it inside an <a> tag: otherwise, you can just put in any text field you want in the process of creating the jsoncatalog.txt file: something like author and title is good.\n  \n2. A `filename` field that includes a unique identifier for the document (linked to the filename or the identifier, depending on your input format).\n\n> Congress users have already created this file in the previous step.\n\n#### Required Files 3: Metadata about the metadata.\n\nNow create a file in the `field_descriptions.json` which is used to define the type of variable for each variable in `jsoncatalog.txt`.\n\nCurrently, you **do** have to include a `searchstring` definition in this, but **should not** include a filename definition.\n\n> For the Congress demo, copy the following JSON object into `field_descriptions.json`:\n\n> ```json\n> [\n>    {\"field\":\"date\",\"datatype\":\"time\",\"type\":\"numeric\",\"unique\":true,\"derived\":[{\"resolution\":\"month\"}]},\n>    {\"field\":\"searchstring\",\"datatype\":\"searchstring\",\"type\":\"text\",\"unique\":true},\n>    {\"field\":\"enacted\",\"datatype\":\"categorical\",\"type\":\"text\",\"unique\":false},\n>    {\"field\":\"sponsor_state\",\"datatype\":\"categorical\",\"type\":\"text\",\"unique\":false},\n>    {\"field\":\"cosponsors_state\",\"datatype\":\"categorical\",\"type\":\"text\",\"unique\":false},\n>    {\"field\":\"chamber\",\"datatype\":\"categorical\",\"type\":\"text\",\"unique\":false}\n>    ]\n> ```\n\n> Everything should now be in place and we are ready to build the database.\n\n## Running ##\n\nFor a first run, you just want to use `bookworm init` to create the entire database (if you want to rebuild parts of a large bookworm--the metadata, for example--that is also possible.)\n\n```\nbookworm init\n```\n\nThis will walk you through the process of choosing a name for your database.\n\nThen to build the bookworm, type\n\n```\nbookworm build all\n```\n\n> For the demo, that still looks like this.\n\n> ```\n> bookworm init\n> ```\n\n> The database **bookwormcongress** will be created if it does not exist.\n\nDepending on the total number and average size of your texts, this could take a while. Sit back and relax.\n\nFinally, you may want to set up a GUI.\n\n```\nbookworm build linechartGUI\n```\n\n\n### General Workflow ###\nFor reference, the general workflow of the Makefile is the following:\n\n5. Build the directory structure in `files/texts/`.\n1. Derive `files/metadata/field_descriptions_derived.json` from `files/metadata/field_descriptions.txt`.\n2. Derive `files/metadata/jsoncatalog_derived.txt` from `files/metadata/jsoncatalog.json`, respectively.\n4. Create metadata catalog files in `files/metadata/`.\n7. Create a table with all words from the text files, and save the million most common for regular use.\n8. Encode unigrams and bigrams from the texts into `files/encoded`\n9. Load data into MySQL database.\n10. Create temporary MySQL table and .json file that will be used by the web app.\n11. Create API settings.\n\n\n# Dependencies #\n\n* python 2.7 (with modules):\n * ntlk (recommended, to be required)\n * numpy\n * regex (to handle complicated Unicode regular expressions for tokenization: `easy_install regex`)\n * pandas (used by the API, not this precise, set of scripts)\n\n* parallel (GNU parallel, in versions available from apt-get or homebrew)\n* MySQL v. 5.6 (will work with 5.5, but future versions may require 5.6 for some functionality; MariaDB 10.0+ is also actively supported. Some people have reported that it largely works with MySQL 5.1)\n* Apache or other webserver (for front end; it is possible to run the API without a webserver at all, but this usage is not documented.)\n \n\n\n", 
  "description": "Tools for text tokenization and encoding"
}