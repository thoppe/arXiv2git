{
  "read_at": 1462545798, 
  "description": ":radio: Rocchio algorithm content-based suggestion based on topic distance space, see the implementation interactively on", 
  "README.md": "# Science Concierge\n\na Python repository implementing Rocchio algorithm content-based suggestion\nbased on topic distance space using Latent semantic analysis (LSA).\nScience Concierge is an algorithm backend for Scholarfy\n[www.scholarfy.net](http://www.scholarfy.net/),\nan automatic itinerary maker for conference goers.\n\nSee full article on [Arxiv](http://arxiv.org/abs/1604.01070) or full tex manuscript\n[here](https://github.com/titipata/science_concierge_manuscript). You can also see\nthe scale version of Scholarfy to 14.3M articles from Pubmed\nat [pubmed.scholarfy.net](http://pubmed.scholarfy.net/).\n\n\n## Usage\n\nFirst, clone the repository.\n\n```bash\n$ git clone https://github.com/titipata/science_concierge\n```\n\nInstall the library using `setup.py`,\n\n```bash\n$ python setup.py develop install\n```\n\n\n## Download example data\n\nWe provide example `csv` file from Pubmed Open Acess Subset that you can download and\nplay with (we parsed using [pubmed_parser](https://github.com/titipata/pubmed_parser)).\nEach file contains `pmc`, `pmid`, `title`, `abstract`, `publication_year` as column name.\nUse `download` function to download example data,\n\n```python\nimport science_concierge\nscience_concierge.download(['pubmed_oa_2015.csv', 'pubmed_oa_2016.csv'])\n```\n\nWe provide `pubmed_oa_{year}.csv` from `{year} = 2007, ..., 2016` (**note** 2007 is\n  all publications before year 2008). Alternative is to use `awscli` to download,\n\n```bash\n$ aws s3 cp s3://science-of-science-bucket/science_concierge/data/ . --recursive\n```\n\n\n## Example usage of Science Concierge\n\nYou can build quick recommendation by importing `ScienceConcierge` class\nthen use `fit` method to fit list of documents. Then use `recommend` to recommend\ndocuments based on like or dislike documents.\n\n```python\nimport pandas as pd\nfrom science_concierge import ScienceConcierge\n\ndf = pd.read_csv('pubmed_oa_2016.csv')\ndocs = list(df.abstract) # provide list of abstracts\nrecommend_model = ScienceConcierge(stemming=True, ngram_range=(1,2),\n                                   n_components=200, n_recommend=200)\nrecommend_model.fit(docs) # input list of documents or abstracts\nindex = recommend_model.recommend(like=[100, 8450], dislike=[]) # index of like/dislike docs\ndocs_recommend = [model.docs[i] for i in index] # recommended documents\n```\n\n\n## Dependencies\n\n- [numpy](http://www.numpy.org/)\n- [pandas](http://pandas.pydata.org/)\n- [unidecode](https://pypi.python.org/pypi/Unidecode)\n- [nltk](http://www.nltk.org/) with white space tokenizer and Porter stemmer\n  use `science_concierge.download_nltk()` to download required corpora\n- [regular expression](https://docs.python.org/2/library/re.html)\n- [scikit-learn](http://scikit-learn.org/)\n\nTo install all dependencies we provide `requirements.txt` where we can install using `pip`,\n\n```bash\npip install -r requirements.txt\n```\n\n## Members\n\n- [Titipat Achakulvisut](http://titipata.github.io)\n- [Daniel Acuna](http://www.scienceofscience.org)\n- [Tulakan Ruangrong](http://github.com/bluenex)\n- [Konrad Kording](http://koerding.com/)\n\n\n## License\n\n![alt text](https://licensebuttons.net/l/by-nc-sa/3.0/88x31.png)\n[Creative Commons 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)\n\nCopyright (c) 2015 Titipat Achakulvisut, Daniel E. Acuna, Tulakan Ruangrong, Konrad Kording\n", 
  "id": 40383901
}