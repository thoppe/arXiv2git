{
  "read_at": 1462546010, 
  "description": "The CPS library with QUDA support.", 
  "README.md": "Welcome to the QUDA enabled Columbia Physics System!\n\n\tGPU SUPPORT\n\nThis CPS library has been modified to offer limited GPU support. Currently \nsupported fermion inverters are listed below:\n\n\t  1. Clover Fermions\n\t  2. Wilson Fermions\n\nAll files and functions needed to enable QUDA support are contained in the\ndirectory `src/util/quda_interface` and the header file \n`include/util/quda_interface.h`. The only other files which has been\nmodified with repsect to QUDA support is\n`src/util/lattice/f_clover/f_clover.C` and \n`src/util/lattice/f_clover/f_clover.C`. The code changes to CPS in these \nfiles are delineated by the compiler flag `#ifdef USEQUDA`.\n\nOne may utilise the `CG` or `BICGSTAB` QUDA inverter type simply by setting the\nCPS inverter type as required. A new CPS enumerator `QUDA_GCR_INVERTER` \nhas been included to utilise the QUDA `GCR` inverter.\n\nExamples on how to use the GPU enabled library are given in this release\nfor both single hadron and two hadron channels. The modifications \nrequired to allow existing code to use this library should be minimal.\nFor details, please refer to the differences between GPU enabled and CPU \nonly files, highlighted in our production code package. Instructions for \nconfiguring and making this package are given below.\n\n\n\tCONFIGURING AND COMPILATION\n\nTo configure this library on scalar, BG/Q, or other CPU architecture, \nplease refer to the `README` file in CPS. To configure for GPU, run:\n```sh\n$ ./configure CXXFLAGS=\" -DUSEQUDA -I/path/to/quda/include -I/path/to/cuda/include\" \n```\nfrom the `QUDA-CPS_v5_0_26/` directory. You must already have working \ninstallations of QUDA and CUDA.\n\nCPS can be configured for multiple architectures from the same source tree.\nIn this case, we recommend keeping the source tree and build trees separate.\nAn example build for scalar and GPU follows:\n```sh\n$ mkdir cpscpu cpsgpu \n$ cd cpscpu \n$ ../QUDA-CPS_v5_0_26/configure CXXFLAGS=\"-Wno-write-strings\" \n$ make \n$ cd ../cpsgpu \n$ ../QUDA-CPS_v5_0_26/configure CXXFLAGS=\"-Wno-write-strings \n-DUSEQUDA -I/path/to/quda/include -I/path/to/cuda/include\" \n$ make \n```\n(The `-Wno-write-strings` flag is optional, but recommended to silence\ncompiler warnings.)\n\n\tBUILD INSTRUCTIONS\n\nThe CPS library should be built separately from the simulation code that\ncomposes the rest of this package. To build the rest of the package \nafter building CPS, edit the top-level `makefile.defs` and then run `make`.\nA top-level `make` will fail if CPS is unbuilt or if `makefile.defs` is not\nproperly configured. An example `makefile.defs` corresponding to the above\nconfiguration example is:\n```make\nCPSSRC = /path/to/QUDA-CPS/QUDA-CPS_v5_0_26#CPS source code\nCPSGPU = /path/to/QUDA-CPS/cpsgpu#built GPU version\nCPSCPU = /path/to/QUDA-CPS/cpscpu#built scalar version\nQUDA = /path/to/quda\nCUDA = /path/to/cuda\nFFTW = /path/to/fftw\n\nBUILD_GPU = yes\nBUILD_SCALAR = yes\n```\n\nDependencies for all (GPU and scalar) simulation code are: QUDA-CPS 5.0.26 ; FFTW 3\n\nDependencies for GPU simulation code are: QUDA 0.5.0x 0.6.x ; CUDA 4.1+\n\n\n\tEXTRA FEATURES\n\nSeveral extra features not found in the current CPS release are included \nin this package:\n\n   1. Stout Gaussian Kernel Link Smearing\n\n      This routine applies the link smearing procedure outlined in\n      http://arxiv.org/pdf/hep-lat/0311018v1.pdf\n      For the time being only `GKLS_STOUT` is supported. Incorporating stout\n      smearing into the HMC routines is ongoing.\n\n   2. Z<sub>2</sub> X Z<sub>2</sub> stochastic sources\n\n      We have included an option to use Z<sub>2</sub> X Z<sub>2</sub> stochastic sources.\n      The enum type is `ZTWOXZTWO`.   \n\n   3. Diluted/Smeared Stochastic Sources\n\n      The `QPropWRandWall` class has been extended to include interlace \n      dilution and/or Jacobi smearing. Please refer to\n      `src/alg/alg_qprop/QPropW.C` for the necessary arguments one needs\n      to pass to these classes.\n\n   4. Diluted/Smeared Momentum Shell sources\n\n      The `QPropWMom` class now inherits directly from `QPropW`. It includes\n      a new member function `mom_src[src_phase]` that is analogous to the \n      the `QPropWRand` member function `rand_src[src_value]`. This new member function \n      is necessary for the calculation of momentum shell sources. The\n      structure of the new `QPropWMom` and derived classes is the same as\n      the new `QPropWRandWall` classes in that one may employ dilution, \n      Jacobi smearing, or both.\n\n   5. Smearing and Gauge Fixing\n\n      In order to properly apply the gauge fixing matrices to the source\n      and sink fermion fields, we needed to change the order in which \n      gauge fixing and smearing are performed. For the source this is a \n      simple case of reodering some function calls, but for the sink we\n      must move the gauge fixing routine out of `QPropW.Run()` and into\n      `GaussSinkSmearProp()`. As a result, when using gauge fixing and \n      smeared operators, one must set the new `QPropWArg` flag \n      `smeared_snk = 1` so that the internal routines can perform gauge\n      fixing in the correct order.   \t\t       \n      \n      N.B. The current release of CPS contains a bug in the function \n      `GFWallSource()`. We have fixed the bug in this release. \n\n        DEVELOPMENT      \n\nAll changes to the current vanilla version of CPS are delineated by\n\n\tBegin QUDA_CPS\n\t      ... code changes ...\n\tEnd QUDA_CPS\n\nto allow for easy identification. We request that any changes or additions \nin pushes to the public repository be delineated in the same fashion to ease \nthe merging procedure.\n\n    \tCONTACT\n\nWe welcome all questions, comments, suggestions, complaints... but most \nof all, we like bug reports. Thank you.\n\n   [Dean Howarth](https://github.com/cpviolator) howard3 at rpi dot edu\n   [Matthew Bernstein](https://github.com/bernsm3) bernsm3 at rpi dot edu\n", 
  "id": 40995477
}