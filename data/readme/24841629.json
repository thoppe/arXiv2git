{
  "read_at": 1462510001, 
  "description": "unAPI webservice module based on Catmandu", 
  "README.md": "# NAME\n\nCatmandu::Plack::unAPI - unAPI webservice based on Catmandu\n\n# STATUS\n\n[![Build Status](https://travis-ci.org/gbv/Catmandu-Plack-unAPI.png)](https://travis-ci.org/gbv/Catmandu-Plack-unAPI)\n[![Coverage Status](https://coveralls.io/repos/gbv/Catmandu-Plack-unAPI/badge.png?branch=devel)](https://coveralls.io/r/gbv/Catmandu-Plack-unAPI?branch=devel)\n[![Kwalitee Score](http://cpants.cpanauthors.org/dist/Catmandu-Plack-unAPI.png)](http://cpants.cpanauthors.org/dist/Catmandu-Plack-unAPI)\n\n# DESCRIPTION\n\nCatmandu::Plack::unAPI implements an unAPI web service as PSGI application.\n\n# SYNOPSIS\n\nSet up an `app.psgi` for instance to get data via [http://arxiv.org](http://arxiv.org)\nidentifier using [Catmandu::Importer::ArXiv](https://metacpan.org/pod/Catmandu::Importer::ArXiv):\n\n    use Catmandu::Plack::unAPI;\n    use Catmandu::Importer::ArXiv;\n\n    Catmandu::Plack::unAPI->new(\n        query => sub {\n            my ($id) = @_;\n            return if $id !~ qr{^(arXiv:)?[0-9abc/.]+}i;\n            Catmandu::Importer::ArXiv->new( id => $id )->first;\n        }\n    )->to_app;\n\nRetrieving items from a [Catmandu::Store](https://metacpan.org/pod/Catmandu::Store) is even simpler:\n\n    Catmandu::Plack::unAPI->new( store => $store )->to_app;\n\nStart the application, e.g. with `plackup app.psgi` and query via unAPI:\n\n    curl 'localhost:5000'\n    curl 'localhost:5000?id=1204.0492&format=json'\n\n# CONFIGURATION\n\n- query\n\n    Code reference with a query method to get an item (as reference) by a given\n    identifier (HTTP request parameter `id`). If the method returns undef, the\n    application returns HTTP 404. If the methods returns a scalar, it is used as\n    error message for HTTP response 400 (Bad Request).\n\n- store\n\n    Instance of [Catmandu::Store](https://metacpan.org/pod/Catmandu::Store) or store name and options as array reference to\n    query items from.\n\n- formats\n\n    Hash reference with format names mapped to MIME type, [Catmandu::Exporter](https://metacpan.org/pod/Catmandu::Exporter)\n    configuration and (optional) documentation for each format. By default only\n    JSON and YAML are configured as following:\n\n        json => {\n            type     => 'application/json',\n            exporter => [ 'JSON', pretty => 1 ],\n            docs     => 'http://json.org/'\n        },\n        yaml => {\n            type     => 'text/yaml',\n            exporter => [ 'YAML' ],\n            docs     => 'http://en.wikipedia.org/wiki/YAML'\n        }\n\n# LIMITATIONS\n\nAn exporter is instanciated for each request, so performance may be low\ndepending on configuration.\n\nThe error response is always `text/plain`, this may be configurable in a\nfuture release.\n\nTimeouts are not implemented yet.\n\n# AUTHOR\n\nJakob Vo\u00df <jakob.voss@gbv.de>\n\n# COPYRIGHT AND LICENSE\n\nCopyright 2014- Jakob Vo\u00df\n\nThis library is free software; you can redistribute it and/or modify\nit under the same terms as Perl itself.\n\n# SEE ALSO\n\n- [http://unapi.info/](http://unapi.info/)\n- [Catmandu::Plack::REST](https://metacpan.org/pod/Catmandu::Plack::REST)\n", 
  "id": 24841629
}