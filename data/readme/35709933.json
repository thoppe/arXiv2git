{
  "read_at": 1462558719, 
  "description": "PoT java implementation", 
  "README.md": "# pooled_time_series\nPoT java implementation\n\n# Dependencies\n* Maven (Version shouldn't matter much. Tested with 2.x and 3.x.)\n* OpenCV 2.4.x (Tested with 2.4.9 and 2.4.11)\n\n# Pre-requisites\nIf you get any errors running brew install opencv related to numpy, please run:\n\n 1. `pip install numpy`\n\nNow move on to OpenCV\n 1. `brew install opencv --with-java`\n \nThe above should leave you with a:\n\n    /usr/local/Cellar/opencv/<VERSION>/share/OpenCV/java\n\nDirectory which contains the associated dylib OpenCV dynamic library along with the OpenCV jar file.\n\n# Getting started\n 1. `mvn install assembly:assembly`\n 2. Set OPENCV_JAVA_HOME, e.g., to `export OPENCV_JAVA_HOME=/usr/local/Cellar/opencv/2.4.9/share/OpenCV/java`\n 3. Set POOLED_TIME_SERIES_HOME, e.g., to `export POOLED_TIME_SERIES_HOME=$HOME/pooled_time_series/src/main`\n 4. Run `pooled-time-series`, e.g., by creating an alias, `alias pooled-time-series=\"$POOLED_TIME_SERIES_HOME/bin/pooled-time-series\"`\n \n The above should produce:\n \n```\nusage: pooled_time_series\n -d,--dir <directory>            A directory with image files in it\n -f,--file <file>                Path to a single file\n -h,--help                       Print this message.\n -j,--json                       Set similarity output format to JSON.\n                                 Defaults to .txt\n -o,--outputfile <output file>   File containing similarity results.\n                                 Defaults to ./similarity.txt\n -p,--pathfile <path file>       A file containing full absolute paths to\n                                 videos. Previous default was\n                                 memex-index_temp.txt\n```\n\nSo, to call the code e.g., on a directory of files called `data`, you would run (e.g., with OpenCV 2.4.9):\n\n```\npooled-times-series -d data\n```\n\nAlternatively you can create (independently of this tool) a file with absolute file paths to video files, 1 per line, and then pass it with the `-p` file to the above program.\n\n## Running Hadoop Jobs\n### Config and Getting Started\nAdd the following to your .bashrc\n```\nexport HADOOP_OPTS=\"-Djava.library.path=<path to OpenCV jar> -Dmapred.map.child.java.opts=-Djava.library.path=<path to OpenCV jar>\"\nalias pooled-time-series-hadoop=\"$POOLED_TIME_SERIES_HOME/bin/pooled-time-series-hadoop\"\n```\n\nBuild and clean up the jar for running\n```\n# Compile everything\nmvn install assembly:assembly\n\n# Drop the LICENSE file from our jar that will give us headaches otherwise\nzip -d target/pooled-time-series-1.0-SNAPSHOT-jar-with-dependencies.jar META-INF/LICENSE\n\n```\n\n### Easy Run Script\n\nYou run the entire Hadoop pipeline over a folder of videos with the following command. Note that you should pass the full path to the video directory.\n```\npooled-time-series-hadoop `pwd`/example_videos_dir\n```\n\n### Running Individual Jobs\n```\n# Run the Optical Time Series Job\nhadoop jar target/pooled-time-series-1.0-SNAPSHOT-jar-with-dependencies.jar gov.nasa.jpl.memex.pooledtimeseries.OpticalTimeSeries OpticalTimeSeriesInput/ OpticalTimeSeriesOutput/\n\n# Run the Gradient Time Series Job (using the same input as above for convenience)\nhadoop jar target/pooled-time-series-1.0-SNAPSHOT-jar-with-dependencies.jar gov.nasa.jpl.memex.pooledtimeseries.GradientTimeSeries OpticalTimeSeriesInput/ GradientTimeSeriesOutput/\n\n# Run the meanChiSquaredDistance job\nhadoop jar target/pooled-time-series-1.0-SNAPSHOT-jar-with-dependencies.jar gov.nasa.jpl.memex.pooledtimeseries.SimilarityCalculation SimilarityInput/ MeanChiOutput/\n\n# Run the similarity job (using the value calculated in the previous job)\nhadoop jar target/pooled-time-series-1.0-SNAPSHOT-jar-with-dependencies.jar gov.nasa.jpl.memex.pooledtimeseries.SimilarityCalculation SimilarityInput/ SimilarityOutput/ ./MeanChiOutput/meanChiSquaredDistances.txt \n```\n\nThe input used above is in ```./OpticalTimeSeriesInput/videos.txt``` and looks like\n```\n/Path/to/example/videos/badvideo.mp4\n/Path/to/example/videos/goodvideo.mp4\n/Path/to/example/videos/movie2.mp4\n```\n\nThe input used for the similarity job above ```./SimilarityInput``` looks like the below. It should contain the pairs of all videos to be evaluated.\n```\n/Path/to/badvideo.mp4,/Path/to/badvideo.mp4\n/Path/to/badvideo.mp4,/Path/to/goodvideo.mp4\n/Path/to/goodvideo.mp4,/Path/to/goodvideo.mp4\n```\n\nExample output from the similarity calculation looks something like the below:\n```\n/Path/to/badvideo.mp4,/Path/to/badvideo.mp4     1.0\n/Path/to/badvideo.mp4,/Path/to/goodvideo.mp4 \t0.0326700669930306\n/Path/to/goodvideo.mp4,/Path/to/goodvideo.mp4   1.0\n```\n\n# Research Background and Detail\nThis is a source code used in the following conference paper [1].\nIt includes the pooled time series (PoT) representation framework as well as basic per-frame descriptor extractions including histogram of optical flows (HOF) and histogram of oriented gradients (HOG).\nFor more detailed information on the approach, please check the paper.\n\nIf you take advantage of this code for any academic purpose, please do cite:\n\n[1] M. S. Ryoo, B. Rothrock, and L. Matthies, \"Pooled Motion Features for First-Person Videos\", IEEE Conference on Computer Vision and Pattern Recognition (CVPR), June 2015.\n\nhttp://arxiv.org/pdf/1412.6505v2.pdf\n\n@inproceedings{ryoo2015pot,\n title={Pooled Motion Features for First-Person Videos},\n author={M. S. Ryoo and B. Rothrock and L. Matthies},\n booktitle={IEEE Conference on Computer Vision and Pattern Recognition (CVPR)},\n year={2015},\n month={June},\n address={Boston, MA},\n}\n", 
  "id": 35709933
}