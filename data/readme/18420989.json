{
  "read_at": 1462550629, 
  "description": "megaman: Manifold Learning for Millions of Points ", 
  "README.md": "# megaman: Manifold Learning for Millions of Points\n\n<img src=\"https://raw.githubusercontent.com/mmp2/megaman/master/doc/images/word2vec_rmetric_plot_no_digits.png\" height=210>\n<img src=\"https://raw.githubusercontent.com/mmp2/megaman/master/doc/images/spectra_D4000.png\" height=210>\n<img src=\"https://raw.githubusercontent.com/mmp2/megaman/master/doc/images/spectra_Halpha.png\" height=210>\n\n[![build status](http://img.shields.io/travis/mmp2/megaman/master.svg?style=flat)](https://travis-ci.org/mmp2/megaman)\n[![version status](http://img.shields.io/pypi/v/megaman.svg?style=flat)](https://pypi.python.org/pypi/megaman)\n[![license](http://img.shields.io/badge/license-BSD-blue.svg?style=flat)](https://github.com/mmp2/megaman/blob/master/LICENSE)\n\n``megaman`` is a scalable manifold learning package implemented in\npython. It has a front-end API designed to be familiar\nto [scikit-learn](http://scikit-learn.org/) but harnesses\nthe C++ Fast Library for Approximate Nearest Neighbors (FLANN)\nand the Sparse Symmetric Positive Definite (SSPD) solver\nLocally Optimal Block Precodition Gradient (LOBPCG) method\nto scale manifold learning algorithms to large data sets.\nOn a personal computer megaman can embed 1 million data points\nwith hundreds of dimensions in 10 minutes.\nmegaman is designed for researchers and as such caches intermediary\nsteps and indices to allow for fast re-computation with new parameters.\n\nPackage documentation can be found at http://mmp2.github.io/megaman/\n\nYou can also find our arXiv paper at http://arxiv.org/abs/1603.02763\n\n## Examples\n\n- [Tutorial Notebook]( https://github.com/mmp2/megaman/blob/master/examples/megaman_tutorial.ipynb)\n\n## Installation with Conda\n\nThe easiest way to install ``megaman`` and its dependencies is with\n[conda](http://conda.pydata.org/miniconda.html), the cross-platform package\nmanager for the scientific Python ecosystem.\n\nTo install megaman and its dependencies, run\n\n```\n$ conda install megaman --channel=conda-forge\n```\n\nCurrently builds are available for OSX and Linux, on Python 2.7, 3.4, and 3.5.\nFor other operating systems, see the full install instructions below.\n\n## Installation from source\n\nTo install megaman from source requires the following:\n\n- [python](http://python.org) tested with versions 2.7, 3.4, and 3.5\n- [numpy](http://numpy.org) version 1.8 or higher\n- [scipy](http://scipy.org) version 0.16.0 or higher\n- [scikit-learn](http://scikit-learn.org)\n- [FLANN](http://www.cs.ubc.ca/research/flann/)\n- [cython](http://cython.org/)\n- a C++ compiler such as ``gcc``/``g++``\n\nOptional requirements include\n\n- [pyamg](http://pyamg.org/), which allows for faster decompositions of large matrices\n- [pyflann](http://www.cs.ubc.ca/research/flann/) which offers another method of computing distance matrices (this is bundled with the FLANN source code)\n- [nose](https://nose.readthedocs.org/) for running the unit tests\n\nThese requirements can be installed on Linux and MacOSX using the following conda command:\n\n```\n$ conda install --channel=conda-forge pip nose coverage gcc cython numpy scipy scikit-learn pyflann pyamg\n```\n\nFinally, within the source repository, run this command to install the ``megaman`` package itself:\n```\n$ python setup.py install\n```\n\n## Unit Tests\nmegaman uses ``nose`` for unit tests. With ``nose`` installed, type\n```\n$ make test\n```\nto run the unit tests. ``megaman`` is tested on Python versions 2.7, 3.4, and 3.5.\n\n## Authors\n- [James McQueen](http://www.stat.washington.edu/people/jmcq/)\n- [Marina Meila](http://www.stat.washington.edu/mmp/)\n- [Zhongyue Zhang](https://github.com/Jerryzcn)\n- [Jake VanderPlas](http://www.vanderplas.com)\n\n## Future Work\n\nWe have the following planned updates for upcoming releases:\n\n- Native support for K-Nearest Neighbors distance (in progress)\n- Lazy R-metric (only calcualte on selected points)\n- Make cover_plotter.py work more generally with rmetric.py\n", 
  "id": 18420989
}