{
  "read_at": 1462554044, 
  "description": "Calculation of cosmic ray activation cross-sections and decay yields", 
  "README.md": "README of the ACTIVIA package\n=============================\nContact: John Back (J.J.Back@warwick.ac.uk) and \n\t Yorck Ramachers (Y.A.Ramachers@warwick.ac.uk)\n\nIntroduction\n------------\n\nThis C++ package can calculate target-product cross-sections and the \nproduction and decay yields of (radioactive) isotopes from cosmic ray \nactivation using data tables and semi-empirical formulae, as detailed \nin the paper \"ACTIVIA: Calculation of isotope production cross-sections \nand yields\", published in Nucl. Instrum. Meth A. 586, 286 (2008), \nalso available on the arXiv: http://arxiv.org/abs/0709.3472.\n\nThis file explains how to build and run the ACTIVIA code to perform\ncalculations of cross-sections and yields for radioactive isotopes.\nThe code has only been tested to work within the Unix environment.\n\nFurther online documentation is available at\nhttp://universityofwarwick.github.io/ACTIVIA\n\n[![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.12612.png)]\n(http://dx.doi.org/10.5281/zenodo.12612)\n\n\nBuilding the code  \n-----------------\n\nThis package does not require any other external software to run.\nHowever, it can use ROOT, a general purpose C++ data analysis\nframework (http://root.cern.ch), for creating output files, and a\ngraphical user interface (GUI) can be enabled based on the open source\nversion of the Qt software framework (https://qt-project.org/downloads).\n\nThe configure script should be run to set the compiler options,\nand to enable the ROOT output and/or the GUI extension.\n\n```sh\n$ ./configure\n$ make\n```\n\nUse \"configure --help\" to see the list of available options. The\nconfiguration will try to automatically detect if your system has\nROOT installed (version 5.14.00e and above required). Otherwise, use \nthe \"configure --rootsys\" option. The GUI can be configured using \n\"configure --gui\". This requires a full installation of Qt (version 4);\nthe \"--qtlib\", \"--qtinc\" and \"--moc\" options should specify the location \nof the Qt libraries, include files and the Meta-Object Compiler (moc)\ncommand, respectively.\n\nBy default, the compilation creates a shared library \"lib/libActivia.so\"\nas well as the binary \"bin/Activia\".\n\nNote that the shared library \"lib/libActivia.so\" needs to be included in the\nLD_LIBRARY_PATH environment variable before \"bin/Activia\" can be run using\n(for csh/tcsh):\n\nsetenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:base_directory_of_Activia/lib\n\nThis can be set using the \"pathlib.sh\" script from the Activia base\ndirectory. For csh/tcsh:\n\n```sh\n$ source pathlib.sh\n```\n\n                          \nRunning the code\n----------------\n\nAfter creating the \"bin/Activia\" executable, you can run the code by going \nto the workdir directory\n\n```sh\n$ cd workdir\n```\n\nThis is the recommended place to run the code, since this directory contains\n(a soft-link to) the necessary \"decayData.dat\" file, which specifies all \npossible isotope products together with their side-branches. The format \nof each line in \"decayData.dat\" is\n\nproductZ   productA   halfLife   nSideBranches  SBZ1 SBA1 ... SBZn SBAn\n\nwhere SBZi and SBAi are the Z and A values of side-branch i, respectively. \nThe half-life value must be in units of days.\n\n\na) The recommended way to run the program is to use an input file.\nExamples are provided in the workdir/runFiles sub-directory:\n\n```sh\n$ cd workdir\n$ sh runFiles/runNatCu_Co60.sh\n```\n\n\nb) To run the code in a terminal window (no GUI), issue the command\n\n```sh\n$ ./bin/Activia\n```\n\nwhere the program will ask you a set of questions which you need \nto provide interactively. If a question requires several input \nvalues, then they all need to be put on the same line, each \nseparated by a space, before typing enter (carriage return) to \naccept them. Please do not use other symbols (such as commas) to \nseparate the input values as this will result in I/O errors.\n\n\nc) If you want to use the GUI, make sure the code has been compiled and \nlinked with the Qt 4 libraries (see above). Then issue the command\n\n```sh\n$ ./bin/Activia 1\n```\n\nwhere a GUI window will pop-up (the number 1 specifies we want to \nuse the GUI).\n\nIf there is an error saying that the Qt libraries cannot be found, \nthen set the environment variable LD_LIBRARY_PATH to include the \nQt library path:\n\nsetenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:location_of_Qt_libraries\n\nRight clicking on any section in the window will provide some \nhelp/hints on how to fill in the form. Clicking on \"Run\" at the bottom \nwill run the code, where another window will pop-up, detailing the \nprogress of the calculation. Once the form has been filled in, the \ninput can be saved as a file (\"File\" -> \"Save input\"). \nReloading an input file will preset the various entries in the form \n(\"File\"->\"Load input\").\n\n\n\nTo run the example of calculating all isotope product yields for\nnatural tellerium and using ROOT output files, do\n\n```sh\n$ cd workdir\n$ sh runFiles/runNatTe_All.sh\n```\n\nTo use ASCII output files, run the following script instead:\n\n```sh\n$ sh runFiles/runNatTe_All_ascii.sh\n```\n\nThe run file specifies all required inputs for the calculations and also \nprovides the names and level of detail (summary or full information) \nof the cross-section and yield output files.\n\n\nData tables                               \n-----------\n\nIf you want to use data tables, then the workdir must also contain a file \n(e.g. \"listOfDataFiles.txt\") that specifies the filenames of all of the \nASCII tables. This file must be provided interactively or in the run \nscript file.\n\nEach data file has a set of initial comments specified by the hash (#) \nsymbol, followed by the target Z and A values, the \"#New table\" line \nand then the product Z and A values. The remaining lines are the actual \nenergy and cross-section data for the given target-product pair. \nAnother set of product cross-section values can be provided after the \nlines \"#New table\" and \"Product ZProd AProd\" for the \nsame target isotope (specified at the start of the file).\n\nThe directory workdir/MENDL contains a README.md file with instructions on \ndownloading Medium Energy Nuclear Data Library (MENDL) data files from the \nOECD Nuclear Energy Agency repository that can then be used in Activia. \nThe template file workdir/listOfDataFiles.txt should already contain a list \nof the MENDL data files, provided the steps in workdir/MENDL/README.md are \nfollowed.\n\nAn example script of running Activia with the MENDL data tables can be seen\nin the file\n\n```sh\n$ sh runFiles/runNatTe_All_DataTables.sh\n```\n\nwhich contains the line\n\n```\nlistOfDataFiles.txt 0.001\n```\n\nThis tells Activia to read any data files specified in listOfDataFiles.txt,\nand the number 0.001 is the minimum cross-section (in mb) for the data, i.e.\nif the data value is below this number, then the formulae are used instead.\n\n\nIt is also possible to use data files that are not based on the MENDL tables.\nAs an illustrative example, consider a file myDataFiles.txt that lists\nonly two filenames for cross-section data for two target isotopes; one for \nthe target isotope As-74 and another one for the target isotope Ba-133:\n\nas74.dat\nba133.dat\n\nThe file \"as74.dat\" contains the following energy-dependent\ncross-section data for three example products, Se-74, Se-73 and Se-72:\n\n```\n# Table format is as follows:\n# Target Z A\n# New table comment\n# Product Z A\n# E (MeV)   sigma (mb)\n# Target material is AS-74; (Z,A) = (33, 74)\nTarget 33 74\n# New table\nProduct 34 74\n1e-11    0\n2    0.217\n3    8.32\n4    55.8\n.\n.\n(provide all necessary energy and cross-section data)\n.\n.\n# New table\nProduct 34 73\n11.655    0\n13    25.2\n14    102\n15    208\n.\n.\n.\n# New table\nProduct 34 72\n20.158    0\n21    0.0626\n22    7.57\n23    53.6\n.\n.\n.\n```\n\nThe file \"ba133.dat\" will need to have a similar structure.\n\n                          \nOutput variables\n----------------\n\nThe code produces two output files: one for cross-section data and \nproduction rates, another one for decay yield information. Below we\ndescribe the output variables in the ROOT files. Variables in the ASCII\n(Stream) output files have the same meaning.\n\nIn the cross-section output file, we have two TTree's named \"xSecEData\",\nwhich stores detailed cross-section vs energy results, and \"xSecSummary\",\nwhich provides summary information.\n\nVariables in \"xSecEData\" are:\n\n```\nZt       = target isotope Z number\nAt       = target isotope A number\nfrac     = relative abundance fraction of the target isotope (0.0 to 1.0)\nZ        = product isotope Z number\nA        = product isotope A number\nnPoints  = number of energy points or bins (used in the beam spectrum)\nEnergy   = energy of the beam (MeV)\nSigma    = cross-section (mb), not weighted by the relative target isotope\n           fraction, frac\nProdRate = production rate (per kg per day), weighted by the relative\n           target isotope fraction, frac\n```\n\nVariables in \"xSecSummary\" are:\n\n```\nProdZ       = product isotope Z number\nProdA       = product isotope A number\nTotSigma    = total cross-section for the product isotope (mb), summed over\n\t      all energy bins and normalised over all target isotope \n              fractions\nTotProdRate = total production rate (per kg per day), normalised \n              over all target isotope abundance fractions.\n```\n\nThe decay yield output file has two TTree's, one named \"initialYields\", \ncontaining information about the initial production rate for product \nisotopes and their side-branches, and another one named \"decaySummary\", \nwhich summaries the initial and final yields of all product isotopes, \nweighted over all target isotope abundance fractions.\n\nVariables in \"initialYields\" are:\n\n```\nZt    = target isotope Z number\nAt    = target isotope A number\nZ     = product isotope Z number\nA     = product isotope A number\nSB    = side-branch flag (1 = yes, 0 = no)\nR     = production rate of isotope/side-branch (per kg per day)\n\nR_tot = production rate of isotope (Z,A), summing over side-branches \n         (per kg per day)\n      = 0.0 for side-branches\n\nI0    = initial product yield rate = R_tot*(1.0 - exp(-lambda*t_exp)), where\n        lambda = ln2/t_Half,\n        t_Half = half-life of the product isotope (days) and\n        t_exp is the beam exposure time (days).\n```\n\nVariables in \"decaySummary\" are:\n\n```\nip    = product isotope order number\nZ     = product isotope Z number\nA     = product isotope A number\ntHalf = half-life of the product isotope (days), specified in the \n        \"decayData.dat\" file\ndndti = initial yield rate (per kg per day), at the start of the cooling \n        (beam off) period, weighted over all target isotopes\ndndtf = final yield rate (per kg per day), weighted over all target isotopes\n```\n\nValidation QA\n-------------\n\nThe sub-directory workdir/validation contains the runComparisons.sh script:\n\n```sh\n$ sh runComparisons.sh\n```\n\nwhich can be run to compare various experimental measurements \n(from the EXFOR database https://www-nds.iaea.org/exfor/exfor.htm) \nwith the calculations from Activia for a range of target materials \nand activation products. Before this script can be run, the \n\"workdir/validation/analysis\" program needs to be built using \"make\", \nwhich requires ROOT. The comparison script creates a series of plots \nin the workdir/validation/pngFiles directory.\n\nNote that some of the comparisons require the MENDL-2 data files to be present\nin workdir/MENDL (specifically the last four examples in runComparisons.sh).\n\nSpecific reference plots are available in the \"Activia/doc/pngFiles\" directory,\nand can be viewed within the automatic Doxygen documentation (see below).\n\n\nDetailed C++ code documentation\n-------------------------------\n\nAll of the C++ classes have Doxygen (http://www.doxygen.org)\ncomments provided. If the \"Activia/doxygen\" sub-directory does not exist,\nthen the documentation can be made by doing (providing Doxygen is \ninstalled on your system):\n\n```sh\n$ doxygen\n```\n\nThis will create a \"Activia/doxygen\" subdirectory which contains the Doxygen \ndocumentation. Load the page \"doxygen/html/index.html\" in a web browser to\nlook through the documentation and class diagrams. The Unix program \"dot\" \nis used to create the class diagrams and needs to be installed on your \nsystem (it is part of Graphviz tool). Otherwise, set HAVE_DOT to NO in the \nDoxyfile.\n\n\nLicense\n-------\n\nThis software is distributed under the Boost Software License, Version 1,\n(Aug 17 2003). See [LICENSE_1_0.txt](LICENSE_1_0.txt)\n(optionally the original at http://www.boost.org/LICENSE_1_0.txt)\nfor details.\n\n\nAuthors and contributors\n------------------------\n\nThe authors are John Back and Yorck Ramachers.\n", 
  "id": 26321638
}