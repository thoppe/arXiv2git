{
  "id": 41640481, 
  "read_at": 1462545981, 
  "README.txt": "\nTHE TOMOGRAPHER PROJECT\n=======================\n\nA toolbox for error analysis in quantum tomography.\n\n\nOverview\n--------\n\nThis project comprises two parts:\n\n * The `tomorun` program -- you probably want this\n\n * The generic, `Tomographer` C++ framework -- flexible, but you'll need to\n   invest more time.\n\nThe `tomorun` executable produces a histogram of a figure of merit under the\ndistribution relevant for a reliable error analysis as described in [Faist &\nRenner, Practical Reliable Error Bars in Quantum\nTomography](http://arxiv.org/abs/1509.06763).  The measurement data are\nspecified as independent POVM outcomes.\n\nThe C++ framework is a set of abstract and generic classes which you can combine\nin your preferred way to implement this random walk for even more general\nsettings.\n\n\nPrerequisites\n-------------\n\nIf you're lucky and there's a binary release for your system, you won't need\nanything else.\n\nTo compile from source, you'll need:\n\n  - a recent C++ compiler (g++ >= 4.6, Intel ICC >= 14, clang++ >= 3.6 (3.3 w/o\n    OpenMP))\n  - [CMake >= 2.8.5](http://www.cmake.org/)\n  - [Boost libraries](http://www.boost.org/)\n  - [Eigen3 library >= 3.2](http://eigen.tuxfamily.org/)\n  - [MatIO library](https://sourceforge.net/projects/matio/)\n\nA recent C++ compiler is required as some C++11 features and elements of its\nstandard library are used. Also, make sure it supports OpenMP or you won't\nbenefit from parallelization.\n\nTested on Linux/Ubuntu and Mac OS X. Should theoretically (*big flashing red\nwarning light*) also work on Windows.\n\n\nDownload\n--------\n\nFollow the instructions on:\n\n  http://tomographer.github.io/tomographer/download\n\nTomographer can be downloaded from our github releases page:\n\n  https://github.com/Tomographer/tomographer/releases\n\nThere are precompiled binary releases for Mac OS X and Linux.  For other\nplatforms, you'll have to compile from source.  Don't worry, that's not\ncomplicated.  If you haven't already done so, install all the usual development\ntools (`gcc`/`g++`/`make`/etc.) and follow the *Installation* instructions\nbelow.\n\nIf you compile from source, make sure you download the offical source package\nfrom our releases page. If you use github's automatic `Download ZIP' links from\nthe source code, you might end up with missing files.\n\nIf you wish to contribute to development, don't hesitate to fork the repo on\ngithub and send me pull requests. Contact me if you have questions.\n\n\nInstallation\n------------\n\nIf you found a binary release for your system, simply unpack it. It is then\nready for use.\n\nThe rest of this section concerns compiling Tomographer/Tomorun from source.\n\nThe configuration, compilation and installation process is done using CMake.\n(You'll need CMake >= 2.8.5.)  Download an official release of Tomographer,\nunpack it, and enter the unpacked directory.  Then, issue the commands:\n\n    tomographer-1.0> mkdir build\n    tomographer-1.0> cd build\n    tomographer-1.0/build> cmake .. <ADDITIONAL CMAKE OPTIONS HERE>\n    tomographer-1.0/build> make\n    tomographer-1.0/build> make install/strip\n\nAnd you'll have the `tomorun` installed on your system.\n\nYou may also run CMake multiple times to adjust all the relevant options.  You\ncan specify some standard CMake variables, such as CMAKE_INSTALL_PREFIX.  If you\ninstalled a recent compiler manually, you'll need to point CMake to that\ncompiler, e.g. with\n\n    > cmake .. -DCMAKE_C_COMPILER=/path/to/gcc -DCMAKE_CXX_COMPILER=/path/to/g++ \n\nTo specify paths to the Boost, Eigen3 and MatIO libraries, use the CMake\nswitches:\n\n    -DEIGEN3_INCLUDE_DIR=/path/to/include/eigen3\n    -DMATIO_LIBRARY=/path/to/libmatio.a\n    -DMATIO_INCLUDE_DIR=/path/to/include\n\n(See [here][cmake_findboost] for switches relating to Boost libraries.)\n\n[cmake_findboost]: http://www.cmake.org/cmake/help/v3.0/module/FindBoost.html\n\nYou may of course also alternatively use CMake's graphical interface, CMake-GUI.\n\nNote the compilation step (`make`) is quite computation-heavy because of the\nextensive C++11 template metaprogramming. It might take a minute or two to\ncomplete depending on your hardware, and might be pretty greedy on RAM.\n\n\nRunning Tomorun\n---------------\n\nDetailed information about how to use & run `tomorun` is obtained by querying\nits help text:\n\n    > tomorun --help\n\nData is read from a file in MATLAB format (see option `--data-file-name`), and\nseveral options control which figure of merit to calculate as well as the\nparameters and behavior of the random walk.\n\nAs `tomorun` is running, you may query its progress by hitting CTRL-C (Linux/Mac\nOS X). If you want to interrupt `tomorun` and quit the current task, hit CTRL-C\ntwice in short succession.\n\nAlso, it is often more convenient to make `tomorun` read its options from a\nconfiguration file:\n\n    > tomorun --config myconfigfile\n\nAn example config file would be:\n\n    # Configuration file for an execution of `tomorun`.  Lines starting with '#'\n    # are comments and are ignored.\n    \n    # The data file which contains the POVM effects and frequencies etc.\n    data-file-name=the_data.mat\n    \n    # Write the histogram to the file named \"<myconfigfile>-histogram.csv\"\n    write-histogram-from-config-file-name = 1\n\n    # Number of random walk instances. Tip: Use all your CPU's.\n    n-repeats = 12\n\n    # Step size of the random walk. Adjust so that the acceptance ratio is\n    # around 0.25-0.4.\n    step-size = 0.01\n\n    # Sweep size. Keep only one in so many samples, to decorrelate them.\n    # Choose of the order of 1/<step-size>\n    n-sweep = 100\n\n    # Run until we have recorded this number of samples. Power of two\n    # recommended for binning analysis (the default)\n    n-run = 32768\n\n    # Choice of figure of merit. Here for example, tr(rho*rho_ref). If rho_ref\n    # is pure, this is exactly the (squared) fidelity to rho_ref. \"rho_ref\" is\n    # the name of a variable defined in 'the_data.mat'\n    value-type=obs-value:rho_ref\n\n    # The parameters of the histogram. MIN:MAX/NUM_BINS\n    value-hist=0.9:1/50\n\n\nMATLAB Tools\n------------\n\nSome tools are provided for fitting the resulting histogram to our theoretical\nmodel. These are MATLAB scripts located in the `tools` subdirectory.\n\nFor more information on how to run the histogram analyzer/fitter, run:\n\n    >> analyze_tomorun_histogram('Help')\n\n\nAPI Documentation\n-----------------\n\nYou can build the API documentation using [Doxygen >= 1.8][doxygen]. You'll also\nneed `dot` (from the `graphviz` suite). To build the documentation, simply run\n\n    tomographer-1.0/build> make doc\n\nThis will create API documentation in both HTML and LaTeX format. The HTML\noutput is located in `build/html` and the latex files are in `build/latex`.\n\nIf `doxygen` was not found by CMake, then re-run `cmake` specifying the location\nof Doxygen using the `-DDOXYGEN_EXECUTABLE=/location/of/doxygen` switch.\n\nTo build the latex documentation, enter the `latex` directory and run `make`.\nThe output file is called `refman.pdf`.\n\n[doxygen]: http://www.doxygen.org/\n\n\nTest Suite (for developers)\n---------------------------\n\nThere is a test suite which checks that the tomographer C++ framework works\ncorrectly, and that no bugs or regressions are being introduced as the code is\nbeing changed and maintained.\n\nTo compile and run the test suite, you need to specify to cmake that you want to\nbuild it:\n\n    tomographer-1.0/build> cmake .. -DTOMOGRAPHER_ENABLE_TESTS=on\n\nThe test suite will then be compiled normally when you run `make`. Use the `-j`\noption with the number of CPU cores on your system to speed up the compilation:\n\n    tomographer-1.0/build> make -j4\n\nRun the test suite with the command\n\n    tomographer-1.0/build> make test\n\nThe test suite uses [CTest][ctest].  You can also run the test programs\nindividually.  Most test executables use the [Boost Unit Test\nFramework][boost_test] and as such accept [various options][boost_test_options]\nto tune verbosity, which tests to run, etc.\n\n[ctest]: http://www.cmake.org/Wiki/CMake/Testing_With_CTest\n[boost_test]: http://www.boost.org/doc/libs/1_59_0/libs/test/doc/html/index.html\n[boost_test_options]: http://www.boost.org/doc/libs/1_59_0/libs/test/doc/html/boost_test/runtime_config/summary.html\n\n\nFeedback\n--------\n\nPlease report bugs, issues and wishes at:\n\n  https://github.com/Tomographer/tomographer/issues\n\n\nContributing\n------------\n\nContributions are welcome.  The preferred way to submit enhancements is to fork the\nrepo and send me a pull request. Also, don't hesitate to contact me for questions.\n\n\nHow to Cite\n-----------\n\nIf you use this software in your research, please consider citing the following\nworks:\n\n1. Philippe Faist and Renato Renner. Practical, Reliable Error Bars in Quantum\n   Tomography (2015). arXiv:1509.06763\n\n2. Philippe Faist. The Tomographer Project. Available at\n   https://github.com/Tomographer/tomographer/.\n\n\nAuthors, Copyright, License\n---------------------------\n\nAuthor: Philippe Faist\n\nCopyright (c) 2015 ETH Zurich, Institute for Theoretical Physics, Philippe Faist\n\nReleased under the terms of the MIT License (see file LICENSE.txt)\n", 
  "README.md": "\nTHE TOMOGRAPHER PROJECT\n=======================\n\nA toolbox for error analysis in quantum tomography.\n\n\nOverview\n--------\n\nThis project comprises two parts:\n\n * The `tomorun` program -- you probably want this\n\n * The generic, `Tomographer` C++ framework -- flexible, but you'll need to\n   invest more time.\n\nThe `tomorun` executable produces a histogram of a figure of merit under the\ndistribution relevant for a reliable error analysis as described in [Faist &\nRenner, Practical Reliable Error Bars in Quantum\nTomography](http://arxiv.org/abs/1509.06763).  The measurement data are\nspecified as independent POVM outcomes.\n\nThe C++ framework is a set of abstract and generic classes which you can combine\nin your preferred way to implement this random walk for even more general\nsettings.\n\n\nPrerequisites\n-------------\n\nIf you're lucky and there's a binary release for your system, you won't need\nanything else.\n\nTo compile from source, you'll need:\n\n  - a recent C++ compiler (g++ >= 4.6, Intel ICC >= 14, clang++ >= 3.6 (3.3 w/o\n    OpenMP))\n  - [CMake >= 2.8.5](http://www.cmake.org/)\n  - [Boost libraries](http://www.boost.org/)\n  - [Eigen3 library >= 3.2](http://eigen.tuxfamily.org/)\n  - [MatIO library](https://sourceforge.net/projects/matio/)\n\nA recent C++ compiler is required as some C++11 features and elements of its\nstandard library are used. Also, make sure it supports OpenMP or you won't\nbenefit from parallelization.\n\nTested on Linux/Ubuntu and Mac OS X. Should theoretically (*big flashing red\nwarning light*) also work on Windows.\n\n\nDownload\n--------\n\nFollow the instructions on:\n\n  http://tomographer.github.io/tomographer/download\n\nTomographer can be downloaded from our github releases page:\n\n  https://github.com/Tomographer/tomographer/releases\n\nThere are precompiled binary releases for Mac OS X and Linux.  For other\nplatforms, you'll have to compile from source.  Don't worry, that's not\ncomplicated.  If you haven't already done so, install all the usual development\ntools (`gcc`/`g++`/`make`/etc.) and follow the *Installation* instructions\nbelow.\n\nIf you compile from source, make sure you download the offical source package\nfrom our releases page. If you use github's automatic `Download ZIP' links from\nthe source code, you might end up with missing files.\n\nIf you wish to contribute to development, don't hesitate to fork the repo on\ngithub and send me pull requests. Contact me if you have questions.\n\n\nInstallation\n------------\n\nIf you found a binary release for your system, simply unpack it. It is then\nready for use.\n\nThe rest of this section concerns compiling Tomographer/Tomorun from source.\n\nThe configuration, compilation and installation process is done using CMake.\n(You'll need CMake >= 2.8.5.)  Download an official release of Tomographer,\nunpack it, and enter the unpacked directory.  Then, issue the commands:\n\n    tomographer-1.0> mkdir build\n    tomographer-1.0> cd build\n    tomographer-1.0/build> cmake .. <ADDITIONAL CMAKE OPTIONS HERE>\n    tomographer-1.0/build> make\n    tomographer-1.0/build> make install/strip\n\nAnd you'll have the `tomorun` installed on your system.\n\nYou may also run CMake multiple times to adjust all the relevant options.  You\ncan specify some standard CMake variables, such as CMAKE_INSTALL_PREFIX.  If you\ninstalled a recent compiler manually, you'll need to point CMake to that\ncompiler, e.g. with\n\n    > cmake .. -DCMAKE_C_COMPILER=/path/to/gcc -DCMAKE_CXX_COMPILER=/path/to/g++ \n\nTo specify paths to the Boost, Eigen3 and MatIO libraries, use the CMake\nswitches:\n\n    -DEIGEN3_INCLUDE_DIR=/path/to/include/eigen3\n    -DMATIO_LIBRARY=/path/to/libmatio.a\n    -DMATIO_INCLUDE_DIR=/path/to/include\n\n(See [here][cmake_findboost] for switches relating to Boost libraries.)\n\n[cmake_findboost]: http://www.cmake.org/cmake/help/v3.0/module/FindBoost.html\n\nYou may of course also alternatively use CMake's graphical interface, CMake-GUI.\n\nNote the compilation step (`make`) is quite computation-heavy because of the\nextensive C++11 template metaprogramming. It might take a minute or two to\ncomplete depending on your hardware, and might be pretty greedy on RAM.\n\n\nRunning Tomorun\n---------------\n\nDetailed information about how to use & run `tomorun` is obtained by querying\nits help text:\n\n    > tomorun --help\n\nData is read from a file in MATLAB format (see option `--data-file-name`), and\nseveral options control which figure of merit to calculate as well as the\nparameters and behavior of the random walk.\n\nAs `tomorun` is running, you may query its progress by hitting CTRL-C (Linux/Mac\nOS X). If you want to interrupt `tomorun` and quit the current task, hit CTRL-C\ntwice in short succession.\n\nAlso, it is often more convenient to make `tomorun` read its options from a\nconfiguration file:\n\n    > tomorun --config myconfigfile\n\nAn example config file would be:\n\n    # Configuration file for an execution of `tomorun`.  Lines starting with '#'\n    # are comments and are ignored.\n    \n    # The data file which contains the POVM effects and frequencies etc.\n    data-file-name=the_data.mat\n    \n    # Write the histogram to the file named \"<myconfigfile>-histogram.csv\"\n    write-histogram-from-config-file-name = 1\n\n    # Number of random walk instances. Tip: Use all your CPU's.\n    n-repeats = 12\n\n    # Step size of the random walk. Adjust so that the acceptance ratio is\n    # around 0.25-0.4.\n    step-size = 0.01\n\n    # Sweep size. Keep only one in so many samples, to decorrelate them.\n    # Choose of the order of 1/<step-size>\n    n-sweep = 100\n\n    # Run until we have recorded this number of samples. Power of two\n    # recommended for binning analysis (the default)\n    n-run = 32768\n\n    # Choice of figure of merit. Here for example, tr(rho*rho_ref). If rho_ref\n    # is pure, this is exactly the (squared) fidelity to rho_ref. \"rho_ref\" is\n    # the name of a variable defined in 'the_data.mat'\n    value-type=obs-value:rho_ref\n\n    # The parameters of the histogram. MIN:MAX/NUM_BINS\n    value-hist=0.9:1/50\n\n\nMATLAB Tools\n------------\n\nSome tools are provided for fitting the resulting histogram to our theoretical\nmodel. These are MATLAB scripts located in the `tools` subdirectory.\n\nFor more information on how to run the histogram analyzer/fitter, run:\n\n    >> analyze_tomorun_histogram('Help')\n\n\nAPI Documentation\n-----------------\n\nYou can build the API documentation using [Doxygen >= 1.8][doxygen]. You'll also\nneed `dot` (from the `graphviz` suite). To build the documentation, simply run\n\n    tomographer-1.0/build> make doc\n\nThis will create API documentation in both HTML and LaTeX format. The HTML\noutput is located in `build/html` and the latex files are in `build/latex`.\n\nIf `doxygen` was not found by CMake, then re-run `cmake` specifying the location\nof Doxygen using the `-DDOXYGEN_EXECUTABLE=/location/of/doxygen` switch.\n\nTo build the latex documentation, enter the `latex` directory and run `make`.\nThe output file is called `refman.pdf`.\n\n[doxygen]: http://www.doxygen.org/\n\n\nTest Suite (for developers)\n---------------------------\n\nThere is a test suite which checks that the tomographer C++ framework works\ncorrectly, and that no bugs or regressions are being introduced as the code is\nbeing changed and maintained.\n\nTo compile and run the test suite, you need to specify to cmake that you want to\nbuild it:\n\n    tomographer-1.0/build> cmake .. -DTOMOGRAPHER_ENABLE_TESTS=on\n\nThe test suite will then be compiled normally when you run `make`. Use the `-j`\noption with the number of CPU cores on your system to speed up the compilation:\n\n    tomographer-1.0/build> make -j4\n\nRun the test suite with the command\n\n    tomographer-1.0/build> make test\n\nThe test suite uses [CTest][ctest].  You can also run the test programs\nindividually.  Most test executables use the [Boost Unit Test\nFramework][boost_test] and as such accept [various options][boost_test_options]\nto tune verbosity, which tests to run, etc.\n\n[ctest]: http://www.cmake.org/Wiki/CMake/Testing_With_CTest\n[boost_test]: http://www.boost.org/doc/libs/1_59_0/libs/test/doc/html/index.html\n[boost_test_options]: http://www.boost.org/doc/libs/1_59_0/libs/test/doc/html/boost_test/runtime_config/summary.html\n\n\nFeedback\n--------\n\nPlease report bugs, issues and wishes at:\n\n  https://github.com/Tomographer/tomographer/issues\n\n\nContributing\n------------\n\nContributions are welcome.  The preferred way to submit enhancements is to fork the\nrepo and send me a pull request. Also, don't hesitate to contact me for questions.\n\n\nHow to Cite\n-----------\n\nIf you use this software in your research, please consider citing the following\nworks:\n\n1. Philippe Faist and Renato Renner. Practical, Reliable Error Bars in Quantum\n   Tomography (2015). arXiv:1509.06763\n\n2. Philippe Faist. The Tomographer Project. Available at\n   https://github.com/Tomographer/tomographer/.\n\n\nAuthors, Copyright, License\n---------------------------\n\nAuthor: Philippe Faist\n\nCopyright (c) 2015 ETH Zurich, Institute for Theoretical Physics, Philippe Faist\n\nReleased under the terms of the MIT License (see file LICENSE.txt)\n", 
  "description": "The Tomographer Project \ufeff\u2014 Practical, Reliable Error Bars in Quantum Tomography"
}