{
  "README": "#\n#  C Object System\n#  COS README\n# \n#  Copyright 2007+ Laurent Deniau <laurent.deniau@gmail.com>\n# \n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n# \n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n\n*** IMPORTANT: The C Object System requires GNU make 3.80 or higher ***\n\nDocumentation:\n--------------\n\npaper and presentation can be found in\npath-to-cos/doc/\n\nor after installation to\n$(PREFIX)/$(DOCDIR)/cos/\n\nor on arXiv.org\n\nProject information:\n--------------------\n\n  - web page: http:/cern.ch/laurent.deniau/cos.html\n  - web site: http:/sf.net/projects/cos\n  - contact : laurent.deniau@cern.ch\n\nMakefile examples:\n------------------\n\n# distrib\npath-to-cos/Makefile\n\n# library\npath-to-cos/CosBase/Makefile\n\n# program\npath-to-cos/CosBase/examples/ex??/Makefile\n\n# tests (program with auto-run)\npath-to-cos/CosBase/tests/Makefile\n\nDebugging makefiles:\n--------------------\n\nmake [target] SHOW=yes\n\n# debug flags\nSHOW will show the commands run\n\nCode examples:\n--------------\n\npath-to-cos/CosBase/examples\npath-to-cos/CosBase/tests\n\nSupported platforms:\n--------------------\n\nnote: platforms name are detected using the posix command \"uname -s\"\n\nthe list of supported platforms are in the directory\npath-to-cos/CosBase/include/cos/cfg/\n\nor after installation to\n$(PREFIX)/$(INCDIR)/cos/cfg/\n\nporting on Unixes/Posix compliant platform should be straightforward\nporting on Windows requires some Posix-like environment (e.g. Mingw, Cygwin)\n\nTested platforms:\n-----------------\n\n# Systems & Architectures\nLinux Ubuntu 8.04, 8.10, 9.04, 9.10 (Debian) on i386   (32-bit) Core2 Duo\nLinux Ubuntu 8.04, 8.10, 9.04, 9.10 (Debian) on x86_64 (64-bit) Core2 Duo\nLinux SLC 4.0, 5.0 (RedHat) on x86_64 (64-bit) Quad Xeon\nMac OS X Leopard (Darwin) on x86_64 (64-bit) Core2 Duo\n\n# Compilers\ngcc 3.2.3, 3.4.6, 4.1.2, 4.2.4, 4.3.2, 4.3.3\n\nOther available platforms (untested):\n-------------------------------------\nSunOS + gcc\nFreeBSD + gcc\n\n", 
  "read_at": 1462543283, 
  "README.C89": "#\n#  C Object System\n#  COS C89 README\n# \n#  Copyright 2007+ Laurent Deniau <laurent.deniau@gmail.com>\n# \n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n# \n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n\nCOS C89 compliance:\n-------------------\n\nCOS core generates code conform to ISO C89 but it requires a ISO C99 preprocessor.\n\nCosBase (core) can be compiled with a standalone C99 preprocessor and a C89 compiler.\n\nCosStd and other modules require a C99 compiler or a compiler which supports at least\n  - compound litterals (automatic constructors)\n  - flexible arrays (some class cluster definition like Array)\n  - 64 bits integers on non 64 bits architectures (class Long)\n  - complex numbers (class Complex)\n  - some C99 library functions\n\nExample of CosBase compilation (see CosBase/compile89.sh):\n  cd CosBase ; make bootstrap ; ./compile89.sh ; ls src/*.[ao]\n  ./compile89.sh clean      # remove objects and archive files\n\nDetails of compilation on Linux (see CosBase/compile89.sh):\n  cpp -std=c99 -pedantic -W -Wall -Iinclude -DCOS_C89 -DOSNAME=Linux -E -o src/file.i src/file.c\n  gcc -std=c89 -pedantic -W -Wall -O3                                -c -o obj/file.o src/file.i\n\n  - the preprocessing step may generate warnings about the undefinition of __STDC_VERSION__\n    but usually, standalone preprocessors allow to undef __STDC_VERSION__\n\nStandalone C99 preprocessor:\n  http://code.google.com/p/ucpp/\n\n", 
  "description": "C Object System", 
  "id": 2830240
}