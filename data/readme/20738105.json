{
  "read_at": 1462547354, 
  "README.org": "#+TITLE:       Specializable - User-extensible Specializers for Common Lisp\n#+AUTHOR:      Christophe Rhodes \\and Jan Moringen\n#+DESCRIPTION: Extended CLOS specializers - SBCL only\n#+KEYWORDS:    common lisp, clos, mop, amop, specializer, generalizer\n#+LANGUAGE:    en\n\n* Introduction\n  The =specializable= system extends CLOS (the Common Lisp Object\n  System) and its meta-object protocol with a form of generalized\n  dispatch by introducing a new =generalizer= meta-object.\n\n  *This system only works in the [[http://www.sbcl.org][SBCL]] Common Lisp implementation.*\n\n  The specializable system allows meta-programmers to implement new\n  kinds of specializers which can then be used by programmers like\n  this:\n\n  #+BEGIN_SRC lisp\n    (defmethod my-method ((parameter (SPECIALIZER-KIND &rest SPECIALIZER-SYNTAX)))\n      ...)\n  #+END_SRC\n\n  where =SPECIALIZER-KIND= is a symbol designating the new specializer\n  kind and =SPECIALIZER-SYNTAX= is a form which adheres to the\n  respective syntax and parametrizes the specializer[fn:1].\n\n  More concretely, assuming a new specializer kind designated by\n  =cl:cons=, the above example would become:\n\n  #+BEGIN_SRC lisp\n    (defmethod my-method ((parameter (cons foo)))\n      ...)\n  #+END_SRC\n\n  A detailed description can be found in the associated\n  publications [fn:2][fn:3].\n\n* Provided Specializers\n\n  Based on this extension, the following kinds of =specializer= s are\n  provided as seperate [[http://common-lisp.net/project/asdf][ASDF]] systems:\n  + =cons-specializer= for dispatch based on the contents of the =car=\n    slot of =cons= objects. See [[file:examples/cons-specializer.lisp]].\n  + =accept-specializer= for dispatch based on HTTP content\n    negotiation. See [[file:examples/accept-specializer.lisp]].\n  + =prototype-specializer= for dispatch on prototype objects. See\n    [[file:examples/prototype-specializer.lisp]]\n\n* Footnotes\n\n[fn:1] While the syntax =(SPECIALIZER-KIND &rest SPECIALIZER-SYNTAX)=\n       is the common case and benefits from supporting machinery such\n       as =specializable:define-extended-specializer-syntax=, it is\n       also possible to define new kinds of specializers with entirely\n       different syntax. See [[file:src/prototype-specializer]] for an\n       example.\n\n[fn:2] Rhodes, C., Moringen, J., Lichteblau, D.: Generalizers: New\n       Metaobjects for Generalized Dispatch (2014). Available at\n       http://arxiv.org/abs/1403.2765.\n\n[fn:3] Newton, J., Rhodes, C.: Custom Specializers in Object-Oriented\n       Lisp (2008). Available at\n       http://www.jucs.org/jucs_14_20/custom_specializers_in_object.\n\n* Settings                                                         :noexport:\n\n#+OPTIONS: H:2 num:nil toc:nil \\n:nil @:t ::t |:t ^:t -:t f:t *:t <:t\n#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc\n", 
  "description": "generalized specializers work", 
  "id": 20738105
}