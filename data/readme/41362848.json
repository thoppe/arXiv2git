{
  "README": "OSCgroups client and server\n(c) Ross Bencina 2005-2013 <rossb@audiomulch.com>\n\n\nOSCgroups is a system for routing OSC messages between a group of \ncollaborating users. It is designed to make joining and leaving a \ngroup simple, and to overcome the problem of connecting multiple \nusers behind different NAT routers using a NAT traversal server with \nthe usual \"NAT hole punching\" scheme (you can put that into google \nfor more info). OSCgroups also implements basic group functionality \nsimilar to the concept of channels in internet relay chat.\n\nTo use OSCgroups, a group of collaborators (or processes) each pick a \nunique user name and password, and all agree on a shared group name \nand group password. They then each run an OSCgroups enabled client \nwhich connects with a server to retrieve the names, ip addresses and \nport numbers of all other group members. This information can easily \nbe refreshed over time allowing dynamic group membership, this also \nsupports situations where ip addresses may change. Once an \nOSCgroups client has the list of user names, addresses and port \nnumbers it could do a number of things, for example it could \nimplement message forwarding to named endpoints (i.e. always send \nthese messages to user 'fred' no matter what his address is) or to \nmulticast messages to all other members of the group.\n\nIn this initial release of OSCgroups there is only one client: \nOscGroupClient -- which implements multicast to other group members. \nFuture versions may include more advanced point-to-point routing \nfunctionality.\n\nThis distribution contains OSCGroupServer and OSCGroupClient, both \nwritten in C++. It is envisiaged that OSCgroups clients could also be \nimplemented in other environments such as SuperCollider or max.msp. \n\n\n\nCOMPILING\n---------\n\nOSCgroups is implemented using oscpack, a simple C++ library for \npacking and unpacking OSC messages. In general you should try\nto build OSCgroups with a similarly timestamped snapshot of \noscpack.\n\nTo compile oscgroups, unzip the oscgroups and oscpack archives\n(or check out from the svn repository) to obtain the following  \ndirectory structure:\n\n\n/oscgroups\n    Makefile\n    ... (other files from the oscgroups zip)\n    /bin\n\n /oscpack\n    /osc\n    /ip\n    ....\n\n\nOn Unix just type \n\n>make\n\nin the oscgroups directory and the OscGroupServer and OscGroupClient \nshould end up in the bin directory. If you encounter any compilation \nerrors please email me. For other platforms take a look at the \nmakefile and work out which source files you need to build and which \ninclude directories need to be on your include path.\n\nThere is a batch file for building with MinGW on Windows (make.MinGW32.bat)\n\nThere is a CMakeLists.txt file that you can use with CMake.\n\nOSCgroups should compile everywhere oscpack compiles, which is at \nleast Windows, Linux and MacOSX.\n\n\n\nRUNNING\n-------\n\n* OSCGroupsServer\n\n\nTo run your own OSCGroupsServer simply run the OSCGroupsServer, \nuse -h to get a list of possible parameters. You can specify\nthe port the server listens on, limit the number of connected\nusers and groups, set a timeout after which the server will\nforget inactive users, and specify a file to which log messages\nwill be written. Without any parameters the server will run\non the default port 22242\n\n\n* OscGroupClient\n\nThis client registers with the server and establishes contact with \nall the other members of the specified group. It then listens on a \nspecified port and transfers all traffic from there to other group \nmembers. It also forwards all traffic from other group members to \nanother specified port on the local machine. The arguments are as \nfollows (you can get a summary of this info by just passing -h). Note \nthat all arguments must be supplied, and given in the order listed\nbelow.\n\n    servername\n        an internet name such as oscgroups.iua.upf.edu or an ip address \nsuch as 193.145.55.19\n\n    serverport\n        the udp port which the server is listening on, the server \ndefaults to 22242\n\n    localtoremoteport\n        the local port used to connect with the server and to other \ngroup members. \n\n    localtxport\n        this is the port which OscGroupClient listens to and forwards \nto other group members. direct your OSC traffic to this port.\n\n    localrxport\n        this is the port which OscGroupClient forwards trafic from \nother users to. you should configure your OSC application to listen \nto this port.\n\n    username\n        a unique user name used to identify you with other clients.\n\n    password\n        a password which is used to try to make sure that no one else \npretends to be you on the server. this isn't secure but it helps.\n\n    groupname\n        a name that all group members agree on, like a user name it \nshould be unique.\n\n    grouppassword\n        a password for the group. users without the correct password \nwon't be admitted to the group.\n\n\nAll of the port numbers specified need to be different. If multiple \nusers are behind the same NAT and you experience difficulties. you \nmight like to try all using a different value for localtoremoteport \nfor each user, although this shouldn't usually be necessary.\n\nOSCGroups will report if you failed to register with the server\nbecause of an incorrect password. This could be caused by another user\nwith the same name being connected to the server. So try to pick \nyour usernames to be unique, or use your own server. Like IRC, the \nserver forgets names quickly if no client is using them.\n\n\nHere's an example:\n\n\n./OscGroupClient oscgroups.iua.upf.edu 22242 22243 22244 22245 tim \ntimspassword testgroup testpass\n\n\nwith the above running in one window you could run oscdump:\n\nOscDump localhost 22245\n\nthen all messages sent by all other group members (but not you) would \nbe dumped to the console.\n\nIf you're lucky there is an OSCGroupsServer running on oscgroups.iua.upf.edu \nport 22242\n\n\nIf you want to run OscGroupClient on the same machine as the server \nmake sure that you use a real ip address or machine name (not \nlocalhost or 127.0.0.1) as the servername parameter of OscGroupClient \notherwise it won't work properly. This is a kind of bug which I don't \nreally want to fix right now.\n\n\nIf you have a software firewall installed on your machine you may need\nto ensure that the OscGroupClient executable is registered with the\nfirewall. If you update the executable you may need to re-register it.\nAlso remember that the local-to-remote port (22242) must not be blocked \nby your firewall.\n\n\n\nPLANNED EXTENSIONS\n------------------\n\nThe planned extensions can be summarised as:\n\n    - serverless operation for locally connected machines using IP broadcast\n\n    - compute and display ping times\n\n    - point-to-point routing in OscGroupClient\n\n\n\nNOTES\n-----\n\nThis is an initial version and it's possible that a few things will \nchange, including the protocol. Right now it isn't foolproof, the \nreferences below suggest it probably works behind about 80-85% of \nrouters on the market today -- this is a little worrying in the \ncontext of using it to perform live, however the alternatives involve \nproviding fallback strategies such as forwarding via a server using \nTCP on port 80 -- perhaps that can be added for version 2. There is a \nnice analysis of the Skype protocol in the references section. There \nare clearly many things which could be added to OSCGroups, but for \nnow the idea is to keep it simple.\n\nI mentioned above that OSCGroups clients could be implemented with \nother OSC enabled applications. While this is true in theory, I'm not \nsure how practical it would be because the NAT traversal strategy \nrequires that the same socket be used for sending and receiving data \nto the outside world. The OscGroupClient uses a fixed port number for \nthis, but that isn't strictly required.\n\nThe server protocol has been designed to be pretty general, and \nOscGroupClient doesn't really take full advantage of it. For example, \nit would be easy to implement point-to-point routing (send these \nmessages only to these users), or to fire events when users join or \nleave a group.\n\nRight now OscGroupClient parses every OSC packet it sees: this isn't \nideal but it also isn't easy to avoid. One method might be to use \nnon-bundled messages for /groupclient/ping messages so that it can \nonly process non-bundled packets. Another option is to take advantage \nof the fact that every message is parsed and allow the packets to \npass routing information. In reality the routing information would be \neasier to use if it was embedded in outbound packets (eg send this \npacket to this username). It's not obvious to me how to cleanly \nprovide an interface to this functionality (or if it is really \nneeded) so it hasn't been done.\n\n\n\nSOME REFERENCES\n---------------\n\nNAT and Peer-to-peer networking\nDan Kegel\nhttp://alumnus.caltech.edu/~dank/peer-nat.html\n\nPeer-to-Peer Communication Across Network Address Translators\nBryan Ford, Pyda Srisuresh, Dan Kegel\nhttp://www.brynosaurus.com/pub/net/p2pnat/\n\nRFC3489: STUN - Simple Traversal of User Datagram Protocol (UDP)\n Through Network Address Translators (NATs)\nhttp://www.ietf.org/rfc/rfc3489.txt\n\nAn Analysis of Skype Peer-to-Peer Internet Telephony Protocol\nSalman A. Baset and Henning Schulzrinne\nhttp://arxiv.org/ftp/cs/papers/0412/0412017.pdf\n\nBeej's Guide to Network Programming\nhttp://www.ecst.csuchico.edu/~beej/guide/net/\n\n\nThanks to John Lazzaro for hooking me up with the right information.\n\n\n\n\n", 
  "read_at": 1462546026, 
  "description": "Automatically exported from code.google.com/p/oscgroups", 
  "id": 41362848
}