{
  "read_at": 1462511564, 
  "description": "Python package for covariance matrices manipulation and Biosignal classification", 
  "README.md": "# pyRiemann\n\n[![Code Climate](https://codeclimate.com/github/alexandrebarachant/pyRiemann/badges/gpa.svg)](https://codeclimate.com/github/alexandrebarachant/pyRiemann)\n[![Latest Version](https://pypip.in/version/pyriemann/badge.svg)](https://pypi.python.org/pypi/pyriemann/)\n[![Build Status](https://travis-ci.org/alexandrebarachant/pyRiemann.svg?branch=master)](https://travis-ci.org/alexandrebarachant/pyRiemann)\n[![Coverage Status](https://coveralls.io/repos/alexandrebarachant/pyRiemann/badge.svg?branch=master)](https://coveralls.io/r/alexandrebarachant/pyRiemann?branch=master)\n[![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.18982.svg)](http://dx.doi.org/10.5281/zenodo.18982)\n\npyriemann is a python package for covariance matrices manipulation and classification through riemannian geometry.\n\nThe primary target is classification of multivariate biosignals, like EEG, MEG or EMG.\n\nThis is work in progress ... stay tuned.\n\nThis code is BSD-licenced (3 clause).\n\n## Documentation\n\nThe documentation is available on http://pythonhosted.org/pyriemann\n\n## Install\n\n#### Using PyPI\n\n```\npip install pyriemann\n```\n\n#### From sources\n\nFor the latest version, you can install the package from the sources using the setup.py script\n\n```\npython setup.py install\n```\n\n## How to use it\n\nMost of the functions mimic the scikit-learn API, and therefore can be directly used with sklearn. For example, for cross-validation classification of EEG signal using the MDM algorithm described in [4] , it is easy as :\n\n```python\nimport pyriemann\nfrom sklearn.cross_validation import cross_val_score\n\n# load your data\nX = ... # your EEG data, in format Ntrials x Nchannels X Nsamples\ny = ... # the labels\n\n# estimate covariances matrices\ncov = pyriemann.estimation.Covariances().fit_transform(X)\n\n# cross validation\nmdm = pyriemann.classification.MDM()\n\naccuracy = cross_val_score(mdm,cov,y)\n\nprint(accuracy.mean())\n\n```\n\nYou can also pipeline methods using sklearn Pipeline framework. For example, to classify EEG signal using a SVM classifier in the tangent space, described in [5] :\n\n```python\nfrom pyriemann.estimation import Covariances\nfrom pyriemann.tangentspace import TangentSpace\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.cross_validation import cross_val_score\n\n# load your data\nX = ... # your EEG data, in format Ntrials x Nchannels X Nsamples\ny = ... # the labels\n\n# build your pipeline\ncovest = Covariances()\nts = TangentSpace()\nsvc = SVC(kernel='linear')\n\nclf = make_pipeline(covest,ts,svc)\n# cross validation\naccuracy = cross_val_score(clf,X,y)\n\nprint(accuracy.mean())\n\n```\n\n**Check out the example folder for more examples !**\n\n# Testing\n\nIf you make a modification, run the test suite before submitting a pull request\n\n```\nnosetests\n```\n\n# Contribution Guidelines\n\nThe package aims at adopting the [Scikit-Learn](http://scikit-learn.org/stable/developers/contributing.html#contributing-code) and [MNE-Python](http://martinos.org/mne/stable/contributing.html#general-code-guidelines) conventions as much as possible. See their contribution guidelines before contributing to the repository.\n\n\n# References\n\n> [1] A. Barachant, M. Congedo ,\"A Plug&Play P300 BCI Using Information Geometry\", arXiv:1409.0107. [link](http://arxiv.org/abs/1409.0107)\n>\n> [2] M. Congedo, A. Barachant, A. Andreev ,\"A New generation of Brain-Computer Interface Based on Riemannian Geometry\", arXiv: 1310.8115. [link](http://arxiv.org/abs/1310.8115)\n>\n> [3] A. Barachant and S. Bonnet, \"Channel selection procedure using riemannian distance for BCI applications,\" in 2011 5th International IEEE/EMBS Conference on Neural Engineering (NER), 2011, 348-351. [pdf](http://hal.archives-ouvertes.fr/docs/00/60/27/07/PDF/NER11_0016_FI.pdf)\n>\n> [4] A. Barachant, S. Bonnet, M. Congedo and C. Jutten, \"Multiclass Brain-Computer Interface Classification by Riemannian Geometry,\" in IEEE Transactions on Biomedical Engineering, vol. 59, no. 4, p. 920-928, 2012. [pdf](http://hal.archives-ouvertes.fr/docs/00/68/13/28/PDF/Barachant_tbme_final.pdf)\n>\n> [5] A. Barachant, S. Bonnet, M. Congedo and C. Jutten, \"Classification of covariance matrices using a Riemannian-based kernel for BCI applications\", in NeuroComputing, vol. 112, p. 172-178, 2013. [pdf](http://hal.archives-ouvertes.fr/docs/00/82/04/75/PDF/BARACHANT_Neurocomputing_ForHal.pdf)\n\n# changelog\n\n### v0.2.3\n - Added multiprocessing for MDM with joblib\n - Added kullback-leibler divergence\n - Added Riemannian Potato\n - Added sample_weight for mean estimation and MDM\n", 
  "id": 34213430
}