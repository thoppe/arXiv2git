{
  "read_at": 1462511817, 
  "description": "", 
  "README.md": "HTTP proxy\n==========\nA simple filtering HTTP proxy server in Python.\n\nUsage\n----------\n`python proxy.py [host] [port]`\n\nTODO\n----------\n- redesign Http class\n- close sockets properly when required\n- make nice logging\n- add some initial requests modification to be transparent for a server (test en.wikipedia.org, arxiv.org)\n- add addresses filtering for HTTPS\n\nFiltering usage example\n----------\n```python\n#!/usr/bin/env python\n\nfrom http import *\nimport proxy\n\nfilter_hosts = ['example.com', 'example.org']\n\ndef filter_request(request):\n\tmeta = request.meta\n\tif 'Accept-Encoding' in meta:\n\t\tdel meta['Accept-Encoding']\t# make sure request doesn't allow encoded response\n\t\trequest.meta = meta\n\treturn request\n\ndef filter_response(request, response):\n\tinsertion = '<img style=\"position:fixed;left:20%;bottom:0;z-index:100500\" alt=\"Hidden trollface1.png\" src=\"//lurkmore.so/images/8/80/Hidden_trollface1.png\" width=\"192\" height=\"56\">'\n\tif request.meta['Host'] in filter_hosts:\n\t\tmeta = response.meta\n\t\tcontent_type = meta.get('Content-Type')\n\t\tif content_type and 'text/html' in content_type.lower() and not 'Content-Encoding' in meta:\n\t\t\tbody = response.body\n\t\t\ti = body.lower().rfind('</body>')\n\t\t\tbody = body[:i] + insertion + body[i:]\n\t\t\tmeta['Content-Length'] = str(len(body))\n\t\t\tresponse.meta = meta\n\t\t\tresponse.body = body\t# should be set _after_ meta because of content-length change (or just use response.set(...) to set both simultaneously)\n\t\t\tprint '>-< insertion done'\n\treturn response\n\nif __name__ == '__main__':\n\tproxy.filter_request = filter_request\n\tproxy.filter_response = filter_response\n\tproxy.run()\n```\n", 
  "id": 33568091
}