{
  "read_at": 1462547596, 
  "description": "Ruby gem OAI interface for harvesting the arXiv database", 
  "README.md": "# arxivsync 0.1.3\n\nRuby OAI interface for harvesting the arXiv. Can be used to store and update an XML mirror of paper metadata, and parse the XML into Ruby objects to allow conversion into a friendlier format.\n\n## Installation\n\n```\n  gem install arxivsync\n```\n\n## Usage\n\n### Creating or updating an archive\n\nUse the included shell command:\n\n```bash\n  arxivsync ARCHIVE_DIR\n```\n\nThis stores each XML response as an individual file, each containing up to 1000 records. Following an initial harvest, you can rerun this to add additional files containing all records since the last harvest.\n\nRemember to leave at least a day between syncs-- the temporal granularity doesn't go any smaller than that!\n\n### Reading from an archive\n\n```ruby\n  archive = ArxivSync::XMLArchive.new(\"/home/foo/savedir\")\n  archive.read_metadata do |papers|\n    # Papers come in blocks of at most 1000 at a time\n    papers.each do |paper|\n      # Do stuff with papers\n    end\n  end\n```\n\nParses the XML files using a SAX parser and yields Structs representing the metadata as it goes. The structures returned will closely match the [arxivRaw](http://export.arxiv.org/oai2?verb=GetRecord&identifier=oai:arXiv.org:0804.2273&metadataPrefix=arXivRaw) format.\n\n### Download and parse immediately\n\nIf you just want arxivsync to do the request-cycle and parsing bits but handle storage yourself:\n\n```ruby\n  ArxivSync.get_metadata(oai_params) do |resp, papers|\n    papers.each do |paper|\n      # Do stuff with paper\n    end\n  end\n```\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n", 
  "id": 10375104
}