{
  "read_at": 1462550553, 
  "description": "Vectorizing Expression Template Arrays", 
  "README.md": "ARRR\n====\n\nA vectorizing expression template array library.\n\nThe library currently consists of a single class `arithmetic_array`\nin the namespace `arrr`. It should be usable with any fundamental\ntypes but double and float get optimized to sse2 or avx code if\navailable (use -msse2, -mavx or -march=native on your favorite compiler).\nARRR uses C++11 features and has been tested on gcc 4.8.1, clang 3.3 and\nicc 14.\n\nBasic usage:\n```c++\n// arithmetic arrays are dynamically sized (runtime) but are\n// not resizeable once created. They provide most of the typical\n// standard container interface (operator[], begin, end, size, data...)\narrr::arithmetic_array<float> x(size);\narrr::arithmetic_array<float> y(size);\n\nx = 23.0f; // set all elements of x to 23\ny = 42.0f; // set all elements of y to 42\n\ny += 3.14159f*x; // the expression is evaluted elementwise\n\n// arithmetic arrays can also be statically sized with the second\n// template argument (0 means dynamic and is the default value)\narrr::arithmetic_array<float, size> z;\n\n```\n\nARRR is mostly a shorter and nicer reimplementation of a library called\nSALT that was a proof of concept of the employed loop unrolling\ntechnique and is described here: http://arxiv.org/abs/1109.1264\n", 
  "id": 13454535
}