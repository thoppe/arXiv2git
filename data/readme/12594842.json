{
  "read_at": 1462549748, 
  "description": "Louvain community detection for Javascript (http://arxiv.org/abs/0803.0476) (http://en.wikipedia.org/wiki/Community_structure#The_Louvain_method).", 
  "README.md": "# jLouvain \n**Corneliu S.**\n\n---\n## Description\n\nFormally, a community detection aims to partition a graph's vertices in subsets, such that there are many edges connecting between vertices of the same sub-set compared to vertices of different sub-sets; in essence, a community has many more ties between each constituent part than with outsiders. There are numerous algorithms present in the literature for solving this problem, a complete survey can be found in [1].  \r\rOne of the popular community detection algorithms is presented in [2]. This algorithm separates the network in communities by optimizing greedily a modularity score after trying various grouping operations on the network. By using this simple greedy approach the algorithm is computationally very efficient.\n\r[1] Fortunato, Santo. \"Community detection in graphs.\" Physics Reports 486, no. 3-5 (2010).\n\r\r[2] V.D. Blondel, J.-L. Guillaume, R. Lambiotte, E. Lefebvre. \"Fast unfolding of communities in large networks.\" J. Stat. Mech., 2008: 1008.\n\n##Usage\n1. Import the script.\n\n\t\t<script type=\"text/javascript\" src=\"jLouvain.js\"></script>\n\t\t\n2. Sample Data Format\n####Node Data\n\t\tvar node_data = ['id1', 'id2', 'id3']; // any type of string can be used as id\n####Edge Data\n\t\tvar edge_data = [{source: 'id1', target:'id2', weight: 10.0}, \n\t\t\t\t\t\t {source: 'id2', target:'id3', weight: 20.0},\n\t\t\t\t\t\t {source: 'id3', target:'id1', weight: 30.0}];\n####(Optional) Partition Data\n\t\tvar init_part = {'id1':0, 'id2':0, 'id3': 1}; \n\t\t// Object with ids of nodes as properties and community number assigned as value.\n\n3. Run the Algorithm on your node and edge set by chaining the **nodes** and **edges** methods, optionally you can provide an intermediary community partition assignement with the **partition_init** method. [ **Order of chaining is important** ]\n\n\t\tvar community = jLouvain().nodes(node_data).edges(edge_data).partition_init(init_part);\n    \tvar result  = community();\r\r\r##Example\nSee **example.html**, use the console to view the raw input data and raw output.\n\nInitial input graph for community detection.\n\r![](example/default.png)\n####After Community Detection\nWe can see the partitioned graph vertices with the help of color coding.\r![](example/communities.png)", 
  "id": 12594842
}