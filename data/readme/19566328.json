{
  "read_at": 1462546656, 
  "description": "Connectomics", 
  "README.md": "Kaggle Connectomics\n===================\n\nIf you use this code, please cite :\nSutera, A., Joly, A., Francois-Lavet, V., Qiu, Z. A., Louppe, G., Ernst, D., & Geurts, P. (2014). Simple connectome inference from partial correlation statistics in calcium imaging. JMLR: Workshop and Conference Proceedings of ECML2014 (Nancy).\n\nIf you are interested in more explanations, have a look at http://orbi.ulg.ac.be/handle/2268/169767 (Mirror: http://arxiv.org/abs/1406.7865).\n\nhttps://www.kaggle.com/c/connectomics\n\nTeam AAAGV (#1)\n\nContact\n-------\n\n- Antonio Sutera <a.sutera@ulg.ac.be>\n- Arnaud Joly <a.joly@ulg.ac.be>\n- Aaron Qiu <zqiu@ulg.ac.be>\n- Gilles Louppe <g.louppe@ulg.ac.be>\n- Vincent Francois <v.francois@ulg.ac.be>\n\n\nDependencies\n------------\n\nThe following programs and packages were used for the contest:\n\n    - Python 2.7\n    - NumPy >= 1.6.2\n    - SciPy >= 0.11\n    - scikit-learn == master branch (last update, the hash commit was `8d04380d474723467b5a717328efd0c9fc5bd898`)\n\nwith appropriate blas and lapack binding such as MKL, accelerate or ATLAS.\nIn order to test the code, we recommend you to use the Anaconda python\ndistribution (https://store.continuum.io/cshop/anaconda/).\n\nCode ran on MacOsx 10.9.2 and Linux (version 2.6.18-194.26.1.el5\n(brewbuilder@norob.fnal.gov) (gcc version 4.1.2 20080704 (Red Hat 4.1.2-48))\n1 SMP Tue Nov 9 12:46:16 EST 2010).\n\n\nHow to train your model\n-----------------------\n\nNo model is learnt to produce the connectivity score matrix.\n\n\nHow to make predictions on a new test set\n-----------------------------------------\nIn order to reproduce the result, you can launch the main.py file.\nThe usage is the following:\n\n    usage: main.py [-h] -f FLUORESCENCE [-p POSITION] -o OUTPUT -n NETWORK\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -f FLUORESCENCE, --fluorescence FLUORESCENCE\n                            Path to the fluorescence file\n      -p POSITION, --position POSITION\n                            Path to the network position file\n      -o OUTPUT, --output OUTPUT\n                            Path of the output/prediction file\n      -n NETWORK, --network NETWORK\n                            Network name\n\nFor example on the \"test\" dataset, you would use the following command:\n\n    python main.py -f fluorescence_test.txt -p networkPositions_test.txt -o score_test.csv -n test\n\nTo run the script, you will need a machine with at least 8GB RAM, a fast\nprocessor (> 2.5 GHz), 4 cores and sufficient disk space. On our last\ntest, it took around 10 hours (with 7 process) on normal-1 and +-2 hours on small-1.\n\nThe performance obtained on normal-1 and small-1 are the following:\n\n    On normal-1: 0.94356018640593564\n    On small-1: 0.71027913026472989\n     \nNote that all parameters have been optimized for a big dataset, i.e. 1000 neurons, and it explains the poor result on small-1.\n", 
  "id": 19566328
}