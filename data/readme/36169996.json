{
  "read_at": 1462826700, 
  "description": "64-bit maximally equidistributed Mersenne Twisters", 
  "readme.txt": "Implementing 64-bit maximally equidistributed Mersenne Twisters\n\nS. Harase and T. Kimoto, \"Implementing 64-bit maximally equidistributed Mersenne Twisters\", submitted. http://arxiv.org/abs/1505.06582\n\nAbstruct\nCPUs and operating systems are moving from 32 to 64 bits, and hence it is important to have good pseudorandom number generators designed to fully exploit these word lengths. However, existing 64-bit very long period generators based on linear recurrences modulo 2 are not completely optimized in terms of the equidistribution properties. Here we develop 64-bit maximally equidistributed pseudorandom number generators that are optimal in this respect and have speeds equivalent to 64-bit Mersenne Twisters. We provide a table of specific parameters with period lengths from $2^{607}-1$ to $2^44497-1$.\n\n(10 May 2016)\nWe implemented the following functions:\n  genrand64_res53()\n  genrand64_res53_open()\nto generate double-precision floating point numbers on [0,1)- and (0,1)-real-interval  by using union tricks.\n\nWe implemented a jump ahead algorithm for parallel computing. \nThe default skip size is $2^{256}-1$.\n\nWe also changed some examples in the main functions.\n\n\n(24 May 2015)\nThe code in C was released.\n", 
  "id": 36169996
}