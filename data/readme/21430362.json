{
  "id": 21430362, 
  "read_at": 1462550973, 
  "README.txt": "===========\nPyAltmetric\n===========\n\nPyAltmetric provides an easy python wrapper for the Altmetric API.\n\nTypical usage often looks like this::\n\n    from pyaltmetric import Altmetric\n\nCreate an Altmetric object::\n\n    altmetric_object = Altmetric()\n\nCreating an Altmetric object caches api version number and key. The \nobject is then used to make calls to the Altmetric API. From here you can\neasily create article objects filled with Altmetric information simply by\ngiving an id for the article you want information on::\n\n    article1 = altmetric_object.article_from_doi(\"doi_of_article\")\n\nThere are various id's to choose from including: bibcode, pmid, and arxiv id.\n\nAfter you have an article you can easily extract altmetric information\nusing the built in attributes such as::\n\n    article1.title\n    article1.abstract\n    article1.score\n\nIf you want to gather multiple article metrics at once you can use the\narticles_from_timeframe method. This will give you articles with internet\nmentions within a given time period (past 3 days, past month, ect)::\n\n    articles = altmetric_object.articles_from_timeframe(\"1 day\")\n\nIt returns an article gerator which can easily be iterated through.\n\nIf you already have a json from the Altmetric API you can create an\narticle directly.\n\nFirst you need to import article::\n\n    from pyaltmetric import Article\n\nThen you can simply create atricles. There are three ways to do so:\n\n    1. Using supplying a properly constructed dictionary stright into the\n        constructor.\n        ::article2 = Article(json_dict)\n    2. Supplying the filename of a properly formatted json and using the\n        class method from_json_file.\n        ::article3 = Article.from_json_file(file)\n    3. Supplying an alreay open file of properly formatted json and using the\n        class method from_json_file.\n        ::article3 = Article.from_json_file(\"filename.json\")\n\n", 
  "README.md": "===========\nPyAltmetric\n===========\n\nPyAltmetric provides an easy python wrapper for the Altmetric API.\n\nTypical usage often looks like this:\n\n    from pyaltmetric import Altmetric\n\nCreate an Altmetric object:\n\n    altmetric_object = Altmetric()\n\nCreating an Altmetric object caches api version number and key. The \nobject is then used to make calls to the Altmetric API. From here you can\neasily create article objects filled with Altmetric information simply by\ngiving an id for the article you want information on:\n\n    article1 = altmetric_object.article_from_doi(\"doi_of_article\")\n\nThere are various id's to choose from including: bibcode, pmid, and arxiv id.\n\nAfter you have an article you can easily extract altmetric information\nusing the built in attributes such as:\n\n    article1.title\n    article1.abstract\n    article1.score\n\nIf you want to gather multiple article metrics at once you can use the\narticles_from_timeframe method. This will give you articles with internet\nmentions within a given time period (past 3 days, past month, ect):\n\n    articles = altmetric_object.articles_from_timeframe(\"1 day\")\n\nIt returns an article gerator that is easily iterable.\n\nIf you already have a json from the Altmetric API you can create\narticles directly.\n\nFirst you need to import article:\n\n    from pyaltmetric import Article\n\nThen you can simply create articles. There are three ways to do so.\n\n1. Supplying a properly constructed dictionary stright into the constructor:\n        \n        article2 = Article(json_dict)\n        \n2. Supplying the filename of a properly formatted json and using the class method from_json_file:\n       \n        article3 = Article.from_json_file(file)\n        \n3. Supplying an alreay open file of properly formatted json and using the class method from_json_file:\n        \n        article3 = Article.from_json_file(\"filename.json\")\n\n", 
  "description": "A python wrapper for the Altmetric API"
}