{
  "read_at": 1462550773, 
  "README.org": "#+TITLE: Bibtex-completion, helm-bibtex, ivy-bibtex\n#+Options: num:nil\n\nHelm-bibtex: [[http://melpa.org/#/helm-bibtex][http://melpa.org/packages/helm-bibtex-badge.svg]]\nIvy-bibtex: [[http://melpa.org/#/ivy-bibtex][http://melpa.org/packages/ivy-bibtex-badge.svg]]\n\nHelm-bibtex and ivy-bibtex allow you to search and manage your BibTeX bibliography.  They both share the same generic backend, bibtex-completion, but one uses the Helm completion framework and the other Ivy as a front-end.\n\nIvy-bibtex is experimental at this time, lacks some features, and may be noticeably slower than helm-bibtex when used with larger bibliographies.\n\n* News\n- [2016-04-18 Moi] :: Improved support for Mendely/Jabref/Zotero way of referencing PDFs.\n- [2016-04-12 Wed] :: Added ivy front-end.\n- [2016-04-06 Wed] :: Generic functions are factored out into a backend for use with other completion frameworks like ivy.\n- [2016-04-02 Sat] :: Added support for biblio.el which is useful for importing BibTeX entries from CrossRef and other sources.  See new fallback options and the section \"Import BibTeX from CrossRef\" below.\n- [2016-02-25 Thu] :: Support for pre- and postnotes for pandoc-citeproc citations.\n- [2015-11-23 Mon] :: Added support for keeping all notes in one org-file.  See customization variable ~bibtex-completion-notes-path~.\n- [2015-11-10 Tue] :: Added support for PDFs specified in a BibTeX field.  See customization variable ~bibtex-completion-pdf-field~.\n- [2015-11-09 Mon] :: Improved insertion of LaTeX cite commands.\nSee [[file:NEWS.org]] for old news.\n\n* Key features:\n\n- Quick access to your bibliography from within Emacs\n- Tightly integrated workflows\n- Provides instant search results as you type\n- Powerful search expressions\n- Open the PDFs, URLs, or DOIs associated with an entry\n- Insert LaTeX cite commands, Ebib links, or Pandoc citations, BibTeX\n  entries, or plain text references at point, attach PDFs to emails\n- Note keeping\n\nFeatures currently only supported in helm-bibtex:\n\n- Quick access to online bibliographic databases such as CrossRef,\n  Pubmed, arXiv, Google Scholar, Library of Congress, etc.\n- Import BibTeX entries from CrossRef and other sources.\n\nHelm-bibtex' and ivy-bitex' main selling points are efficient search in large bibliographies using powerful search expressions and tight integration into your Emacs workflows.  They both can perform the following actions on entries matching the search expression: open the PDF associated with an entry, its URL or DOI, insert a citation for that entry, the BibTeX key, the BibTeX entry, or a plain text reference, attach the PDF to an email, take notes, edit the BibTeX entry.  Many aspects can be configured to suit personal preferences.\n\n* Example\n\nBelow is a screenshot showing a helm-bibtex search for entries containing the expression \"eye tracking\".\n\n#+CAPTION: A search for publications containing the expression \"eye tracking\"\n[[file:screenshot.png]]\n\nThe regular expression ~eye.?tracking~ allows searching for different spellings (\"eye tracking\", \"eye-tracking\", \"eyetracking\").  A looped square symbol ([?]) next to an entry indicates that a PDF is available.  A pen symbol () means that there are notes attached to this entry.  At the bottom, there are entries that can be used to search in online databases.\n\n* Installation\n\nThe easiest way to install helm-bibtex or ivy-bibtex is through [[http://melpa.org/#/helm-bibtex][MELPA]].  Alternatively, put the files [[file:bibtex-completion.el]] and either [[file:helm-bibtex.el]] or [[file:ivy-bibtex.el]] in a directory included in your load-path and add the following line to your start-up file (typically ~init.el~):\n\n#+BEGIN_SRC emacs-lisp\n(autoload 'helm-bibtex \"helm-bibtex\" \"\" t)\n#+END_SRC\n\nor\n\n#+BEGIN_SRC emacs-lisp\n(autoload 'ivy-bibtex \"ivy-bibtex\" \"\" t)\n#+END_SRC\n\nHelm-bibtex and ivy-bibtex depend on a number of packages that will be automatically installed if you use MELPA.\n\nWhen using helm-bibtex, make sure that helm is correctly configures (see [[https://github.com/emacs-helm/helm#quick-install-from-git][helm documentation]]).\n\n* Minimal configuration\n\nA minimal configuration involves telling bibtex-completion where your bibliographies can be found:\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-bibliography '(\"/path/to/bibtex-file-1.bib\" \"/path/to/bibtex-file-2.bib\"))\n#+END_SRC\n\n* Basic configuration (recommended)\n** PDF files\nSpecify where PDFs can be found:\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-library-path '(\"/path1/to/pdfs\" \"/path2/to/pdfs\"))\n#+END_SRC\n\nBibtex-completion assumes that the name of a PDF consists of the BibTeX key followed by the suffix ~.pdf~.  For example, if a BibTeX entry has the key ~Darwin1859~, bibtex-completion searches for ~Darwin1859.pdf~.\n\nIf the BibTeX entries have a field that specifies the full path to the PDFs, that field can also be used.  For example, JabRef and Zotero store the location of PDFs in a field called ~File~:\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-pdf-field \"File\")\n#+END_SRC\n\nIf ~bibtex-completion-pdf-field~ is non-nil, bibtex-completion will first try to retrieve the file specified in this field.  If the field is not set for an entry or if the specified file does not exists, bibtex-completion falls back to the method described above (searching for key + ~.pdf~ in the directories listed in ~bibtex-completion-library-path~).\n\nFile specifications can be bare paths or follow the format used by JabRef, Zotero, and Mendeley.  This format also allows the specification of multiple files (e.g., the main paper and supplementary material).  Examples:\n\n- ~File = {/path/to/article.pdf}~\n- ~File = {:/path/to/article.pdf:PDF}~\n- ~File = {:/path/to/article.pdf:PDF;:/path/to/supplementary_materials.pdf:PDF}~\n\n** Notes\n\nBibtex-completion supports two methods for storing notes.  It can either store all notes in one file or store notes in multiple files, one file per publication.  In the first case, the customization variable ~bibtex-completion-notes-path~ has to be set to the full path of the notes file: \n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-notes-path \"/path/to/notes.org\")\n#+END_SRC\n\nIf one file per publication is preferred, ~bibtex-completion-notes-path~ should point to the directory used for storing the notes files:\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-notes-path \"/path/to/notes\")\n#+END_SRC\n\nThe names of these files consist of the BibTeX key plus a user-defined suffix (~.org~ by default).\n\nAt this point most people will be ready to go.  Skip to [[#usage][Usage]] below to see how to use helm-bibtex and ivy-bibtex.\n\n* Advanced configuration\n\n** Fields used for searching\n\nThe default fields used for searching are: author, title, year, BibTeX key, entry type (article, inproceedings, ...).  The variable ~bibtex-completion-addition-search-fields~ can be used to extend this list.  Example:\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-additional-search-fields '(keywords))\n#+END_SRC\n\n** Symbols used for indicating the availability of notes and PDF files\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-pdf-symbol \"[?]\")\n(setq bibtex-completion-notes-symbol \"\")\n#+END_SRC\n\n** Different naming schemes for PDF files\n\nIf the PDFs files follow a different naming scheme than BibTeX key + ~.pdf~, the function ~bibtex-completion-find-pdf-in-library~ can be modified to accommodate that.\n\n** Application used for opening PDFs\n\nBy default Emacs is used to open PDF files.  This means that either DocView is used, or, if installed, the much superior [[https://github.com/politza/pdf-tools][pdf-tools]] extension which offers features such as incremental search in PDF files and creation and modification of annotations that are compatible with annotations created by Adobe software.\n\nTo configure another PDF viewer the customization variable ~bibtex-completion-pdf-open-function~ can be used.  Here is an example configuration for the OS X PDF viewer Skim:\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-pdf-open-function\n  (lambda (fpath)\n    (call-process \"open\" nil 0 nil \"-a\" \"/Applications/Skim.app\" fpath)))\n#+END_SRC\n\nHere is another example for the Linux PDF viewer Evince:\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-pdf-open-function\n  (lambda (fpath)\n    (call-process \"evince\" nil 0 nil fpath)))\n#+END_SRC\n\n** Action for opening annotated PDFs\n\nSome users store two versions of each PDF, one as distributed by the journal and one containing their annotations.  If the ~file~ field is used to link PDFs to entries (see section [[https://github.com/tmalsburg/helm-bibtex#pdf-files][PDF files]]), the annotated version can simply be added to that field.  If the action \"Open PDF file\" is triggered, the annotated version is going to be opened along with the plain version.\n\n*Helm-bibtex only*: If the ~file~ field is not used but instead the naming scheme ~bibtex-key + .pdf~ (again see [[https://github.com/tmalsburg/helm-bibtex#pdf-files][PDF files]]), we need modify bibtex-completion.  First, name your annotated PDFs following the scheme ~bibtex-key + -annotated.pdf~ (for example with the [[http://askubuntu.com/questions/58546/how-to-easily-rename-files-using-command-line][rename utility]]) and add the following code at the end of your Emacs configuration (more precisely, somewhere after loading helm-bibtex):\n\n#+BEGIN_SRC elisp\n(defun bibtex-completion-open-annotated-pdf (key)\n  (let ((pdf (car (bibtex-completion-find-pdf-in-library (s-concat key \"-annotated\")))))\n    (if pdf\n        (bibtex-completion-pdf-open-function pdf)\n      (message \"No annotated PDF found.\"))))\n\n(helm-add-action-to-source \"Open annotated PDF (if present)\" 'bibtex-completion-open-annotated-pdf helm-source-bibtex 1)\n#+END_SRC\n\nThis gives you an additional action for opening the annotated PDF.  A message will be displayed in the minibuffer if no such PDF was found for an entry.\n\n** Action for opening supplemental materials\nYou can use the same approaches as described in the previous section ([[Action for opening annotated PDFs]]).\n\n** Browser used for opening URLs and DOIs\n\nBy default bibtex-completion uses whatever is Emacs' default.  However, there are a variety of alternatives (see the documentation of ~bibtex-completion-browser-function~ for a complete list).  Example:\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-browser-function 'browser-url-chromium)\n#+END_SRC\n\nUser-defined functions can be used, too:\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-browser-function\n  (lambda (url _) (start-process \"firefox\" \"*firefox*\" \"firefox\" url)))\n#+END_SRC\n\n** Format of citations\n\nBibtex-completion creates citations based on the major mode in which the citation is inserted:\n\n- org-mode :: insert link for opening the entry in Ebib\n- latex-mode :: insert LaTeX citation command\n- markdown-mode :: insert Pandoc citation macro\n- other modes :: insert plain BibTeX key\n\nThe list of modes can be extended and the citation functions can be changed using the customization variable ~bibtex-completion-format-citation-functions~.  For example, people who don't use Ebib might prefer links to the PDFs instead of Ebib-links in org mode files:\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-format-citation-functions\n  '((org-mode      . bibtex-completion-format-citation-org-link-to-PDF)\n    (latex-mode    . bibtex-completion-format-citation-cite)\n    (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)\n    (default       . bibtex-completion-format-citation-default)))\n#+END_SRC\n\nA citation function has to accept a list of keys as input and return a string containing the citations.  See the predefined citation functions for examples.\n\n*** LaTeX citation commands\n\nBibtex-completion prompts for a LaTeX citation command when inserting citations in LaTeX documents.  The list of commands available for auto-completion can be defined using the variable ~bibtex-completion-cite-commands~.\n\nThe default setting includes all cite commands defined in biblatex (except multicite commands and ~\\volcite~ et al.).  If no command is entered, a default command is used which can be configured using ~bibtex-completion-cite-default-command~.  The default value for the default command is ~cite~.  The variable ~bibtex-completion-cite-default-as-initial-input~ controls how the default command is used.  If ~t~, it is inserted into the minibuffer before reading input from the user.  If ~nil~, it is not inserted into the minibuffer but used as the default if the user doesn't enter anything.\n\nBy default, bibtex-completion also prompts for the optional pre- and postnotes for the citation.  This can be switched off by setting the variable ~bibtex-completion-cite-prompt-for-optional-arguments~ to ~nil~.\n\nSee also the section [[https://github.com/tmalsburg/helm-bibtex#insertion-of-latex-cite-commands][Insert LaTeX cite commands]] below.\n\n** Online databases\n\nOnline databases can be configured using the customization variable ~bibtex-completion-fallback-options~.  This variable contains an alist where the first element of each entry is the name of the database and the second element is either a URL or a function.  The URL must contain a ~%s~ at the position where the current search expression should be inserted.  If a function is used, that function should not take any arguments.\n\n** Key-bindings\n\nFor quick access to the bibliography, bind the search command, ~helm-bibtex~ or ~ivy-bibtex~, to a convenient key.\n\n*Helm-bibtex*:  I use the [[http://farm1.static.flickr.com/68/167224406_166a1bf2e5.jpg][menu key]] as the prefix key for all helm commands and bind ~helm-bibtex~ to ~b~.  Helm-bibtex can then be started using ~<menu> b~.  It is also useful to bind ~helm-resume~ to ~<menu>~ in ~helm-command-map~.  With this binding, ~<menu> <menu>~ can be used to reopen the last helm search.\n\n** Predefined searches\n\n*Helm-bibtex*: For convenience, frequent searches can be captured in commands and bound to key combinations.  Below is example code that defines a search for publications authored by \"Jane Doe\" and binds the search command to ~C-x p~.\n\n#+BEGIN_SRC elisp\n(defun bibtex-completion-my-publications ()\n  \"Search BibTeX entries authored by \"Jane Doe\".\"\n  (interactive)\n  (helm :sources '(helm-source-bibtex)\n        :full-frame t\n        :input \"Jane Doe\"\n        :candidate-number-limit 500))\n\n;; Bind this search function to Ctrl-x p:\n(global-set-key (kbd \"C-x p\") 'bibtex-completion-my-publications)\n#+END_SRC\n\n** Change the default action\n\n*Helm-bibtex*: Pressing enter on a publication triggers the \"default action\" which is opening the PDF associated with the publication.  Since the default action is simply the first entry in the list of actions, the default action can be changed by deleting an action and re-inserting it at the top of the list.  Below is an example showing how to make \"Insert BibTeX key\" the default action:\n\n#+BEGIN_SRC emacs-lisp\n(helm-delete-action-from-source \"Insert BibTeX key\" helm-source-bibtex)\n(helm-add-action-to-source \"Insert BibTeX key\" 'bibtex-completion-insert-key helm-source-bibtex 0)\n#+END_SRC\n\nThe second argument of ~helm-add-action-to-source~ is the function that executes the action.  Here is a list of all actions available in helm-bibtex along with their functions:\n\n- Open PDF file (if present): ~bibtex-completion-open-pdf~\n- Open URL or DOI in browser: ~bibtex-completion-open-url-or-doi~\n- Insert citation: ~bibtex-completion-insert-citation~\n- Insert reference: ~bibtex-completion-insert-reference~\n- Insert BibTeX key: ~bibtex-completion-insert-key~\n- Insert BibTeX entry: ~bibtex-completion-insert-bibtex~\n- Attach PDF to email: ~bibtex-completion-add-PDF-attachment~\n- Edit notes: ~bibtex-completion-edit-notes~\n- Show entry: ~bibtex-completion-show-entry~\n\nThe function ~helm-add-action-to-source~ can also be used to add new actions to helm-bibtex.\n\n*Ivy-bibtex*: To change the default action, the command ~ivy-bibtex~ needs to be redefined.  Specifically, we have to specify the default action in the :action slot of the function ivy-read.  For example, to change the default action to /insert BibTeX key/, use the following definition:\n\n#+BEGIN_SRC emacs-lisp\n(defun ivy-bibtex (&optional arg)\n  \"Search BibTeX entries using ivy.\n\nWith a prefix ARG the cache is invalidated and the bibliography\nreread.\"\n  (interactive \"P\")\n  (when arg\n    (setq bibtex-completion-bibliography-hash \"\"))\n  (bibtex-completion-init)\n  (ivy-read \"BibTeX Items: \"\n            (bibtex-completion-candidates 'ivy-bibtex-candidates-formatter)\n            :caller 'ivy-bibtex\n            :action 'bibtex-completion-insert-key))\n#+END_SRC\n\n** Window size\n\n*Helm-bibtex*: By default ~helm-bibtex~ uses the entire frame to display the bibliography.  This can be changed by setting the variable ~bibtex-completion-full-frame~ to ~nil~, in which case helm's standard is used (typically vertical split, with the helm search being shown in the lower window).  \n\n** Templates for new notes\n\nBibtex-completion populates new notes with some basic information about the publication.  In the case of just one note file for all publications, new entries look like the following example:\n\n#+BEGIN_EXAMPLE\n * Gigerenzer, G. (1998): We need statistical thinking, not statistical rituals\n   :PROPERTIES:\n   :Custom_ID: Gigerenzer1998\n   :END:\n#+END_EXAMPLE\n\nThe title of the new section consists of the author names, the year, and the title of the publication.  The property ~Custom_ID~ specifies the BibTeX key of the entry (it's named ~Custom_ID~ for compatibility with org-ref).\n\nIn the case of one file per publication, a new notes file contains a title in the following format:\n\n#+BEGIN_EXAMPLE\n#+TITLE: Notes on: Gigerenzer, G. (1998): We need statistical thinking, not statistical rituals\n#+END_EXAMPLE\n\nIf other formats are desired, the templates for new notes can be changed using the customization variables ~bibtex-completion-notes-template-one-file~ and ~bibtex-completion-notes-template-multiple-files~.\n\n** File type of note files\n\nBy default bibtex-completion assumes that note files are in org-mode format.  However, any other format can be used as well.  In the case of just one notes file, it is enough to set ~bibtex-completion-notes-path~ to point to the desired file.  In the case of multiple note files, the type of the files can be specified using the customization variable ~bibtex-completion-notes-extension~.  For example, if Markdown is the desired file type:\n\n#+BEGIN_SRC emacs-lisp\n(setq bibtex-completion-notes-path \"/path/to/notes\")\n(setq bibtex-completion-notes-extension \".md\")\n#+END_SRC\n\nIf the file type is set to something else than org-mode, the templates for new note files need to be adjusted as well.  See the section above for details.\n\n* Usage\n** Search publications\n\nUse ~M-x helm-bibtex~ or ~M-x ivy-bibtex~ to start a new search.  The default fields for searching are: author, title, year, BibTeX key, and entry type.  Regular expressions can be used.  Example searches:\n\nEverything published by Janet Fodor:\n\n#+BEGIN_EXAMPLE\njanet fodor\n#+END_EXAMPLE\n\nAll PhD theses:\n\n#+BEGIN_EXAMPLE\nphdthesis\n#+END_EXAMPLE\n\nLyn Frazier's PhD thesis:\n\n#+BEGIN_EXAMPLE\nphdthesis frazier\n#+END_EXAMPLE\n\nPublications about eye tracking.  A regular expression is used to match various spellings (\"eyetracking\", \"eye tracking\", \"eye-tracking\"):\n\n#+BEGIN_EXAMPLE\neye.?tracking\n#+END_EXAMPLE\n\nConference presentations in 2013:\n\n#+BEGIN_EXAMPLE\n2013 inproceedings\n#+END_EXAMPLE\n\nPublications from 2010 and 2011:\n\n#+BEGIN_EXAMPLE\n\\(2010\\|2011\\)\n#+END_EXAMPLE\n\nArticles co-authored by David Caplan and Gloria Waters:\n\n#+BEGIN_EXAMPLE\narticle waters caplan\n#+END_EXAMPLE\n\nSearch for articles by David Caplan that are /not/ co-authored by Gloria Waters:\n\n#+BEGIN_EXAMPLE\narticle caplan !waters\n#+END_EXAMPLE\n\n** Search the word under the cursor\n\n*Helm-bibtex*: A common use case is where a search term is written in a document (say in your LaTeX manuscript) and you want to search for it in your bibliography.  In this situation, just start helm-bibtex and enter ~M-n~.  This inserts the word under the cursor as the search term.  (This is a helm feature and can be used in all helm sources not just helm-bibtex.)  Note that it is also possible to use BibTeX keys for searching.  So if your cursor is on a BibTeX key (e.g., in a LaTeX cite command) you can start helm-bibtex, hit ~M+n~ and see the entry associated with that BibTeX key.  Special case: you want to open the PDF associated with the BibTeX key under the cursor: ~M-x helm-bibtex M-n RET~.  This is of course shorter if you bind ~helm-bibtex~ to a convenient key (see [[#key-bindings][Key-bindings]]).\n\n** Select multiple entries\n\n*Helm-bibtex*: Start helm-bibtex, enter the search expression, move the cursor to the matching entry and enter ~C-SPC~ (control + space bar), optionally change your search expression, mark more entries, execute an action for all selected entries at once.\n\n** Actions for selected publications\n\n*Helm-bibtex*: Select one or more entries (see above) and press ~<return>~ to open the PDF (default action).  Alternatively, press ~TAB~ (tabulator) to see a list of all actions.  There are: \n\n- Open the PDF file (if present)\n- Open the URL or DOI in browser\n- Insert citation\n- Insert reference\n- Insert BibTeX key\n- Insert BibTeX entry\n- Attach PDF to email\n- Edit notes\n- Show entry\n\n*Ivy-bibtex*: Select an entry and press enter to open the PDF (default action).  Alternatively, press ~M-o~ to see a list of available actions.\n\n** A colleague asks for copies of your new papers\n\n*Helm-bibtex*: Start an email to your colleague (~C-x m~) and execute ~helm-bibtex~.  Select your new publications and select the action \"Attach PDF to email.\"  Then ~M-x helm-resume~ (the publications are still marked) and select \"Insert BibTeX entry\".  Optionally insert more human readable references using ~M-x helm-resume~ and \"Insert reference\".  Send email (~C-c C-c~).  Done.  This takes less than 10 seconds.  Of course, this assumes that you're sending email from Emacs, e.g. via [[http://www.djcbsoftware.nl/code/mu/mu4e.html][Mu4e]].\n\n*Ivy-bibtex*: Start an email to your colleague (~C-x m~) and execute ~ivy-bibtex~.  Search for your own publications, select the first and execute ~C-M-o~ and select \"Attach PDF to email\".  In contrast to ~M-o~, ~C-M-o~ does not end the ivy session, so you can continue and insert PDFs for you other publications.  You can also insert BibTeX entries and more human readable references using \"Insert BibTeX entry\" and \"Insert reference\".  Send email (~C-c C-c~).  Done.  Of course, this assumes that you're sending email from Emacs, e.g. via [[http://www.djcbsoftware.nl/code/mu/mu4e.html][Mu4e]].\n\n** Tag publications\n\nHelm-bibtex and ivy-bibtex have powerful search capabilities but some common searches cannot be performed simply because the relevant information is typically not represented in BibTeX files.  For example, bibtex-completion doesn't know whether a conference presentation was a talk or a poster because both are represented as ~inproceedings~.  So if you want to compile a list of your conference talks (e.g., for your CV), that's not possible - not without some additional work.  One solution is to \"tag\" publications.  Tags are like keywords except that they don't represent the content of a publications but meta data.  Example:\n\n#+BEGIN_SRC bibtex\n@inproceedings{BibtexKey2015,\n  author = {Jane Doe and Monika Mustermann},\n  title = {This is the title},\n  crossref = {XYZ-conference-2015},\n  keywords = {keyword1, keyword2},\n  pages = {10},\n  tags = {poster},\n}\n#+END_SRC\n\nSince ~tags~ is not a standard BibTeX field, bibtex-completion by default doesn't consider it when searching.  In order to be able to search for tags, we therefore have to tell bibtex-completion that the ~tags~ field is relevant, too: \n\n#+BEGIN_SRC elsip\n(setq bibtex-completion-additional-search-fields '(tags))\n#+END_SRC\n\nThere are many other ways in which tags can be used.  For example, they can be used to mark articles that you plan to read or important articles or manuscripts in progress, etc.  Be creative.\n\n** Insert LaTeX cite commands\n\nThe action for inserting a citation command into a LaTeX document prompts for the citation command and, if applicable, for the pre- and postnote arguments.  The prompt for the citation command has its own minibuffer history, which means that previous inputs can be accessed by pressing the ~<up>~ key.  By pressing ~<down>~ it is also possible to access the list of all citation commands defined in biblatex (except for multicite commands and volcite et al. which have different argument structures).  The prompt also supports auto-completion via the ~tab~ key.  If no command is entered, the default command is used.  The default command is defined in the customization variable ~bibtex-completion-cite-default-command~.  By default, helm-bibtex prompts for pre- and postnotes for the citation.  This can be switched off by setting the variable ~bibtex-completion-cite-prompt-for-optional-arguments~ to ~nil~.\n\n** Force reloading of the bibliography\n\nBibtex-completion caches the bibliography to prevent a costly reread when a new query is started.  However, bibtex-completion does not check whether new PDFs or notes were added since the last read and hence the symbols indicating the presence or absence of these items may be incorrect.  A reread can be forced using a prefix argument.  \n\n*Helm-bibtex*: Either do ~C-u M-x helm-bibtex~ or ~C-u~ followed by whatever key binding you use to invoke helm-bibtex.\n\n*Ivy-bibtex*: Either do ~C-u M-x ivy-bibtex~ or ~C-u~ followed by whatever key binding you use to invoke ivy-bibtex.\n\n** Import BibTeX from CrossRef\n\n*Helm-bibtex*: Start ~helm-bibtex~ and enter search terms.  Then select \"CrossRef\" in the section titled \"Fallback options\".  (You can use the left and right arrow keys to switch between sections.)  This will use [[https://github.com/cpitclaudel/biblio.el][biblio.el]] to search the CrossRef database.  In the results list, place the cursor on the entry of interest and hit ~c~ to copy the BibTeX for that entry or ~i~ to insert it at point.  Press ~q~ to close the buffer with the search results.  See the [[https://github.com/cpitclaudel/biblio.el/blob/master/README.md][documentation of biblio.el]] for details.\n\n* Advanced usage (a.k.a. hacks)\n\nBelow I provide code that was useful for me.  Note that this code may make assumptions that do not hold in your setup.  Read the code carefully before executing it and make changes as needed.\n\n** Convert multiple note files to one notes file\n\nThe code below reads all note files in your ~bibtex-completion-notes-path~ and creates a new notes file containing a section for each publication.  This code assumes that bibtex-completion is still configured for multiple note files and that you want to store the notes in the file ~notes.org~ in your ~bibtex-completion-notes-path~.  The code also adds a level to all org headlines found in the individual note files (because top-level headings are used for the publications in the new notes file).  If a note file doesn't have a corresponding entry in the bibliography, it is ignored.\n\n#+BEGIN_SRC elisp\n(let ((note-files (directory-files bibtex-completion-notes-path t \"^[^.]+\\\\.org$\"))\n      (bibtex-completion-notes-path (f-join bibtex-completion-notes-path \"notes.org\")))\n  (cl-loop\n   for note-file in note-files\n   for key = (f-no-ext (f-filename note-file))\n   do (condition-case nil\n          (progn\n            (bibtex-completion-edit-notes key)\n            (insert (with-temp-buffer\n                      (insert-file-contents note-file)\n                      (replace-regexp \"^*\" \"**\")\n                      (buffer-string))))\n        (error nil))))\n#+END_SRC\n\n** Create a BibTeX file containing only specific entries\n\nSay you want to create a BibTeX file containing only entries that you cited in an article, then you can use the following code to populate the new BibTeX file with entries:\n\n#+BEGIN_SRC elisp\n(progn\n  (switch-to-buffer (generate-new-buffer \"my_new_bibliography.bib\"))\n  (--map (insert (bibtex-completion-make-bibtex it)) (-distinct '(\"Key1\" \"Key2\"))))\n#+END_SRC\n\nIf LaTeX is used to write the article, grep and sed can be used to extract the cited keys:\n\n#+BEGIN_SRC sh\ngrep '\\entry{' manuscript.bbl | sed 's/^.*\\entry{\\([^}]*\\)}.*$/\\1/'\n#+END_SRC\n\n* Troubleshooting\n\n** Helm-bibtex doesn't show any entries\n\nThis usually happens when a BibTeX file isn't well-formed.  Common problems are opening quotes or parentheses that don't have matching counterparts.  Unfortunately, Helm swallows the error message that is generated in these cases and just shows an empty buffer.\n\nOne way to diagnose the problem is to call the function for reading BibTeX directly and to see what error message it produces:\n\n#+BEGIN_SRC elisp\n(bibtex-completion-candidates)\n#+END_SRC\n\nIf you see\n\n#+BEGIN_SRC\nforward-sexp: Scan error: \"Unbalanced parentheses\", 181009, 512282\n#+END_SRC\n\nthis means that there is an unmatched opening parenthesis at the position 181009.  To find this parenthesis, open the BibTeX file and do ~M-: (goto-char 181009) RET~.  You can also use the command ~M-x bibtex-validate RET~ to check for errors.  Fix any problems and try again.\n\n", 
  "description": "Search and manage bibliographies in Emacs", 
  "id": 18513154
}