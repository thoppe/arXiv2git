{
  "README_FinancialMarketModel.md": "svnMASmm\n========\n\nSVN assembla  Financial Market Model on MASON  from http://svn2.assembla.com/svn/MarketModel/ created by Michal Latek\n\nThe project was imported from: http://svn2.assembla.com/svn/MarketModel\n\nBelow is the description from the Maciej Latek Assembla:\n\n/*********************************************************\nHome\n-----\nVersion 25, last updated by MaciejMLatek at 2008-08-19\nA Family of Financial Market Models\n\nGeorge Mason University CSS 739 under direction of Dr. Robert Axtell\nOverall status:\n\nWe have a framework with several financial market models implementations (see paper with overview here). The framework allows for multiple assets and mixing of agents using different behavioral logics. You can download the jar file here and associated property files here. See RunGuide for further info.\n\nThe current version includes following graphs:\n\n   1. Bid and ask price history (up to last 10000 observations);\n   2. Return and absolute return history (up to last 10000 observations);\n   3. Trading volume history (up to last 10000 observations);\n   4. Graph of the autocorrelation of both returns and absolute returns (1 to 200 lags);\n   5. Trailing average volatility (absolute returns) (up to last 10000 observations, over 365 steps)\n   6. Frequency of returns;\n   7. Distribution of order book limit orders (if applicable);\n\nGraphs are computationally expensive and are updated only when visible. Best practice is to run the model a while, then pause, 'Show' the graph you're interested in (from the Displays panel), and step the model once. Use 'Hide All' to dismiss them again -- closing the windows using the 'X' will render the graphs irretrievable.\n\nDocumentation\n\n   - How to run model: RunGuide;\n   - Details of OrderBook specification and implementation;\n   - Specification for GenericPlayer and LimitOrder;\n   - Document with Cont equivalent STATA graphs for SP500; Excel file with S&P 500 data: 1950-2008\n   - Data Summary Document with Cont equivalent STATA graphs for SP500 Daily Quotes, IBM Per Transaction Quotes, and Simulation (Farmer and Cont models) Quotes\n   - Data Analysis Slides: comparison between SP500, IBM and \"Mason\"\n   - All datasets have been uploaded FTP server to: wean.css.gmu.edu \n\n\n\n\nOrderBook\n-----\nVersion 4, last updated by jtbriggs at 2008-05-13\n\nOrder books of various kinds may be created to facilitate the trade of a single asset between player/agents.\n\nSpecification for the OrderBook interface which each order book must implement:\n\nThe interface includes functions to create and cancel LimitOrder and execute market orders, as well as do initialization and bookkeeping\n\n   - double executeMarketOrder(OrderType type, int quantity) throws LiquidityException\n   - boolean placeLimitOrder(LimitOrder order)\n   - boolean cancelLimitOrder(LimitOrder order)\n   - void cleanup() -- this function does periodic bookkeeping and cleanup for the order book\n   - void setMyWorld(FinancialModel myWorld);\n   - void setMyID(int a);\n\nIt also includes functions to get 'snapshot' meta-data about the OrderBook\n\n   - double[] getBuyOrders();  double[] getSellOrders();\n   - double getAskPrice(); double getBidPrice(); double getSpread();\n   - double getReturnRate();\n   - double getReturnRate();\n   - double getVolume(); double getAverageTradePrice();\n   - double getRandomComponent() -- returns a commonly shared random value computed each 'step'\n\nRemarks:\n\nSee definitions of LimitOrder and GenericPlayer.\n\nThe players are responsible for doing accounting about the proceeds and costs of buying and selling the assets. Order books have no knowledge of the actual quantity of asset that are outstanding, or whether the Players actually have enough money or assets on hand to realistically complete the transaction. To that extent, the order books act on faith.\n\nAt present several order books have been implemented:\n\n   - ContBook, the most basic, handles limit orders, computes the total excess demand and a trade price to clear the market of all trades each step\n   - DoubleAuctionOrderBook behaves like a typical stock market. Some (patient) traders place limit orders which specify a quantity and price. Other (impatient) traders place market orders which execute immediately at the market price, provided that there is adequate liquidity provided by outstanding limit orders. As implemented, placing or cancelling a limit order takes log time, placing a market order takes constant time, and cleanup takes linear time, all w.r.t. the number of limit orders pending.\n   - LSBook\n   \n\n\n\nGenericPlayer\n-----\nVersion 2, last updated by jtbriggs at 2008-05-03\n\n\nAll 'Player' agents in this framework derive from GenericPlayer, which is itself a steppable MASON object.\n\nIt is a simple construct, but it provides a reference to the FinancialModel it is a part of, and a setup function which is used for construction in the ModelFactory.\n\nEach player, in randomized order, has its step() function called each iteration of the model.\n\nCurrent Players deriving from GenericPlayer are:\n\n   - ContPlayer\n   - FarmerImpatienPlayer\n   - FarmerPatientPlayer\n   - FCImpatientPlayer (for Farmer-Cont)\n   - LSPlayer\n\n\n\n\nLimitOrder\n-----\nVersion 1, last updated by jtbriggs at 2008-05-03\n\nLimitOrders are, for our purposes, Buy or Sell orders that do not (necessarily) execute immediately. MarketOrders are their counterpart which do execute immediately.\n\nThey are created and managed by Players. But after they are submitted to an OrderBook for execution, only the orderbook may modify them. The Player retains responsibility for checking on their execution status.\n\nWithin the context of the DoubleAuctionOrderBook, they are LimitOrders in the normal sense as found on stock markets, where a price, quantity, and possibly an expiration are specified, and it will execute if market conditions make it feasible before expiration.\n\n\nSpecification for LimitOrder class:\n\npublic class LimitOrder\n\nThese values are set at creation by the player:\n\n   - Enumeration type (Purchase, Sale)\n   - int assetID -- correlated 1-1 with the orderbook\n   - GenericPlayer investor -- owner of the LimitOrder\n   - int quantity -- requested quantity to buy or sell\n   - double pricePerUnit -- price at which the investor wishes to transact\n   - double expirationTime -- schedule time the order will expire (implicitly)\n   - Enumeration getStatus() (Expired, Finalized, Outstanding);\n\n These values are modified by the OrderBook upon execution, expiration, or cancellation\n\n   - AtomicInteger quantityExecuted -- the quantity that have been executed to date\n   - AtomicInteger cancelled -- whether the order has been explicitly cancelled by the investor via the OrderBook \n\nAt any time, the player/investor may check the status of his orders (to do accounting for example)\n\n   - LimitStatus getStatus() where LimitStatus is one of (Pending, Expired, Partially_Executed, Fully_Executed).\n\n\n\n\nRunGuide\n-----\nVersion 3, last updated by jtbriggs at 2008-05-03\nGuide to installing and running FinancialModel\n\n There are two ways to get the project. The simpler way is:\n\n   1. Download FinancialMarket.jar and setups.zip from the Files tab of this site.\n   2. Unpack setups.zip and place the setups folder next to the jar file.\n\nAlternatively, if you want to be able to revise or extend the models you can:\n\n   1. Check them out using Subversion from http://svn2.assembla.com/svn/MarketModel\n   2. Build them in Eclipse for Java.\n\nSubversion and Eclipse are fully documented on the web.\n\n \n\nNext, you need to configure some files to set the parameters to the models.\n\n   - In setups folder, you should see following files:\n       1. main.properties: a configuration file describing what simulation you will run. In particular, by changing values of orderbookClass and agentConfiguration parameters, you can choose the type of orderbook and parameters for the models. Example main.properties files (ie, main_cont.properties) are included for reference, but it is 'main.properties' that counts. Not all order books work with all agents.\n       2. *.txt: these files contain data on composition of population of players and are included via the 'agentConfiguration' option in main.properties. Entries should be formatted as playerClass,numOfInstances with single line per playerClass. You can have as many lines (or different types of agents) in you simulation as required.\n\n \n\nFinally, you're ready to run the model.\n\n   - If you downloaded the jar file, doubleclick the jar file (or use java -Xmx1024M -jar FinancialModel.jar command) to start the simulation.\n   - If you're using eclipse, go to src/gui and run FinancialModelWithUI.java as a Java Application.\n\nAll Mason simulations have common interface. You can refer to following slides for explanation of control window that should appear.\n\n\n**********************************************************/\n\n\n\n", 
  "read_at": 1462553964, 
  "description": "Financial Market Model in which there is a ZIT (Zero Inteligence Trader) model of a continuous double auction for simulation of financial markets. The model is based on MASON version 18 http://cs.gmu.edu/~eclab/projects/mason/ and Financial Market Model created by Michal Latek (http://svn2.assembla.com/svn/MarketModel/).", 
  "README_MASON": "Welcome to MASON, a simulator designed for simple-multiagent simulations,\nor to be used as a core library inside more sophisticated multiagent\nsimulators. \n\nMASON was written by Sean Luke, Gabriel Catalin Balan, and Liviu Panait. \nAdditional code and apps were written by Daniel Kuebrich and Sean Paus. \nMuch help was provided by Claudio Cioffi-Revilla and Ken De Jong.  MASON\nis a joint effort of George Mason University's Evolutionary Computation\nLaboratory (in the Computer Science Department), and GMU's Center for\nSocial Complexity. \n\nHere are files you should know about. \n\nLICENSE.  MASON largely uses the Academic Free License version 3.0.\n\t  Please read it first.  It is located in the LICENSE file.\n\nINSTALLATION AND INTRODUCTION.  Installation information, and the root\n          point for all documentation, can be found at docs/index.html . \n\nCHANGES.  The changes from previous versions are listed in the CHANGES file. \n\nIf you have any questions, you have two routes.  First, check out the\nMASON-INTEREST-L discussion group on the MASON website.  Second, the MASON\nwebsite also lists a help email address you can send mail to if you get\ndesperate.  The website URL is http://cs.gmu.edu/~eclab/projects/mason/\nPlease do NOT mail the developers directly.  Post to the discussion group. \n\nNote that most of the subdirectories contain README files describing the\nclasses and basic files in those directories.  This might or might not be\nuseful to you when poking around.\n\n---------------------------------------------------------------------------\n\n\nQuick Start: In the same directory as this file there is a directory\ncalled 'start'.  Inside this directory there are scripts to fire up MASON. \n\n\tWindows:\tdouble-click on 'mason.bat'\n\tOS X:\t\tdouble-click on 'mason.command'\n\tLinux/X11:\texec 'mason.sh'\n\n...and pick an application from the list which appears.  Try\nsim.app.heatbugs.HeatBugsWithUI for example. \n\nTo run 3D demos, you have to install Java3D.  To make movies, you have to\ninstall the Java Media Framework (JMF).  To do charting, you have to install\nJCommon, JFreeChart, and iText.  See the web page for information about\nwhere to obtain and install these packages.  If the jcommon...jar, \njfreechart...jar, itext...jar, and jmf.jar files (or other jar files) \nare not in your CLASSPATH, the scripts will still recognize them if you \ndrop them in the 'mason' directory.\n\n---------------------------------------------------------------------------\n\nUsing the Jar File:\n\n1. Install Java3D.\n\n2. Install JMF (or add the 'cross-platform' jmf.jar file to your\n   CLASSPATH or to your 'mason' directory)\n\n3. Install JCommon, JFreeChart, and iText (or add the jcommon...jar,\n   jfreechart...jar, and itext...jar files to your CLASSPATH or in the\n   'mason' directory)\n\n4. In the 'jar' directory there is a file named something like\n   'mason.jar'.  Try double-clicking on it (you won't be able to run\n   all the 3D demos due to lack of memory).\n\n5. Alternatively, you can run the mason.jar file, with expanded\n   memory, like this:\n\n   java -Xmx200M -jar jar/mason.jar sim.display.Console\n\n\n--------------------------------------------------------------------------\n\nNot So Quick Start With Full Source:\n\n1. Install Java3D.\n\n2. Install JMF (or add the 'cross-platform' jmf.jar file to your \n   CLASSPATH or to your 'mason' directory)\n\n3. Install JCommon, JFreeChart, and iText (or add the jcommon...jar,\n   jfreechart...jar, and itext...jar files to your CLASSPATH or in the\n   'mason' directory)\n\n4. Add the 'mason' directory to your CLASSPATH.   Or add the 'jar' file\n   located in the jar/ directory if you don't care about source.\n\n5. Run MASON like this:\n\n   java -Xmx200M sim.display.Console\n\n   ...and pick an application from the pop-up list which appears.  The\n   -Xmx200M is because one application (Particles3D) won't run unless you\n   give Java more memory.  You can also run any particular application by\n   firing up its sim.app.foo.FooWithUI class, such as: \n\n   java sim.app.heatbugs.HeatBugsWithUI\n\n6. MASON's top-level java packages are the sim and ec directories.  You can\n   use the Makefile to build MASON easily from MacOS X/Linux/UNIX.  To see\n   the Makefile options, try\n\n   make help\n\n---------------------------------------------------------------------------\n\nWhere to go from here?:\n\n1. Play with the demos.\n2. Poke around in the docs.\n3. Try tutorial 0 in the docs (just a tour of what MASON does)\n4. Try tutorials 1-7 (which teach how to code MASON apps).  They're\n   in sim/app.  \n5. Read the how-tos for advanced questions.\n6. If you get stuck, post to the discussion group.\n7. There are various modules for MASON avaialble on the web page: check 'em out!\n\n", 
  "id": 26118308, 
  "README.md": "Financial Market Model, ZIT, continuous double auction\n=====\n\n##This is Financial Market Model with ZIT (Zero Inteligence Trader) and Low-Intelligence (with Neural Network with BP algorithm) type of agents using continuous double auction mechanism. The aim of this model is to simulate and study financial markets behaviour. \nBased on suggestion of Farmer, et al. (2003) there was introduced new type of agent called Low-Intelligence Agent. Low-Int Agent is based on neural network with back propagation algorithm based on [encog framework](http://www.heatonresearch.com/encog)\n####The code of the model is based on \n1.  MASON version 18 which is described in README_MASON file, LICENSE_MASON file and [here](http://cs.gmu.edu/~eclab/projects/mason/).\n2.  Financial Market Model created by Michal Latek. More information can be found [here on assembla](http://svn2.assembla.com/svn/MarketModel) or [here on m-zbik github](https://github.com/m-zbik/svnMASmm). \n3.\tEncog framework created by Jeff Heaton. More information can be found [here](http://www.heatonresearch.com/encog).\n\n####The model is based on\n*(Papers can be found in the /papers/MzbikPapers)*\n\n-\tBachelier, L., 1900. Thorie de la Spculation. Annales scientifiques de l'cole Normale Suprieure, volume: 17, page 21-86, [online] Available at: <http://eudml.org/doc/81146> \n-\tBecker, Gary S. 1962. Irrational Behavior and Economic Theory. Journal of Political Economy Vol. 70, No. 1 (Feb., 1962), pp. 1-13 [online] Available at:  <http://www.jstor.org/stable/1827018>\n-\tBriggs, J., Trusiano, F., Latek, M.  , Marks, R. (Programming Group) and Lin, S., Hansen Ch., Tzitzouris, T. (Data Analysis Group) 2008?. Simulating Financial Markets using MASON Framework. Center for Social Complexity, George Mason University, USA.\n-\tBrown, R, 1828. A Brief Account of Microscopical Observations Made in the Months of June, July, and August 1827, on the Particles Contained in the Pollen of Plants; and on the General Existence of Active Molecules in Organic and Inorganic bodies. Private distribution in London at the press of Richard Taylor, [online] Available at:  http://sciweb.nybg.org/science2/pdfs/dws/Brownian.pdf\n-\tDaniels, M., Farmer, J.D., Gillemot, L., Iori, G., and Smith, D.E., 2003. Quantitative model of price diffusion and market friction based on trading as a mechanistic random process. Physical Review Letters 9019, 10. ArXiv.com Cornell University Library, [online] Available at: < arXiv:cond-mat/0112422 >.\n-\tEinstein, A., 1905. Investigations on the theory of, the Brownian Movement. Dover Publications, INC, 1956, [online] Available at: <http://www.math.uconn.edu/~gordina/Einstein_Brownian1905.pdf>\n-\tFama, E. F., 1970. Efficient capital markets: A review of theory and empirical work. The Journal of Finance, 25(2), 383-417, [online] Available at <http://dx.doi.org/10.2307/2325486 >.\n-\tFama, E. F. (1965). The behavior of stock-market prices. Journal of Business, 38(1), 34-105. [online] Available at: http://dx.doi.org/10.1086/294743.\n-\tFarmer, D.J, 2012. Economics needs to treat the economy as a complex system. National Science Foundation under Grant No.0965673, the European Union Seventh Framework Programme FP7/2007-2013 under grant agreement CRISIS-ICT-2011-288501, and by the Sloan Foundation, [online] Available at: http://ineteconomics.org/conference/berlin/economics-needs-treat-economy-complex-system\n-\tFarmer, D. J., Foley, J., 2009. The economy needs agent-based modelling.  Nature, Volume 460, 685-686, [online] Available at: <http://www.nature.com/nature/journal/v460/n7256/full/460685a.html>\n-\tFarmer, D. J., Patelli, P., and Zovko, I., 2003. The Predictive Power of Zero Intelligence in Financial Markets.  ArXiv.com Cornell University Library, [online] Available at: < http://arxiv.org/abs/cond-mat/0309233 >\n-\tGilbert, N., Troitzsch, K.G., 2005 .Open UniversitySimulation for the Social Scientist. Open University Press.\n-\tGode, K. and Sunder, S., 1993. Allocative Efficiency of Markets with Zero-Intelligence Traders: Market as a Partial Substitute for Individual Raionality. Journal of Plitical Economy, vol. 101, no. 1. Available through: JSTOR Journal Storage < http://www.jstor.org/discover/10.2307/2138676?uid=6851048&uid=3738840&uid=2&uid=6850976&uid=3&uid=67&uid=62&sid=21106072936841 >.\n-\tGrothmann R., 2002. Multiagent market modeling based on neural networks. University of Bremen, Germany, Siemens AG, Corporate Technology, Munich, Germany, Thesis presented for the Degree of Doctor of Economics, [online] Available at: https://www.deutsche-digitale-bibliothek.de/binary/BZY53RWHY5AGYPBUI5B3KFZHAUAE3UXH/full/1.pdf\n-\tHeaton, J., 2011.Programming Neural Networks with Encog3 in Java. Heaton Research, Inc. St. Louis, MO, USA [online] Available at: http://www.heatonresearch.com\n-\tLeBaron, B. (2000). Agent-based computational  finance: Suggested readings and early research. Journal of Economic Dynamics and Control 24, 679-702, [online] Available at: http://www2.econ.iastate.edu/tesfatsi/blake.SuggestedRead.pdf \n-\tLuke, S., 2014. Multiagent Simulation and the MASON Library. Department of Computer Science George Mason University Manual Version 18\n-\tLuke, S., Cio-Revilla, C., Panait, L, Sullivan, K., and Balan, G., 2005. MASON: A Multiagent Simulation Environment. Simulation: Transactions of the society for Modeling and Simulation International. 82(7):517-527.\n-\tMacal, C.M, North, M.J, 2010. Tutorial on agent-based modelling and simulation. Journal of Simulation (2010) 4, 151162\n-\tMacal, Ch.M., North, M.J., 2009. Agent-based modeling and simulation. Winter Simulation Conference, [online] Available at: http://www.informs-sim.org/wsc09papers/009.pdf\n-\tMandelbrot, Benoit, 1963. The Variation of Certain Speculative Prices, The Journal of Business, 36(4), 394419, [online] Available at: < http://www.e-m-h.org/Mand63.pdf>\n-\tMcBride,  M., 2014. Netlogo model of zero-intelligence trading by Gode and Sunder. [online] Available at: https://github.com/memcbride/ZITrading\n-\tNikunj, R., Bhavesh, K., Darshan, R., 2011. Testing Weak form m market efficiency of Indian  Stock Markets. SS International Journal of Business and Management Research volume 1, Issue 3 [ SEP 2011], ISSN 2231-4970, [online] Available at: www.ssirn.com\n-\tNg. A., 2015. Machine learning course. Coursera.org, Massive Open Online Course [online] Available at: <https://www.coursera.org/learn/machine-learning/home/>\n-\tNobel Prize Organization, 1970 [online] Available at: <http://www.nobelprize.org/nobel_prizes/economic-sciences/laureates/1970/index.html>\n-\tOsbourne, M.F.M., 1959. Brownian Motion in the Stock Market, Operations Research, 7(2), 14573, [online] Available at: < http://www.e-m-h.org/Osbo59.pdf>\n-\tPearson, K. (1905). The Problem of the Random Walk. Nature. 72, 294.\n-\tRegnault, J., 1863. Calcul des chances et philosophie de la bourse. Mallet-Bachelier Castel, Paris 1866, [online] Available at: https://archive.org/details/calculdeschances00regn\n-\tRuppert, D., 2011. Statistics and Data Analysis for Financial Engineering. Springer Science+Business Media.\n-\tSewell, M., 2012. The Efficient Market Hypothesis: Empirical Evidence. International Journal of Statistics and Probability Vol 1, No 2 (2012), [online] Available at:  http://ccsenet.org/journal/index.php/ijsp/article/view/17911\n-\tSmith, E., Farmer, J.D., Gillemot, L., and Krishnamurthy,S., 2003. Statistical theory of the continuous double auction. Quantitative Finance, [online] Available at: http://arxiv.org/abs/cond-mat/0210475\n-\tSmith, V.L., 1982. Microeconomic Systems as an Experimental Science. The American Economic Review Vol. 72, No. 5 (Dec., 1982), pp. 923-955 [online] Available at:  <http://www.jstor.org/stable/1812014>\n-\tStrutt, J.W., Lord Rayleigh, 1880. On the Resultant of a Large Number of Vibrations of the Same Pitch and of Arbitrary Phase, Philos. Mag. 10, 73 [online] Available at: http://www.tandfonline.com/doi/abs/10.1080/14786448008626893\n-\tTesfatsion, L., 2002. Agent-Based Computational Economics: Growing Economies from the http://www2.econ.iastate.edu/tesfatsi/acealife.pdf\n-\tWeatherall, J.O., 2013. The Physics of Wall Street. Houghton Mifflin Harcourt Boston New York\n-\tVenn, J. (1888). The Logic of Chance, 3rd edn. Macmillan, London.\n-\tZivot, E., 2015. Introduction to Computational Finance and Financial. University of Washington, ECON 424/CFRM 462 [online] Available at: http://faculty.washington.edu/ezivot/econ424/econ424.htm \n\n\n"
}