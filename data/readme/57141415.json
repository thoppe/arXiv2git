{
  "read_at": 1462548557, 
  "README.org": "\n* Graphics-Gnuplot-Palettes\n\nA collection of high-quality palettes for surface plots made using Gnuplot.\n\nThis is useful for any Perl-to-Gnuplot interface, including\n[[https://metacpan.org/pod/PDL::Graphics::Gnuplot][PDL::Graphics::Gnuplot]], [[https://metacpan.org/pod/Graphics::GnuplotIF][Graphics::GnuplotIF]], and probably others.\n\n** Installation\n\nThis installs like any perl package:\n\n  #+BEGIN_EXAMPLE\n  perl Makefile.PL\n  make\n  make test\n  sudo make install\n  #+END_EXAMPLE\n\nThe ~make test~ test step is fairly trivial.  When run in that way,\nthe test only checks to see that the module loads and that the\nintrospection functions work.  Proper testing that all the palettes\nare defined correctly requires human interaction to see that each\npalette in the collection works.  This is done by visual comparison\nwith the default palette.  To run the tests interactively do, for\ninstance, ~perl -Iblib/lib test.t~ in the main directory.\n\n** Overview\n\nTo use this in a perl program:\n\n  #+BEGIN_SRC perl\n  use Graphics::Gnuplot::Palette;\n  my $colors = palette(\"BlackBody\");\n  send_to_gnuplot_process(\"set palette $colors\");\n  #+END_SRC\n\nA specific example for [[https://metacpan.org/pod/PDL::Graphics::Gnuplot][PDL::Graphics::Gnuplot]]:\n  #+BEGIN_SRC perl\n  use Graphics::Gnuplot::Palette;\n  my $w = PDL::Graphics::Gnuplot -> new();\n  $w->image({palette=>palette(\"Kindlmann\")}, $image_pdl);\n  #+END_SRC\n\nThe ~palette~ method is exported by default and takes as its argument\none of the perl module names listed in the tables below.  In the case\nof a name collision, you can specify the palette group also, like so:\n\n  #+BEGIN_SRC perl\n  my $colors = palette(\"Moreland\", \"BlackBody\");\n  #+END_SRC\n\nIn the two-argument form, the named palette will be searched for only\namong that palette group.  In the one-argument form, the first one\nfound by that name is returned.\n\nIf the requested palette name cannot be found, the function returns\nthe string defining Gnuplot's traditional pm3d palette.  In that way,\n/something/ sensible will always be plotted.\n\nThere are also introspection functions which return lists of groups\nand palette names:\n\n  #+BEGIN_SRC perl\n  my @groups = palette_groups();\n  my @all_names = palette_names();\n  my @CET_names = palette_names(\"CET\");\n  #+END_SRC\n\n\n** Palette groups\n\n*** Gnuplot suggestions\n\n This set of color maps implements the suggested RGB values from the\n ~set palette~ section of the Gnuplot manual.\n\n The traditional pm3d palette is the return value for the palette\n method when it cannot figure out which palette you are asking for.\n The other are quite similar to offerings in the CET group.\n\n | perl module | RGB values | explanation                                               |\n |-------------+------------+-----------------------------------------------------------|\n | Pm3d        | 7,5,15     | traditional pm3d (black-blue-red-yellow)                  |\n | GRV         | 3,11,6     | green-red-violet                                          |\n | Ocean       | 23,28,3    | ocean (green-blue-white); try also all other permutations |\n | Hot         | 21,22,23   | hot (black-red-yellow-white)                              |\n | Grey        | 30,31,32   | color printable on gray (black-blue-violet-yellow-white)  |\n | Rainbow     | 33,13,10   | rainbow (blue-green-yellow-red)                           |\n | AFMHot      | 34,35,36   | AFM hot (black-red-yellow-white)                          |\n\n*** Matlab-like palettes\n\n This set implements common Matlab color palettes in Gnuplot form.\n\n | perl module | explanation                         |\n |-------------+-------------------------------------|\n | Parula      | Similar to Matlab's current default |\n | Jet         | The standard matlab rainbow         |\n\n*** Color Map Advice for Scientific Visualization\n\n This set of color maps is from Kenneth Moreland following the\n principles in his paper, \"Why We Use Bad Color Maps and What You Can\n Do About It.\" Kenneth Moreland. In Proceedings of Human Vision and\n Electronic Imaging (HVEI), 2016. (To appear.)  See also his web site\n http://www.kennethmoreland.com/color-advice\n\n | perl module        | explanation                                                                                                                   |\n |--------------------+-------------------------------------------------------------------------------------------------------------------------------|\n | SmoothCoolWarm     | Diverging (double-ended) blue-white-red color map with a smooth transition in the middle to prevent artifacts at the midpoint |\n | BentCoolWarm       | Like above but interpolated linearly with a sharp bend in the middle                                                          |\n | BlackBody          | Based on colors from black-body radiation                                                                                     |\n | ExtendedBlackBody  | Like above but with blue and purple hues                                                                                      |\n | Kindlmann          | Rainbow color map with the luminance adjusted such that it monotonically changes                                              |\n | ExtendedKindlmann  | Like above but adds more hues by doing a more than 360 degree loop around the hues                                            |\n\n\n*** CET Perceptually Uniform Colour Maps\n\n This set of color maps is designed to have uniform perceptual contrast\n over their whole range.  See http://peterkovesi.com/projects/colourmaps/\n\n All palettes in this group are the work of Peter Kovesi of The\n University of Western Australia.  They are used under the terms of the\n [[http://creativecommons.org/licenses/by/4.0/][Creative Commons BY License]].  For more information, see the website or\n Kovesi's paper [[http://arxiv.org/pdf/1509.03700.pdf][Good Colour Maps: How to Design Them]], (arXiv:1509.03700\n [cs.GR] 2015)\n\n The palettes in this group were generated from [[http://peterkovesi.com/projects/colourmaps/CETperceptual_ParaView.xml][this XML file]] using a\n script in this repository.\n\n The language used in Kovesi's palettes was a little unwieldy for this\n purpose, so I adopted a file name shortening scheme as follows:\n\n | symbol | word        | explanation                                                                           |\n |--------+-------------+---------------------------------------------------------------------------------------|\n | C      | cyclic      | colors that are matched at each end with first order continuity                       |\n | I      | isoluminant | constructed from colours of equal perceptual lightness                                |\n | L      | linear      | color lightness values that increase or decrease linearly over the colour map's range |\n | D      | divergent   | follow some pattern of symmetry about their center                                    |\n | RB     | rainbow     | nominally follow some representation of the color spectrum                            |\n\n And here are is the connection between perl module names and original\n color map names.  The astute will note that a couple of the originals\n are lost due to the file name shortening scheme.\n\n | perl module     | original name                     |\n |-----------------+-----------------------------------|\n | L_grey          | linear_grey_0-100_c0              |\n | L_kryw          | linear_kryw_5-100_c67             |\n | L_kry           | linear_kry_5-98_c75               |\n | L_green         | linear_green_5-95_c69             |\n | L_blue          | linear_blue_5-95_c73              |\n | L_bmw           | linear_bmw_5-95_c89               |\n | L_bmy           | linear_bmy_10-95_c78              |\n | L_bgyw          | linear_bgyw_15-100_c68            |\n | L_gow           | linear_gow_60-85_c27              |\n | L_blue          | linear_blue_95-50_c20             |\n | L_ternary-red   | linear_ternary-red_0-50_c52       |\n | L_ternary-green | linear_ternary-green_0-46_c42     |\n | L_ternary-blue  | linear_ternary-blue_0-44_c57      |\n | D_bwr           | diverging_bwr_40-95_c42           |\n | D_gwv           | diverging_gwv_55-95_c39           |\n | D_gwr           | diverging_gwr_55-95_c38           |\n | D_bkr           | diverging_bkr_55-10_c35           |\n | D_bky           | diverging_bky_60-10_c30           |\n | D_L_bjy         | diverging-linear_bjy_30-90_c45    |\n | D_L_bjr         | diverging-linear_bjr_30-55_c53    |\n | D_bwr           | diverging_bwr_55-98_c37           |\n | D_cwm           | diverging_cwm_80-100_c22          |\n | D_RB_bgymr      | diverging-rainbow_bgymr_45-85_c67 |\n | RB_bgyrm        | rainbow_bgyrm_35-85_c71           |\n | RB_bgyr         | rainbow_bgyr_35-85_c73            |\n | C_mrybm         | cyclic_mrybm_35-75_c68            |\n | C_mygbm         | cyclic_mygbm_30-95_c78            |\n | C_wrwbw         | cyclic_wrwbw_40-90_c42            |\n | C_grey          | cyclic_grey_15-85_c0              |\n | I_cgo           | isoluminant_cgo_70_c39            |\n | I_cm            | isoluminant_cm_70_c39             |\n | D_I_cjo         | diverging-isoluminant_cjo_70_c25  |\n | D_I_cjm         | diverging-isoluminant_cjm_75_c24  |\n\n The original file names are explained in an image \n from [[http://peterkovesi.com/projects/colourmaps/][Kovesi's web site]].  The following text is copied from \n there.  Examples are given for each color map at the web site.\n\n [[http://peterkovesi.com/projects/colourmaps/NamingConvention.png]]\n\n + A colour map may have more than one attribute. For example,\n   diverging-isoluminant (D_I).\n\n + Lightness values can range from 0 to 100. For linear colour maps the\n   two lightness values indicate the first and last lightness values in\n   the map. For diverging colour maps the second value indicates the\n   lightness value of the centre point of the colour map (unless it is\n   a diverging-linear colour map). For cyclic and rainbow colour maps\n   the two values indicate the minimum and maximum lightness\n   values. Isoluminant colour maps have only one lightness value.\n\n + The string of characters indicating the nominal hue sequence uses\n   the following code\n\n     | r - red    | g - green   | b - blue   |\n     | c - cyan   | m - magenta | y - yellow |\n     | o - orange | v - violet  |            |\n     | k - black  | w - white   | j - grey   |\n\n   ('j' rhymes with grey). Thus a 'heat' style colour map would be\n   indicated by the string 'kryw'. If the colour map is predominantly\n   one colour then the full name of that colour may be used. Note these\n   codes are mainly used to indicate the hues of the colour map\n   independent of the lightness/darkness and saturation of the colors.\n\n + Mean chroma/saturation is an indication of vividness of the color\n   map. A value of 0 corresponds to a grey scale. A value of 50 or more\n   will indicate a vivid colour map.\n  \n + Depending on whether a cyclic colour map is being used to render\n   data that is cyclic over 360 or 180 degrees a cyclic shift of 25%\n   may be applied.\n\n*** Others\n\n+ [[http://colorbrewer2.org/][Color Brewer]] and [[https://github.com/aschn/gnuplot-colorbrewer][Color brewer for Gnuplot]]\n\n+ [[https://datascience.lanl.gov/colormaps.html][LANL Data Science]]\n\n+ [[http://scipy-cookbook.readthedocs.org/items/Matplotlib_Show_colormaps.html][Matplotlib's color map library]]\n", 
  "description": "A collection of high-quality palettes for surface plots made using Gnuplot", 
  "id": 57141415
}