{
  "read_at": 1462549142, 
  "description": "Process periodic box of objects into mock survey.", 
  "README.md": "MAKE_SURVEY\n===========\n\nThe `make_survey` code is meant to take a periodic box of objects \n(galaxy mocks, halos, or particles from a simulation box), and project \nthem on the sky adding various layers of realism to create a mock survey.\n\nThe implemented steps include: \n\n 1. Volume Remapping (BoxRemap by Carlson and White, see http://mwhite.berkeley.edu/BoxRemap/ )\n 2. Translation / Rotation \n 3. Sky Projection (X,Y,Z to RA,DEC,REDSHIFT)\n 4. Redshift Distortions (based on peculiar velocities) \n 5. Survey footprint trimming (defined as MANGLE polygon, see http://space.mit.edu/~molly/mangle/ )\n 6. Downsample based on sky completeness (defined by region in MANGLE mask) \n 7. Downsample based on radial selection (input file) \n\nMost of these are optional based on the input configuration, with the sky \nprojection being the only mandatory step.\n\nMost functionality is encapsulated into \"libraries\" that can be used \nindependently. The main program `make_survey.cpp` is really just an example \nglue code that uses all libraries.\n\nIf you use this code in research that results in publications, please cite the following paper: \n\n    White, M., Tinker, J., McBride, C.K., 2013, MNRAS, submitted.\n    \"Mock galaxy catalogs using the quick particle mesh method\"\n    http://arxiv.org/abs/1309.5532\n\n\nDEPENDENCIES \n------------\n\nThe `make_survey` code has minimal dependencies, requiring only the GNU \nScientific Library (GSL, see http://www.gnu.org/software/gsl/).\n\nMuch of the functionality is included in \"libraries\", but the source for these \nis included in the codebase (see the `lib/` subdirectory).\n\nThe `make_survey` code makes use of the following libraries (bundled):\n\n - slightly tweaked code from BoxRemap \n\t\thttp://mwhite.berkeley.edu/BoxRemap/\n - MANGLE functionality in a minimal (C-only) re-implementation\n\t  https://github.com/cmcbride/minimal_mangle\n - simple libs and check utilities\n\t  https://github.com/cmcbride/simple_lib\n\t\thttps://github.com/cmcbride/check_utils\n    \n\nIf this functionality is desired, there might be more updated versions at \nthose repositories.\n\nThe MANGLE functionality is based on a minimal re-implementation (C-only), so \nthere is '''no''' dependency on the original MANGLE codebase. The caveat to \nthis is that the polygon input is '''not''' flexible.  If the mangle input does \nnot conform to the limited versions this code reads, we advise you to use the \noriginal MANGLE tools to convert to an accepted format.\n\n\nCOMPILATION\n-----------\n\nEdit the Makefile to change the compiler and compilation flags. Various \nutilities require both C++ and C compilers. The GSL libraries will be \nautomatically detected if the `gsl-config` program is in the default path.\n\nOnce the source is downloaded, and GSL is available, one can use GNU make to \nbuild the code with one of the following:\n\n    % make        # build make_survey main program \n    % make tools  # build additional useful utilities included in source \n    % make all    # what do you think? \n\n\nUSAGE\n-----\n\n    ./make_survey  CONFIG_FILE  MOCK_IN  RDZW_OUT\n\n `CONFIG_FILE`: Defines most input variables, files, and steps. See `examples/dr10_ngc.commented.param` in the source for keyword descriptions.\n\n `MOCK_IN`: ASCII input mock file: one object per line with the first 6 columns being positions (3) and velocities (3).\n    Requires at least 3 columns of input (redshift space output requires at least 6 columns).\n\t\t\n `RDZW_OUT`: ASCII output mock with in 4 columns: `RA DEC REDSHIFT COMP` \n    `COMP` is the sky completeness defined in the input MANGLE mask file (as the weight) \n\nThe general idea is that the config file is written for one general mapping \n(i.e. one set of mocks), and the other two command line arguments can be \nadjusted to easily iterate over many similar realizations.  This allows one to \neasily process a large number of input files using one defining parameter file. \n\nThe `make_survey` code is written to be relatively efficient. It reads the \ninput catalog line-by-line (one object at a time), processes each object \nthrough all required steps, and outputs any object that makes all cuts before \nmoving on to the next. This means the whole input catalog is ''never'' fully \nread into memory, nor is the output stored in memory.  Processing speed depends \non the the required steps (specified in the configuration file) and input \nfiles. Overall it should be sufficiently fast so that the runtime should not \nrequire any significant computing resources. One of the longest computational \ncosts is the MANGLE mask search, and the code does include a pixelized search \n(only the simple scheme), which can be a dramatic speed-up (and requires a \npixelized input MANGLE mask). \n\nFor simplicity, ASCII file input and output is currently implemented. If IO \nbecomes an issue, the main program (`make_survey.cpp`) can be modified to read \nand write native binary formats. This will both reduce the size of the files \nand speed program access.\n\n\nCONFIGURATION\n-------------\n\nThere is a commented parameter file which documents the available keywords:\n`examples/dr10_ngc.commented.param` .\n\nMost of these should be relatively easy to understand.\n\nProbably the most confusing configuration options are the remap / translate / \nrotate trio.  There is a non-trivial relation between choosing these values and \nother input such as the simulation volume, the mock survey geometry, mock \nsurvey depth, and conventions of the sky projection.  There is one additional \noption worth mentioning in this context: `pre-rotate`, but it is independent of \nthe others. \n\n `pre-rotate`:\n    3-element list of integer values of 90 degree rotations around each X, Y, Z-axis of the centered simulation box. \n    (i.e. 2,0,0 = 180 degree rotation around a centered X-axis).  \n    This is applied ''before'' remapping, and allows different projections of the box.\n\n `remap`:\n    9-element matrix specifying how the simulation box is remapped into a cuboid.  \n    See the http://mwhite.berkeley.edu/BoxRemap/ BoxRemap documentation for full description, \n    and the included `examples/remap.list7.trim.txt` file cached from their genremap utility.\n\n `translate`:\n    3-element translation of X,Y,Z coordinates, applied after remapping but before rotation.\n\n `rotate`::\n    3-element list of angles (in degrees) to rotate around the ''remapped'' and ''translated'' X-, Y-, and Z-axis (in that order).\n\nThe sky projection assumes a convention (chosen to match some legacy code), which is defined in \n\t`lib/coord_transforms.c`\n\nPicking the best remap / translate / rotate configuration can be a tricky step, and is unlikely to \nhave a unique solution.\n\n\nADDITIONAL TOOLS\n----------------\n\nA number of additional utilities are included in the source. In general, \nrunning the command without any arguments will output a USAGE statement. \n\nBrief descriptions of the currently included utilities: \n\n `check_survey`:\n    Test the `make_survey` input parameter file to see if an INPUT ra/dec/redshift is correctly bounded by the remap / translate / rotate transformation.\n    This tool is intended to help choose input parameters for make_survey. \n\n `mply_area`:\n    Calculate the area in a MANGLE polygon file, optionally trimming by a minimum weight.\n\n `mply_polyid`:\n    Find the POLYID of a MANGLE polygon for an input RA_DEC_FILE.\n\n `mply_trim`:\n    Trim input RA_DEC_FILE based on MANGLE polygon. Can also be run in REVERSE_TRIM mode to process veto masks. \n\n `randbox`:\n    Create a uniform distribution in X,Y,Z Cartesian coordinates to create randoms (can be fed into make_survey).\n\n `trim_by_index`:\n    Trim input FILE by index assuming the INDEX counts non-comments, non-empty lines in input FILE.\n    This can help trim the mock input based on the generated index file with the `make_index 1` configuration option. \n\n", 
  "id": 9086795
}