{
  "README.Rmd": "[![Travis-CI Build Status](https://travis-ci.org/thibautjombart/treescape.png?branch=master)](https://travis-ci.org/thibautjombart/treescape)\n\n\n```{r compileVignette, results=\"hide\",echo=FALSE,message=FALSE, fig.keep=\"none\"}\n## recompile vignette\nsetwd(\"vignettes\")\nknit(\"treescape.Rmd\")\nsetwd(\"../\")\n```\n\n```{r include, results=\"asis\", echo=FALSE, warning=FALSE}\n## read md of the vignette\nmdInput <- readLines(\"vignettes/treescape.md\")\n\n## remove vignette-specific headers\ntoRemove <- 1:10\nmdInput <- mdInput[-toRemove]\n\n## restore right path for figures\nmdInput <- gsub(\"figs/\",\"vignettes/figs/\",mdInput)\ncat(paste(mdInput,collapse=\"\\n\"))\n```\n\n", 
  "read_at": 1462544850, 
  "description": "Exploring tree diversity", 
  "README.md": "[![Travis-CI Build Status](https://travis-ci.org/thibautjombart/treescape.png?branch=master)](https://travis-ci.org/thibautjombart/treescape)\n\n\n\n\n\n*treescape*: exploration of landscapes of phylogenetic trees\n=================================================\n*treescape* implements new methods for the exploration and analysis of distributions of phylogenetic trees for a given set of taxa.\n\n\nInstalling *treescape*\n-------------\nTo install the development version from github:\n\n```r\nlibrary(devtools)\ninstall_github(\"thibautjombart/treescape\")\n```\n\nThe stable version can be installed from CRAN using:\n\n```r\ninstall.packages(\"treescape\")\n```\n\nThen, to load the package, use:\n\n```r\nlibrary(\"treescape\")\n```\n\n\nContent overview\n-------------\nThe main functions implemented in *treescape* are:\n* __`treescape`__: explore landscapes of phylogenetic trees\n* __`treescapeServer`__: open up an application in a web browser for an interactive exploration of the diversity in a set of trees\n* __`findGroves`__: identify clusters of similar trees\n* __`plotGroves`__: scatterplot of groups of trees, and __`plotGrovesD3`__ which enables interactive plotting based on d3.js\n* __`medTree`__: find geometric median tree(s) to summarise a group of trees\n\nOther functions are central to the computations of distances between trees:\n* __`treeVec`__: characterise a tree by a vector\n* __`treeDist`__: find the distance between two tree vectors\n* __`multiDist`__: find the pairwise distances of a list of trees\n* __`refTreeDist`__: find the distances of a list of trees from a reference tree\n\n\nDistributed datasets include:\n* __`woodmiceTrees`__: illustrative set of 201 trees built using the neighbour-joining and bootstrapping example from the *woodmice* dataset in the *ape* documentation.\n* __`DengueTrees`__: 500 trees sampled from a BEAST posterior set of trees from Drummond, A. J., and Rambaut, A. (2007) BEAST: Bayesian evolutionary analysis by sampling trees.\n\n\n\nExploring trees with *treescape*\n--------------\n\nWe first load *treescape*, and the packages required for graphics:\n\n```r\nlibrary(\"treescape\")\nlibrary(\"ade4\")\nlibrary(\"adegenet\")\nlibrary(\"adegraphics\")\nlibrary(\"ggplot2\")\n```\n\nThe function `treescape` defines typologies of phylogenetic trees using a two-step approach:\n\n1. perform pairwise comparisons of trees using various (Euclidean) metrics; by default, the comparison uses the Kendall and Colijn metric (Kendall & Colijn, 2015) which is described in more detail below; other metrics rely on tips distances implemented in *adephylo* (Jombart *et al.* 2010).\n\n2. use Metric Multidimensional Scaling (MDS, aka Principal Coordinates Analysis, PCoA) to summarise pairwise distances between the trees as well as possible into a few dimensions; the output of the MDS is typically visualised using scatterplots of the first few Principal Components (PCs); this step relies on the PCoA implemented in *ade4* (Dray & Dufour 2007).\n\nThe function `treescape` performs both tasks, returning both the matrix of pairwise tree comparisons (`$D`), and the PCoA (`$pco`).\nThis can be illustrated using randomly generated trees:\n\n```r\n## generate list of trees\nset.seed(1)\nx <- rmtree(10, 20)\nnames(x) <- paste(\"tree\", 1:10, sep = \"\")\n\n## use treescape\nres <- treescape(x, nf=3)\nnames(res)\n```\n\n```\n## [1] \"D\"   \"pco\"\n```\n\n```r\nres\n```\n\n```\n## $D\n##        tree1 tree2 tree3 tree4 tree5 tree6 tree7 tree8 tree9\n## tree2  26.00                                                \n## tree3  31.06 26.74                                          \n## tree4  42.85 42.12 44.44                                    \n## tree5  30.66 27.71 27.37 44.79                              \n## tree6  36.50 31.18 30.18 41.81 31.59                        \n## tree7  34.64 28.71 29.48 40.35 31.11 32.37                  \n## tree8  28.97 26.29 24.45 43.74 23.47 30.41 29.00            \n## tree9  29.63 27.42 27.48 45.61 26.31 30.89 29.77 24.60      \n## tree10 34.87 30.00 29.44 44.97 34.06 31.05 34.41 31.54 32.59\n## \n## $pco\n## Duality diagramm\n## class: pco dudi\n## $call: dudi.pco(d = D, scannf = is.null(nf), nf = nf)\n## \n## $nf: 3 axis-components saved\n## $rank: 9\n## eigen values: 142.1 76.52 62.69 49.88 41.07 ...\n##   vector length mode    content       \n## 1 $cw    9      numeric column weights\n## 2 $lw    10     numeric row weights   \n## 3 $eig   9      numeric eigen values  \n## \n##   data.frame nrow ncol content             \n## 1 $tab       10   9    modified array      \n## 2 $li        10   3    row coordinates     \n## 3 $l1        10   3    row normed scores   \n## 4 $co        9    3    column coordinates  \n## 5 $c1        9    3    column normed scores\n## other elements: NULL\n```\n\nPairwise distances can be visualised using *adegraphics*:\n\n```r\n## table.image\ntable.image(res$D, nclass=30)\n```\n\n![plot of chunk distances](vignettes/figs/distances-1.png)\n\n```r\n## table.value with some customization\ntable.value(res$D, nclass=5, method=\"color\", \n            symbol=\"circle\", col=redpal(5))\n```\n\n![plot of chunk distances](vignettes/figs/distances-2.png)\n\nThe best representation of these distances in a 2-dimensional space is given by the first 2 PCs of the MDS.\nThese can be visualised using *adegraphics*'s function `scatter`:\n\n```r\nscatter(res$pco)\n```\n\n![plot of chunk treescapescatter](vignettes/figs/treescapescatter-1.png)\n\nAlternatively, the function `plotGroves` can be used:\n\n```r\nplotGroves(res$pco, lab.show=TRUE, lab.cex=1.5)\n```\n\n![plot of chunk plotgroves](vignettes/figs/plotgroves-1.png)\n\nThe functionality of `treecsape` can be further illustrated using *ape*'s dataset *woodmouse*, from which we built the 201 trees supplied in `woodmiceTrees` using the neighbour-joining and bootstrapping example from the *ape* documentation. \n\n```r\ndata(woodmiceTrees)\nwm.res <- treescape(woodmiceTrees,nf=3)\n\n## this is the PCoA / MDS:\nwm.res$pco\n```\n\n```\n## Duality diagramm\n## class: pco dudi\n## $call: dudi.pco(d = D, scannf = is.null(nf), nf = nf)\n## \n## $nf: 3 axis-components saved\n## $rank: 54\n## eigen values: 32.69 24.41 6.952 6.348 4.363 ...\n##   vector length mode    content       \n## 1 $cw    54     numeric column weights\n## 2 $lw    201    numeric row weights   \n## 3 $eig   54     numeric eigen values  \n## \n##   data.frame nrow ncol content             \n## 1 $tab       201  54   modified array      \n## 2 $li        201  3    row coordinates     \n## 3 $l1        201  3    row normed scores   \n## 4 $co        54   3    column coordinates  \n## 5 $c1        54   3    column normed scores\n## other elements: NULL\n```\n\n```r\n## PCs are stored in:\nhead(wm.res$pco$li)\n```\n\n```\n##         A1     A2      A3\n## 1  -0.9949 -1.363 -0.7918\n## 2  -0.6137 -1.014 -0.6798\n## 3   2.6667  4.219 -2.9293\n## 4 -13.6081  1.854  1.0947\n## 5   2.1980  4.176 -3.1960\n## 6   3.6013  4.865  2.9853\n```\n\n```r\n## plot results\nplotGroves(wm.res$pco, lab.show=TRUE, lab.optim=FALSE)\n```\n\n![plot of chunk woodmicePlots](vignettes/figs/woodmicePlots-1.png)\n\n```r\n## visualising density of points\ns.kde2d(wm.res$pco$li)\n```\n\n![plot of chunk woodmicePlots](vignettes/figs/woodmicePlots-2.png)\n\n```r\n## alternative visualisation\ns.density(wm.res$pco$li, col=redpal(100), bandwidth=3)\n```\n\n![plot of chunk woodmicePlots](vignettes/figs/woodmicePlots-3.png)\n\n```r\n## same, other palette\ns.density(wm.res$pco$li, col=rev(transp(spectral(100),.5)), bandwidth=3)\n```\n\n![plot of chunk woodmicePlots](vignettes/figs/woodmicePlots-4.png)\n\n```r\n## alternative using ggplot2\nwoodmiceplot <- ggplot(wm.res$pco$li, aes(x=A1, y=A2)) # create plot\nwoodmiceplot + geom_density2d(colour=\"gray80\") + # contour lines\ngeom_point(size=6, shape=1, colour=\"gray50\") + # grey edges\ngeom_point(size=6, alpha=0.2, colour=\"navy\") + # transparent blue points\nxlab(\"\") + ylab(\"\") + theme_bw(base_family=\"\") # remove axis labels and grey background\n```\n\n![plot of chunk woodmicePlots](vignettes/figs/woodmicePlots-5.png)\n\n\nNote that alternatively, the function `multiDist` simply performs the pairwise comparison of trees and outputs a distance matrix. \nThis function may be preferable for large datasets, and when principal co-ordinate analysis is not required. \nIt includes an option to save memory at the expense of computation time.\n\n\n\n\nIdentifying clusters of trees\n--------------\nOnce a typology of trees has been derived using the approach described above, one may want to formally identify clusters of similar trees.\nOne simple approach is:\n\n1. select a few first PCs of the MDS (retaining signal but getting rid of random noise)\n\n2. derive pairwise Euclidean distances between trees based on these PCs\n\n3. use hierarchical clustering to obtain a dendrogram of these trees\n\n4. cut the dendrogram to obtain clusters\n \nIn *treescape*, the function `findGroves` implements this approach, offering various clustering options (see `?findGroves`). Here we supply the function with our `treescape` output `wm.res` since we have already calculated it, but it is also possible to skip the steps above and directly supply `findGroves` with a multiPhylo list of trees.\n\n```r\nwm.groves <- findGroves(wm.res, nclust=6)\nnames(wm.groves)\n```\n\n```\n## [1] \"groups\"    \"treescape\"\n```\nNote that when the number of clusters (`nclust`) is not provided, the function will display a dendrogram and ask for a cut-off height. \n\nThe results can be plotted directly using `plotGroves` (see `?plotGroves` for options):\n\n```r\n## basic plot\nplotGroves(wm.groves)\n```\n\n![plot of chunk plotgroves2](vignettes/figs/plotgroves2-1.png)\n\n```r\n## alternative with inertia ellipses\nplotGroves(wm.groves, type=\"ellipse\")\n```\n\n![plot of chunk plotgroves2](vignettes/figs/plotgroves2-2.png)\n\n```r\n## plot axes 2-3\nplotGroves(wm.groves, xax=2, yax=3)\n```\n\n![plot of chunk plotgroves2](vignettes/figs/plotgroves2-3.png)\n\n```r\n## customize graphics\nplotGroves(wm.groves, bg=\"black\", col.pal=lightseasun, lab.show=TRUE, lab.col=\"white\", lab.cex=1.5)\n```\n\n![plot of chunk plotgroves3](vignettes/figs/plotgroves3-1.png)\n\n\n`treescapeServer`: a web application for *treescape*\n--------------\nThe functionalities of `treescape` are also available via a user-friendly web interface, running locally on the default web browser.\nIt can be started by simply typing `treescapeServer()`.\nThe interface allows you to import trees and run `treescape` to view and explore the tree space in 2 or 3 dimensions.\nIt is then straightforward to analyse the tree space by varying lambda, looking for clusters using `findGroves` and saving results in various formats.\nIndividual trees can be easily viewed including median trees per cluster, and collections of trees can be seen together using `densiTree` from the package `phangorn`.\nIt is fully documented in the *help* tab.\n\n![example of treescapeServer 3d](vignettes/figs/treescape3d.png) \n\n![example of treescapeServer tree](vignettes/figs/treescapeTree.png)\n\n![example of treescapeServer densiTree](vignettes/figs/treescapeDensiTree.png)\n\n\nFinding median trees\n--------------\n\nWhen a set of trees have very similar structures, it makes sense to summarize them into a single 'consensus' tree.\nIn `treescape`, this is achieved by finding the *median tree* for a set of trees according to the Kendall and Colijn metric.\nThat is, we find the tree which is closest to the centre of the set of trees in the tree landscape defined in `treescape`.\nThis procedure is implemented by the function **`medTree`**:\n\n```r\n## get first median tree\ntre <- medTree(woodmiceTrees)$trees[[1]]\n\n## plot tree\nplot(tre,type=\"cladogram\",edge.width=3, cex=0.8)\n```\n\n![plot of chunk woodmiceMedian](vignettes/figs/woodmiceMedian-1.png)\n\nHowever, a more complete and accurate summary of the data can be given by finding a summary tree from each cluster.\nThis is achieved using the `groups` argument of `medTree`:\n\n```r\n## find median trees for the 6 clusters identified earlier:\nres <- medTree(woodmiceTrees, wm.groves$groups)\n\n## there is one output per cluster\nnames(res)\n```\n\n```\n## [1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\n```\n\n```r\n## get the first median of each\nmed.trees <- lapply(res, function(e) ladderize(e$trees[[1]]))\n\n## plot trees\npar(mfrow=c(2,3))\nfor(i in 1:length(med.trees)) plot(med.trees[[i]], main=paste(\"cluster\",i),cex=1.5)\n```\n\n<img src=\"vignettes/figs/woodmiceCluster1-1.png\" title=\"plot of chunk woodmiceCluster1\" alt=\"plot of chunk woodmiceCluster1\" width=\"600px\" />\n\nThese trees exhibit a number of topological differences, e.g. in the placement of the **(1007S,1208S,0909S)** clade. \nPerforming this analysis enables the detection of distinct representative trees supported by data.\n\nNote that we supplied the function `medTree` with the multiPhylo list of trees. A more computationally efficient process (at the expense of using more memory) is to use the option `return.tree.vectors` in the initial `treescape` call, and then supply these vectors directly to `medTree`.\nIn this case, the tree indices are returned by `medTree` but the trees are not (since they were not supplied).\n\nEmphasising the placement of certain tips or clades\n--------------\n\nIn some analyses it may be informative to emphasise the placement of particular tips or clades within a set of trees. This can be particularly useful in large trees where the study is focused on a smaller clade. Priority can be given to a list of tips using the argument `emphasise.tips`, whose corresponding values in the vector comparison will be given a weight of `emphasise.weight` times the others (the default is 2, i.e. twice the weight).\n\nFor example, if we wanted to emphasise where the woodmice trees agree and disagree on the placement of the **(1007S,1208S,0909S)** clade, we can simply emphasise that clade as follows: \n\n```r\nwm3.res <- treescape(woodmiceTrees,nf=2,emphasise.tips=c(\"No1007S\",\"No1208S\",\"No0909S\"),emphasise.weight=3)\n\n## plot results\nplotGroves(wm3.res$pco, lab.show=TRUE, lab.optim=FALSE)\n```\n\n![plot of chunk woodmice-tip-emphasis](vignettes/figs/woodmice-tip-emphasis-1.png)\n\nIt can be seen from the scale of the plot and the density of clustering that the trees are now separated into more distinct clusters.\n\n```r\nwm3.groves <- findGroves(woodmiceTrees,nf=3,nclust=6,emphasise.tips=c(\"No1007S\",\"No1208S\",\"No0909S\"),emphasise.weight=3)\nplotGroves(wm3.groves, type=\"ellipse\")\n```\n\n![plot of chunk findgroves-with-emphasis](vignettes/figs/findgroves-with-emphasis-1.png)\n\nConversely, where the structure of a particular clade is not of interest (for example, lineages within an outgroup which was only included for rooting purposes), those tips can be given a weight less than 1 so as to give them less emphasis in the comparison. We note that although it is possible to give tips a weighting of 0, we advise caution with this as the underlying function will no longer be guaranteed to be a metric. That is, a distance of 0 between two trees will no longer necessarily imply that the trees are identical. In most cases it would be wiser to assign a very small weighting to tips which are not of interest.\n\nMethod: characterising a tree by a vector\n--------------\nKendall and Colijn proposed a [metric](http://arxiv.org/abs/1507.05211) for comparing rooted phylogenetic trees. Each tree is characterised by a vector which notes the placement of the most recent common ancestor (MRCA) of each pair of tips. Specifically, it records the distance between the MRCA of a pair of tips *(i,j)* and the root in two ways: the number of edges *m(i,j)*, and the path length *M(i,j)*. It also records the length *p(i)* of each 'pendant' edge between a tip *i* and its immediate ancestor. This procedure results in two vectors for a tree *T*:\n\n*m(T) = (m(1,2), m(1,3),...,m(k-1,k),1,...,1)*\n\nand\n\n*M(T) = (M(1,2), M(1,3),...,M(k-1,k),p(1),...,p(k)).*\n\nIn *m(T)* we record the pendant lengths as 1, as each tip is 1 step from its immediate ancestor. We combine *m* and *M* with a parameter lambda between zero and one to weight the contribution of branch lengths, characterising each tree with a vector \n\n*v{lambda}(T) = (1-lambda)m(T) + lambda M(T)*.\n\nThis is implemented as the function __`treeVec`__. For example,\n\n```r\n## generate a random tree:\ntree <- rtree(6)\n## topological vector of mrca distances from root:\ntreeVec(tree)\n```\n\n```\n##  [1] 1 0 2 0 3 0 1 0 1 0 1 0 0 2 0 1 1 1 1 1 1\n```\n\n```r\n## vector of mrca distances from root when lambda=0.5:\ntreeVec(tree,0.5)\n```\n\n```\n##  [1] 0.7296 0.0000 1.6272 0.0000 2.3518 0.0000 0.7296 0.0000 0.7296 0.0000\n## [11] 0.5971 0.0000 0.0000 1.6272 0.0000 0.8511 0.8400 0.5533 0.5377 0.8740\n## [21] 0.6391\n```\n\n```r\n## vector of mrca distances as a function of lambda:\nvecAsFunction <- treeVec(tree,return.lambda.function=TRUE)\n## evaluate the vector at lambda=0.5:\nvecAsFunction(0.5)\n```\n\n```\n##  [1] 0.7296 0.0000 1.6272 0.0000 2.3518 0.0000 0.7296 0.0000 0.7296 0.0000\n## [11] 0.5971 0.0000 0.0000 1.6272 0.0000 0.8511 0.8400 0.5533 0.5377 0.8740\n## [21] 0.6391\n```\n\nThe metric -- the distance between two trees -- is the Euclidean distance between these vectors:\n\n*d{lambda}(Ta, Tb) = || v{lambda}(Ta) - v{lambda}(Tb) ||.*\n\n\nThis can be found using __`treeDist`__:\n\n```r\n## generate random trees\ntree_a <- rtree(6)\ntree_b <- rtree(6)\n\n## topological (lambda=0) distance:\ntreeDist(tree_a,tree_b) \n```\n\n```\n## [1] 5.099\n```\n\n```r\n## branch-length focused (lambda=1) distance:\ntreeDist(tree_a,tree_b,1)\n```\n\n```\n## [1] 3.057\n```\n\n\n\nReferences\n--------------\n* Dray S & Dufour AB (2007): The ade4 package: implementing the duality diagram for ecologists. Journal of Statistical Software 22(4): 1-20.\n* Jombart R, Balloux F & Dray S (2010) adephylo: new tools for investigating the phylogenetic signal in biological traits. Bioinformatics 26: 1907-1909. Doi: 10.1093/bioinformatics/btq292\n* Kendall M & Colijn C (Preprint 2015) A tree metric using structure and length to capture distinct phylogenetic signals. arXiv 1507.05211\n\n\n\n\nAuthors / Contributors\n--------------\nAuthors:\n* [Thibaut Jombart](https://sites.google.com/site/thibautjombart/)\n* [Michelle Kendall](http://www.imperial.ac.uk/people/m.kendall)\n\nContributors:\n* [Jacob Almagro-Garcia](http://www.well.ox.ac.uk/jacob-almagro-garcia)\n* [Caroline Colijn](http://www.imperial.ac.uk/people/c.colijn)\n\nMaintainer of the CRAN version:\n* [Michelle Kendall](http://www.imperial.ac.uk/people/m.kendall)\n\n", 
  "id": 31616616
}