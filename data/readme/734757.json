{
  "README": "SUMMARY\n\n  This library implements a general MCMC sampler and associated\n  libraries, including\n\n  * The methods described in Farr and Mandel (2011)\n    (http://arxiv.org/abs/1104.0984 ) for interpolating jump proposals\n    in a reversible jump MCMC.\n\n  * The evidence calculation methods from Weinberg's paper on\n    Computing the Bayesian Factor from a Markov chain Monte Carlo\n    Simulation of the Posterior Distribution\n    (http://arxiv.org/abs/0911.1777 ).\n\n  Also in the library is a simple nested-sampling implementation (see\n  Skilling, J. Nested Sampling.  AIP Conference Proceedings, vol. 735,\n  pp. 395--405, 2004.). \n\nBUILDING \n \n * To build the library, use ocamlbuild:\n\n   ocamlbuild mcmc.cma mcmc.cmxa\n\n * To build the code documentation:\n\n   ocamlbuild mcmc.docdir/index.html\n\n * To build all of the above at once, use \n\n   ocamlbuild all.otarget\n\n * To build the test suite, you will require oUnit\n   (http://ounit.forge.ocamlcore.org/ ).  Edit the myocamlbuild.ml\n   file to point to your oUnit installation, and then issue\n\n   ocamlbuild run_tests.{native,byte}\n\n   If you encounter compilation errors, then you may have to modify\n   the definition of the cmp_float function to:\n\n   (* Compare floats up to a given relative error *)\n   let cmp_float ?(epsabs = eps) ?(epsrel = eps) a b =\n     let dx = abs_float (a -. b) and \n         avg = 0.5*.((abs_float a) +. (abs_float b)) in \n     dx <= epsabs +. epsrel*.avg\n\n * Various useful example programs can be found in the bin/\n   subdirectory; you can build them with\n\n   ocamlbuild <program_name>.{native,byte}\n\n * To clean the code, issue the command \n\n   ocamlbuild -clean\n\nLICENSE\n\n  This library is released under the GPL version 3; see the LICENSE\n  file for more information.", 
  "read_at": 1462547482, 
  "description": "OCaml Markov Chain Monte Carlo", 
  "id": 734757
}