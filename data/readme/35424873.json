{
  "read_at": 1462558885, 
  "description": "Eazymp", 
  "README.md": "#EazyMP: A lazy way to make your Python code in parallel\n\n-----\n\n## Installation \n\n\tpython setup.py install    \n\n## Sample Use Case\n\nYou can make your for-loop run in parallel just by adding \"#pragma omp parallel for\" near by the for-loop statement, just like what is done by openmp in c language. \n\nBesides, you need to annotated the outside variables which will be assigned value in the for-loop with annotation \"#pragma shared dict/list/number\".\n\n### Example Code\n\nFor a code is running mandelbrot as follows: \n\n\tdef run_mandelbrot(size_x, size_y):\n\t\tdata = {} \n\t\t\n\t\tfor row in range(size_x):  \n\t\t\tfor col in range(size_y):\n\t\t\t\ttmp = mandelbrot(row, col, size_x, size_y)\n\t\t\t\tdata[(row, col)] = (tmp[0], tmp[1], tmp[2])\n\t\t\n\t\treturn data\n\t\nAll you need is just adding \"#pragma omp parallel for\" near the for loop, and attaching \"#pragma shared dict reduce\" to the variable \"data\" (because it is outside of for-loop, and it will be assigned value in the loop)\n\n\tdef run_mandelbrot(size_x, size_y):\n\t\tdata = {} #pragma shared dict reduce\n\n\t\tfor row in range(size_x):  #pragma omp parallel for\n\t\t\tfor col in range(size_y):\n\t\t\t\ttmp = mandelbrot(row, col, size_x, size_y)\n\t\t\t\tdata[(row, col)] = (tmp[0], tmp[1], tmp[2])\n\t\t\t\t\n\t\treturn data\n\n## Dependency \n\nEazyMP used \"pathos\" package developed by Michael McKerns and his group members. To get more details:\n\n    M.M. McKerns, L. Strand, T. Sullivan, A. Fang, M.A.G. Aivazis,\n    \"Building a framework for predictive science\", Proceedings of\n    the 10th Python in Science Conference, 2011;\n    http://arxiv.org/pdf/1202.1056\n\n    Michael McKerns and Michael Aivazis,\n    \"pathos: a framework for heterogeneous computing\", 2010- ;\n    http://trac.mystic.cacr.caltech.edu/project/pathos\n", 
  "id": 35424873
}