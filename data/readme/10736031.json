{
  "read_at": 1462551090, 
  "description": "A minimalistic framework for fast object detection (with a pre-trained face detector)", 
  "README.md": "# Pixel Intensity Comparison-based Object detection (pico)\n\nThose of you who would like to quickly see what this repository is all about, go to the folder **rnt/sample**.\nThere you will find a sample program which will detect faces in a video stream supplied from the default webcam attached to the computer.\nAlso, you can check out a demo video at <http://www.youtube.com/watch?v=1lXfm-PZz0Q>.\n\nIn general, detection can be described as a task of finding the positions and scales of all objects in an image that belong to a given appearance class.\nFor example, these objects could be cars, pedestrians or human faces.\nAutomatic object detection has a broad range of applications.\nSome include biometrics, driver assistance, visual surveillance and smart human-machine interfaces.\nThese applications create a strong motivation for the development of fast and accurate object detection methods.\n\nThe **pico** framework is a modifcation of the standard Viola-Jones object detection method.\nThe basic idea is to scan the image with a cascade of binary classifers at all reasonable positions and scales.\nAn image region is classifed as an object of interest if it successfully passes all the members of the cascade.\nEach binary classifier consists of an ensemble of decision trees with pixel intensity comparisons as binary tests in their internal nodes.\nThis enables the detector to process image regions at very high speed.\nThe details are given in <http://arxiv.org/abs/1305.4537>.\n\nSome highlights of **pico** are:\n\n* High processing speed.\n* There is no need for image preprocessing prior to detection.\n* There is no need for the computation of integral images, image pyramid, HOG pyramid or any other similar data structure.\n* All binary tests in internal nodes of the trees are based on the same feature type (not the case in the V-J framework).\n* The method can easily be modified for fast detection of in-plane rotated objects.\n\n## Detecting objects in images and videos\n\nThe folder **rnt/** contains all the needed resources to perform object detection in images and video streams with pre-trained classification cascades.\nSpecifically, a sample application that performs face detection can be found in the folder **rnt/samples/**.\n\nNote that the library also enables the detection of rotated objects without the need of image resampling or classification cascade retraining.\nThis is achieved by rotating the binary tests in internal tree nodes, as described in the paper.\n\n### Embedding the runtime within your application\n\nTo use the runtime in your own application, you have to:\n\n* Include a prototype of `find_objects(...)` in your code (for example, by adding `#include picornt.h`)\n* Compile `picornt.c` with your code\n* Load/include a classification cascade generated with `picolrn` (e.g., `rnt/cascades/facefinder`)\n* Invoke `find_objects(...)` with appropriate parameters\n\nNotice that there are no specific library dependencies, i.e., the code can be compiled out-of-the-box with a standard C compiler.\n\nTo get a feel for how the library works, we recommend that you look at `sample.c` as is was specifically written to be used as documentation.\n\n## Learning custom object detectors\n\nThe program `picolrn.c` (available in the folder **gen/**) enables you to learn your own (custom) object detectors.\nThe training data has to be provided in a specific format.\nThe details are printed to the standard output when `picolrn` is invoked without parameters.\nIt is often convenient to pipe this information into a text file:\n\n    $ ./picolrn > howto.txt\n\nA tutorial that guides you through the process of learning a face detector can be found in the folder **gen/sample/**.\n\n## Citation\n\nIf you use the provided code/binaries for your work, please cite the following paper:\n> N. Markus, M. Frljak, I. S. Pandzic, J. Ahlberg and R. Forchheimer, \"Object Detection with Pixel Intensity Comparisons Organized in Decision Trees\", <http://arxiv.org/abs/1305.4537>\n\n## Contact\n\nFor any additional information contact me at <nenad.markus@fer.hr>.\n\nCopyright (c) 2013, Nenad Markus.\nAll rights reserved.\n", 
  "id": 10736031
}