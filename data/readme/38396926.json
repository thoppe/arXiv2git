{
  "read_at": 1462546093, 
  "description": "An autoencoder to calculate word embeddings as mentioned in Lebret/Collobert paper 2015", 
  "README.md": "# Tyrion - Word Embedding Autoencoder\n\nAn autoencoder to calculate word embeddings as mentioned in Lebret/Collobert paper 2015\n\nRuns the model mentined in http://arxiv.org/abs/1412.4930 on set of text files stored in directory on GPU\n\nWith GPU support code is 5-8x faster than it's CPU version. \n\nRequirements:\n\n1. Numpy http://www.numpy.org/\n\n2. Theano http://deeplearning.net/software/theano/install.html\n\n3. Scipy http://www.scipy.org/install.html\n\n# Installation \n\nTo install the package follow the instructions mentioned below \n\n# Install from source \n\nTo install the package from source run setup.py file, it will install and include necessary files in system python directory\n\n$ python setup.py install \n\n# Installtion from pip\n\nTyrion can also be install from pip. Run following command from console\n\n$ pip install tyrion\n\n# Training\n\nTo train the model on bunch of text files run following commnands in python console:\n\nThere is a sample data folder in project's folder, that can be used for sanity checking\n\n\\>> from tyrion import train\n\n\\>> train.train('/path/to/text/corpus')\n\n# Setting hyperparameters\n\nDifferent hyperparameters are set by default in training module, to set hyperparamters manually use following command while training\n\\>> from tyrion import train\n\n\\>> train.train('/path/to/text/corpus', contextSize=size, min_count=count, newdims=dims, ntimes=ntimes, lr=learningrate)\n\nArguments explained:\n\n1. ContextSize is the contex window size used for constructing coocurence matrix\n\n2. min_count is minimum threshold frequency for words, removes garbage words below this frequency\n\n3. newdims is the dimension of embedding desired.\n\n4. ntimes is number of epochs for training model\n\n5. lr is the learning rate to drive optimization routine\n\n# Utility functions\n\nTo generate word embeddings and to find closest words to a word, use utils module in tyrion. Ex.\n\n\\>> from tyrion import utils\n\n\\>> embedding = utils.gen_embedding('word')\n\n\\>> close_words = utils.closest_words('word',n=10)\n\n\n# Future work\n\n1. Implement a closely related paper on phrase embeddings (http://arxiv.org/abs/1506.05703) (ICML 2015)\n2. Try implementing AdaGrad ( for optimization )\n", 
  "id": 38396926
}