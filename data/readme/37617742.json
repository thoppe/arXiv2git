{
  "read_at": 1462549558, 
  "description": "A simple standalone Bayes limit calculator", 
  "README.md": "# limits\nA simple standalone (multi-Poisson, multi-Poisson-gamma)  Bayes limit calculator\n\nTo build do\n\tmake\n  \nTo setup do\n\tsource setup.sh\n\tor\n\tsource setup.csh (for non-bash shells)\n\n### Example 1\nUsage:\n```\npython example1.py N eff deff bkg dbkg\n\n     N         observed count\n     eff       signal efficiency * luminosity estimate\n     deff     uncertainty in signal efficiency estimate\n     bkg     background estimate\n     dbkg   uncertainty in background estimate\n  ```\nTo test do\n```\n   cd examples\n   python example1.py 1 1 0 0 0\n   ```\n  \nOutput:\n```\n   N     =     1\n   eff   =     1.0000, 0.0000 \n   bkg =     0.0000, 0.0000\n\n   create inputs.dat\n   create model\n   compute limit\n   => limit:    3.9 fb (90%CL)\n      time:     0.059s\n   ```\n\n\n### Example 2\nTo test do\n```\n   cd examples\n   python example2.py\n   ```\nThis will run blimit.py (see below) on onebin.dat and threebin.dat.\nOutput:\n```\n\t==> create model from onebin.dat <==\nWald\t\trange: [     0.0,     4.0]\n=> central interval [ 0.62,  1.22] (68.3%) width =  0.60\n=> limit:  1.45 fb (95%CL)\n   time:     0.024s\n\nBayes\t\trange: [     0.0,     4.0]\n=> central interval [ 0.66,  1.27] (68.3%) width =  0.61\n=> limit:  1.51 fb (95%CL)\n   time:     0.051s\n\n\t==> create model from threebin.dat <==\nWald\t\trange: [     0.0,     4.0]\n=> central interval [ 0.61,  1.20] (68.3%) width =  0.59\n=> limit:  1.43 fb (95%CL)\n   time:     0.024s\n\nBayes\t\trange: [     0.0,     4.0]\n=> central interval [ 0.65,  1.26] (68.3%) width =  0.60\n=> limit:  1.49 fb (95%CL)\n   time:     0.051s\n```\n\n### Details\nGiven observed counts, effective luminosities (efficiency*luminosity)\nor predicted signal,\nand backgrounds, specified in an file blimit.py  computes\nBayesian upper limits on the signal cross section (as well a\nfrequentist limit based on an asymptotic formula that makes use of the\nWald approximation (see \"Asymptotic formulae for likelihood-based\ntests of new physics\", G. Cowan, K. Cranmer, E. Gross, and O. Vitells,\narXiv:1007.1727v3).\n\nUsage:\n```\n    blimit.py input-file  [xmin=0] [xmax=4] [CL=0.95]\n```\n\t\nThe format of the input-file is:\n```\n\tbin1      bin2     ... \n    count1  count2 ...\n    efl1       efl2      ...\n    bkg1     bkg2    ...\n\n    The first line is a header. Commented lines begin with a \"#\"\n    \n    Each column corresponds to a bin, while each pair of lines after\n    the counts contains random samplings of the effective luminosities\n\t(or predicted signals) and backgrounds. \n\n    This technique provides a simple, scalable, yet completely\n    general, way to represent systematic uncertainty in predictions,\n    without the need to assume how the predictions are correlated\n\tacross signals, backgrounds, and bins.\n     \n     The expected count (per bin) = sigma * efl + bkg\n\t or mu * signal + bkg\n\n\tLimits are set on the parameter \"sigma\" or the signal strength \"mu\".\n```\n", 
  "id": 37617742
}