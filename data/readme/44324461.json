{
  "id": 44324461, 
  "read_at": 1462555998, 
  "README.rst": "====\nPDFx\n====\n\n.. image:: https://badge.fury.io/py/pdfx.svg\n   :target: https://pypi.python.org/pypi/pdfx\n\n.. image:: https://travis-ci.org/metachris/pdfx.svg?branch=master\n   :target: https://travis-ci.org/metachris/pdfx\n\n.. image:: https://img.shields.io/badge/license-Apache-blue.svg\n   :target: https://github.com/metachris/pdfx/blob/master/LICENSE\n\n\nIntroduction\n============\n\nExtract references (pdf, url, doi, arxiv) and metadata from a PDF. Optionally download all referenced PDFs and check for broken links.\n\n**Features**\n\n* Extract references and metadata from a given PDF\n* Detects pdf, url, arxiv and doi references\n* **Fast, parallel download of all referenced PDFs**\n* **Find broken hyperlinks** (using the ``-c`` flag) (more_)\n* Output as text or JSON (using the ``-j`` flag)\n* Extract the PDF text (using the ``--text`` flag)\n* Use as command-line tool or Python package\n* Compatible with Python 2 and 3\n* Works with local and online pdfs\n\n.. _more: https://www.metachris.com/2016/03/find-broken-hyperlinks-in-a-pdf-document-with-pdfx/\n\n\nGetting Started\n===============\n\nGrab a copy of the code with ``easy_install`` or ``pip``, and run it::\n\n    $ sudo easy_install -U pdfx\n    ...\n    $ pdfx <pdf-file-or-url>\n\nRun ``pdfx -h`` to see the help output::\n\n    $ pdfx -h\n    usage: pdfx [-h] [-d OUTPUT_DIRECTORY] [-c] [-j] [-v] [-t] [-o OUTPUT_FILE]\n                [--version]\n                pdf\n\n    Extract metadata and references from a PDF, and optionally download all\n    referenced PDFs. Visit https://www.metachris.com/pdfx for more information.\n\n    positional arguments:\n      pdf                   Filename or URL of a PDF file\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -d OUTPUT_DIRECTORY, --download-pdfs OUTPUT_DIRECTORY\n                            Download all referenced PDFs into specified directory\n      -c, --check-links     Check for broken links\n      -j, --json            Output infos as JSON (instead of plain text)\n      -v, --verbose         Print all references (instead of only PDFs)\n      -t, --text            Only extract text (no metadata or references)\n      -o OUTPUT_FILE, --output-file OUTPUT_FILE\n                            Output to specified file instead of console\n      --version             show program's version number and exit\n\n\nExamples\n========\n\nLets take a look at this paper: https://weakdh.org/imperfect-forward-secrecy.pdf::\n\n    $ pdfx https://weakdh.org/imperfect-forward-secrecy.pdf\n    Document infos:\n    - CreationDate = D:20150821110623-04'00'\n    - Creator = LaTeX with hyperref package\n    - ModDate = D:20150821110805-04'00'\n    - PTEX.Fullbanner = This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1\n    - Pages = 13\n    - Producer = pdfTeX-1.40.14\n    - Title = Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice\n    - Trapped = False\n    - dc = {'title': {'x-default': 'Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice'}, 'creator': [None], 'description': {'x-default': None}, 'format': 'application/pdf'}\n    - pdf = {'Keywords': None, 'Producer': 'pdfTeX-1.40.14', 'Trapped': 'False'}\n    - pdfx = {'PTEX.Fullbanner': 'This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1'}\n    - xap = {'CreateDate': '2015-08-21T11:06:23-04:00', 'ModifyDate': '2015-08-21T11:08:05-04:00', 'CreatorTool': 'LaTeX with hyperref package', 'MetadataDate': '2015-08-21T11:08:05-04:00'}\n    - xapmm = {'InstanceID': 'uuid:4e570f88-cd0f-4488-85ad-03f4435a4048', 'DocumentID': 'uuid:98988d37-b43d-4c1a-965b-988dfb2944b6'}\n\n    References: 36\n    - URL: 18\n    - PDF: 18\n\n    PDF References:\n    - http://www.spiegel.de/media/media-35533.pdf\n    - http://www.spiegel.de/media/media-35513.pdf\n    - http://www.spiegel.de/media/media-35509.pdf\n    - http://www.spiegel.de/media/media-35529.pdf\n    - http://www.spiegel.de/media/media-35527.pdf\n    - http://cr.yp.to/factorization/smoothparts-20040510.pdf\n    - http://www.spiegel.de/media/media-35517.pdf\n    - http://www.spiegel.de/media/media-35526.pdf\n    - http://www.spiegel.de/media/media-35519.pdf\n    - http://www.spiegel.de/media/media-35522.pdf\n    - http://cryptome.org/2013/08/spy-budget-fy13.pdf\n    - http://www.spiegel.de/media/media-35515.pdf\n    - http://www.spiegel.de/media/media-35514.pdf\n    - http://www.hyperelliptic.org/tanja/SHARCS/talks06/thorsten.pdf\n    - http://www.spiegel.de/media/media-35528.pdf\n    - http://www.spiegel.de/media/media-35671.pdf\n    - http://www.spiegel.de/media/media-35520.pdf\n    - http://www.spiegel.de/media/media-35551.pdf\n\nYou can use the ``-v`` flag to output all references instead of just the PDFs.\n\n**Download all referenced pdfs** with ``-d`` (for ``download-pdfs``) to the specified directory (eg. to ``/tmp/``)::\n\n    $ pdfx https://weakdh.org/imperfect-forward-secrecy.pdf -d /tmp/\n    ...\n\nTo **extract text**, you can use the ``-t`` flag::\n\n    # Extract text to console\n    $ pdfx https://weakdh.org/imperfect-forward-secrecy.pdf -t\n\n    # Extract text to file\n    $ pdfx https://weakdh.org/imperfect-forward-secrecy.pdf -t -o pdf-text.txt\n\nTo **check for broken links** use the ``-c`` flag::\n\n    $ pdfx https://weakdh.org/imperfect-forward-secrecy.pdf -c\n\n[Example (with video) of checking for broken links](https://www.metachris.com/2016/03/find-broken-hyperlinks-in-a-pdf-document-with-pdfx/).\n\n\nUsage as Python library\n=======================\n\n::\n\n    >>> import pdfx\n    >>> pdf = pdfx.PDFx(\"filename-or-url.pdf\")\n    >>> metadata = pdf.get_metadata()\n    >>> references_list = pdf.get_references()\n    >>> references_dict = pdf.get_references_as_dict()\n    >>> pdf.download_pdfs(\"target-directory\")\n\n\nVarious\n=======\n\n* Author: Chris Hager <chris@linuxuser.at>\n* Homepage: https://www.metachris.com/pdfx\n* License: Apache\n\nFeedback, ideas and pull requests are welcome!\n", 
  "description": "Extract references (pdf, url, doi, arxiv) and metadata from a PDF; optionally download all referenced PDFs"
}