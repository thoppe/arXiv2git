{
  "id": 6149317, 
  "read_at": 1462558202, 
  "README.rst": "===============================================\nPICO (Parameters for the Impatient Cosmologist)\n===============================================\n\nInstallation\n============\n\nTo install PICO, download and extract the archive, and from \nthe top folder run::\n\n    python setup.py build\n    python setup.py install [--user]\n\nor, if you have PIP installed, you can automatically download PICO\nand install it in one command with::\n\n    pip install pypico [--user] [--upgrade]\n    \n\n\nInstall notes\n-------------\n* If you don't have root access, the ``--user`` option installs\n  PICO in your home directly.\n* The ``--upgrade`` option forces the newest version to be installed. \n* ``easy_install`` does not currently work.\n\nRequirements\n------------\n* Python 2.7.X\n* NumPy (>=1.6.1)\n* SciPy (>=0.10.1)\n\n\nTroubleshooting\n===============\n\nTo submit bug reports please use `<https://github.com/marius311/pypico/issues>`_. \n\n    \n\nUsage\n=====   \n\nOnce you have PICO installed, to do anything you'll need some data files\nwhich actually contain interpolated data. You can find them on \nthe PICO website at `<https://sites.google.com/a/ucdavis.edu/pico/download>`_.\n\nAfter that, PICO is used from the Python shell. Typical usage\nstarts by loading a PICO data file::\n\n    >> import pypico\n    >> pico = pypico.load_pico(\"example_pico_file.dat\")  \n\nTo show accepted input parameters call::\n\n    >> pico.inputs()\n    \nand to show outputted quantities call::\n\n    >> pico.outputs()\n    \nFinally, to run PICO call::\n  \n    >> result = pico.get(outputs, **inputs)\n\nwhere ``outputs`` is a list of outputs you actually want (or leave it unspecified \nto calculate all outputs), and ``**inputs`` is a dictionary of parameter \nvalues with keys for each input returned above. The return value ``result`` \nis a dictionary with a key corresponding to each output you requested. \n    \nUsage Notes\n-----------\n\n* Each PICO datafile is trained on a particular region of parameter space, generally one\n  large enough to be relevant for typical analyses. If PICO is called for a set of \n  parameters outside this range, a ``CantUsePICO`` error will be raised, and you should\n  use CAMB instead. If you are running an MCMC chain, this can slow you down significantly \n  before the chain is burned in. To remedy this, set ``force=True`` to force PICO to return\n  results even outside its training region. The results won't be guaranteed to be accurate, \n  but will likely be good enough to get your chain to converge to the region where PICO is\n  accurate. \n\n* The PICO convention for multipole indexing is that an array entry ``arr[l]`` \n  corresponds to the l-th multiple. Since Python is 0-indexed, this means the \n  first entry in an array is the 0-th multiple. \n   \n* The specification ``pico.get(outputs, **inputs)`` means ``get`` can be called\n  in several ways, including::\n  \n    >> pico.get(param1=val1, params2=val2)\n    >> pico.get(**{'param1':val1, 'param2':val2})\n    >> pico.get(**dict(param1=val1, param2=val2))\n    >> pico.get(param1=val1, **{'param2':val2})\n    \n      \n* Certain data files may contain a set of example input values\n  which can be accessed with::\n  \n    >> pico.example_inputs()\n\n\n\nCalling PICO from C/C++/Fortran\n===============================\n\nPICO can be called from C/C++ and Fortran. \n\nC/C++ Interface\n---------------\n\nTo call PICO from C/C++, you should include the following two header files::\n\n    #include <python.h>\n    #include \"pico.h\"\n\nDocumentation for the functions defined in ``pico.h`` can be found in the\n``pico.pyx`` file.\n\nFortran Interface\n-----------------\n\nTo call PICO from Fortran, you should use the following module::\n\n    use fpico\n\nDocumentation for the functions in the fpico module can be found in the\n``fpico_interface.f90`` file. \n\n* Note that the Fortran interface is built on C, and to ensure integer/real byte-sizes\n  are the same between Fortran and C, independent of compiler, they are defined \n  by hand as ``fpreal`` and ``fpint`` in ``fpico_interface.f90`` and ``pico.pyx``. \n\n\nCompiling and Linking\n---------------------\n\nWhen you installed PICO, a static library ``libpico.a`` was created. To link \nyour code against this library, PICO provides an easy way to get \ninclude and link flags on your platform. To print out the necessary flags, call::\n    \n    python -c \"import pypico; print pypico.get_include()\"\n    python -c \"import pypico; print pypico.get_link()\"\n    \nYou should put these calls directly in your Makefile via::\n\n    $(shell python -c \"import pypico; print pypico.get_link()\")\n\n\nThe fortran interface file ``fpico_interface.f90`` should be recompiled each time\nalong side your program, as it must use the same Fortran compiler. The\nlocation of this file can be accessed from your Makefile via::\n\n    $(shell python -c \"import pypico; print pypico.get_folder()\")/fpico_interface.f90\n\n\n\nUsing PICO with CosmoMC\n=======================\n\nAs of Apr 2014, partial PICO support is built into CosmoMC. \nSee `<http://cosmologist.info/cosmomc/>`_ for instructions.\n\n\n\nUsing PICO in place of CAMB\n=======================================\n\nIf you have a code which currently calls ``CAMB_GetResults``, \nits easy to swap in ``PICO_GetResults`` which uses PICO instead\n(and falls back on the CAMB version for parameters ouside of the\nPICO training region).\n\nTo install the CAMB plugin:\n\n* Copy ``plugins/camb/pico_camb.f90`` to the folder containing your code\n* In your Makefile, make sure ``pico_camb.f90`` gets compiled and ``pico_camb.o`` gets included in your executable.\n* Add a call ``fpico_load(file)`` to load a PICO datafile.\n* Replace ``CAMB_GetResults`` with ``PICO_GetResults``\n* Add ``use pico_camb`` wherever you need ``PICO_GetResults``\n* Compile your code, making sure to use the correct include/link flags (see `Compiling and Linking`_).\n\n\nKnown Issues\n============\n\n* ``-fast`` with Intel Fortran does not work in some cases. \n\n\nAuthors\n=======\n\nPICO is written by Marius Millea (feel free to send questions/comments to mmillea@ucdavis.edu). \nThe CosmoMC plugin was largely written by Antony Lewis and Silvia Galli. \nPICO was originally created by Chad Fendt and Ben Wandelt (see `<http://arxiv.org/abs/0712.0194>`_) \n\n\n\n\n", 
  "description": "Quickly compute the CMB powerspectra and matter transfer functions."
}