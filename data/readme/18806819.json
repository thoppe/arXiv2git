{
  "id": 18806819, 
  "read_at": 1462550755, 
  "README.rst": "Montblanc\n=========\n\nA PyCUDA implementation of the Radio Interferometry Measurement\nEquation, and a foothill of Mount Exaflop.\n\nLicense\n-------\n\nMontblanc is licensed under the GNU GPL v2.0 License.\n\nRequirements\n------------\n\n-  PyCUDA 2016.1\n-  A Kepler NVIDIA GPU for more recent functionality.\n\nInstallation\n------------\n\nCertain pre-requisites must be installed, prior to calling the\n``setup.py`` script.\n\nPre-requisites\n~~~~~~~~~~~~~~\n\n-  `libffi <https://sourceware.org/libffi/>`__ development files,\n   required by cffi. On ubuntu 14.04, you can run:\n\n   .. code:: bash\n\n       $ sudo apt-get install libffi-dev\n\nInstalling the package\n~~~~~~~~~~~~~~~~~~~~~~\n\nIt is strongly recommended that you perform the install within a\n`Virtual\nEnvironment <http://docs.python-guide.org/en/latest/dev/virtualenvs/>`__.\nIf not, consider adding the ``--user`` flag to the following pip and\npython commands to install within your home directory.\n\nFirst install `numpy <http://www.numpy.org>`__ due to this\n`issue <http://stackoverflow.com/questions/18997339/scipy-and-numpy-install-on-linux-without-root>`__.\n\n::\n\n    $ pip install numpy\n\nThen, run\n\n::\n\n    $ python setup.py build\n\nto build the package and\n\n::\n\n    $ python setup.py install\n\nto install the package.\n\nPossible Issues\n~~~~~~~~~~~~~~~\n\n-  `numexpr <https://github.com/pydata/numexpr>`__. When running\n   ``python setup.py install``, if you see an error message like this:\n\n   .. code:: python\n\n       Traceback (most recent call last):\n         File \"setup.py\", line 154, in <module>\n           setup_package()\n         File \"setup.py\", line 146, in setup_package\n           from numpy.distutils.core import setup\n       ImportError: No module named numpy.distutils.core\n\n   Go back to `Installing the package <#installing-the-package>`__ and\n   install `numpy <http://www.numpy.org>`__.\n\n-  `PyCUDA 2016.1 <http://mathema.tician.de/software/pycuda/>`__.\n   setup.py will attempt to install this automatically, but this might\n   not work if you have a non-standard CUDA install location. It's worth\n   running\n\n   .. code:: bash\n\n       $ python -c 'import pycuda.autoinit'\n\n   to check if your pycuda can talk to the NVIDIA driver. If not,\n   manually download and install\n   `PyCUDA <http://mathema.tician.de/software/pycuda/>`__.\n-  `cub 1.5.2 <https://github.com/nvlabs/cub>`__. setup.py will\n   attempt to download this from github and install to the correct\n   directory during install. If this fails do the following:\n\n   .. code:: bash\n\n       $ wget -c https://codeload.github.com/NVlabs/cub/zip/1.5.2\n       $ mv 1.5.2 cub.zip\n       $ python setup.py install\n\n-  Montblanc depends on `python-casacore <https://github.com/casacore/python-casacore>`__   which depends on\n   `casacore2 <https://github.com/casacore/casacore>`__. setup.py should install\n   python-casacore automatically. If this fails then, on Ubuntu 14.04,\n   these packages can be added from the `radio astronomy\n   PPA <https://launchpad.net/~radio-astro/+archive/main>`__ :\n\n   .. code:: bash\n\n       $ sudo apt-get install software-properties-common\n       $ sudo add-apt-repository ppa:radio-astro/main\n       $ sudo apt-get update\n       $ sudo apt-get install python-casacore\n\n\nRunning Tests\n-------------\n\nOnce the libraries have been compiled you should be able to run the\n\n::\n\n    $ cd tests\n    $ python -c 'import montblanc; montblanc.test()'\n    $ python -m unittest test_rime_v4.TestRimeV4.test_sum_coherencies_double\n\nwhich will run the entire test suite or only the specified test case,\nrespectively. The reported times are for the entire test case with numpy\ncode, and not just the CUDA kernels.\n\nIf you're running on an ubuntu laptop with optimus technology, you may\nhave to install bumblebee and run\n\n::\n\n    $ optirun python -c 'import montblanc; montblanc.test()'\n\nPlaying with a Measurement Set\n------------------------------\n\nYou could also try run\n\n::\n\n    $ cd examples\n    $ python MS_example.py /home/user/data/WSRT.MS -np 10 -ng 10 -c 100\n\nwhich sets up things based on the supplied Measurement Set, with 10\npoint and 10 gaussian sources. It performs 100 iterations of the\npipeline.\n\nCiting Montblanc\n----------------\n\nIf you use Montblanc and find it useful, please consider citing the\nrelated\n`paper <http://www.sciencedirect.com/science/article/pii/S2213133715000633>`__.\nA `arXiv <http://arxiv.org/abs/1501.07719>`__ preprint is available.\n\nThe BIRO paper is available at\n`MNRAS <http://mnras.oxfordjournals.org/content/450/2/1308.abstract>`__,\nand a `arXiv <http://arxiv.org/abs/1501.05304>`__ is also available.\n\nCaveats\n-------\n\nMontblanc is an experimental package, undergoing rapid development. The\nplan for 2015 is to iterate on new versions of the BIRO pipeline.\n\nIn general, I will avoid making changes to BIRO v2 and v3, but\neverything beyond that may be changed, including the basic API residing\nin BaseSolver.py. In practice, this means that the interfaces in the\nbase montblanc package will remain stable. For example:\n\n.. code:: python\n\n    import montblanc\n    montblanc.rime_solver(...)\n\nEverything should be considered unstable and subject to change. I will\nmake an effort to maintain the CHANGELOG.md, to record any breaking API\nchanges.\n", 
  "description": "GPU-accelerated RIME implementations. An offshoot of the BIRO projects, and one of the foothills of Mt Exaflop."
}