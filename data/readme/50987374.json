{
  "read_at": 1462557753, 
  "description": "Hidden Markov models for word representations", 
  "README.md": "#Hidden Markov models for word representations\n\nLearn discrete and continuous word representations with Hidden Markov models, including variants defined over unlabeled and labeled parse trees.\n\n(c) Simon Suster, 2016\n\nIf you use this code for any of the tree HMM types, please cite our paper:\n\n[Word Representations, Tree Models and Syntactic Functions](http://arxiv.org/abs/1508.07709). Simon Suster, Gertjan van Noord and Ivan Titov. arXiv preprint arXiv:1508.07709, 2015. [bibtex](http://simonsuster.github.io/publications/SynFunc.bibtex) \n \n\n\n##Features\n###Architectures and training\n- Sequential HMM trained with the Baum-Welch algorithm. \n- Tree HMM trained with sum-product message passing (belief propagation)\n    - unlabeled\n    - labeled (includes syntactic functions as additional observed variables, effectively an Input- Output HMM)\n\n###Training regimes\n- Batch EM\n- Online (mini-batch step-wise) EM (Liang and Klein 2009)\n\n###Inference and decoding options\n- Viterbi/Max-product message passing\n- Posterior decoding (aka Minimum risk)\n- Posterior distribution with inference\n- Averaged posterior distribution per word type\n- Maximum emission decoding (ignoring transitions)\n\n###Implemented refinements\n- Approximation of belief vectors (regularization) (Grave et al. 2013)\n- Initialization of model parameters with Brown clusters\n- Splitting and merging of states for progressive introduction of complexity (Petrov et al. 2006)\n\n##Implementation\n- Logspace approach instead of Rabiner rescaling: a C extension is used for fast log-sum exponent calculation\n- Parallelization on the sentence level\n\nDespite the mentioned, the running time is relatively slow and is especially sensitive to the number of states. A speed-up would be possible through the use of sparse matrices, but at several places the replacement is not trivial. \n\n##Input format\n- For sequential HMM: plain text, one sentence per line, space-separated tokens\n- For tree HMMs: CoNLL format\n\n## Usage notes\nThe three main classes define the type of architecture that can be used:\n- [hmm.py](hmm.py) for Hidden Markov models\n- [hmtm.py](hmtm.py) for Hidden Markov tree models\n- [hmrtm.py](hmrtm.py) for Hidden Markov tree models with syntactic relations (functions)\n\nModels can be trained by invoking `run.py`. Use `--tree` to train a Hidden Markov tree model, and `--rel` to train a Hidden Markov tree model with syntactic relations. A full list of options can be found by running:\n\n```sh\npython3.3 run.py --help\n```\n\n### Example runs\nFirst prepare the data that you plan to use. This will replace unfrequent tokens with \\*unk\\*:\n\n```sh\npython3.3 corpus_normalize.py --dataset data/sample.en --output $DATASET --freq_thresh 1\n```\n\nThen, to train a sequential Hidden Markov model:\n\n```sh\npython3.3 run.py --dataset $DATASET --desired_n_states 60 --max_iter 2 --n_proc 1 --approx\n```\n\nThis will create an output directory starting with `hmm_...`. \n\nThe following configuration will train the same model, but with the splitting procedure and Brown initialization:\n\n```sh\npython3.3 run.py --dataset $DATASET --start_n_states 30 --desired_n_states 60 -brown sample.en.30.paths --max_iter 2 --n_proc 1 --approx\n```\n\nTo train a tree model, again start by normalizing the parsed data with \\*unk\\*:\n\n```sh\npython3.3 corpus_normalize.py --dataset data/sample.en.conll --output $DATASET_TREE --freq_thresh 1 --conll\n```\n\nThen to train a Hidden Markov tree model:\n\n```sh\npython3.3 run.py --tree --dataset $DATASET_TREE --start_n_states 30 --desired_n_states 60 \n --max_iter 2 --n_proc 1 --approx\n```\n\nTo train a Hidden Markov tree model with syntactic relations:\n\n```sh\npython3.3 run.py --rel --dataset $DATASET_TREE --desired_n_states 60 --max_iter 2 --n_proc 1 --approx\n```\n\n### Evaluating the representations\n\nTo carry out NER evaluation on the Conll2003 datasets for English:\n\n```sh\npython3.3 eng_ner_run.py -d posterior -rep hmm_.../ -o out --n_epochs 2\n```\n\nThis runs an averaged structured perceptron, an adaptation of LXMLS's implementation, for 2 epochs (more needed in practice). The training time is about 1 minute per epoch. Note that prior to training the perceptron, word representations are first inferred or decoded, which takes a couple of minutes as well. We choose here `posterior` (for posterior decoding) that produces comparable results to Viterbi. If you choose the `posterior_cont` and `posterior_cont_type` decoding methods, please have in mind that they are very memory intensive.\n\nSee the scripts under [output](output/) for model introspection utilities.\n\n##Requirements\n- Python3.3 or higher\n- Numpy 1.9 or higher\n- [Fast logsumexp](https://github.com/rmcgibbo/logsumexp) \n", 
  "id": 50987374
}