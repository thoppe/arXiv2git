{
  "read_at": 1462554033, 
  "description": "A machine learning approach to identify hosts of families of viruses.", 
  "README.md": "# mkboost \n\n**mkboot** is an algorithm for learning accurate models for predicting the host class of\nviruses based on sequence elements in the viral proteome. mkboost is written in Python2.x,\nwith computationally intensive segments coded in C inlined in Python.\nThe algorithm is based on a multiclass version of [Adaboost with Alternating Decision Trees](http://cseweb.ucsd.edu/~yfreund/papers/atrees.pdf) \nusing sequence k-mers as features.\n\nThis project was originally (and continues to be) hosted on [sourceforge](http://mkboost.sourceforge.net/).\nThis repo contains set of scripts to load the data and run the algorithm, along with a test data set. \nIt also contains scripts used for generating the figures in the associated publication. \nThis document describes how to download and setup this software package and provides \ninstructions on how to run the software on a test dataset of protein sequences of viruses\nbelonging to the Picornaviridae family.\n\n## Citation\n\nAnil Raj, Michael Dewar, Gustavo Palacios, Raul Rabadan and Chris Wiggins. (2011) *Identifying\nHosts of Families of Viruses: A Machine Learning Approach.* PLoS ONE, 6(12): e27631.\n[[arxiv](http://arxiv.org/abs/1105.5821), \n[PLoS ONE](http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0027631)]\n\n## Dependencies\n\nmkboost depends on \n+ [Numpy](http://www.numpy.org/)\n+ [Scipy](http://www.scipy.org/)\n+ [Matplotlib](http://www.matplotlib.org/)\n\nA number of python distributions already have these modules packaged in them. It is also\nstraightforward to install all these dependencies using package managers for MACOSX \nand several Linux distributions.\n\n## Getting the source code\n\nTo obtain the source code from github, let us assume you want to clone this repo into a\ndirectory named `proj`:\n\n    mkdir ~/proj\n    cd ~/proj\n    git clone https://github.com/rajanil/mkboost\n\nTo retrieve the latest code updates, you can do the following:\n\n    cd ~/proj/mkboost\n    git fetch\n    git merge origin/master\n\nSince the software compiles relevant C code inline using [weave](http://docs.scipy.org/doc/scipy-0.14.0/reference/tutorial/weave.html), \nno further compilation is necessary.\n\n## Executing the code\n\nThe algorithm needs to be run in two steps. \n\nIn the first step, the list of protein sequences\nis parsed to generate the set of sequence features, and each virus is represented\nin terms of counts of these sequence features. \n\n    $ python generate_features.py\n        + imports: mismatch.py\n        + generates the feature space from raw data in <project path>/data/\n        + pre-processed data is stored in mkboost/cache/<virus family>_protein/\n\n        mismatch.py\n            + contains functions to generate the set of all k-mers\n            and the mismatch feature space.\n\nIn the second step, the boosting with ADT\nalgorithm is run for a fixed maximum number of rounds (maximum model complexity) and\nK-fold cross validation is used to determine the test error as a function of\nmodel complexity.\n\n    $ python main.py\n        + imports: splitdata.py, boost.py\n        + wrapper script to run boosting\n        + output files are written to mkboost/cache/<virus family>_protein/\n\n        splitdata.py\n            + splits the data into test / train for N-fold CV\n\n        boost.py\n            + runs Adaboost\n\nThe demo script provided outlines how to run both these steps using the test data.\n\n    $ python demo.py\n\n### Inputs\n\nThe inputs that need to be specified in `demo.py` are\n+   name of virus family (assuming the data files are named as shown in `/data`)\n+   K (length of k-mers)\n+   M (max number of mis-matches allowed)\n+   T (number of boosting rounds)\n+   model type (trees: full ADTs, stumps: ADTs with depth 1)\n\n### Outputs\n\nThe algorithm outputs\n+   a text file containing the training and test accuracies at each boosting\n    round, along with the predictive k-mer at that round.\n+   a pickle file containing the ADT model\n+   a pickle file containing the prediction scores at each boosting round\n+   a pickle file containing the predicted host label for each virus\n    when it is held out as test data.\n\n### Visualization\n\nScripts to generate the plots in the paper are outlined here.\nFigures are output to mkboost/fig/\n\n    3a. plot_boost_auc.py\n        - Generates Fig 1 and 2.\n\n    3b. visualize_kmers.py\n        - Generates Fig 3.\n\n    3c. visualize_kmers_aligned.py\n        - Generates Fig 4.\n\n    3d. visualize_kmers_collapsed.py\n        - Generates Fig 5.\n", 
  "id": 26572586
}