{
  "read_at": 1462550377, 
  "description": "QMC=Chem : Quantum Monte Carlo for Chemistry", 
  "README.md": "QMC=Chem : Quantum Monte Carlo for Chemistry\n============================================\n\nQMC=Chem is the quantum Monte Carlo program of the\n[Toulouse (France) group](http://qmcchem.ups-tlse.fr).\nIt is meant to be used in the *post-Full-CI* context : a quasi-Full-CI\ncalculation is done with the\n[quantum package](https://github.com/LCPQ/quantum_package),\nand this wave function is used as a trial wave function for the fixed-node\ndiffusion Monte Carlo algorithm.\n\n\n* Parallel efficiency of 98.3% on 16_000 cores\n* The load balancing is optimal: the workers always work 100% of the time,\n  independently of their respective CPU speeds\n* Efficient: 0.96 Pflops/s on 76_800 cores of Curie in 2011\n* All network communications are non-blocking,\n  with the [ZeroMQ](http://zeromq.org) library\n* All the implemented algorithms are CPU-bound : the only limit\n  is the available CPU time\n* The number of simultaneous worker nodes can be variable during a calculation\n* Fully fault-tolerant (crashing nodes don't stop the running calculation)\n* QMC=Chem has been used in grid environments (EGI european grid) and \n  in Cloud environments (France Grilles) coupled to supercomputers \n\n\nWarnings:\n* QMC=Chem is under the GPLv2 license. Any modifications to or\n  software including (via compiler) GPL-licensed code must also be made available\n  under the GPL along with build & install instructions.\n* Pseudopotentials are about to change in the EZFIO database. Current calculations\n  will not be compatible with future versions\n\n\nRequirements\n------------\n\n* [Ninja build tool](http://github.com/martine/ninja)\n* [OCaml compiler with Opam and Core library](http://github.com/ocaml)\n* [ZeroMQ high performance communication library](http://www.zeromq.org)\n* [F77_ZMQ ZeroMQ Fortran interface](http://github.com/scemama/f77_zmq/)\n* [IRPF90 Fortran code generator](http://irpf90.ups-tlse.fr)\n* [EZFIO Easy Fortran I/O library generator](http://github.com/scemama/EZFIO)\n* GNU C++ Compiler (g++) for ZeroMQ and Ninja\n* Python >= 2.6 for install scripts\n* Bash for install scripts\n* Fortran compiler, Intel Fortran recommended\n* Lapack library, Intel MKL recommended\n\n\nMost of the dependencies are open-source will be downloaded automatically.\nThe Fortran and C++ compilers, Python and Bash interpreters and the Lapack\nlibrary need to be installed manually by the user.\n\nInstallation\n------------\n\nThe ``make.config`` file contains compiler specific parameters. You should change\nthem to match your hardware.\n\nThe ``configure.sh`` script will first download the\n[Ninja](http://github.com/martine/ninja) build tool, and will then run Ninja\nusing the ``install/build.ninja`` file.  The configuration script will work in\nthe ``install`` directory.  It will first download into the\n``install/Downloads`` directory everything that needs to be installed.\nThe building of the dependencies takes place in the ``install/_build``\ndirectory, and the packages that are being installed can be followed by looking\nat the log files in this directory. When a package was successfully installed,\na ``*.ok`` file is created and the log file is deleted.\n\nIf you don't have an internet connection available, you can execute the\ndownloading step on another computer and transfer all the downloaded files\ninto the ``Downloads`` directory.\n\n\nBefore using or compiling QMC=Chem, environment variables need to be loaded. The\nenvironment variables are located in the ``qmcchemrc`` file:\n\n```bash\n$ source qmcchemrc\n```\n\nTo compile the program, run\n\n```bash\n$ ninja\n```\n\n\nExample of a QMC=Chem calculation\n---------------------------------\n\n1.Calculation with the [quantum package](http://github.com/LCPQ/quantum_package)\n\n\nCreate the `xyz` file containing the nuclear coordinates of the system\n\n```bash\n$ cat > h2o.xyz << EOF\n3\nWater molecule\nO 0. 0. 0.\nH 0.9572 0. 0.\nH -0.239987 0.926627 0.\nEOF\n```\n\nChoose a suitable basis set and create the [EZFIO database](https://github.com/LCPQ/ezfio)\n\n```bash\n$ qp_create_ezfio_from_xyz -b cc-pvdz h2o.xyz -o h2o\n```\n\nRun the SCF calculation\n\n```bash\n$ qp_run SCF h2o\n```\nRun the CIPSI calculation\n\n```bash\n$ qp_run full_ci h2o\n```\n\nTransform the input for use in QMC=Chem\n\n```bash\n$ qp_run save_for_qmcchem h2o\n```\n\n\n2.FN-DMC calculation with QMC=Chem\n\n\nBefore using QMC=Chem, you need to load the environment variables:\n\n```bash\n$ source qmcchem.rc\n```\n\nIn QMC=Chem, everything goes through the use of the ``qmcchem`` command.\nWhen a command is run with no arguments, it prints a help message.\nThis is mainly the manual of QMC=Chem. For example:\n\n```\n$ qmcchem \nQMC=Chem command\n\n  qmcchem SUBCOMMAND\n\n=== subcommands ===\n\n  debug    Debug ZeroMQ communications\n  edit     Edit input data\n  md5      Manipulate input MD5 keys\n  result   Displays the results computed in an EZFIO directory.\n  run      Run a calculation\n  stop     Stop a running calculation\n  version  print version information\n  help     explain a given subcommand (perhaps recursively)\n\nmissing subcommand for command qmcchem\n\n$ qmcchem edit\nRun a calculation\n\n  qmcchem run EZFIO_FILE\n\n\nRun QMC=Chem\n      \n\n=== flags ===\n\n  [-a]                    Add more resources to a running calculation.\n  [-d]                    Start a dataserver process on the local host.\n  [-q <dataserver_addr>]  Start a qmc process on the local host.\n  [-s <host>]             Start a qmc process on <host>.\n  [-help]                 print this help text and exit\n                          (alias: -?)\n\nmissing anonymous argument: EZFIO_FILE\n```\n\n1) Set the parameters for a VMC calculation to create initial walker positions\n\n```\n$ qmcchem edit -h\nEdit input data\n\n  qmcchem edit EZFIO_FILE [INPUT]\n\n\nEdit input data\n      \n\n=== flags ===\n\n  [-c]                Clear blocks\n  [-e energy]         Fixed reference energy to normalize DMC weights\n  [-f 0|1]            Correct wave function to verify electron-nucleus cusp\n                      condition\n  [-j jastrow_type]   Type of Jastrow factor [ None | Core | Simple ]\n  [-l seconds]        Length (seconds) of a block\n  [-m method]         QMC Method : [ VMC | DMC ]\n  [-n norm]           Truncation t of the wave function : Remove determinants\n                      with a\n                      contribution to the norm less than t\n  [-s sampling]       Sampling algorithm : [ Langevin | Brownian ]\n  [-t seconds]        Requested simulation time (seconds)\n  [-ts time_step]     Simulation time step\n  [-w walk_num]       Number of walkers per CPU core\n  [-wt walk_num_tot]  Total number of stored walkers for restart\n  [-help]             print this help text and exit\n                      (alias: -?)\n\n$ qmcchem edit h2o -f 1 -m VMC -n 1.e-5 -s Langevin -t 300 -l 10\n```\n\n3) Get info on the wave function\n\n```bash\n$ qmcchem info h2o\n```\n\n4) Run the VMC calculation\n\n```bash\n$ qmcchem run h2o\n```\n\n5) Set the correct parameters for FN-DMC\n\n```bash\n$ qmcchem edit h2o -e -76.438 -m DMC -s Brownian -ts 3.e-4 -t 3600 -l 30\n```\n\n6) Run the FN-DMC calculation\n\n```bash\n$ qmcchem run h2o\n```\n\n7) Print the result\n\n```bash\n$ qmcchem result h2o\n\n```\n\n\n\n\nReferences\n----------\n\n[Quantum Monte Carlo for large chemical systems: Implementing efficient strategies for petascale platforms and beyond](http://dx.doi.org/10.1002/jcc.23216)\n> Anthony Scemama , Michel Caffarel , Emmanuel Oseret and William Jalby (2013), in: Journal of Computational Chemistry, 34:11(938--951) \n\n[Quantum Monte Carlo with very large multideterminant wavefunctions](http://arxiv.org/abs/1510.00730)\n> Anthony Scemama , Thomas Applencourt , Emmanuel Giner and Michel Caffarel (2015), in: ArXiv ePrints:arXiv:1510.00730v2 [physics.chem-ph] \n\n", 
  "id": 48254802
}