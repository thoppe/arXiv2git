{
  "read_at": 1462544902, 
  "description": "Automatically exported from code.google.com/p/word2vec", 
  "README.md": "Tools for computing distributed representtion of words\n------------------------------------------------------\n\nWe provide an implementation of the Continuous Bag-of-Words (CBOW) and the Skip-gram model (SG), as well as several demo scripts.\n\nGiven a text corpus, the word2vec tool learns a vector for every word in the vocabulary using the Continuous\nBag-of-Words or the Skip-Gram neural network architectures. The user should to specify the following:\n - desired vector dimensionality\n - the size of the context window for either the Skip-Gram or the Continuous Bag-of-Words model\n - training algorithm: hierarchical softmax and / or negative sampling\n - threshold for downsampling the frequent words \n - number of threads to use\n - the format of the output word vector file (text or binary)\n\nUsually, the other hyper-parameters such as the learning rate do not need to be tuned for different training sets. \n\nThe script demo-word.sh downloads a small (100MB) text corpus from the web, and trains a small word vector model. After the training\nis finished, the user can interactively explore the similarity of the words.\n\nMore information about the scripts is provided at https://code.google.com/p/word2vec/\n\n\n## Introduction\nThis tool provides an efficient implementation of the continuous bag-of-words and skip-gram architectures for computing vector representations of words. These representations can be subsequently used in many natural language processing applications and for further research.\n\n## Quick start\nDownload the code: svn checkout http://word2vec.googlecode.com/svn/trunk/\nRun 'make' to compile word2vec tool\nRun the demo scripts: ./demo-word.sh and ./demo-phrases.sh\nFor questions about the toolkit, see http://groups.google.com/group/word2vec-toolkit\n\n## How does it work\nThe word2vec tool takes a text corpus as input and produces the word vectors as output. It first constructs a vocabulary from the training text data and then learns vector representation of words. The resulting word vector file can be used as features in many natural language processing and machine learning applications.\n\nA simple way to investigate the learned representations is to find the closest words for a user-specified word. The distance tool serves that purpose. For example, if you enter 'france', distance will display the most similar words and their distances to 'france', which should look like:\n\n                 Word       Cosine distance\n-------------------------------------------\n                spain              0.678515\n              belgium              0.665923\n          netherlands              0.652428\n                italy              0.633130\n          switzerland              0.622323\n           luxembourg              0.610033\n             portugal              0.577154\n               russia              0.571507\n              germany              0.563291\n            catalonia              0.534176\nThere are two main learning algorithms in word2vec : continuous bag-of-words and continuous skip-gram. The switch -cbow allows the user to pick one of these learning algorithms. Both algorithms learn the representation of a word that is useful for prediction of other words in the sentence. These algorithms are described in detail in [1,2].\n\n## Interesting properties of the word vectors\nIt was recently shown that the word vectors capture many linguistic regularities, for example vector operations vector('Paris') - vector('France') + vector('Italy') results in a vector that is very close to vector('Rome'), and vector('king') - vector('man') + vector('woman') is close to vector('queen') [3, 1]. You can try out a simple demo by running demo-analogy.sh.\n\nTo observe strong regularities in the word vector space, it is needed to train the models on large data set, with sufficient vector dimensionality as shown in [1]. Using the word2vec tool, it is possible to train models on huge data sets (up to hundreds of billions of words).\n\n## From words to phrases and beyond\nIn certain applications, it is useful to have vector representation of larger pieces of text. For example, it is desirable to have only one vector for representing 'san francisco'. This can be achieved by pre-processing the training data set to form the phrases using the word2phrase tool, as is shown in the example script ./demo-phrases.sh. The example output with the closest tokens to 'san_francisco' looks like:\n\n                 Word       Cosine distance\n-------------------------------------------\n          los_angeles              0.666175\n          golden_gate              0.571522\n              oakland              0.557521\n           california              0.554623\n            san_diego              0.534939\n             pasadena              0.519115\n              seattle              0.512098\n                taiko              0.507570\n              houston              0.499762\n     chicago_illinois              0.491598\nThe linearity of the vector operations seems to weakly hold also for the addition of several vectors, so it is possible to add several word or phrase vectors to form representation of short sentences [2].\n\n## How to measure quality of the word vectors\nSeveral factors influence the quality of the word vectors:\n\namount and quality of the training data\nsize of the vectors\ntraining algorithm\nThe quality of the vectors is crucial for any application. However, exploration of different hyper-parameter settings for complex tasks might be too time demanding. Thus, we designed simple test sets that can be used to quickly evaluate the word vector quality.\n\nFor the word relation test set described in [1], see ./demo-word-accuracy.sh, for the phrase relation test set described in [2], see ./demo-phrase-accuracy.sh. Note that the accuracy depends heavily on the amount of the training data; our best results for both test sets are above 70% accuracy with coverage close to 100%.\n\n## Word clustering\nThe word vectors can be also used for deriving word classes from huge data sets. This is achieved by performing K-means clustering on top of the word vectors. The script that demonstrates this is ./demo-classes.sh. The output is a vocabulary file with words and their corresponding class IDs, such as:\n\ncarnivores 234\ncarnivorous 234\ncetaceans 234\ncormorant 234\ncoyotes 234\ncrocodile 234\ncrocodiles 234\ncrustaceans 234\ncultivated 234\ndanios 234\n.\n.\n.\nacceptance 412\nargue 412\nargues 412\narguing 412\nargument 412\narguments 412\nbelief 412\nbelieve 412\nchallenge 412\nclaim 412\n\n## Performance\nThe training speed can be significantly improved by using parallel training on multiple-CPU machine (use the switch '-threads N'). The hyper-parameter choice is crucial for performance (both speed and accuracy), however varies for different applications. The main choices to make are:\n\narchitecture: skip-gram (slower, better for infrequent words) vs CBOW (fast)\nthe training algorithm: hierarchical softmax (better for infrequent words) vs negative sampling (better for frequent words, better with low dimensional vectors)\nsub-sampling of frequent words: can improve both accuracy and speed for large data sets (useful values are in range 1e-3 to 1e-5)\ndimensionality of the word vectors: usually more is better, but not always\ncontext (window) size: for skip-gram usually around 10, for CBOW around 5\n\n## Where to obtain the training data\nThe quality of the word vectors increases significantly with amount of the training data. For research purposes, you can consider using data sets that are available on-line:\n\nFirst billion characters from wikipedia (use the pre-processing perl script from the bottom of Matt Mahoney's page)\nLatest Wikipedia dump Use the same script as above to obtain clean text. Should be more than 3 billion words.\nWMT11 site: text data for several languages (duplicate sentences should be removed before training the models)\nDataset from \"One Billion Word Language Modeling Benchmark\" Almost 1B words, already pre-processed text.\nUMBC webbase corpus Around 3 billion words, more info here. Needs further processing (mainly tokenization).\nText data from more languages can be obtained at statmt.org and in the Polyglot project.\n\n## Pre-trained word and phrase vectors\nWe are publishing pre-trained vectors trained on part of Google News dataset (about 100 billion words). The model contains 300-dimensional vectors for 3 million words and phrases. The phrases were obtained using a simple data-driven approach described in [2]. The archive is available here: GoogleNews-vectors-negative300.bin.gz.\n\nAn example output of ./distance GoogleNews-vectors-negative300.bin:\n\nEnter word or sentence (EXIT to break): Chinese river\n\n                Word       Cosine distance\n------------------------------------------\n       Yangtze_River              0.667376\n             Yangtze              0.644091\n      Qiantang_River              0.632979\n   Yangtze_tributary              0.623527\n    Xiangjiang_River              0.615482\n       Huangpu_River              0.604726\n      Hanjiang_River              0.598110\n       Yangtze_river              0.597621\n         Hongze_Lake              0.594108\n             Yangtse              0.593442\nThe above example will average vectors for words 'Chinese' and 'river' and will return the closest neighbors to the resulting vector. More examples that demonstrate results of vector addition are presented in [2]. Note that more precise and disambiguated entity vectors can be found in the following dataset that uses Freebase naming.\n\n## Pre-trained entity vectors with Freebase naming\nWe are also offering more than 1.4M pre-trained entity vectors with naming from Freebase. This is especially helpful for projects related to knowledge mining.\n\nEntity vectors trained on 100B words from various news articles: freebase-vectors-skipgram1000.bin.gz\nEntity vectors trained on 100B words from various news articles, using the deprecated /en/ naming (more easily readable); the vectors are sorted by frequency: freebase-vectors-skipgram1000-en.bin.gz\nHere is an example output of ./distance freebase-vectors-skipgram1000-en.bin:\n\nEnter word or sentence (EXIT to break): /en/geoffrey_hinton\n\n                        Word       Cosine distance\n--------------------------------------------------\n           /en/marvin_minsky              0.457204\n             /en/paul_corkum              0.443342\n /en/william_richard_peltier              0.432396\n           /en/brenda_milner              0.430886\n    /en/john_charles_polanyi              0.419538\n          /en/leslie_valiant              0.416399\n         /en/hava_siegelmann              0.411895\n            /en/hans_moravec              0.406726\n         /en/david_rumelhart              0.405275\n             /en/godel_prize              0.405176\n\n## Final words\nThank you for trying out this toolkit, and do not forget to let us know when you obtain some amazing results! We hope that the distributed representations will significantly improve the state of the art in NLP.\n\n## References\n[1] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. [Efficient Estimation of Word Representations in Vector Space](http://arxiv.org/pdf/1301.3781.pdf). In Proceedings of Workshop at ICLR, 2013.  \n\n[2] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg Corrado, and Jeffrey Dean. [Distributed Representations of Words and Phrases and their Compositionality](http://arxiv.org/pdf/1310.4546.pdf). In Proceedings of NIPS, 2013.  \n\n[3] Tomas Mikolov, Wen-tau Yih, and Geoffrey Zweig. [Linguistic Regularities in Continuous Space Word Representations](http://research.microsoft.com/pubs/189726/rvecs.pdf). In Proceedings of NAACL HLT, 2013.\nOther useful links  \n\nFeel free to send us a link to your project or research paper related to word2vec that you think will be useful or interesting for the others.\n\nTomas Mikolov, Quoc V. Le and Ilya Sutskever. [Exploiting Similarities among Languages for Machine] Translation(http://arxiv.org/pdf/1309.4168). We show how the word vectors can be applied to machine translation. Code for improved version from Georgiana Dinu here.\nWord2vec in Python by Radim Rehurek in gensim (plus tutorial and demo that uses the above model trained on Google News).\nWord2vec in Java as part of the deeplearning4j project. Another Java version from Medallia here.\nWord2vec implementation in Spark MLlib.\nComparison with traditional count-based vectors and cbow model trained on a different corpus by CIMEC UNITN.\nLink to slides about word vectors from NIPS 2013 Deep Learning Workshop: [NNforText.pdf](https://drive.google.com/file/d/0B7XkCwpI5KDYRWRnd1RzWXQ2TWc/edit?usp=sharing)\n\n## Disclaimer\nThis open source project is NOT a Google product, and is released for research purposes only.\n", 
  "id": 32462195
}