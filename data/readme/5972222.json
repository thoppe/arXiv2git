{
  "read_at": 1462557322, 
  "description": "Simulation of simplicity analysis and code generation", 
  "README.md": "Simulation of simplicity analysis and code generation\n=====================================================\n\n`simplicity` is an automatic code generator for Simulation of Simplicity (SoS), a technique for avoiding\ndegeneracies in exact geometric computation.  Given a geometric predicate such as the determinant of\na small matrix, SoS adds different infinitesimal shifts to each input variable.  Even if the original predicate\nevaluates to zero, the infinitesimal shifts guarantee a (possibly infinitesimal) nonzero value.  Thus, algorithms\nwhich make use of SoS predicates can pretend that degeneracies never occur.  For more details on the underlying technique, see\n\n* Edelsbrunner, H., Mucke, E., \"Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms\",\n  http://arxiv.org/abs/math/9410209.\n\nThere are two dependencies:\n\n* [other/core](https://github.com/otherlab/core): Otherlab core library (BSD license)\n* [sage](http://www.sagemath.org): Open source symbolic mathematics (GPLv2)\n\nThe Python code generation scripts themselves depend only on sage, and are therefore GPL.  The generated C++\ncode is *not* GPL for the same reason that code compiled with gcc is not GPL: the generated code does link or\ninclude sage either directly or indirectly.  Therefore, the generated code is safe for inclusion in BSD licensed\nlibraries such as other/core (see `other/core/exact/predicates.*`).\n\n### Usage\n\nTo generate `predicates.h` and `predicates.cpp` in directory `<dir>`, run\n\n    ./simplicity.py <dir>\n\nFor example, to regenerate the predicate code in other/core/exact, do\n\n    ./simplicity.py $OTHER/core/exact\n", 
  "id": 5972222
}