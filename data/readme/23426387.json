{
  "README-R.md": "Using GPstuff from R\n--------------------\n\nGPstuff can be used from R by using RcppOctave package. RcppOctave\nallows to call any Octave functions and browse their documentation\nfrom R, and pass variables between R and Octave.\n\n** Instructions **\n\nStart R and install RcppOctave\n```\n install.packages(\"RcppOctave\")\n require(RcppOctave)\n```\n\nSet path to GPstuff\n```\n path <- .O$genpath(\"/path/to/gpstuff\")\n .O$addpath(path)\n```\n\nRun demo\n```\n o_source(\"/path/to/gpstuff/gp/demo_classific.m\")\n```\n\nor run Octave commands line by line\n```\n o_eval(\"L = strrep(S, 'demo_classific.m', 'demodata/synth.tr')\")\n o_eval(\"x = load(L)\")\n o_eval(\"y=x(:,end);\")\n o_eval(\"y = 2.*y-1;\")\n ...\n```\n\nMore examples to follow.\n", 
  "read_at": 1462553198, 
  "description": "GPstuff - Gaussian process models for Bayesian analysis", 
  "README.md": "# GPstuff: Gaussian process models for Bayesian analysis\n\nMaintainer: Aki Vehtari <aki.vehtari@aalto.fi>\n\n## REFERENCE\n\n**If you use GPstuff (or otherwise refer to it), use the following reference:**\n  Jarno Vanhatalo, Jaakko Riihimaki, Jouni Hartikainen, Pasi Jylanki,\n  Ville Tolvanen, and Aki Vehtari (2013). GPstuff: Bayesian Modeling\n  with Gaussian Processes. Journal of Machine Learning Research,\n  14(Apr):1175-1179.\n  (Available at <http://jmlr.csail.mit.edu/papers/v14/vanhatalo13a.html>)\n\n## HOME PAGE\n\nAdditional information and illustrations of the features can be found at\n<http://research.cs.aalto.fi/pml/software/gpstuff/> and <http://arxiv.org/abs/1206.5754>\n\n## INTRODUCTION\n\nThe GPstuff toolbox is a versatile collection of Gaussian process\nmodels and computational tools required for inference. The tools\ninclude, among others, various inference methods, sparse\napproximations and model assessment methods.\n\nThe GPstuff toolbox works (at least) with Matlab versions r2009b\n(7.9) or newer (older versions down to 7.7 should work also, but the\ncode is not tested with them). Most of the functionality works also\nwith Octave (3.6.4 or newer, see release notes for details). GPstuff\ncan also be called from R with RcppOctave package. Most of the code\nis written in m-files but some of the most computationally critical\nparts have been coded in C.\n\nThe code for GPstuff can be found in subfolders. The SuiteSparse\nfolder contains an exact copy of the SuiteSparse v3.4 toolbox by Tim\nDavis: <http://www.cise.ufl.edu/research/sparse/SuiteSparse/current/SuiteSparse/>\nThe SuiteSparse is needed when using compactly supported covariance\nfunctions.\n\n## INSTALLING THE TOOLBOX\n\nIf Matlab or Octave is started in the  directory of GPstuff,\n`startup.m` script will add GPstuff subdirectories to the\npath. Alternatively, see `startup.m` for paths to add.\n\nSome of the functions in GPstuff are implemented using C in order to\nmake the computations faster. In order to use these functions you\nneed to compile them first. There are two ways to do that:\n\n1) Basic installation without compactly supported covariance functions\n\n   * Install the GPstuff package by running `matlab_install` in thisfolder\n\n   * With this option you are able to use all the other functions\n     except for gpcf_ppcs*\n\n\n2) Installation with compactly supported covariance functions\n  \n   * Compactly supported (CS) covariance functions are functions that\n     produce sparse covariance matrices (matrices with zero elements). To\n     use these functions (gpcf_ppcs*) you need the sparse GP\n     functionalities in GPstuff which are build over SuiteSparse\n     toolbox. To take full advantage of the CS covariance functions\n     install GPstuff by running `matlab_install('SuiteSparseOn')` in the\n     present directory.\n\n   * The function `matlab_install` compiles the mex-files and prints on\n     the screen, which directories should be added to Matlab paths. \n    \n## CONTENTS\n   \nThe GPstuff packge contains the following subdirectories:\ndiag  dist  gp  mc  misc  optim  tests*  SuiteSparse*\n(* not in Octave)\n\nEach folder contains Contents.m, which summarizes the functions\nin the folder. \n\nThe 'gp' folder contains the main functionalities and demonstration\nprograms. Other folders contain additional help functions.\n\n## TESTING THE INSTALLATION\n\nInstallation can be tested by running command `runtestset('fast')`, which\nruns a collection of demos and compares the computed results to pre-saved\nresults. Running this takes about one hour and it requires Matlab version\n2013b or greater for the unit test framework. Alternatively, the\nxunit' package can be used instead. The xunit package can be downloaded\nfrom\nhttp://www.mathworks.com/matlabcentral/fileexchange/22846-matlab-xunit-test-framework\n\n## USER GUIDE (VERY SHORT)\n\nIt easiest to learn to use the package by running the demos. It is\nadvisable to open the demo files in text editor and run them line\nby line. The demos are documented so that user can follow what\nhappens on each line.\n\nThe basic structure of the program is as follows. The program\nconsist of separate blocks, which are:\n\n - Gaussian process model structure (GP):\n   This is a structure that contains all the model information (see\n   GP_SET) and information structures (GPCF_\\*) and likelihood\n   structures (LIK_\\*).\n\n - Covariance function structure (GPCF):\n   This is a structure that contains all of the covariance function\n   information (see e.g. GPCF_SEXP). The structure contains the\n   hyperparameter values, pointers to nested functions that are\n   related to the covariance function (e.g. function to evaluate\n   covariance matrix) and hyperprior structure.\n\n - Likelihood structure:\n   This is a structure that contains all of the likelihood function\n   information (see e.g. lik_probit). The structure contains the\n   likelihood parameter values and pointers to nested functions that\n   are related to the likelihood function (e.g. log likelihood and its\n   derivatives).\n\n - Inference utilities:\n   Inference utilities consist of functions that are needed to make\n   the posterior inference and predictions. These include, among\n   others,\n    - GP_OPTIM - Find MAP estimate for hyperparameters\n    - GP_MC - Markov chain Monte Carlo sampling\n    - GP_IA - Hyperparameter integration approximations\n    - GP_PRED - Predictions with Gaussian Process\n\nSee more in [User guide](http://arxiv.org/abs/1206.5754)\n\n## LICENSE\n\nThis software is distributed under the GNU General Public Licence\n(version 3 or later); please refer to the file Licence.txt,\nincluded with the software, for details.\n\n\n## JMLR DISCLAIMER\n\n   THIS SOURCE CODE IS SUPPLIED \\AS IS\" WITHOUT WARRANTY OF ANY KIND, AND\n   ITS AUTHOR AND THE JOURNAL OF MACHINE LEARNING RESEARCH (JMLR) AND\n   JMLR'S PUBLISHERS AND DISTRIBUTORS, DISCLAIM ANY AND ALL WARRANTIES,\n   INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES OF MERCHANTABILITY\n   AND FITNESS FOR A PARTICULAR PURPOSE, AND ANYWARRANTIES OR NON\n   INFRINGEMENT. THE USER ASSUMES ALL LIABILITY AND RESPONSIBILITY FOR\n   USE OF THIS SOURCE CODE, AND NEITHER THE AUTHOR NOR JMLR, NOR JMLR'S\n   PUBLISHERS AND DISTRIBUTORS, WILL BE LIABLE FOR DAMAGES OF ANY KIND\n   RESULTING FROM ITS USE. Without limiting the generality of the\n   foregoing, neither the author, nor JMLR, nor JMLR's publishers and\n   distributors, warrant that the Source Code will be error-free, will\n   operate without interruption, or will meet the needs of the user.\n", 
  "id": 23426387
}