{
  "read_at": 1462552255, 
  "description": "", 
  "README.md": "###############################################################################\nCopyright (C) 2012, M. Schaub, M. Barahona\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.\n\n###############################################################################\n\n-----------------------------------------------------------------------------\nCommunity Detection using Markov Zooming Infomap\n-----------------------------------------------------------------------------\n\nThis code implements a MATLAB/C++ version of the Markov Zooming Map equation \nmethod as discussed in the article:\n\n\"Encoding dynamics for multiscale community detection: Markov time sweeping for \nthe Map equation\", M.T.Schaub, R. Lambiotte, M. Barahona, Phys. Rev. E, 2012, \n86(2), 026112; see also arXiv:1109.6642\n\nThe code implements the Markov Zooming Map equation for undirected, weighted networks \nand is based on the implementation of the original map equation method\nwhich can be found under http://www.tp.umu.se/~rosvall/code.html\nSee also http://www.mapequation.org for a dynamic visualisation of the map \nequation. The original Map equation method is described in the following \npublication:\n\n\"Maps of information flow reveal community structure in complex networks\"\nMartin Rosvall and Carl T. Bergstrom, PNAS 105, 1118 (2008); \nsee also arXiv:0707.0609\n\nPlease cite the above mentioned articles if you make use of this code.\n\n-----------------------------------------------------------------------------\nINSTALLATION & USE\n-----------------------------------------------------------------------------\n1. Download the files and unzip the folders it neccessary\n2. in a terminal, go into the infomap_dir folder and run \"make\" to compile \n   the C code.\n3. In Matlab you can now use the function \"MarkovZoomingMap\" to run your \n   analysis\n\nEXAMPLE:\n\n     % in the MarkovZoomingMap folder, load the provided example graph \n     % (a ring of rings) into an adjacency matrix\n     A = convertPajekToAdjMatrix('ring_of_rings.net');\n     % COMMENT: If want to read in an unweighted pajek graph \n     % (edges encoded: [from] [to] -- with no third colum)\n     % use the function \"convertUnweightedPajekToAdjMatrix\".\n     \n     % assign an output filename\n     filename = 'test';\n\n     % specify a time interval for the analysis\n     time =logspace(-1,2,100);\n\n     % run the actual analysis; note that the time argument is optional, if not\n     % provided the time interval is set to the one also used in this example\n     MarkovZoomingMap(A,filename,time)\n\nThis should create a folder named \"{filename}ZoomingMap\" containing the results\nof the analysis in a file named Map_clustering.mat, plus a (directed) pajek .net\nfile of the original graph.\n\nTo plot the results of the analysis you may want to load the .mat file and use \nthe provided matlab script \"script_plot_Map_results.m\".\n\n-----------------------------------------------------------------------------\nSome potential code changes / improvements\n-----------------------------------------------------------------------------\nThis released code has not been thoroughly optimized for speed, however there\nare two obvious ways to speed up the performance.\n\n1) At the moment for each timepoint, a temporary pajek file is created and \nwritten to disk, and subseqently read from the C code. This I/O is essentially\nnot necessary. Instead on could pass the network data straight to the C \nimplementation via e.g. a mex file from Matlab (However if you are interested \nin the \"intermediate\" graphs you may not want to do this, and instead change \nthe script as to not delete the temporary files but keep them).\n\nFurther you may want to stop all the output from being displayed while the \noptimization is running, this is also easily achievable by changing the C code\naccordingly.\n\n-----------------------------------------------------------------------------\nCode history\n-----------------------------------------------------------------------------\nAug. 2012 -- intial release of code  \nNov. 2013 -- updated code to compute stationary distribution quicker,\n             included option to use linearisation of dynamics (equivalent to \n             original map equation for t=1)\n\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nAuthor   : M. Schaub  \nEmail    : michael.schaub09@imperial.ac.uk \n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n", 
  "id": 5423310
}