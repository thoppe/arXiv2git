{
  "read_at": 1462557276, 
  "description": "Code for enumerating dissections of equilateral triangles", 
  "README.md": "Triangle Dissection Enumeration\n===============================\n\nThis repo contains code that supports the paper \"An enumeration of\nequilateral triangle dissections\", Ales Drapal and Carlo Hamalainen,\nDiscrete Applied Mathematics Volume 158, Issue 14, 28 July 2010,\nPages 1479-1495. An open access (and more up to date version) is\navailable on the arXiv: http://arxiv.org/abs/0910.5199\n\nCarlo Hamalainen <carlo.hamalainen@gmail.com>\n\nSummary of contents\n-------------------\n\n * dissections-clojure:         Implementation in Clojure     (for testing only)\n * dissections-common-lisp:     Implementation in Common Lisp (for testing only)\n * dissections-cpp:             Implementation in C++         (for actual enumeration runs)\n * dissections-sage:            Original implementation in Sage (useful for exploratory work)\n * paper:                       Copy of the arXiv paper\n * plot:                        Python script (uses PyX) for drawing triangle dissections\n * spherical_bitrade_generator: Enumerator of spherical latin bitrades (uses \"plantri\")\n\nHow to run\n----------\n\nTo run the enumerator for order 18 with 5 slices, output\ngoing to /tmp/triangles/expt_18:\n\n    git clone https://github.com/carlohamalainen/triangle_dissections.git\n    cd triangle_dissections\n    make\n\nIf this fails due to not being able to find the Boost C++ library, set its\nlocation in triangle_dissections/dissections-cpp/Makefile\nand then re-run make in the top-level directory.\n\nNow create a directory for this run of order 18 with 5 slices, and set up\nthe Makefile which will run the main part of the enumeration:\n\n    cd dissections-cpp/example_run_directories\n\n    N=18\n    NRSLICES=5\n\n    SRCDIR=`pwd`\n\n    OUTPUT_DIRECTORY=/tmp/triangles/expt_$N\n\n    mkdir -p $OUTPUT_DIRECTORY\n    cd $OUTPUT_DIRECTORY\n    ln -s $SRCDIR/create_makefile.py\n    ln -s $SRCDIR/run_slice.sh\n    ln -s $SRCDIR/sort_and_merge_sigs.sh\n    ln -s $SRCDIR/uniq_sigs.sh\n\n    ./create_makefile.py $SRCDIR/../.. $N $NRSLICES\n\nTo run the first part of the enumeration, use the Makefile with a suitable \nnumber of threads, say 14 on a 16 core PC:\n\n    make -j 14 # this would be at most the minimum of nr cores in PC and nr slices being produced\n\nOnce this finishes there will be $NRSLICES files of the form sigs_<slice nr>.\nTo merge them into a single file containing a unique list of signatures, run the\nfollowing script:\n\n    ./sort_and_merge_sigs.sh $N\n\nThis will produce the file $OUTPUT_DIRECTORY/all_sigs_$N. This file can be used with\npost-processing scripts, or to answer simple questions like \"how many dissections are\nthere of order 18?\":\n\n    cat all_sigs_$N | wc -l\n\nThe answer should be:\n\n    224708\n", 
  "id": 1812942
}