{
  "read_at": 1462550928, 
  "description": "LCSk++: Practical similarity metric for long strings", 
  "README.md": "### LCSk++: Practical similarity metric for long strings\n\nThis is an implementation of the LCSk++ metric for long strings described in [1].\n\nLCSk++ of two strings a and b calculates the longest common subsequence of two strings with\nthe restriction that the consecutive runs of indices in both strings have length at least k,\nwhich is a parameter of the algorithm. For example: longest common subsequence of the strings\nABCDAB and ABCADB is of length 5 (ABCDB), while LCSk++ of these two strings with k=3 is 3 (ABC).\nThis restriction loses some matches, but allows for a faster computation.\n\n### Implementation\n* __lcskpp.h/lcskpp.cpp__  \n   >> Implementation of several algorithms for computing LCSk++. The approach described in Section 3.2 of [1] can be found in the lcskpp_sparse_fast function.\n* __fenwick.h__  \n   >> Implementation of the Fenwick tree data structure used by the lcskpp_sparse_fast.\n* __test_lcskpp.cpp__  \n   >> A unit test for the algorithm.\n* __random_strings.h__  \n   >> Functions for generating random strings as described in Section 4.1 of [1].\n\n### Dependencies\nFor compiling this library, it is necessary to have C++11 compatible compiler.\n\n### References\n[1] Filip Pavetic, Goran Zuzic, Mile Sikic: _LCSk++: Practical similarity metric for long strings_, http://arxiv.org/abs/1407.2407  \n[2] Gary Benson, Avivit Levy, Riva Shalom: _Longest Common Subsequence in k-length substrings_, http://arxiv.org/abs/1402.2097  \n[3] Sebastian Deorowicz, Szymon Grabowski: _Efficient algorithms for the longest common subsequence in k-length substrings_, http://arxiv.org/abs/1311.4552\n\nNote: [1] has been created as a continuation of the first authors Master Thesis, written on the Faculty of Electrical Engineering and Computing, University of Zagreb, Croatia.\n", 
  "id": 21689887
}