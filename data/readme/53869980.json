{
  "readme.m": "%> @file readme.m\n%> @brief This is a short README about how to use the code.\n%> @author Mikhail V. Konnik\n%> @date   10 December 2014.\n%> \n%> In short, you need to run in MATLAB either of these files:\n%> - a simple sensor model in test_photosensor_simple_model.m  file\n%> - or an advanced model in test_photosensor_advanced_model.m  file\n%> \n%> Each of them will run the function ccd_photosensor.m that is @ref ccdphotosensor \"thoroughly documented\".\n%> The example will run the simulation of a 256x256 pixels CCD photosensor.\n%> \n%> \n%> \n%> @mainpage High-level CCD/CMOS Sensor Simulator\n%> This MATLAB code serves as an example of implementation of a high-level CCD/CMOS photosensor\n%> model, which has been described in the article \"High-level numerical simulations of noise in solid-state photosensors:  review and tutorial\"\n%> by Mikhail Konnik and James Welsh. The code was originally written and used for the Adaptive Optics simulations and study of\n%> noise propagation in wavefront sensors, but can be used for many other applications involving light registration on CCD/CMOS\n%> photosensors. The code is written as a series of functions (plain-old imperative style, no fluffy object-oriented stuff),\n%> which are all contained inside the ccd_photosensor.m function, which takes the input optical field as an input and \n%> sequentially adds light and dark noises.\n%> \n%> This code is intended to be an @i example implementation of the sensor model: for the article we used this very code, although\n%> slightly modified (especially when we studied long-exposure dark noise). The code is documented using portions of the text from\n%> the article, should be (hopefully) easy to follow and modify. \n%> \n%> @section runme Running the simulation\n%> The whole simulation code is in the /sensors directory, while /help directory contains the documentation in HTML \n%> that is generated by Doxygen from the comments within the code. Two examples of sensors models are provided:\n%> - a @b simple model, which is completely linear (no non-linearities), where all noise are basically Gaussian, \n%> and without source follower noise, is in the test_photosensor_simple_model.m file.\n%> - an @b advanced model, which has V/V and V/e non-linearities, Wald/LogNormal noise, source follower and sense node noise \n%> sources and even ADC non-linearities (you can turn them all on or off), is in the test_photosensor_advanced_model.m file. \n%> In case the last sentence does not make any sense, use the simple model. \n%> \n%> The example test files will run the simulation of a 256x256 pixels CCD photosensor, triggering the ccd_photosensor.m file \n%> that actually performs the simulations.\n%> \n%> \n%> @section howworks How does the model work?\n%> This is described in the article mentioned above (you can also find it in Arxiv.org). Everything about the simulation\n%> of the photosensor, all the parameters and noises (in photons, electrons, volts and DN) are stored inside the @b ccd structure.\n%> Go to ccd_photosensor.m file for the details of the @ref ccdphotosensor \"High-level photosensor model\" being implemented.\n%> \n%> In short, the model assumes the input of an optical field and converts it into \\f$ W/m^2 \\f$, giving the signal in photons \n%> stored in @b ccd.Signal_CCD_photons matrix. Then the noise (in electrons) is added to light signal and stored in @b ccd.light_signal matrix, \n%> while the dark noise is added to the b ccd.dark_signal matrix. \n%> The image in electrons is the obtained in @b ccd.Signal_CCD_electrons matrix by adding @b ccd.light_signal and @b ccd.dark_signal \n%> according to the parameters set by a user.\n%> \n%> Then the signal in electrons is converted into Voltages, resulting in the @b ccd.Signal_CCD_voltage matrix. After that, \n%> we proceed to the Analogue-to-Digital converter (ADC) to finally convert into Digital Numbers (DN) according to\n%> the number of bits set by user (usually 8, 12 or 16 bit). The final result is in the @b ccd.Signal_CCD_DN matrix, in digital numbers.\n%> \n%> The illustration of the simulation process is provided below:\n%> \n%> @image html camerascheme_vert.png\n%> \n%> I hope that this model will be useful for somebody, or at least save someone's time.\n%> The model can be (and should be) criticized, but this author would like to use a quote from\n%> George E. P. Box, who was famous statistician, and who used to say that \n%> \"essentially, all models are wrong, but some are useful\".", 
  "read_at": 1462555958, 
  "description": "Automatically exported from code.google.com/p/highlevelsensorsim", 
  "id": 53869980
}