{
  "read_at": 1462549733, 
  "description": "Java Partial Information Decomposition toolkit", 
  "README.md": "JPID - The Java Partial Information Decomposition Toolkit\n====\n\nA Java software toolkit for computing partial information decomposition (PID) - both on average and on a local scale.\n---------------------------------------------------------------------------------------------------------------------\n\nThis document describes the usage for this toolkit. It is included in the distribution as readme.md.\n\nCopyright (C) 2012 Joseph Lizier (joseph.lizier at gmail.com) and Benjamin Flecker (btflecker at gmail.com)\n\nLicense\n-------\n\nLicensed under [GNU General Public License v3](http://www.gnu.org/licenses/gpl.html \"GPL v3\") or any later version - see *license-gplv3.txt* included in the distribution.\n\nDependencies\n------------\n\nJUnit 3 - main toolkit code does not require this, but you will need it to run unit tests.\n\nReferencing/Acknowledgement\n---------------------------\n\nYou are asked to reference your use of this toolkit in any resulting publications to the following:\n- Joseph T. Lizier and Benjamin Flecker, \"Java Partial Information Decomposition toolkit\", 2012;\n\nYou should also reference the underlying PID method to the original paper:\n- Paul L. Williams and Randall D. Beer, \"Nonnegative Decomposition of Multivariate Information\", [arXiv:1004.2515](http://arxiv.org/abs/1004.2515 \"arXiv:1004.2515\"), 2010.\n\nDownload\n--------\n\nDownload the most recent distribution of the toolkit from [github](https://github.com/jlizier/jpid.git \"jpid\").\n\nUsage\n-----\n\n**Structure:** The distribution is structured as follows:\n\n1. **java/source** - source files for the toolkit.\n2. **java/javadocs** - Javadocs for the toolkit.\n3. **java/unittests** - JUnit tests for the toolkit.\n4. **python** - code to run demonstration applications calling the java toolkit.\n5. **readme.html** - this html file.\n6. **license-gplv3** - GNU General Public License v3.\n\n**Using the toolkit**: main use of the toolkit is via the class **partialinfodecomp.discrete.PartialInfoDecomposer**. One would typically call its methods in the following order:\n\n1. Construct, e.g.:\n\n            PartialInfoDecomposer pid = new PartialInfoDecomposer(int, int[])\n\n2. Provide observations (these can be accumulated, i.e. added multiple times):\n\n            pid.addObservations(int[], int[][])\n            pid.addObservation(int, int[])\n\n3. Compute required Imin and PI entities (all returned in bits):\n        \n            pid.Imin(NodeOfElements)\n            pid.PI(NodeOfElements)\n\n4. Re-initialise (then start adding observations again):\n\n            pid.initialise()\n\nSample code\n-----------\n\nSimple examples can be seen in the unittests/partialinfodecomp/discrete/PartialInfoDecomposerTester.java unit test.\n\nA more detailed sample application of the code is provided in the python directory (to be added at a later date)\n\nContact\n-------\n\n[Joe Lizier](mailto:lizier at mis dot mpg dot de) and [Ben Flecker](mailto:btflecker at gmail dot com)\n\nLast updated 10/05/2012.\n", 
  "id": 4153248
}