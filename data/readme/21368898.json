{
  "README": "Enumerating Polytropes (arxiv:1310.2012)\nInput, output files and codes for polytrope enumeration. \n\nInput files:\ngfan4.maximal: reduced Grobner bases, with generators of the \nsymmetric gorup S_4, for the open cones of the\npolyhedral complex GF_4|P (n = 4)\ngfan5.maximal: same as above for n = 5\ngfan6.maximal: same as above for n = 6\nrays.gfp4: the rays of GF_4|P, listed in output/gfan4.gfp\ncones.gfp4: cones of GF_4|P, one for each orbit, listed in output/gfan4.gfp\n\nScript:\nparsegfangrobner.py: this Python 2.7 code takes in rays.gfp4 and cones.gfp4, \nremoves cones which correspond to lower dimensional polytropes, \nand returns the number of full-dimensional polytrope cones. \n\nExample run (n = 4):\nWe computed all cones of GF_4|P using gfan by running:\ngfan_topolyhedralfan --symmetry < input/gfan4.maximal > output/gfan4.gfp\n\nNumber of combinatorial tropical types of polytropes in TP^3 is the \nnumber of 'New Orbits' in gfan4.gfp. We can count this by running:\n\nfgrep output/gfan4.gfp -e 'New Orbit' | wc -l\n\nTake this number, divide by 2 and subtract the number of maximal cones (since \neach orbit is displayed twice each time, and the maximal cones are display 4 times). \nFor n = 4, for example, we get 1026. \n\nFrom gfan4.gfp, we extracted the list of rays into input/rays.gfp4, \nand the cones into input/cones.gfp4, one for each orbit representative. \n\nFinally, run parsegfangrobner.py with input names input/rays.gfp4, input/cones.gfp4. \nThis returns 1013 - the number of full-dimensional polytrope cones of GF_4|P.\n\n\n\n", 
  "read_at": 1462547190, 
  "description": "Codes for the arxiv paper Enumerating Polytropes", 
  "id": 21368898
}