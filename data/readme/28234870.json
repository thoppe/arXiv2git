{
  "read_at": 1462557053, 
  "description": "Python framework for inference in Hawkes processes.", 
  "README.md": "PyHawkes implements a variety of Bayesian inference algorithms\nfor discovering latent network structure\ngiven point process observations. Suppose you observe timestamps\nof Twitter messages, but you\ndon't get to see how those users are connected\nto one another.\nYou might infer that there is an unobserved connection from\none user to another if the first user's activity tends to precede the second user's.\nThis intuition\nis formalized by combining excitatory point processes\n(aka *Hawkes processes*)  with random network\nmodels and performing Bayesian inference to discover the latent network.\n\nExamples\n===\nWe provide a number of classes for building and fitting such models.\nLet's walk through a simple example\nwhere  we construct a discrete time model with three nodes, as in `examples/discrete_demo`.\nThe nodes are connected via an excitatory network such that each event increases\nthe likelihood of subsequent events on downstream nodes.\n```python\n# Create a simple random network with K nodes a sparsity level of p\n# Each event induces impulse responses of length dt_max on connected nodes\nK = 3\np = 0.25\ndt_max = 20\nnetwork_hypers = {\"p\": p, \"allow_self_connections\": False}\ntrue_model = DiscreteTimeNetworkHawkesModelSpikeAndSlab(\n    K=K, dt_max=dt_max, network_hypers=network_hypers)\n\n# Generate T time bins of events from the the model\n# S is the TxK event count matrix, R is the TxK rate matrix\nS,R = true_model.generate(T=100)\ntrue_model.plot()\n```\n\nYou should see something like this. Here, each event on node one adds\nan impulse response on the rate of nodes two and three.\n![True Model](https://raw.githubusercontent.com/slinderman/pyhawkes/master/data/gifs/true.gif)\n\nNow create a test model and try to infer the network given only the event counts.\n```python\n# Create the test model, add the event count data, and plot\ntest_model = DiscreteTimeNetworkHawkesModelSpikeAndSlab(\n    K=K, dt_max=dt_max, network_hypers=network_hypers)\ntest_model.add_data(S)\nfig, handles = test_model.plot(color=\"#e41a1c\")\n\n# Run a Gibbs sampler\nN_samples = 100\nlps = []\nfor itr in xrange(N_samples):\n    test_model.resample_model()\n    lps.append(test_model.log_probability())\n\n    # Update plots\n    test_model.plot(handles=test_handles)\n```\n\nIf you enable interactive plotting, you should see something like this.\n![Inferred Model](https://raw.githubusercontent.com/slinderman/pyhawkes/master/data/gifs/hawkes_inf_anim.gif)\n\nIn addition to Gibbs sampling, we have implemented maximum a posteriori (MAP) estimation,\nmean field variational Bayesian inference, and stochastic variational inference. To\nsee how those methods can be used, look in `examples/inference`.\n\nInstallation\n===\nTo check out, run \n`git clone git@github.com:slinderman/pyhawkes.git`\n\nTo compile the cython code, run\n`python setup.py build_ext --inplace`\n  \nThis codebase is considerably cleaner than the old CUDA version, and is still\nquite fast with the Cython+OMP extensions and joblib for parallel sampling of\nthe adjacency matrix.\n\nFor installing on OSX see the [INSTALL_OSX.md](INSTALL_OSX.md) file.\n\n\nMore Information\n===\nComplete details of this work can be found in:\n\n Linderman, Scott W. and Adams, Ryan P. Discovering Latent Network Structure in Point Process Data.\n *International Conference on Machine Learning (ICML)*, 2014.\n\nand\n\n Linderman, Scott W., and Adams, Ryan P. Scalable Bayesian Inference for Excitatory Point Process Networks.\n *arXiv preprint arXiv:1507.03228*, 2015.\n", 
  "id": 28234870
}