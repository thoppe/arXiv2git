{
  "read_at": 1462559003, 
  "description": "", 
  "README.txt": "*******************************************************************************\n*                                                                             *\n*            vHLLE : a 3D viscous hydrodynamic code                           *\n*            by Iurii Karpenko                                                *\n*  For the detailed description please refer to:                              *\n*  Comput. Phys. Commun. 185 (2014), 3016    [arXiv:1312.4160]                *\n*                                                                             *\n*  This code can be freely used and redistributed, provided that this         *\n*  copyright appear in all the copies. If you decide to make modifications    *\n*  to the code, please contact the authors, especially if you plan to publish *\n*  the results obtained with such modified code. Any publication of results   *\n*  obtained using this code must include the reference to:                    *\n*  Comput. Phys. Commun. 185 (2014), 3016    [arXiv:1312.4160]                *\n*                                                                             *\n*******************************************************************************\n\n\n This package contains source code of vHLLE.\n To get familiar with the code please use 'cpc_final' branch.\n \n The description below applies for the 'cpc_final' branch of the code.\n \n \n 0. BRIEF DESCRIPTION OF THE PACKAGE\n \n The package contains the following files:\n Makefile\n src/      : source subdirectory\n  |- inc.h : predefined constants\n  |- rmn.h, rmn.cpp : transformation procedures from conserved variables to\n  |                   primitive variables and back\n  |- cll.h, cll.cpp : Cell class which stores and manipulates the properties of\n  |                   the individual hydro cell\n  |- eos.h, eos.cpp : EoS class, equation of state information\n  |- fld.h, fld.cpp : Fluid class, which contains fluid (3D array of fluid cells)\n  |                   as a whole and performs auxiliary actions on a fluid\n  |- ic.h, ic.cpp : initial conditions for fluid-dynamical evolution from\n  |                 optical Glauber or Guber flow\n  |- s95p.h, s95p.cpp: manages tabular initial conditions and EoS 's95' (for optional use)\n  |- trancoeff.h, trancoeff.cpp : Trancoeff class containing transport\n  |                               coefficients: (T-dependent) shear, bulk\n  |                               viscosites and corresponding relaxation times\n  |- hdo.h, hdo.cpp : Hydro class, which contains the algorithms of hydrodynamic solution\n  \\- main.cpp : main() function, initializes all the objects and calls ecolution\n                loop, also takes care of reading the parameters of the\n                simulation from parameter file\n params/  : subdirectory with parameter files, see their description below\n eos/Laine_nf3.dat : equation of state, latticeQCD inspired results\n                     from M. Laine and Y. Schroder, PRD 73, 085009\n ic/      : sample tabulated initial conditions, used for 3D run\n hydro_output/  : subdirectory containing hydrodynamic optput (generated by the\n                  code) and Gnuplot scripts to make some of the plots presented\n                  in the paper. See the description in Sect. II below.\n\n\n I. BUILDING vHLLE on Linux\n\n 1) The following software must be installed in order to compile the code:\n make, g++, binutils, ROOT\n \n To install those packages,\n -> on Ubuntu 11.x - 14.x run:\n sudo apt-get install make g++ binutils root-system\n -> on Fedora 18 and above run: \n sudo yum install make gcc binutils root\n \n The latest version of the ROOT package is also available at http://root.cern.ch/\n \n Optionally, to run Gluplot scripts provided in the program package one has to\n install Gnuplot and awk (gawk).\n  \n 2) Unpack the code: \n mkdir vHLLE\n tar xzf vHLLE.tar.gz -C vHLLE\n cd vHLLE\n\n 3) make the code:\n make\n \n \n II. RUNNING vHLLE\n \n 1. to run the code, type\n ./hlle_visc <parameter-file>\n \n Sample parameter files are located in \"params\" subdirectory. They cover several\n of the presented results:\n\n 1) comparison to VISH2+1 code in Section 4.3 (\"Matter expansion in heavy ion\n  collisions\"). The corresponding parameter files are:\nparams/song2DCPC.*\nThe filename suffixes correspond to:\n b0 = impact parameter 0 fm\n b7 = impact parameter 7 fm\n etas008 = viscous hydro simulation with eta/s=0.08\n ideal = ideal hydro simulation\n \n In order to reproduce the comparison plots (Figures 9, 10) one should run the\n code with all 4 input files. This will create subdirectories \"song2D.*\" with \n hydrodynamic output for each parameter set. Then Gunplot scripts hydro_output/*.plot \n will read and parse the hydrodynamic output and draw the corresponding plots.  \n Then run Gnuplot with \"hydro_output\" as working directory, and load one of the \n scripts in Gnuplot prompt:\n\n cd hydro_output\n gnuplot\n gnuplot> load 'radFlow.plot'  # which creates \"vradSong.eps\" postscript containing Figure 9,\n gnuplot> load 'epsilonp.plot'  # which creates \"epsilonpSong.eps\" postscript containing Figure 10\n \n 2)numerical solution for ideal Gubser flow (end of Section 4.1).\n  The corresponding parameter file is:\nparams/gubserCPC\n\n To produce the plots run Gnuplot with \"hydro_output\" as working directory. In Gnuplot prompt, type:\n gnuplot> load 'gubser.plot'\n which creates \"gubserEps.eps\" and \"gubserVx.eps\", which are Figures 5 and 6,\n respectively.\n\n 3)3D hydro simulation described in Section 4.4 (\"Energy conservation\").\n  The corresponding parameter file is:\nparams/3DCPC\n\n Note that this simulation uses full 3D grid. With the parameters provided, the \n program consumes about 1900 Mbytes of RAM. Therefore please make sure that the \n host machine has enough RAM to run this simulation.\n\n The purpose of this simulation is to check the energy/entropy conservation \n during 3D hydrodynamic expansion of a closed system. The corresponding results \n are presented in Table 1 of the paper. To reproduce the results, please watch \n the console output of the program, which contains total energy and total entropy \n after each timestep.\n Note that by default the code uses the equation of state 'p=epsilon/3'. \n To reproduce the numbers in the middle column of the Table 1 corresponding to \n 'Laine' EoS, please recompile the code with  'EXTRA_FLAGS   = -D TABLE' in Makefile.\n The typical console output of the program is the following:\n \n-----\n.....\nstep= 0  dtau= 0.05\n\ncalcTotals: E =        1402.31  Efull =        1402.33\n           Px =              0      S =        6869.23\n.....\n------\nwhere\n      E : total energy of the system [GeV], computed from ideal part of the\n          energy-momentum system only,\n  Efull : total energy of system including viscous terms in energy-momentum tensor,\n     Px : x-component of the total momentum\n      S : total enrgopy including viscous terms\n\n\n III. STRUCTURE OF THE OUTPUT FILES\n \n Each hydrodynamic simulation records its results in a separate directory, which \n is specified by the value of 'outputDir' parameter in the corresponding parameter \n file. Below we denote the cells used for the output as  cell(ix,iy,iz), where\n ix=[0...nx-1]  is x-coordinate of cell on 3D grid\n iy=[0...ny-1]  is y-coordinate of cell on 3D grid\n iz=[0...nz-1]  is z-coordinate of cell on 3D grid\n\n As a result of the simulation the output directory contains the following files:\n outx.dat    :   distributions in cells along X direction at every timestep.\n                 The cells used are cell(ix,ny/2,nz/2),  ix=0...nx-1\n outy.dat    :   distributions in cells along Y direction at every timestep.\n                 The cells used are cell(nx/2,iy,nz/2),  iy=0...ny-1\n outz.dat    :   distributions in cells along Z direction at every timestep.\n                 The cells used are cell(nx/2,ny/2,iz),  iz=0...nz-1\n outdiag.dat :   distributions in cells along diagonal direction in XY plane\n                 at every timestep. The cells used are cell(ix,ix,iz), ix=0...nx-1\n                 Works reliabaly if nx=ny\n out.aniz.dat:   grid-integrated quantities $\\epsilon_p$, $\\epsilon_p'$ \n                 (see Subsection 4.3 \"Matter expansion in ...\")\n \n The format of the columns in the output files is:\n \n outx.dat:\n t  x  vx  vy  eps  nb  T  mub  [pi*10]  Pi  cut_flag\n \n outy.dat:\n t  y  vy  vx  eps  nb  T  mub  [pi*10]  Pi  cut_flag\n\n outz.dat:\n t  z  vz  vx  eps  nb  T  mub  [pi*10]  Pi  cut_flag\n\n outdiag.dat:\n t  sqrt(x*x+y*y)  vx  vy  eps  nb  T  mub  [pi*10]  Pi  cut_flag\n \n out.aniz.dat:\n t  <vt>  <epsilon_p>  <epsilon_p'>\n \n where\n t : proper time [fm/c]\n x : x coordinate [fm]\n y : y coordinate [fm]\n z : rapidity\n vx : x-component of 3-velocity\n vy : x-component of 3-velocity\n vz : longitudinal flow rapifity\n eps : energy density in fluid rest frame [GeV/fm^3]\n nb : baryon density in fluid rest frame [1/fm^3]\n T  : temperature [GeV]\n mub : baryon chemical potential [GeV]\n [pi*10] : $\\pi^{mu\\nu}$ components: $\\pi^{\\tau\\tau}$, $\\pi^{\\tau x}$, \n           $\\pi^{\\tau y}$, $\\pi^{\\tau\\eta}$, $\\pi^{xx}$, $\\pi^{xy}$, $\\pi^{x\\eta}$, \n           $\\pi^{yy}$, $\\pi^{y\\eta}$, $\\pi^{\\eta\\eta}$. All the components \n           correspond to $\\tilde{\\pi^{\\mu\\nu}}$, see Section 2. Unirs are [GeV/fm^3]\n Pi : bulk pressure [GeV/fm^3]\n cut_flag : viscous corrections are cut by cut_flag factor in the cell \n            (not cut if cut_flag = 1.0)\n", 
  "id": 35552727
}