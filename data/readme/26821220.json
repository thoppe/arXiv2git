{
  "README-alt.md": "## Getting Started\n\nSince version 0.7.11, BWA-MEM supports read mapping against a reference genome\nwith long alternative haplotypes present in separate ALT contigs. To use the\nALT-aware mode, users need to provide pairwise ALT-to-reference alignment in the\nSAM format and rename the file to \"*idxbase*.alt\". For GRCh38, this alignment\nis available from the [BWA resource bundle for GRCh38][res].\n\n#### Option 1: Mapping to the official GRCh38 with ALT contigs\n\nConstruct the index:\n```sh\nwget ftp://ftp.ncbi.nlm.nih.gov/genbank/genomes/Eukaryotes/vertebrates_mammals/Homo_sapiens/GRCh38/seqs_for_alignment_pipelines/GCA_000001405.15_GRCh38_full_analysis_set.fna.gz\ngzip -d GCA_000001405.15_GRCh38_full_analysis_set.fna.gz\nmv GCA_000001405.15_GRCh38_full_analysis_set.fna hs38a.fa\nbwa index hs38a.fa\ncp bwa-hs38-bundle/hs38d4.fa.alt hs38a.fa.alt\n```\n\nPerform mapping:\n```sh\nbwa mem hs38a.fa read1.fq read2.fq \\\n  | bwa-hs38-bundle/k8-linux bwa-postalt.js hs38a.fa.alt \\\n  | samtools view -bS - > aln.unsrt.bam\n```\n\nIn the final alignment, a read may be placed on the [primary assembly][grcdef]\nand multiple overlapping ALT contigs at the same time (on multiple SAM lines).\nMapping quality (mapQ) is properly adjusted by the postprocessing script\n`bwa-postalt.js` using the ALT-to-reference alignment `hs38a.fa.alt`. For\ndetails, see the [Methods section](#methods).\n\n#### Option 2: Mapping to the collection of GRCh38, decoy and HLA genes\n\nConstruct the index:\n```sh\ncat hs38a.fa bwa-hs38-bundle/hs38d4-extra.fa > hs38d4.fa\nbwa index hs38d4.fa\ncp bwa-hs38-bundle/hs38d4.fa.alt .\n```\nPerform mapping:\n```sh\nbwa mem hs38d4.fa read1.fq read2.fq \\\n  | bwa-hs38-bundle/k8-linux bwa-postalt.js -p postinfo hs38d4.fa.alt \\\n  | samtools view -bS - > aln.unsrt.bam\n```\nThe benefit of this option is to have a more complete reference sequence and\nto facilitate HLA typing with a 3rd-party tool (see below).\n\n***If you are not interested in the way BWA-MEM performs ALT mapping, you can\nskip the rest of this documentation.***\n\n## Background\n\nGRCh38 consists of several components: chromosomal assembly, unlocalized contigs\n(chromosome known but location unknown), unplaced contigs (chromosome unknown)\nand ALT contigs (long clustered variations). The combination of the first three\ncomponents is called the *primary assembly*. You can find the more exact\ndefinitions from the [GRC website][grcdef].\n\nGRCh38 ALT contigs are totaled 109Mb in length, spanning 60Mbp genomic regions.\nHowever, sequences that are highly diverged from the primary assembly only\ncontribute a few million bp. Most subsequences of ALT contigs are highly similar\nor identical to the primary assembly. If we align sequence reads to GRCh38+ALT\ntreating ALT equal to the primary assembly, we will get many reads with zero\nmapping quality and lose variants on them. It is crucial to make the mapper\naware of ALTs.\n\nBWA-MEM is designed to minimize the interference of ALT contigs such that on the\nprimary assembly, the ALT-aware alignment is highly similar to the alignment\nwithout using ALT contigs in the index. This design choice makes it almost\nalways safe to map reads to GRCh38+ALT. Although we don't know yet how much\nvariations on ALT contigs contribute to phenotypes, we would not get the answer\nwithout mapping large cohorts to these extra sequences. We hope our current\nimplementation encourages researchers to use ALT contigs soon and often.\n\n## Methods\n\n### Sequence alignment\n\nAs of now, ALT mapping is done in two separate steps: BWA-MEM mapping and\npostprocessing.\n\n#### Step 1: BWA-MEM mapping\n\nAt this step, BWA-MEM reads the ALT contig names from \"*idxbase*.alt\", ignoring\nthe ALT-to-ref alignment, and labels a potential hit as *ALT* or *non-ALT*,\ndepending on whether the hit lands on an ALT contig or not. BWA-MEM then reports\nalignments and assigns mapQ following these two rules:\n\n1. The original mapQ of a non-ALT hit is computed across non-ALT hits only.\n   The reported mapQ of an ALT hit is computed across all hits.\n\n2. If there are no non-ALT hits, the best ALT hit is outputted as the primary\n   alignment. If there are both ALT and non-ALT hits, non-ALT hits will be\n   primary. ALT hits are reported as supplementary alignments (flag 0x800) only\n   if they are better than all overlapping non-ALT hits.\n\nIn theory, non-ALT alignments from step 1 should be identical to alignments\nagainst a reference genome with ALT contigs. In practice, the two types of\nalignments may differ in rare cases due to seeding heuristics. When an ALT hit\nis significantly better than non-ALT hits, BWA-MEM may miss seeds on the\nnon-ALT hits. This happens more often for contig mapping.\n\nIf we don't care about ALT hits, we may skip postprocessing (step 2).\nNonetheless, postprocessing is recommended as it improves mapQ and gives more\ninformation about ALT hits.\n\n#### Step 2: Postprocessing\n\nPostprocessing is done with a separate script `bwa-postalt.js`. It reads all\npotential hits reported in the XA tag, lifts ALT hits to the chromosomal\npositions using the ALT-to-ref alignment, groups them after lifting and then\nreassigns mapQ based on the best scoring hit in each group with all the hits in\na group get the same mapQ. Being aware of the ALT-to-ref alignment, this script\ncan greatly improve mapQ of ALT hits and occasionally improve mapQ of non-ALT\nhits.\n\nThe script also measures the presence of each ALT contig. For a group of\noverlapping ALT contigs c_1, ..., c_m, the weight for c_k equals `\\frac{\\sum_j\nP(c_k|r_j)}{\\sum_j\\max_i P(c_i|r_j)}`, where `P(c_k|r)=\\frac{pow(4,s_k)}{\\sum_i\npow(4,s_i)}` is the posterior of c_k given a read r mapped to it with a\nSmith-Waterman score s_k. This weight is reported in `postinfo.ctw` in the\noption 2 above.\n\n### On the completeness of GRCh38+ALT\n\nWhile GRCh38 is much more complete than GRCh37, it is still missing some true\nhuman sequences. To make sure every piece of sequence in the reference assembly\nis correct, the [Genome Reference Consortium][grc] (GRC) require each ALT contig\nto have enough support from multiple sources before considering to add it to the\nreference assembly. This careful procedure has left out some sequences, one of\nwhich is [this example][novel], a 10kb contig assembled from CHM1 short\nreads and present also in NA12878. You can try [BLAT][blat] or [BLAST][blast] to\nsee where it maps.\n\nFor a more complete reference genome, we compiled a new set of decoy sequences\nfrom GenBank clones and the de novo assembly of 254 public [SGDP][sgdp] samples.\nThe sequences are included in `hs38d4-extra.fa` from the [BWA resource bundle\nfor GRCh38][res].\n\nIn addition to decoy, we also put multiple alleles of HLA genes in\n`hs38d4-extra.fa`. These genomic sequences were acquired from [IMGT/HLA][hladb],\nversion 3.18.0. Script `bwa-postalt.js` also helps to genotype HLA genes, though\nnot to high resolution for now.\n\n### More on HLA typing\n\nIt is [well known][hlalink] that HLA genes are associated with many autoimmune\ndiseases as well as some others not directly related to the immune system.\nHowever, many HLA alleles are highly diverged from the reference genome. If we\nmap whole-genome shotgun (WGS) reads to the reference only, many\nallele-informative will get lost. As a result, the vast majority of WGS projects\nhave ignored these important genes.\n\nWe recommend to include the genomic regions of classical HLA genes in the BWA\nindex. This way we will be able to get a more complete collection of reads\nmapped to HLA. We can then isolate these reads with little computational cost\nand type HLA genes with another program, such as [Warren et al (2012)][hla4],\n[Liu et al (2013)][hla2], [Bai et al (2014)][hla3], [Dilthey et al (2014)][hla1]\nor others from [this list][hlatools].\n\nIf the postprocessing script `bwa-postalt.js` is invoked with `-p prefix`, it\nwill also write the top three alleles to file `prefix.hla`. However, as most HLA\nalleles from IMGT/HLA don't have intronic sequences and thus are not included in\nthe BWA index from option 2, we are unable to type HLA genes to high resolution\nwith the BWA-MEM mapping alone. A dedicated tool is recommended for accurate\ntyping.\n\n### Evaluating ALT Mapping\n\n(Coming soon...)\n\n## Problems and Future Development\n\nThere are some uncertainties about ALT mappings - we are not sure whether they\nhelp biological discovery and don't know the best way to analyze them. Without\nclear demand from downstream analyses, it is very difficult to design the\noptimal mapping strategy. The current BWA-MEM method is just a start. If it\nturns out to be useful in research, we will probably rewrite bwa-postalt.js in C\nfor performance; if not, we may make changes. It is also possible that we might\nmake breakthrough on the representation of multiple genomes, in which case, we\ncan even get rid of ALT contigs for good.\n\n\n\n[res]: https://sourceforge.net/projects/bio-bwa/files/\n[sb]: https://github.com/GregoryFaust/samblaster\n[grc]: http://www.ncbi.nlm.nih.gov/projects/genome/assembly/grc/\n[novel]: https://gist.github.com/lh3/9935148b71f04ba1a8cc\n[blat]: https://genome.ucsc.edu/cgi-bin/hgBlat\n[blast]: http://blast.st-va.ncbi.nlm.nih.gov/Blast.cgi?PROGRAM=blastn&PAGE_TYPE=BlastSearch&LINK_LOC=blasthome\n[sgdp]: http://www.simonsfoundation.org/life-sciences/simons-genome-diversity-project/\n[hladb]: http://www.ebi.ac.uk/ipd/imgt/hla/\n[grcdef]: http://www.ncbi.nlm.nih.gov/projects/genome/assembly/grc/info/definitions.shtml\n[hla1]: http://biorxiv.org/content/early/2014/07/08/006973\n[hlalink]: http://www.hladiseaseassociations.com\n[hlatools]: https://www.biostars.org/p/93245/\n[hla2]: http://nar.oxfordjournals.org/content/41/14/e142.full.pdf+html\n[hla3]: http://www.biomedcentral.com/1471-2164/15/325\n[hla4]: http://genomemedicine.com/content/4/12/95\n", 
  "read_at": 1462554027, 
  "description": "The Burrows-Wheeler Aligner for the Cray XMT by adjusting the original c-code.", 
  "README.md": "[![Build Status](https://travis-ci.org/lh3/bwa.svg?branch=dev)](https://travis-ci.org/lh3/bwa)\n[![Build Status](https://drone.io/github.com/lh3/bwa/status.png)](https://drone.io/github.com/lh3/bwa/latest)\n##Getting started\n\n\tgit clone https://github.com/lh3/bwa.git\n\tcd bwa; make\n\t./bwa index ref.fa\n\t./bwa mem ref.fa read-se.fq.gz | gzip -3 > aln-se.sam.gz\n\t./bwa mem ref.fa read1.fq read2.fq | gzip -3 > aln-pe.sam.gz\n\n##Introduction\n\nBWA is a software package for mapping DNA sequences against a large reference\ngenome, such as the human genome. It consists of three algorithms:\nBWA-backtrack, BWA-SW and BWA-MEM. The first algorithm is designed for Illumina\nsequence reads up to 100bp, while the rest two for longer sequences ranged from\n70bp to a few megabases. BWA-MEM and BWA-SW share similar features such as the\nsupport of long reads and chimeric alignment, but BWA-MEM, which is the latest,\nis generally recommended as it is faster and more accurate. BWA-MEM also has\nbetter performance than BWA-backtrack for 70-100bp Illumina reads.\n\nFor all the algorithms, BWA first needs to construct the FM-index for the\nreference genome (the **index** command). Alignment algorithms are invoked with\ndifferent sub-commands: **aln/samse/sampe** for BWA-backtrack,\n**bwasw** for BWA-SW and **mem** for the BWA-MEM algorithm.\n\n##Availability\n\nBWA is released under [GPLv3][1]. The latest source code is [freely\navailable at github][2]. Released packages can [be downloaded][3] at\nSourceForge. After you acquire the source code, simply use `make` to compile\nand copy the single executable `bwa` to the destination you want. The only\ndependency required to build BWA is [zlib][14].\n\n##Seeking helps\n\nThe detailed usage is described in the man page available together with the\nsource code. You can use `man ./bwa.1` to view the man page in a terminal. The\n[HTML version][4] of the man page can be found at the [BWA website][5]. If you\nhave questions about BWA, you may [sign up the mailing list][6] and then send\nthe questions to [bio-bwa-help@sourceforge.net][7]. You may also ask questions\nin forums such as [BioStar][8] and [SEQanswers][9].\n\n##Citing BWA\n\n* Li H. and Durbin R. (2009) Fast and accurate short read alignment with\n Burrows-Wheeler transform. *Bioinformatics*, **25**, 1754-1760. [PMID:\n [19451168][10]]. (if you use the BWA-backtrack algorithm)\n\n* Li H. and Durbin R. (2010) Fast and accurate long-read alignment with\n Burrows-Wheeler transform. *Bioinformatics*, **26**, 589-595. [PMID:\n [20080505][11]]. (if you use the BWA-SW algorithm)\n\n* Li H. (2013) Aligning sequence reads, clone sequences and assembly contigs\n with BWA-MEM. [arXiv:1303.3997v2][12] [q-bio.GN]. (if you use the BWA-MEM\n algorithm or the **fastmap** command, or want to cite the whole BWA package)\n\nPlease note that the last reference is a preprint hosted at [arXiv.org][13]. I\ndo not have plan to submit it to a peer-reviewed journal in the near future.\n\n##Frequently asked questions (FAQs)\n\n1. [What types of data does BWA work with?](#type)\n2. [Why does a read appear multiple times in the output SAM?](#multihit)\n3. [Does BWA work on reference sequences longer than 4GB in total?](#4gb)\n4. [Why can one read in a pair has high mapping quality but the other has zero?](#pe0)\n5. [How can a BWA-backtrack alignment stands out of the end of a chromosome?](#endref)\n\n####<a name=\"type\"></a>1. What types of data does BWA work with?\n\nBWA works with a variety types of DNA sequence data, though the optimal\nalgorithm and setting may vary. The following list gives the recommended\nsettings:\n\n* Illumina/454/IonTorrent single-end reads longer than ~70bp or assembly\n  contigs up to a few megabases mapped to a closely related reference genome:\n\n\t\tbwa mem ref.fa reads.fq > aln.sam\n\n* Illumina single-end reads shorter than ~70bp:\n\n\t\tbwa aln ref.fa reads.fq > reads.sai; bwa samse ref.fa reads.sai reads.fq > aln-se.sam\n\n* Illumina/454/IonTorrent paired-end reads longer than ~70bp:\n\n\t\tbwa mem ref.fa read1.fq read2.fq > aln-pe.sam\n\n* Illumina paired-end reads shorter than ~70bp:\n\n\t\tbwa aln ref.fa read1.fq > read1.sai; bwa aln ref.fa read2.fq > read2.sai\n\t\tbwa sampe ref.fa read1.sai read2.sai read1.fq read2.fq > aln-pe.sam\n\n* PacBio subreads or Oxford Nanopore reads to a reference genome:\n\n\t\tbwa mem -x pacbio ref.fa reads.fq > aln.sam\n\t\tbwa mem -x ont2d ref.fa reads.fq > aln.sam\n\nBWA-MEM is recommended for query sequences longer than ~70bp for a variety of\nerror rates (or sequence divergence). Generally, BWA-MEM is more tolerant with\nerrors given longer query sequences as the chance of missing all seeds is small.\nAs is shown above, with non-default settings, BWA-MEM works with Oxford Nanopore\nreads with a sequencing error rate over 20%.\n\n####<a name=\"multihit\"></a>2. Why does a read appear multiple times in the output SAM?\n\nBWA-SW and BWA-MEM perform local alignments. If there is a translocation, a gene\nfusion or a long deletion, a read bridging the break point may have two hits,\noccupying two lines in the SAM output. With the default setting of BWA-MEM, one\nand only one line is primary and is soft clipped; other lines are tagged with\n0x800 SAM flag (supplementary alignment) and are hard clipped.\n\n####<a name=\"4gb\"></a>3. Does BWA work on reference sequences longer than 4GB in total?\n\nYes. Since 0.6.x, all BWA algorithms work with a genome with total length over\n4GB. However, individual chromosome should not be longer than 2GB.\n\n####<a name=\"pe0\"></a>4. Why can one read in a pair has high mapping quality but the other has zero?\n\nThis is correct. Mapping quality is assigned for individual read, not for a read\npair. It is possible that one read can be mapped unambiguously, but its mate\nfalls in a tandem repeat and thus its accurate position cannot be determined.\n\n####<a name=\"endref\"></a>5. How can a BWA-backtrack alignment stands out of the end of a chromosome?\n\nInternally BWA concatenates all reference sequences into one long sequence. A\nread may be mapped to the junction of two adjacent reference sequences. In this\ncase, BWA-backtrack will flag the read as unmapped (0x4), but you will see\nposition, CIGAR and all the tags. A similar issue may occur to BWA-SW alignment\nas well. BWA-MEM does not have this problem.\n\n\n\n[1]: http://en.wikipedia.org/wiki/GNU_General_Public_License\n[2]: https://github.com/lh3/bwa\n[3]: http://sourceforge.net/projects/bio-bwa/files/\n[4]: http://bio-bwa.sourceforge.net/bwa.shtml\n[5]: http://bio-bwa.sourceforge.net/\n[6]: https://lists.sourceforge.net/lists/listinfo/bio-bwa-help\n[7]: mailto:bio-bwa-help@sourceforge.net\n[8]: http://biostars.org\n[9]: http://seqanswers.com/\n[10]: http://www.ncbi.nlm.nih.gov/pubmed/19451168\n[11]: http://www.ncbi.nlm.nih.gov/pubmed/20080505\n[12]: http://arxiv.org/abs/1303.3997\n[13]: http://arxiv.org/\n[14]: http://zlib.net/\n[15]: https://github.com/lh3/bwa/tree/mem\n[16]: ftp://ftp.ncbi.nlm.nih.gov/genbank/genomes/Eukaryotes/vertebrates_mammals/Homo_sapiens/GRCh38/seqs_for_alignment_pipelines/\n", 
  "id": 26821220
}