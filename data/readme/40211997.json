{
  "read_at": 1462545863, 
  "description": "A fast and flexible algorithm for solving the graph-fused lasso", 
  "README.md": "A Fast, Flexible Algorithm for the Graph-Fused Lasso\n----------------------------------------------------\n\n<p align=\"center\">\n  <img src=\"https://github.com/tansey/gfl/blob/master/img/example1.png?raw=true\" alt=\"Example GFL Solution\"/>\n</p>\n\nThe goal in the graph-fused lasso (GFL) is to find a solution to the following convex optimization problem:\n\n<p align=\"center\">\n  <img src=\"https://github.com/tansey/gfl/blob/master/img/eq1.png?raw=true\" alt=\"GFL Convex Optimization Problem\"/>\n</p>\n\nwhere __l__ is a smooth, convex loss function. The problem assumes you are given a graph structure of edges and nodes, where each node corresponds to a variable and edges between nodes correspond to constraints on the first differences between the variables. The objective function then seeks to find a solution to the above problem that minimizes the loss function over the vertices plus the sum of the first differences defined by the set of edges __E__.\n\nThe solution implemented here is based on the graph-theoretic trail decomposition and ADMM algorithm implemented in [1]. The code relies on a slightly modified version of a linear-time dynamic programming solution to the 1-d (i.e. chain) GFL [2].\n\nPython requirements\n===================\nThe python wrapper requires `numpy`, `scipy`, and `networkx` to be able to run everything.\n\nInstalling\n==========\nThe package can be installed via Pip:\n\n`pip install pygfl`\n\nor directly from source:\n\n```\npython setup.py build\npython setup.py install\n```\n\nNote that the installation has not been tested on anything other than Mac OS X and Ubuntu. The underlying solver is implemented in pure C and should be cross-platform compatible.\n\nRunning\n=======\nThere are two steps in running the GFL solver (once installed). First, you need to decompose your graph into a set of trails then you need to run the C-based GFL solver.\n\n#### 1) Trail decomposition\nSuppose you have a graph file like the one in `example/edges.csv`, where each edge is specified on a new line, with a comma separating vertices:\n\n```\n0,1\n1,2\n3,4\n2,4\n5,4\n6,0\n3,6\n...\n```\n\nYou can then decompose this graph by running the command line `maketrails` script:\n\n```\ntrails file --infile example/edges.csv --savet example/trails.csv\n```\n\nThis will create a file in `example/trails.csv` containing a set of distinct, non-overlapping trails which minimally decomposes the original graph. Next you need to run the solver.\n\n#### 2) Solving via ADMM\nGiven a set of trails in `example/trails.csv` and a vector of observations in `example/data.csv`, you can run the `graphfl` script to execute the GFL solver:\n\n```\ngraphfl example/data.csv example/edges.csv --trails example/trails.csv --o example/smoothed.csv\n```\n\nThis will run a solution path to auto-tune the value of the penalty parameter (the l in equation 1). The results will be saved in `example/smoothed.csv`. The results should look something like the image at the top of the readme.\n\n\nCompiling the C solver lib separately\n=====================================\nTo compile the C solver as a standalone library, you just need to run the make file from the `cpp` directory:\n\n`make all`\n\nThen you will need to make sure that you have the `cpp/lib` directory in your `LD_LIBRARY_PATH`:\n\n`export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/my/path/to/gfl/cpp/lib/`\n\nNote the above instructions are for *nix users.\n\nLicensing\n=========\nThis library / package is distributed under the GNU Lesser General Public License, version 3. Note that a subset of code from [2] was modified and is included in the C source.\n\nReferences\n==========\n[1] W. Tansey and J. G. Scott. \"[A Fast and Flexible Algorithm for the Graph-Fused Lasso](http://arxiv.org/abs/1505.06475),\" arXiv:1505.06475, May 2015.\n\n[2] [glmgen](https://github.com/statsmaths/glmgen)", 
  "id": 40211997
}