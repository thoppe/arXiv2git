{
  "read_at": 1462552842, 
  "description": "Tools for fitting the Extended Empirical Saddlepoint density approximation.", 
  "README.md": "\nThis package implements the Extended Empirical Saddlepoint density approximation (ESA) described in  \n[Fasiolo et al., 2016](http://arxiv.org/abs/1601.01849). The documentation is fairly sparse, but most of the information is contained in the paper.\n\nThe main functions are:\n- `dsaddle` which can be used to evaluate the ESA, given some data.\n- `selectDecay` which can be used to select the tuning parameter of ESA by cross-validation.\n- `findMode` which maximizes ESA in order to find its mode.\n\nHere we describe how to use them with two simple examples. In the first example we the ESA\ndensity to approximate an univariate Gamma(2, 1) density.\n\n```R\nlibrary(\"devtools\")\ninstall_github(\"mfasiolo/esaddle\")\nlibrary(esaddle)\n\n###################################\n######### Univariate Gamma example\n###################################\n\n########## Simulating data\nx <- rgamma(1000, 2, 1)\n\n# Fixing tuning parameter of ESA\ndecay <-  0.05\n\n# Evaluating ESA at several point\nxSeq <- seq(-2, 8, length.out = 200)\ntmp <- dsaddle(y = xSeq, X = x, decay = decay, log = TRUE)\n\n# Plotting true density, ESA and normal approximation\nplot(xSeq, exp(tmp$llk), type = 'l', ylab = \"Density\", xlab = \"x\")\nlines(xSeq, dgamma(xSeq, 2, 1), col = 3)\nlines(xSeq, dnorm(xSeq, mean(x), sd(x)), col = 2)\nsuppressWarnings( rug(x) )\nlegend(\"topright\", c(\"ESA\", \"Truth\", \"Gaussian\"), col = c(1, 3, 2), lty = 1)\n\n# Finding mode of ESA\nres <- findMode(x, init = mean(x), decay = decay)$mode\nabline(v = res, lty = 2, lwd = 1.5)\n\n# Selection tuning parameter of ESA by 2-fold cross-validation on two cores\n# Complexity decreases as decay increases\ntmp <- selectDecay(decay = c(5e-4, 1e-3, 5e-3, 0.01, 0.1, 0.5, 5, Inf), \n                   K = 2,\n                   simulator = function() x,\n                   multicore = T,\n                   ncores = 2)\n                  \n```\n\nIn the second example we consider a banana shape or warped bivariate Gaussian\ndensity.\n\n```R\n\n############################################\n####### Bivariate \"Banana\" example \n############################################\n\n# Function that evaluates the true density\ndwarp <- function(x, alpha) {\n  ## warped normal density\n  d <- length(alpha) + 1\n  lik <- dnorm(x[ , 1], log = TRUE)\n  \n  tmp <- x[ , 1]^2\n  for(ii in 2:d)\n    lik <- lik + dnorm(x[ , ii] - alpha[ii-1]*tmp, log = TRUE)\n  \n  lik\n}\n\n# Function that simulates from true distribution\nrwarp <- function(n = 1, alpha) {\n  d <- length(alpha) + 1\n  z <- matrix(rnorm(n*d), n, d)\n  \n  tmp <- z[ , 1]^2\n  for(ii in 2:d) z[ , ii] <- z[ , ii] + alpha[ii-1]*tmp\n  z\n}\n\n# Creating 2d grid\nm <- 50\nexpansion <- 1\nx1 <- seq(-2, 3, length=m)* expansion; \nx2 <- seq(-3, 3, length=m) * expansion\nx <- expand.grid(x1, x2) \n\n# Evaluating true density on grid\nalpha <- 1\ndw <- dwarp(x, alpha = alpha)\n\n# Simulate random variables\nX <- rwarp(1000, alpha = alpha)\n\n# Evaluating ESA density\ndwa <- dsaddle(as.matrix(x), X, decay = 0.1, log = FALSE)$llk\n\n# Plotting true density\npar(mfrow = c(1, 2))\nplot(X, pch=\".\", col=1, ylim = c(min(x2), max(x2)), xlim = c(min(x1), max(x1)),\n     main = \"True density\", xlab = expression(X[1]), ylab = expression(X[2]))\ncontour(x1, x2, matrix(dw, m, m), levels = quantile(as.vector(dw), seq(0.8, 0.995, length.out = 10)), col=2, add=T)\n\n# Plotting ESA density\nplot(X, pch=\".\",col=2, ylim = c(min(x2), max(x2)), xlim = c(min(x1), max(x1)),\n     main = \"ESA density\", xlab = expression(X[1]), ylab = expression(X[2]))\ncontour(x1, x2, matrix(dwa, m, m), levels = quantile(as.vector(dwa), seq(0.8, 0.995, length.out = 10)), col=2, add=T)\n\n# Finding mode using ESA \ninit <- rnorm(2, 0, sd = c(1, 2)) # random initialization\nres <- findMode(X = X, init = init, decay = decay)$mode\npoints(res[1], res[2], pch = 3, lwd = 2)\n\npar(mfrow = c(1, 1))\n# Selection tuning parameter of ESA by 2-fold cross-validation on 2 cores\n# Complexity decreases as decay increases\ntmp <- selectDecay(decay = c(0.005, 0.01, 0.1, 0.25, 0.5, 1, 5, Inf), \n                   K = 2,\n                   simulator = function() X,\n                   multicore = T,\n                   ncores = 2)\n```\n\nReferences\n----------------------------\n  \n  * Fasiolo, M., Wood, S. N., Hartig, F. and Bravington, M. V. (2016). An Extended Empirical Saddlepoint Approximation for Intractable Likelihoods. ArXiv http://arxiv.org/abs/1601.01849.\n  ", 
  "id": 49058566
}