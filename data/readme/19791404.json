{
  "README": "QCINV\n=====\n\nA python-based C^{-1} filtering code,\nincluding the multigrid approach of \nSmith, Dore, and Zahn (arxiv:0705.3980).\n\nRequirements:\n * numpy\n * pyfits\n * healpy\n\nIs known to work with:\n * python 2.6.1\n * numpy 1.5.0\n * pyfits 2.4.0\n * healpy 0.10.2\n\nOlder versions probably work as well.\n\nIt's not explicitly parallel, but the\nhealpy transforms which dominate the\ncomputational cost can use OpenMP.\n\nTo install:\n\npython setup.py install\n\n(or add the qcinv directory to your $PYTHONPATH)\n\nTo test:\n\nThere are a few scripts in the test/ directory,\nto sanity check pieces of the library. Probably\nwant to run test_cd_solve.py and test_cg_solve.py\nto make sure that the conjugate solvers work, as\nwell as some of the numpy linear algebra.\n\nThe construction of a fast multigrid chain is\nsomething of an art-- there are a few sample\nWMAP chains in the test/test_multigrid directory.\n\nTo give them a try, first download the\nnecessary WMAP data using the get script\n\ncd test/test_multigrid/inputs/wmap\n./get \n\nThen generate a simple WMAP V-band simulation\nwith a sky mask and inhomogeneous noise using\n\ncd test/test_multigrid\nscripts/run_sim_WMAP_inhomog.py\n\nIn the test/test_multigrid/inputs directory\nthere are several sample chains, which can be\nrun using the run_chain.py script.\n\nThey contain:\n chain 1 - simple diagonal preconditioner (no multigrid).\n chain 2 - three stage multigrid, with diagonal preconditioner at each stage.\n chain 3 - four stage multigrid, with diagonal preconditioner at each stage.\n chain 4 - three stage multigrid, with dense preconditioner up to l=64.\n chain 5 - two stage multigrid, with dense preconditioner up to l=64.\n\nChains 4 and 5 are the fastest, and converge to \\epsilon=10^{-6} \nin about 5 minutes on a single core of my 2.6GHz MacBook Pro. \nTo run, just call e.g. \n\nscripts/run_sim_WMAP_inhomog.py inputs/par_sim_WMAP_inhomog_chain_04.py\nscripts/run_chain.py inputs/par_sim_WMAP_inhomog_chain_04.py\n\nThe dense preconditioners take a minute or two to construct,\nbut are cached by the multigrid chain so this isn't much overhead\nif you're going to filter a bunch of simulations. \n", 
  "read_at": 1462546770, 
  "description": "a python-based C^{-1} filtering code for full-sky maps of the cosmic microwave background.", 
  "id": 19791404
}