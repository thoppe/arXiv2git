{
  "read_at": 1462549135, 
  "description": "Tyche", 
  "README.md": "Tyche\n=====\nCopyright (C) 2013 Martin Robinson (martin.robinson@maths.ox.ac.uk)\nPoint your browser to http://people.maths.ox.ac.uk/robinsonm/index.html for more information about the author and other work.\n\nTyche is a multiscale stochastic reaction-diffusion modelling software library. It consists of:\n\n(a) an off-lattice (particle-based) model based on the Smoluchowski model, including diffusion, zeroth-order, unimolecular and bimolecular reactions. \n\n(b) an on-lattice model based on the Next Subvolume Method (based in turn on the Gillespie algorithm). This models stochastic diffusion, and reactions of arbitrary order\n\n(c) a coupling between the off-lattice and on-lattice models, suitable for domain decomposition problems. This implements the Adaptive Two-Regime method, detailed in the following paper:\n\nMartin Robinson, Mark Flegg, Radek Erban, \"Adaptive two-regime method: application to front propagation\", submitted to Journal of Chemical Physics (http://arxiv.org/abs/1312.6338)\n\nInterfaces\n==========\n\nTyche has both C++ and Python interfaces. \n\n\nExample of Python interface\n===========================\n```python\nL = 0.5\nD = 1\ntimesteps = 100000\n\nmax_t = 4.0/(2.0*num_particles**0.5);\nmol_dt = max_t/timesteps\n    \nk2 = 1.0\nk1 = 1.0\n\nbinding =  0.00303416\nunbinding = 0.15*0.00303416\n\nA = tyche.new_species(D)\nB = tyche.new_species(D)\nC = tyche.new_species(D)\n    \nbd = tyche.new_diffusion()\nbd.add_species(A)\nbd.add_species(B)\nbd.add_species(C)\n    \nxlow = tyche.new_xplane(0,1)\nxhigh = tyche.new_xplane(L,-1)\nylow = tyche.new_yplane(0,1)\nyhigh = tyche.new_yplane(L,-1)\nzlow = tyche.new_zplane(0,1)\nzhigh = tyche.new_zplane(L,-1)\n\nxminboundary = tyche.new_jump_boundary(xlow,[L,0,0])\nxmaxboundary = tyche.new_jump_boundary(xhigh,[-L,0,0])\nyminboundary = tyche.new_jump_boundary(ylow,[0,L,0])\nymaxboundary = tyche.new_jump_boundary(yhigh,[0,-L,0])\nzminboundary = tyche.new_jump_boundary(zlow,[0,0,L])\nzmaxboundary = tyche.new_jump_boundary(zhigh,[0,0,-L])\n\nboundaries = tyche.group([xminboundary, xmaxboundary, yminboundary, ymaxboundary, zminboundary, zmaxboundary])\n    boundaries.add_species(A)\n    boundaries.add_species(B)\n    boundaries.add_species(C)\n\ndr2 = tyche.new_bi_reaction(k1, A, B, [C], binding,unbinding, mol_dt, \n                          [0,0,0], [L,L,L], [True, True, True],True)\ndr3 = tyche.new_bi_reaction(k1, A, B, [C], mol_dt, \n                          [0,0,0], [L,L,L], [True, True, True],True)   \n     \ndr = tyche.new_uni_reaction(k2,C,[A,B],unbinding)\n\nalgorithm = tyche.group([bd,boundaries,dr2,dr,boundaries])\n    \nA.fill_uniform([0,0,0],[L,L,L],int(num_particles*L**3))\nB.fill_uniform([0,0,0],[L,L,L],int(num_particles*L**3))\nC.fill_uniform([0,0,0],[L,L,L],int(num_particles*L**3))\n\noutput_dt = max_t/100.0\ntime = 0;\nprint algorithm\n    \nfor i in range(100):\n   print A,B,C\n   print 'time = ',time,' ',i,' percent done'\n   time = algorithm.integrate_for_time(output_dt,mol_dt)\n```\n\n\n", 
  "id": 9020518
}