{
  "read_at": 1462547894, 
  "description": "C library implementing the ridiculously fast CLHash  hashing function", 
  "README.md": "# clhash\n[![Build Status](https://travis-ci.org/lemire/clhash.png)](https://travis-ci.org/lemire/clhash)\n\nC library implementing the ridiculously fast CLHash hashing function\n\n\n CLHash is a very fast hashing function that uses the\n carry-less multiplication and SSE instructions.\n Best used on recent x64 processors (Haswell or better).\n\nCLHash has the following characteristics :\n\n* On a recent Intel processor (e.g., Skylake), it can hash input strings at a speed of 0.1 cycles per byte. You read this right: it is simply ridiculously fast.\n* It has strong theoretical guarantees: XOR universality of short strings and excellent almost universality for longer strings.\n  \nFor details, please see the research article:\n  \nDaniel Lemire, Owen Kaser, Faster 64-bit universal hashing using carry-less multiplications, Journal of Cryptographic Engineering (to appear) http://arxiv.org/abs/1503.03465\n\n## Requirements\n\n \nPlease do not try to compile and run this software on legacy hardware (x64 processors\nbefore Haswell), it will either fail to work or be slow. It should be able to port\nthe code to other architectures such as ARM or POWER processors but performance is\nunknown at this point. And, yes, this means that CLHash is *not* portable hardware-wise.\n\nIf your compiler is not C99 compliant... please get better one.\n\n\n \n \n## Usage \n \n ```bash\n make\n ./unit\n ```\nCompile option: if you define BITMIX during compilation, extra work is done to \npass smhasher's avalanche test succesfully. Disabled by default.\n \n## Code sample\n \n```C\n#include <assert.h>\n\n#include \"clhash.h\"\n\nint main() {\n    void * random =  get_random_key_for_clhash(UINT64_C(0x23a23cf5033c3c81),UINT64_C(0xb3816f6a2c68e530));\n    uint64_t hashvalue1 = clhash(random,\"my dog\",6);\n    uint64_t hashvalue2 = clhash(random,\"my cat\",6);\n    uint64_t hashvalue3 = clhash(random,\"my dog\",6);\n    assert(hashvalue1 == hashvalue3);\n    assert(hashvalue1 != hashvalue2);// very likely to be true\n    free(random);\n    return 0;\n}\n\n``\n", 
  "id": 57042471
}