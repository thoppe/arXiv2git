{
  "read_at": 1462556962, 
  "description": "Fast filtering and animation of large dynamic networks", 
  "README.md": "Fast filtering and animation of large dynamic networks\n======================================================\n\nIntroduction\n------------\n\nThis project is a collection of two tools that filter and visualize large dynamic\nnetworks. More specifically, the tools perform the following functions:\n\n  * The filtering tool. From a chronological sequence of weighthed graph links produce differential updates to a subgraph of the network delegated for visualization in a format of JSON events.\n  * The visualizing tool. Produce movies of evolving graphs from a feed of the JSON events.\n\nIn addition, the filtering tool can send the network updates directly to Gephi\nStreaming API, which visualizes them interactively.\n\nThe filtering tool can be understood as a sliding time-window method with an exponential decay that is limited in computational complexity and memory usage. The method is introduced, described, and analyzed in the publication that is available at http://arxiv.org/abs/1308.0309, using datasets released within this project. In case you decide to use our method or datasets we kindly request that you cite the publication.\n\nDependencies\n------------\n\nThe tools have been tested under Linux and Mac OS systems.\n\nThe filtering tool is written in C++ and needs to be compiled. The visualizing tool is a Python script requiring Python 2.6 or higher.\n\nBefore proceeding to next point of these instructions please check that all the required dependencies specified below are present on your system.\n\nThe filtering tool has the following dependencies on the external libraries and\ncommand line tools:\n  *  Boost library (http://www.boost.org/), version 1.44 or higher.\n  *  JsonCpp library (http://www.boost.org/), version 0.5.0 or higher.\n  *  cpp-netlib library (http://cpp-netlib.org), version 0.9.4 or higher.\n  *  Gephi (https://gephi.org/), with installed plugin Graph Streaming API,\n     it can be installed internally from Gephi\n  *  igraph library (http://igraph.sourceforge.net/).\n\nThe visualizing tool has the following dependencies on the external libraries and\ncommand line tools:\n  *  igraph library (http://igraph.sourceforge.net/), with igraph Python\n     extension module, version 6.0 or higher.\n  *  Cairo library (http://cairographics.org/), it is a prerequisite of igraph\n     to be able to plot graphs, any version that works with the igraph installed\n     is fine.\n  *  Python bindings for Cairo (http://cairographics.org/pycairo/).\n  *  mencoder command line tool (http://en.wikipedia.org/wiki/Mencoder)\n     It is a standard tool present in many modern systems and available in\n     standard repositories.\n\nConfiguring and building\n------------------------\n\nTo configure the system before the compilation of the filtering tool one needs to\nenter paths to the corresponding installed libraries in the configuration file\n``vars.sh`` present in the parent directory of the project. After inputting the paths to the configuration file, in order to compile the\ncode run:\n\n    ./compile.sh\n\nThis command will compile and copy the executable visualize_tweets_finitefile\nto the parent directory of the project. Note that before running\n``visualize_tweets_finitefile`` one needs to tell the linker where the compiled\nlibraries are. The simplest way of achiving it is by following the instructions\nthat are printed after ``compile.sh`` is successfully finished. The other\npossibility is to use ``run.sh`` for launching the tools. This small script\nconfigures the paths itself.\n\n\nRunning Tests\n-------------\n\nBoth the tools can be tested by running:\n\n    ./run.sh test\n\nThe filtering tool can be tested by running from the parent directory:\n\n    ./visualize_tweets_finitefile --input data/test.sdnet --output data/test\n\nThe visualizing tool does not require installation and can be launched from the\nparent directory of the project:\n\n    python scripts/DynamicGraph_wici.py data/test.json\n\n\nRe-creating the demo movies\n---------------------------\n\nThe tools are released together with four datasets that reside in the directory\n``data``. For each of the datasets a demo movie has been created using the tools:\n  *  Osama bin Laden's death on Twitter (http://youtu.be/z7goOblZbcI)\n  *  Super Bowl on Twitter (http://youtu.be/uwHNtb5QZlE)\n  *  IMDB movie keywords (http://youtu.be/rN5qWSTOgkM)\n  *  US patent title words (http://youtu.be/3zR-GjgxKWE)\n\nA detailed description of the demo movies is available the full publication\n(available at http://arxiv.org/abs/1308.0309).\n\nThe script ``run.sh`` has been created to automatize the recreation of the\ndemo movie and to store the values of the parameters used for their generation.\n\nTo launch the filtering tool in order to convert the demo ``sdnet`` files that are\nlocated in the directory ``data`` to ``json`` files:\n\n    ./run.sh demo-diffnets\n\nTo launch the visualizing tool in order to create movies from the ``json``files\nstored in the directory ``data`` and save them as ``avi`` in the directory\n``movies``:\n\n    ./run.sh demo-movies\n\n\nInput format\n------------\nThe dynamic network that is given as the input to the filtering tool can have multiple edges and it can be either weigthed or unweigthed. The input file has to be sorted in chronological order with the epoch time used as time stamps. The input files have the following format for each of its lines:\n\n    t1 n1 n2 w1\n    t2 n1 n3 n4 w2\n    ...\n\nWhere `t1` is an epoch time, `n1` stands for node 1, `n2` stands for node 2, and `w1` is the corresponding weight of the connection(s).\n\n  *  Weigthed links - files with the extension ``wdnet``, to run the filtering method for this format use the ``--weigthed`` flag\n  *  Unweigthed links  - files with the extension ``sdnet``, the same format, except the weights are not stored in the files\n\nOne cas see examples of ``wdnet`` and  ``sdnet`` input files in the directory ``data``.\n\n\nCreating your own movies\n------------------------\n\nYou can use the tools to create your own movies of dynamic networks. To learn how to set the parameters of the tools please see Appendix B of our publication (available at http://arxiv.org/abs/1308.0309). The parameters of the filtering tool are to be provided as arguments to ``visualize_tweets_finitefile`` (run ``visualize_tweets_finitefile -h`` for details), while the parameters of the visualizing tool are stored in the configuration file [scripts/Constants.py](scripts/Constants.py).\n\nLaunching interactive visualizations\n------------------------------------\n\nBefore launching interactive visualizations one needs to run server in the Graph\nStreaming API in Gephi. To do this launch Gephi, start new project\nand in the panel called ``Streaming`` select ``Server``, and run it.\nTo make the visualization look better in the ``Labels`` panels turn on\nnode labels, select option ``Size`` proportional to ``Node size``, and\nwith the slider reduce the size of labels by half. Finally, get a\ngraph layout running (e.g., Fruchterman) in the panel called\n``Layout``.\n\nTo launch stream the visualization directly to Gephi for the selected\n``json`` file:\n\n    ./run.sh gephi json_file server_ip_address time_contraction\n\nThe parameter time_contraction is important here. If is low (e.g., 100)\nfor a dataset that has a time span of 100 years, then the visualization\nwill last 1 year, needless to say way to long. To learn how to set the parameters of the tools please see Appendix B of our publication (available at http://arxiv.org/abs/1308.0309).\n\n\n\n\n\n\n", 
  "id": 11455706
}