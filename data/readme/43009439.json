{
  "read_at": 1462549019, 
  "description": "python software portal for vera system", 
  "README.md": "# Vera Chil project\n\n### About the project:\n\n * The project is restricted to research propose only, all rights reserved for University of Waterloo, Canada\n * Project authorized to: Prof. Jesse Hoey, University of Waterloo, member of AGE-WELL\n * Project written by: Aaron Li, research assistent, University of Waterloo\n * This project is intend to build developer environment for smart home system, and support SNAP system as POMDP engine. \n\n### Links:\n* The description of SNAP is [here](https://cs.uwaterloo.ca/~jhoey/research/snap/index.php)\n* The links for research about SNAP is [here](http://arxiv.org/pdf/1206.5698.pdf)\n \n### Project Break down\n\n * Vera Chil, python package: the package allow direct control over VERA smart home system\n * symbolicPerseusJava, Java package: java implementation of SNAP system\n\n### Communication\nThe two parts is connected with python Popen, controlled on both end:\n\n* Vera communication end is controlled by SnapComm class in Vera packages\n* SNAP communication end is controlled by VeraHanlder class\n* The main control is on python side\n\n### Requirement\n* currently have to run in Wifi that within Vera system\n* Vera devices/sensor install required \n\n### example files\n* test.py: example on how to use Vera control system\n* snapTest.py: example on how to combine Vera and Snap system\n\n#### sample analysis: snapTest.py\n* in this example, we are going to look at a VERA-SNAP system that \n\n###### setup the running environment \n* vera system, devices and sensors in the system, communication unit is represent as instances\n* link all abilities in the system, set up parameters, mark down all parameters. For details please check on help for functions\n\n```python\nimport os\nfrom Vera import SnapComm\nfrom Vera import Switch\nfrom Vera import Vera \n\nsc = SnapComm.SnapComm(class_path = \"./symbolicPerseusJava\", feed = \"light\")\nmyvera = Vera.Vera()\nlight1 = Switch.Switch(myvera, 14)\nsc.link_ability('prompt_Af_light1_on', \"HINT: Light can be turned on\", a_snap='turn_light', fail_action='on', \n               tolence=4)\nsc.link_ability('prompt_Rn_light1_on', \"HINT: Light is on your left side\", a_snap='turn_light', fail_action='on', \n               tolence=4)\n```\n\n###### setup the running environment \n* establish the understanding between VERA and SNAP system \n```python\nsc.map_oa('light_switch', 'turn_light', light1, lig### Links:\n* The description of SNAP is [here](https://cs.uwaterloo.ca/~jhoey/research/snap/index.php)\n* The links for research about SNAP is [here](http://arxiv.org/pdf/1206.5698.pdf)ht1)# light1 is both status object and action receive object in this case\n```\n\n###### interaction \n* loop until the target reached\n```python\ntarget_action = \"\"\nwhile not (target_action == \"donothing\"):\n    target_action = sc.read() #check on the ability\n    if target_action == \"donothing\":\n        break\n    sc.follow_default()\n    sc.ability_check(target_action, delay=5)\n    \n    ob_name = sc.read() #read observation \n    ob_state = sc.get_observation(ob_name)\n    sc.write(ob_state)\n    \n    beh_name = sc.read()\n    beh_state = raw_input('Did it? ' + beh_name + ':')\n    sc.write(beh_state)\n```\n###### close the connection\n```python\nsc.end_communication()\n```\n\n### Future of the project:\n###### since time spend on the project is very limited, this project is far from complete, the following is suggestion \n* Add more supports within Vera system, include more types of devicees and command support. \n* Add support system other than Vera. \n* \n\n### Contact information\n\n* [Prof. Jesse Hoey](https://cs.uwaterloo.ca/~jhoey/index.php): jhoey@cs.uwaterloo.ca, \n* [Aaron Li](https://ca.linkedin.com/in/aaron-li-01215748): w89li@uwaterloo.ca, \n", 
  "id": 43009439
}