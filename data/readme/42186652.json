{
  "read_at": 1462548893, 
  "description": "A tool for automatically refactoring test cases in smaller and purer parts", 
  "README.md": "B-Refactoring / Banana-refactoring\n=================\n\nThis repository contains a research prototype for automatically refactoring test cases in smaller parts, with a technique called B-Refactoring.\n\nMain publication:\n[B-Refactoring: Automatic Test Code Refactoring to Improve Dynamic Analysis](https://hal.archives-ouvertes.fr/hal-01309004/document) (Jifeng Xuan, Benoit Cornu, Matias Martinez, Benoit Baudry, Lionel Seinturier, Martin Monperrus), In Information and Software Technology, Elsevier, 2016.\n\n```\n@article{xuan:hal-01309004,\n title = {B-Refactoring: Automatic Test Code Refactoring to Improve Dynamic Analysis},\n author = {Xuan, Jifeng and Cornu, Benoit and Martinez, Matias and Baudry, Benoit and Seinturier, Lionel and Monperrus, Martin},\n journal = {Information and Software Technology},\n publisher = {Elsevier},\n year = {2016},\n}\n```\n\n\nPrevious paper:  [Dynamic Analysis can be Improved with Automatic Test Suite Refactoring](http://arxiv.org/pdf/1506.01883) (Jifeng Xuan, Benoit Cornu, Matias Martinez, Benoit Baudry, Lionel Seinturier, Martin Monperrus), Technical report 1506.01883, Arxiv, 2015\n\n\nContact: [Martin Monperrus](http://www.monperrus.net/martin/contact)\n\nCompilation\n----\n\nWe provide the guidelines for the Eclipse IDE.\n\n```\ngit clone https://github.com/Spirals-Team/banana-refactoring\ncd banana-refactoring/\nmvn eclipse:eclipse\n```\n\nNow, import and open the project in the Eclipse IDE (File >> Import >> Existing project into workspace)\n\nSample usage\n----\n\nWe now consider the example provided in the repo (spojo-core).\n```\ncd example\nmvn eclipse:eclipse\n```\nimport the project `spojo-core` in the Eclipse IDE.\n\nbanana-refactoring uses code transformation, so you need to clone the example project (copy and paste) in say `spojo-core-refactored`.\n\nAdd as dependency of `spojo-core-refactored`, the banana-refactoring project.\n\nGo to class `bcu.nopol.main.Launcher.java` and set the constants:\n\n* `WORKSPACE_METADATA_PATH` \n* `ORIG_ECLIPSE_PROJECT_NAME` \n* `TARGET_ECLIPSE_PROJECT_NAME` \n* `OUTPUT_PROJECT_PATH`\n\nRun `bcu.nopol.main.Launcher.main` with argument \"-1\" (Run >> Run configurations). This transforms the source code of test classes and application classes of `spojo-core` and put the instrumented version in TARGET_ECLIPSE_PROJECT_NAME. Refresh the project `spojo-core-refactored` to force full re-compilation.\n\nRun `bcu.nopol.main.Launcher.main` with  argument \"-2\". This computes the number of pure and impure tests, and the file `cutsPerIf` and split the test cases.  Refresh the project `spojo-core-refactored` to force full re-compilation (esp of the split test cases).\n\nThat's it, you have the refactored test suite!\n\n** If one of the phase fails, always start at phase #1 again **\n\n\n", 
  "id": 42186652
}