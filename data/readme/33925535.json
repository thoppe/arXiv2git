{
  "read_at": 1462511926, 
  "description": "Calculate (colored) HOMFLY for (virtual) knots and links through Khovanov hypercube formalism", 
  "README.md": "cl-vknots\n=========\n\nConvenient tools to calculate (cabled) HOMFLY polynomials for knots\nand links, usual and virtual, from the Khovanov hypercube formalism.\n\n\nThis code is based on  work with A.Morozov and An.Morozov. The arXiv paper explaining\nthe underlying ideas can be found at http://arxiv.org/abs/1506.07516\n\nNote: some of the functionality (and most importantly, the tests) are implemented through\ninterface with Wolfram Mathematica and Mathematica package KnotTheory, which can be\ndownloaded from www.katlas.org. KnotTheory is to be placed under src/ subdirectory of this project.\nThe incorrect setup here may lead to hangs of the machine. You've been warned!)\n\nMain interface\n--------------\n\nMain function is DWIM-HOMFLY, which (tries) to automatically determine,\nwhat you enter (planar diagram of a knot, description of fat graph, or a horde diagram)\nand act calculate HOMFLY for it\n\n```lisp\n;;; calculate HOMFLY for trefoil\n(dwim-homfly \"Knot[3,1]\") ;; specify input by number in Rolfsen table\n(dwim-homfly \"TorusKnot[3,2]\") ;; or explicitly as torus knot\n(dwin-homfly \"TorusKnot[2,3]\")\n```\n\n```lisp\n;;; calculate HOMFLY for eight diagram (twisted unknot)\n(dwim-homfly '((b 1 2 1 2))) ;; input in form of planar diagram\n(dwim-homfly '((1 1) (2 1))) ;; input in form of dessin d'enfant\n```\n\n```lisp\n;;; calculate HOMFLY for virtual Hopf link\n(dwim-homfly '((1 2))) ;; input as horde diagram in form of edge numbers\n(dwim-homfly '(1 -1)) ;; input as horde diagram in form of edge lengths\n```\n\n\nThe rest of this readme describes more esoteric functionality, in case\nthis simple one is not working properly or is insufficient for your needs.\n\nSimple cabled answers\n---------------------\n\nDWIM-HOMFLY has :CABLE parameter, which lets you calculate link-free cabled\nversion of HOMFLY\n\n```lisp\n(dwim-homfly \"Knot[3,1]\" :cable 2) ;; two strand cabled HOMFLY for trefoil\n```\n\nHowever, since cabling is defined only before going to dessins (i.e. not for dessins and hordes),\nwhen asked to calculate cabled HOMFLY for dessin, DWIM-HOMFLY just calculates fundamental (non-cabled)\nversion.\n\nThe peculiarities\n-----------------\n\nCalculate HOMFLY polynomial for the twisted unknot.\n```lisp\n(homfly-serial-toolchian '((1 1) (2 1)))\n```\n\nSame can be done more conveniently, by querying Katlas for braid representation for twisted unknot\n(call to GET-BRAID-REP1), then constructing planar diagram from braid (call to BRAID->PLANAR)\nand then constructing fat-graph form from planar diagram (call to PLANAR->SEIFERT).\nThis fat graph form is exactly as in example above, so we feed it to HOMFLY-SERIAL-TOOLCHAIN.\n```lisp\n(homfly-serial-toolchain (planar->seifert (braid->planar (get-braid-rep1 (wm-torus-knot 1 2)))))\n\"-(q^(-1 + N)*(q*q[-1 + N] - q[N])*q[N])\"\t\t\t \n```\n\nFor historical reasons, there are two HOMFLY-calculating functions, HOMFLY-SERIAL-TOOLCHAIN and\nHOMFLY-ACTUAL-SERIAL-TOOLCHAIN, which internally differ only in convention about q-weights\nof hypercube vertices (not to be confused with q-dimensions of vertices, which are the same).\nOutputs of these functions coincide upto change q -> 1/q\n\n\nCurrently, program can calculate fundamental HOMFLY polynomials for all knots in Rolfsen table,\nand the check that this is the case is included in program's test-suite.\nTo run it, do.\n```lisp\n(ql:quickload 'cl-vknots-tests)\n(in-package cl-vknots-tests)\n(explain! (run 'rolfsen-actual-homflies))\n```\n\nTo calculate HOMFLY polynomial for individual knot (say, trefoil) from Rolfsen table, do\n```lisp\n(homfly-actual-serial-toolchain (planar->seifert (braid->planar (get-braid-rep1 \"Knot[3,1]\"))))\n```\n\n\nBasic ideas, embedded in the algorithm\n--------------------------------------\n\n  * dimensions at the vertices of secondary quantum hypercube are encoded in dessins d'enfant,\n    or fat graphs\n  * there is a set of recursion relations on these fat graphs, which allows in most cases\n    to reduce them to numbers.\n  * these relations are:\n    * non-topologically-invariant analogs of Reidemeister moves\n    * flip-covariance\n  * the usual \"change of starting vertex\" for summation when considering non-Seifert knot\n    can be reformulated as assignment of q-charge to vertices of the hypercube.\n\n\n\nPlanar diagram format\n---------------------\n\nBy no means is the algorithm limited to calculation of HOMFLY only for braids.\nIt is just that braid representation is easy to fetch from Katlas. But you can\nalways type arbitrary (possibly, virtual) planar diagram yourself.\nFor example, for virtual trefoil (2.1-knot in terminology of www.math.toronto.edu/~drorbn/Students/GreenJ/\nplanar diagram description is\n```lisp\n'((w 1 2 3 4)\n  (n 3 4 5 6)\n  (w 5 6 1 2))\n```\nThe format is almost self-explanatory. We have a list of three vertices, two of them are \"white\"\n(letter W at the beginning of the sublist) and one is \"sterile\", or \"neutral\" (letter N at the beginning\nof the sublist). Further, we have 6 edges, connecting those vertices with each other, and\nremaining parts of the sublists describe, which edge connects, in order, to bottom left, bottom right, top left\nand top right corners of the given vertex. Corners are determined from the picture such that strands go\nfrom bottom left to top right and from bottom right to top left.\n\nMore examples of manually typed planar diagrams can be found in src/planar-diagrams.lisp\n\n\nCabling\n-------\n\nThere are two functions to do cabling of a planar diagram\n  * CABLE -- does the very naive cabling\n  * LINK-FREE-CABLE -- cables with insertion of toric braid, which compensates pairwise\n  linking numbers of strands in the cable.\n\nFor example, 2-cabled link-free answer for HOMFLY for virtual trefoil can be calculated\nlike this\n```lisp\n(homfly-actual-serial-toolchain (planar->seifert (link-free-cable *2.1-knot*)))\n```\nOf course, variable *2.1-knot*, containing planar diagram of a virtual trefoil,\nshould be defined beforehand (it is defined in src/planar-diagrams.lisp)\n\n\nTODO\n----\n\n  A couple of things needs to be done for the instrument to be more useable\n\n  * do DWIM-HOMFLY function, which just does calculate HOMFLY for anything,\n    without the need to remember all these chains of function calls (!)\n  * add unit-tests for virtual knots\n  * (done) add search over flips of the horde-diagrams, to tackle difficult cases\n  * add fetching of Morse-link representation of the knot from Katlas\n  * express HOMFLY in a-z variables.\n  * add pre-calculation of horde-diagrams and memoization of results\n  * write checks in Mathematica scripts, so that they don't hang and don't loop infinitely", 
  "id": 33925535
}