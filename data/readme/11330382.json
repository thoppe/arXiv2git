{
  "README": "Ncpol2sdpa-Cpp\n==\nNcpol2sdpa-Cpp is a C++ library to convert a noncommutative polynomial optimization problem to a sparse semidefinite programming (SDP) problem that can be processed by the [SDPA](http://sdpa.sourceforge.net/) family of solvers. The optimization problem can be unconstrained or constrained by equalities and inequalities.\n\nThe objective is to be able to solve very large scale optimization problems. For example, a convergent series of lower bounds can be obtained for ground state problems with arbitrary Hamiltonians.\n\nThe implementation has an intuitive syntax for entering Hamiltonians and it scales for a larger number of noncommutative variables using a sparse representation of the SDP problem. \n\nDependencies\n==\nThe code requires [SymbolicC++](http://issc.uj.ac.za/symbolic/symbolic.html) to compile and it relies on the C++11 standard. GCC 4.8.1 is known to compile the code. If Ncpol2sdpa-Cpp is compiled with OpenMP support, SymbolicC++ needs a [patch](http://peterwittek.com/files/openmp_patch.txt) to ensure thread-safety.\n\nUsage\n==\nA simple usage example is included in examplencpol.cpp. A more sophisticated application is given in benchmarkCase.cpp, which implements the Hamiltonian of a bosonic system on a 1D line.\n\nThe implementation installs as a library. Subsequent use must specify the include directory of the header files and the library for compilation. \n\nCompilation & Installation\n==\nFrom GIT repository first run\n\n    $ ./autogen.sh\n\nThen follow the standard procedure:\n\n    $ ./configure [options]\n    $ make\n    $ make install\n\nOptions for configure\n\n    --enable-openmp Enable OpenMP support (experimental)\n\nOpenMP support is still experimental and deadlocks occur in larger problems.\n\n    --with-symbolicc++-incdir=DIR   SymbolicC++ include directory [default /usr/include]\n    --with-symbolicc++-libdir=DIR   SymbolicC++ library directory [default /usr/lib]\n\nSpecify these directories if the compiler cannot see them in the include and library paths.\n\nKnown Issues\n==\nHermicity of noncommuting variables is not handled correctly.\n\nThe fast submonomial substitution does not handle some rare cases.\n\nAcknowledgment\n==\n\nThis work is supported by the European Commission Seventh Framework Programme under Grant Agreement Number FP7-601138 [PERICLES](http://pericles-project.eu/), by the [Red Espanola de Supercomputacion](http://www.bsc.es/RES) grants number FI-2013-1-0008 and  FI-2013-3-0004, and by the [Swedish National Infrastructure for Computing](http://www.snic.se/) project number SNIC 2014/2-7.\n\nMore Information\n==\nFor more information refer to the following manuscript:\n\n[http://arxiv.org/abs/1308.6029](http://arxiv.org/abs/1308.6029)\n", 
  "read_at": 1462557015, 
  "description": "A converter from noncommutative polynomial optimization problems to sparse SDPA input format -- C++ version", 
  "README.md": "Ncpol2sdpa-Cpp\n==\nNcpol2sdpa-Cpp is a C++ library to convert a noncommutative polynomial optimization problem to a sparse semidefinite programming (SDP) problem that can be processed by the [SDPA](http://sdpa.sourceforge.net/) family of solvers. The optimization problem can be unconstrained or constrained by equalities and inequalities.\n\nThe objective is to be able to solve very large scale optimization problems. For example, a convergent series of lower bounds can be obtained for ground state problems with arbitrary Hamiltonians.\n\nThe implementation has an intuitive syntax for entering Hamiltonians and it scales for a larger number of noncommutative variables using a sparse representation of the SDP problem. \n\nDependencies\n==\nThe code requires [SymbolicC++](http://issc.uj.ac.za/symbolic/symbolic.html) to compile and it relies on the C++11 standard. GCC 4.8.1 is known to compile the code. If Ncpol2sdpa-Cpp is compiled with OpenMP support, SymbolicC++ needs a [patch](http://peterwittek.com/files/openmp_patch.txt) to ensure thread-safety.\n\nUsage\n==\nA simple usage example is included in examplencpol.cpp. A more sophisticated application is given in benchmarkCase.cpp, which implements the Hamiltonian of a bosonic system on a 1D line.\n\nThe implementation installs as a library. Subsequent use must specify the include directory of the header files and the library for compilation. \n\nCompilation & Installation\n==\nFrom GIT repository first run\n\n    $ ./autogen.sh\n\nThen follow the standard procedure:\n\n    $ ./configure [options]\n    $ make\n    $ make install\n\nOptions for configure\n\n    --enable-openmp Enable OpenMP support (experimental)\n\nOpenMP support is still experimental and deadlocks occur in larger problems.\n\n    --with-symbolicc++-incdir=DIR   SymbolicC++ include directory [default /usr/include]\n    --with-symbolicc++-libdir=DIR   SymbolicC++ library directory [default /usr/lib]\n\nSpecify these directories if the compiler cannot see them in the include and library paths.\n\nKnown Issues\n==\nHermicity of noncommuting variables is not handled correctly.\n\nThe fast submonomial substitution does not handle some rare cases.\n\nAcknowledgment\n==\n\nThis work is supported by the European Commission Seventh Framework Programme under Grant Agreement Number FP7-601138 [PERICLES](http://pericles-project.eu/), by the [Red Espanola de Supercomputacion](http://www.bsc.es/RES) grants number FI-2013-1-0008 and  FI-2013-3-0004, and by the [Swedish National Infrastructure for Computing](http://www.snic.se/) project number SNIC 2014/2-7.\n\nMore Information\n==\nFor more information refer to the following manuscript:\n\n[http://arxiv.org/abs/1308.6029](http://arxiv.org/abs/1308.6029)\n", 
  "id": 11330382
}