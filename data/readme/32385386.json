{
  "read_at": 1462543871, 
  "description": ":zap: Fast, minimal memory, consistent hash algorithm", 
  "README.md": "# Jump Consistent Hash\n\n[![Build Status](https://travis-ci.org/renstrom/go-jump-consistent-hash.svg?branch=master)](https://travis-ci.org/renstrom/go-jump-consistent-hash)\n[![Godoc](https://img.shields.io/badge/godoc-reference-blue.svg?style=flat)](https://godoc.org/github.com/renstrom/go-jump-consistent-hash)\n\nGo implementation of the jump consistent hash algorithm[1] by John Lamping and Eric Veach.\n\n[1] http://arxiv.org/pdf/1406.2294v1.pdf\n\n## Usage\n\n```go\nimport jump \"github.com/renstrom/go-jump-consistent-hash\"\n\nfunc main() {\n    h := jump.Hash(256, 1024)  // h = 520\n}\n```\n\nIncludes a helper function for using a `string` as key instead of an `uint64`. This requires a hasher that computes the string into a format accepted by `Hash()`. Such a hasher that uses [CRC-64 (ECMA)](https://en.wikipedia.org/wiki/Cyclic_redundancy_check) is also included for convenience.\n\n```go\nh := jump.HashString(\"127.0.0.1\", 8, jump.CRC64)  // h = 7\n```\n\nIn reality though you probably want to use a `Hasher` so you won't have to repeat the bucket size and which key hasher used. It also uses more convenient types, like `int` instead of `int32`.\n\n```go\nhasher := jump.New(8, jump.CRC64)\nh := hasher.Hash(\"127.0.0.1\")  // h = 7\n```\n\nIf you want to use your own algorithm, you must implement the `KeyHasher` interface, which is a subset of the `hash.Hash64` interface available in the standard library.\n\nHere's an example of a custom `KeyHasher` that uses Google's [FarmHash](https://github.com/google/farmhash) algorithm (the successor of CityHash) to compute the final key.\n\n```go\ntype FarmHash struct {\n    buf bytes.Buffer\n}\n\nfunc (f *FarmHash) Write(p []byte) (n int, err error) {\n    return f.buf.Write(p)\n}\n\nfunc (f *FarmHash) Reset() {\n    f.buf.Reset()\n}\n\nfunc (f *FarmHash) Sum64() uint64 {\n    // https://github.com/dgryski/go-farm\n    return farm.Hash64(f.buf.Bytes())\n}\n\nhasher := jump.New(8, &FarmHash{})\nh := hasher.Hash(\"127.0.0.1\")  // h = 5\n```\n\n## License\n\nMIT\n", 
  "id": 32385386
}