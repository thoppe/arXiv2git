{
  "read_at": 1462547738, 
  "description": "numpy implementation of net 2 net from the paper Net2Net: Accelerating Learning via Knowledge Transfer http://arxiv.org/abs/1511.05641", 
  "README.md": "# Net2Net\nnumpy implementation of net 2 net from the paper Net2Net: Accelerating Learning via Knowledge Transfer http://arxiv.org/abs/1511.05641\n\n# Requirements\n- numpy\n\n# Usage\nHere is how you would use it to create a wider version of an existing layer\n\n    import numpy as np\n    \n    weights = np.matrix([[1.0, 0.1, 0.5], [1.0, 0.1, 0.5]])\n    bias = np.array([0.0, 0.0, 0.0])\n    weights_next_layer = np.matrix([[1.0], [0.2], [0.5]])\n    \n    weights, bias, weights_next_layer = net_2_wider_net(weights, bias,\n                                                      weights_next_layer,\n                                                      new_layer_size=5)\nThen simply use the new variables from then on.\n\nHere is creating the weights and biases for a new layer using net 2 deeper net\n\n    import numpy as np\n    \n    bias = np.array([0.0, 0.0, 0.0])\n    \n    next_layer_weights, next_layer_bias = net_2_deeper_net(bias)\n\nThere are complete examples of using this for grid searching the number of hidden nodes in examples/tensorflow_grid_search.py", 
  "id": 57439444
}