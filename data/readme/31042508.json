{
  "read_at": 1462551919, 
  "description": "Reimplementation of DRAW", 
  "README.md": "\n[![Build Status](https://api.shippable.com/projects/557c82e6edd7f2c05214d9ce/badge?branchName=master)](https://app.shippable.com/projects/557c82e6edd7f2c05214d9ce/builds/latest)\n[![MIT](https://img.shields.io/github/license/jbornschein/draw.svg?style=flat-square)](http://choosealicense.com/licenses/mit/)\n\n\nImplementation of the DRAW network architecture\n-----------------------------------------------\nThis repository contains a reimplementation of the Deep Recurrent Attentive\nWriter (DRAW) network architecture introduced by K. Gregor, I. Danihelka,\nA. Graves and D. Wierstra. The original paper can be found at\n\n  http://arxiv.org/pdf/1502.04623\n\n![animation.gif](doc/mnist-r2-w5-t64-enc256-dec256-z100-lr34.gif)\n\n\nDependencies\n------------\n * [Blocks](https://github.com/bartvm/blocks) follow\nthe [install instructions](http://blocks.readthedocs.org/en/latest/setup.html).\nThis will install all the other dependencies for you (Theano, Fuel, etc.).\n * [Theano](https://github.com/theano/Theano)\n * [Fuel](https://github.com/bartvm/fuel)\n * [picklable_itertools](https://github.com/dwf/picklable_itertools)\n\nDraw currently works with the \"cutting-edge development version\". But since the API is subject to change,\nyou might consider installing this known to be supported version:\n\nYou also need to install\n\n * [Bokeh](http://bokeh.pydata.org/en/latest/docs/installation.html) 0.8.1+\n * [ipdb](https://pypi.python.org/pypi/ipdb)\n * [ImageMagick](http://www.imagemagick.org/)\n\n\nData\n----\nYou need to set the location of your data directory:\n\n    export FUEL_DATA_PATH=/home/user/data\n\n`fuel-download` and `fuel-convert` are used to obtain and convert training datasets. E.g. for binarized MNIST\n\n    cd $FUEL_DATA_PATH\n    fuel-download binarized_mnist\n    fuel-convert binarized_mnist\n\nor similarly for SVHN\n\n    cd $FUEL_DATA_PATH\n    fuel-download svhn -d . 2\n    fuel-convert svhn -d . 2\n\n\nTraining with attention\n-----------------------\nTo train a model with a 2x2 read and a 5x5 write attention window run\n\n    cd draw\n    ./train-draw.py --dataset=bmnist --attention=2,5 --niter=64 --lr=3e-4 --epochs=100\n\nOn Amazon g2xlarge it takes more than 40min for Theano's compilation to end and training to start. If you enable the bokeh-server, once training starts you can track its\n[live plotting](http://blocks.readthedocs.org/en/latest/plotting.html).\nIt will take about 2 days to train the model.\n\nAfter each epoch it will save the following files:\n\n * a pickle of the model\n * a pickle of the log\n * sampled output image for that epoch\n * animation of sampled output\n\n\nGenerating animations\n---------------------\n\nTo generate sampled output including an animation run\n\n```bash\npython sample.py svhn_model.pkl --channels 3 --size 32\n```\n\nNote that in order to load a model and to generate samples all dependencies are\nneeded.  This unfortunately also this includes the GPU because python cannot\nunpickle CudaNdarray objects without it. This is a [known\nproblem](http://stackoverflow.com/questions/25237039/converting-a-theano-model-built-on-gpu-to-cpu)\nthat we don't yet a have general solution to.\n\n\nSVHN \n----\n\nTo train a model on SVHN\n\n```bash\npython train-draw.py --name=my_svhn --dataset=svhn2 \\\n  --attention=5,5 --niter=32 --lr=3e-4 --epochs=100 \\\n  --enc-dim 512 --dec-dim 512\n```\n\nAfter 100-200 epochs, the model above achieved a `test_nll_bound` of 1825.82.\n\n\nLog\n---\n\nRun \n    \n    python plot-kl.py [pickle-of-log]\n\nto create a visualization of the KL divergence potted over inference iterations and epochs. E.g:\n\n ![KL-Divergenc](doc/kl_divergence.png)\n\n\nTesting\n-------\nRun \n\n    nosetests -v tests\n\nto execute the testsuite. Run \n\n    cd draw\n    ./attention.py\n\nto test the attention windowing code on some image. It will open three windows:\nA window displaying the original input image, a window displaying some\nextracted, downsampled content (testing the read-operation), and a window\nshowing the upsampled content (matching the input size) after the write\noperation.\n", 
  "id": 31042508
}