{
  "README-new-release.rst": "How to make a new release\n==========================\n\nVersion numbering\n--------------------\nparmap version numbering is borrowed from [#rpackages-release]_.\n\nparmap versions use the following version numbering:\n:code:`MAJOR.MINOR.PATCH.DEVELOPMENT`.\n\n- :code:`MAJOR`, :code:`MINOR` and :code:`PATCH` follow the semantic\n  versioning of libraries rules [#semver]_:\n\n  - :code:`MAJOR` will only change when there is an incompatible API change.\n  - :code:`MINOR` will increase when functionality is added in a\n    backwards-compatible way\n  - :code:`PATCH` will change for backwards-compatible bug fixes.\n\n- :code:`DEVELOPMENT` is only used in the git repository and is removed before\n  official releases.\n\nCreating a new release\n------------------------\n\nThis is a list of things to do before a release:\n\n- Bump the version in :code:`setup.py` to a valid release version (without\n  :code:`DEVELOPMENT`). Update the version and release in :code:`docs/conf.py`.\n  Commit.\n\n- Tag the release :code:`git tag v#.#.#`.\n\n- Push the release to :code:`origin` [#origin]_: :code:`git push origin --tags`.\n\n- Check that the testsuite [#travis]_ and the documentation [#readthedocs]_\n  is updated properly.\n\n- Build the source distribution and the binary wheel\n\n.. code:: bash\n\n    python setup.py sdist\n    # pip install -U \"pip>=1.4\" \"setuptools>=0.9\" \"wheel>=0.21\"\n    python setup.py bdist_wheel\n\n- Check that there are no missing files in :code:`dist/parmap-x.y.z.tar.gz` and\n  on :code:`dist/parmap-x.y.z-py2.py3-none-any.whl`.\n\n- Upload to pypi:\n\n.. code:: bash\n\n    twine  upload -s dist/parmap-x.y.z.tar.gz  -p yourpassword\n    twine  upload -s dist/parmap-x.y.z-py2.py3-none-any.whl  -p yourpassword\n\n- Bump the version in :code:`setup.py` to a valid development version \n  (appending :code:`.9000`). Update the version and release in\n  :code:`docs/conf.py`. Commit and push.\n\n- Upload to conda: Edit conda.recipe/meta.yaml. Both the `version` field and the\n  source section. Use `conda-build` and upload to anaconda.\n\nReferences\n-----------\n\n.. [#rpackages-release] http://r-pkgs.had.co.nz/release.html\n.. [#semver] http://semver.org\n.. [#origin] https://github.com/zeehio/parmap\n.. [#travis] https://travis-ci.org/zeehio/parmap\n.. [#readthedocs] https://parmap.readthedocs.org/\n\n", 
  "id": 16147868, 
  "read_at": 1462546953, 
  "README.rst": "parmap\n======\n\n.. image:: https://travis-ci.org/zeehio/parmap.svg?branch=master\n    :target: https://travis-ci.org/zeehio/parmap\n\n.. image:: https://readthedocs.org/projects/parmap/badge/?version=latest\n    :target: https://readthedocs.org/projects/parmap/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://codecov.io/github/zeehio/parmap/coverage.svg?branch=master\n    :target: https://codecov.io/github/zeehio/parmap?branch=master\n\n.. image:: https://codeclimate.com/github/zeehio/parmap/badges/gpa.svg\n   :target: https://codeclimate.com/github/zeehio/parmap\n   :alt: Code Climate\n\n.. image:: https://img.shields.io/pypi/dm/parmap.svg\n    :target: https://pypi.python.org/pypi/parmap\n    :alt: Pypi downloads per month\n\nThis small python module implements two functions: ``map`` and\n``starmap``.\n\nWhat does parmap offer?\n-----------------------\n\n-  Provide an easy to use syntax for both ``map`` and ``starmap``.\n-  Parallelize transparently whenever possible.\n-  Handle multiple (positional -for now-) arguments as needed.\n\nInstallation:\n-------------\n\n::\n\n  pip install parmap\n\n\nUsage:\n------\n\nHere are some examples with some unparallelized code parallelized with\nparmap:\n\n::\n\n  import parmap\n  # You want to do:\n  y = [myfunction(x, argument1, argument2) for x in mylist]\n  # In parallel:\n  y = parmap.map(myfunction, mylist, argument1, argument2)\n\n  # You want to do:\n  z = [myfunction(x, y, argument1, argument2) for (x,y) in mylist]\n  # In parallel:\n  z = parmap.starmap(myfunction, mylist, argument1, argument2)\n\n  # You want to do:\n  listx = [1, 2, 3, 4, 5, 6]\n  listy = [2, 3, 4, 5, 6, 7]\n  param = 3.14\n  param2 = 42\n  listz = []\n  for (x, y) in zip(listx, listy):\n      listz.append(myfunction(x, y, param1, param2))\n  # In parallel:\n  listz = parmap.starmap(myfunction, zip(listx, listy), param1, param2)\n\n\nmap (and starmap on python 3.3) already exist. Why reinvent the wheel?\n----------------------------------------------------------------------\n\nPlease correct me if I am wrong, but from my point of view, existing\nfunctions have some usability limitations:\n\n-  The built-in python function ``map`` [#builtin-map]_\n   is not able to parallelize.\n-  ``multiprocessing.Pool().starmap`` [#multiproc-starmap]_\n   is only available in python-3.3 and later versions.\n-  ``multiprocessing.Pool().map`` [#multiproc-map]_\n   does not allow any additional argument to the mapped function.\n-  ``multiprocessing.Pool().starmap`` allows passing multiple arguments,\n   but in order to pass a constant argument to the mapped function you\n   will need to convert it to an iterator using\n   ``itertools.repeat(your_parameter)`` [#itertools-repeat]_\n\n``parmap`` aims to overcome this limitations in the simplest possible way.\n\nAdditional features in parmap:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Create a pool for parallel computation automatically if possible.\n-  ``parmap.map(..., ..., parallel=False)`` # disables parallelization\n-  ``parmap.map(..., ..., chunksize=3)`` # size of chunks (see\n   multiprocessing.Pool().map)\n-  ``parmap.map(..., ..., pool=multiprocessing.Pool())`` # use an existing\n   pool, in this case parmap will not close the pool.\n\nTo do:\n------\n\nPull requests and suggestions are welcome.\n\n-  Pass keyword arguments to functions?\n\nAcknowledgments:\n----------------\n\nThe original idea for this implementation was \n`given <http://stackoverflow.com/a/5443941/446149>`_ by J.F. Sebastian. I just\nprovided an alternative `answer <http://stackoverflow.com/a/21292849/446149>`_\nimplementing it in a package.\n\nKnown works using parmap\n---------------------------\n\n- Davide Gerosa, Michael Kesden, \"PRECESSION. Dynamics of spinning black-hole\n  binaries with python.\" `arXiv:1605.01067 <https://arxiv.org/abs/1605.01067>`_, 2016\n\nReferences\n-----------\n\n.. [#builtin-map] http://docs.python.org/dev/library/functions.html#map\n.. [#multiproc-starmap] http://docs.python.org/dev/library/multiprocessing.html#multiprocessing.pool.Pool.starmap\n.. [#multiproc-map] http://docs.python.org/dev/library/multiprocessing.html#multiprocessing.pool.Pool.map\n.. [#itertools-repeat] http://docs.python.org/2/library/itertools.html#itertools.repeat\n\n", 
  "description": "Easy to use map and starmap python equivalents"
}