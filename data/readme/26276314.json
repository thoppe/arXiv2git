{
  "read_at": 1462553976, 
  "description": "This is about elegance, not speed. If you don't agree, go away.", 
  "README.md": "# INTRO\n\nThis is about elegance, not speed.\nIf you don't agree, go away.\n\n\n\n## What's this about?\n\nThis is about solving common web dev problems with a lang/framework idiom. Performance is irrelevant.\n\n\n\n## How will you measure the best-looking code?\n\n* Since it is entirely subjective, we'll make a poll and evaluate aspects such as conciseness, maintainability, framework size - i.e. souplesse.\n* Requirements are still in progress. When requirements are closed, people can submit impls.\n* When impls are submitted, we'll review the src code of the apps with a poll on some yet-to-agree items.\n* Here's some ideas: http://arxiv.org/pdf/1302.2837v2.pdf\n\n\n\n# RULES\n\n## Evaluating\n\nThese are the things that someone asked to be included in this 'evaluation'.\nPut them here, we'll figure out if we try to evaluate them all.\n\n* i18n\n* more complex queries\n * ideally something that would require more than one query\n * tx? this is arguable...\n* algorithms\n* `<put yours here>`\n\n\n\n## Naming\n\nAll folders must be named `lang.framework` or `lang.lib`\n\n* clojure.liberator\n* js.express\n* js.express.koa\n* java.dropwizard\n* python.bottle\n* ...\n\n\n\n## Installing\n\nThe installation should be the **de facto** standard for the language/platform:\n\n* rvm/rbenv\n* nvm?\n* virtualenv/requirements?\n* etc\n\n\n\n## Running\n\nAll apps should be a single command to run. Ideally no bash scripts.\n\n* mvn exec:java...\n* lein run\n* node index.js\n* ./gradle run\n* rails s\n* ...\n\n\n\n## Files\n\nAll folders must have a `README.md` with details on how to install and run.\nAlso, you should copy the `souplesse.db` to your folder and put it on `.gitgnore`.\n\n\n\n## Code\n\nAll code should be idiomatic of the language.\nThis means that it should use constructs generally\naccepted as common practice in the language/framework.\n\n\n\n# DB SCHEMA\n\nThe db env should be passed as a variable named `DATABASE_URL`\n\n\n\n## Querying from shell\n\n\tsqlite3 souplesse.db\n\tinsert into messages(name, message, timestamp) values ('john', 'hello world', DateTime('now'));\n\n\n\n# Server requirements\n\n* Server should be handle to negotiate content through `Accept` headers. For now, we're only requiring json and html\n * the html POST is handled by the browsers\n * the cURL GET,POST should have a \"Accept: application/json\" header\n* Server should validate requests for missing fields\n* Ideally this should reuse as much code as possible\n* HTML pages should show an error page\n* JSON should return 400 for invalid requests\n\n\n## GET /messages\n\nList html messages. Allow form submission through `POST` to `/messages`\n\n\n\n## POST /messages\n\n* name = some name\n* message = some message\n\nInserts the message in the db, re-renders /messages. Ideally should be `post-redirect-get` to allow `F5` without warnings\n\n\n\n# HTTP API DOCS\n\n## Local\n\n### post invalid message\n\n\tcurl -i -H \"Accept:application/json\" -X POST -d '{\"message\": \"yyy\"}' http://localhost:3000/messages\n\tHTTP/1.1 400 Bad Request\n\n\n\n### post valid message\n\nSaves the message in sqlite db.\n\n\tcurl -i -H \"Accept:application/json\" -X POST -d '{\"name\":\"xxx\", \"message\": \"yyy\"}' http://localhost:3000/messages\n\tHTTP/1.1 200 OK\n\t[{\"message\":\"yyy\",\"name\":\"xxx\",\"timestamp\":1415271790087,\"id\":1}]\n\n\n\n### get messages\n\nReads messages from sqlite db.\n\n\tcurl -H \"Accept:application/json\" http://localhost:3000/messages\n\t[{\"message\":\"yyy\",\"name\":\"xxx\",\"timestamp\":1415271790087,\"id\":1}]\n\n\n\n### get github comments from repo\n\n\tcurl -s \"http://localhost:3000/comments?repo=sapo%2fInk\"\n\n* call `curl -H \"Accept: application/vnd.github.v3+json\" https://api.github.com/repos/sapo/Ink/events`\n* filter by `type = IssueCommentEvent`\n* map `{login: actor.login, body: payload.comment.body}`\n* group by `login`\n* final result should be: `[{'mping': [{login:'mping', body:'...'}, {...}]}, ...]`\n\n", 
  "id": 26276314
}