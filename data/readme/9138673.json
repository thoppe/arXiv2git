{
  "read_at": 1462543076, 
  "description": "", 
  "README.md": "Graph search for academic articles.\n\nAuthors: Aman Kapur and Jimmy Wu\n\ndemo: http://journalgraph.herokuapp.com/\n\nBuilt at Olin College of Engineering as a part of an AI class.\n\n![Graph visualization](https://dl.dropboxusercontent.com/u/45072018/graphvis.png)\n\nIntroduction\n=====\nWe built a graph database of indexed science journal articles by scraping http://arxiv.org/\n\nWe have around 2000 articles, all in the realm of high energy physics and quantum cosomology.\n\nOur scraping functions ensure a graph as complete as the information arxiv gives us.\n\nWe implemented search algorithms to allow the user to search using different ranking criteria.\n\nFront-end: a search box which allows the user to choose ranking functions\n* Simple boolean match, ranking by article id\n* Term frequency (TF) ranking\n* TFIDF ranking\n* PageRank\n* PageRank and TFIDF (most accurate and relevant)\n\nUsers can \"explore\" a topic by traversing our graph.\n* They can view related articles (generated by graph properties and ranked by Levenshtein distance).\n* They can also traverse by author in the following ways:\n* View all articles given by a given author.\n* View a list of authors related to a given author. (Determined by how related their publications are to each other)\n\nSetting Up\n=====\nMake sure you have the following dependencies:\n* Ruby version 1.9.3\n* Rails version 3.2.x\n\nYou can check your operating version of Ruby and Rails with the commands\n```\nruby -v\nrails -v\n```\n\nIf you have the Ruby Version Manager (RVM), you can switch to the right version with\n```\nrvm use 1.9.3\n```\n\nNext, run these commands in order\n```\ngit clone git@github.com:fireblade99/journalgraph.git\ncd journalgraph/db\nwget https://dl.dropboxusercontent.com/u/45072018/development.sqlite3\ncd ..\nbundle install\nrake db migrate\nrails s\n```\n\nTo view the running app, open up a browser to the url http://localhost:3000\n\nDatabase representation\n=====\nNodes are articles and authors.\nEdges are articles-article, article-author, and author-author relations.\n\nArticle nodes hold metadata such as publication date, and subject category.\nThey also hold information to aid the search engine:\n* abstract keywords via automatic summarization\n* ranking factors, such as PageRank\n\nPageRank\n=====\n\nPageRank is a measure of article importance.\nHighly ranked articles tend to either have many incoming citations from other articles, or are cited by highly cited articles.\n\nTo compute PageRank, we first generate the transition probability matrix for our graph.\nHere is an example transition probability matrix, where each directed edge coming out of a node is weighted by 1/n,\nand n is that node's total number of outgoing edges.\n\n```\n     a   b   c   d\n a | 0   0  .33  0  |\n b | 1   0  .33  0  |\n c | 0   0   0   0  |\n d | 0   1  .33  0  |\n\nThis matrix represents the following graph:\n a ----> b\n ^     /^|\n |   /   |\n | /     |/\n c ----> d\n```\n\nEach row in the matrix corresponds to an article which is being cited.\nAs you can see, article a cites article b, so its edge has weight 1.\nHowever, article c cites articles a, b, and c, so each edge has weight 1/3.\n\nTFIDF\n=====\n\nTFIDF is a query dependent method of ranking articles by relevance.\n\n```\nTFIDF = TF * IDF\n```\n\n, where TF is proportional to the number of times a term occurs in an article\n, and IDF is a measure of how special a term is to a given article relative to the other articles in the query.\n\nRanking\n=====\nPageRank and TFIDF both return values from 0 to 1 for each article.\nBy adding these values, we obtain a ranking function that considers both relevance and importance.\n", 
  "id": 9138673
}