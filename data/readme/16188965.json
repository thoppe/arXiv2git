{
  "read_at": 1462546985, 
  "description": "Fast Principal Component Analysis of Large-Scale Genome-Wide Data", 
  "README.md": "# flashpca\n\nflashpca performs fast principal component analysis (PCA) of single nucleotide\npolymorphism (SNP) data, similar to smartpca from EIGENSOFT\n(http://www.hsph.harvard.edu/alkes-price/software/) and shellfish\n(https://github.com/dandavison/shellfish). flashpca is based on the randomized\nPCA algorithm (Alg. 3) of Halko et al. 2011 (http://arxiv.org/abs/1007.5510).\n\nMain features:\n\n* Fast: PCA of 15,000 individuals over 43,000 SNPs in &lt;10 min\n (multi-threaded)\n* Natively reads PLINK bed/bim/fam files\n* Easy to use\n* Two variants: the original high-memory version, and a slightly slower\n   version that uses less RAM (proportional to data size), useful for large datasets with many samples\n* flashpcaR, an R version is [available](#R)\n* Experimental: [kernel PCA](#kpca), [sparse CCA](#scca)\n\n## Help\n\nGoogle Groups: [https://groups.google.com/forum/#!forum/flashpca-users](https://groups.google.com/forum/#!forum/flashpca-users)\n\n## Contact\n\nGad Abraham, gad.abraham@unimelb.edu.au\n\n## Citation\nG. Abraham and M. Inouye, Fast Principal Component Analysis of Large-Scale\nGenome-Wide Data, PLos ONE 9(4): e93766. [doi:10.1371/journal.pone.0093766](http://www.plosone.org/article/info:doi/10.1371/journal.pone.0093766)\n\n(preprint: http://biorxiv.org/content/early/2014/03/11/002238)\n\n## License\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or\n(at your option) any later version.\n\nCopyright (C) 2014-2016 Gad Abraham. All rights reserved.\n\nPortions of this code are based on SparSNP\n(https://github.com/gabraham/SparSNP), Copyright (C) 2011-2012 Gad Abraham\nand National ICT Australia (http://www.nicta.com.au).\n\n## Note on running flashpca large datasets\n\n* As of v1.2.5, flashpca supports loading PLINK datasets limited only by RAM\n  (fixing an overflow bug in previous versions which lead to reading an incorrect\n  number of SNPs, see [issue #9](https://github.com/gabraham/flashpca/issues/9)).\n* For example, we have successfully run flashpca on Linux on a dataset consisting of\n  160,000 individuals and 139,000 SNPs, requiring 166GB RAM, in 3-4 hours\n  (depending on required accuracy of the solution).\n* To analyze large datasets, use the option <code>--mem low</code>\n* Future versions of flashpca will aim to reduce the memory requirements by not loading\n  all data into RAM at once.\n* Note: the R package _flashpcaR_ is limited by the maximum matrix dimensions in R, and\n  running it on such large data may not be supported or practical.\n\n## Download statically linked version (stable versions only)\n\n* We recommend compiling from source for best performance.\n* To get the devel version, you'll need to compile yourself\n\nSee [Releases](https://github.com/gabraham/flashpca/releases) for statically-linked version for Linux x86-64 &ge; 2.6.15\n\n### System requirements\n* 64-bit Linux or Mac ([flashpcaR](#R) supported on Linux, Mac, and Windows)\n* Using the original version (`--mem high`, the default), large datasets will require\n   large amounts of RAM, e.g. for 15,000 individuals (43K SNPs) you'll need\n   about 14GB RAM, for 150,000 individuals (43K SNPs) you'll need about 145GB\n   RAM (estimated using https://github.com/jhclark/memusg), roughly 8 &times;\n   min(n <sup>2</sup> &times; p + n &times; p, p <sup>2</sup> &times; n + n &times; p\\)\n   bytes, where p is number of SNPs and n is number of individuals.\n   Using `--mem low`, you will only need about 8 &times; n &times; p bytes of\n   RAM.\n\n## Building from source\n\nTo get the latest version:\n   ```\n   git clone git://github.com/gabraham/flashpca\n   ```\n\n### Requirements\n\nOn Linux:\n\n* 64-bit OS\n* g++ compiler\n* Eigen (http://eigen.tuxfamily.org), v3.2 or higher\n   (if you get a compile error ``error: no match for 'operator/' in '1 / ((Eigen::MatrixBase...`` you'll need a more recent Eigen)\n* Boost (http://www.boost.org/), specifically boost_system/boost_system-mt,\n   boost_iostreams/boost_iostreams-mt,\n   boost_filesystem/boost_filesystem-mt,\n   boost_program_options/boost_program_options-mt.\n* libgomp for openmp support\n* Recommended: plink2 (https://www.cog-genomics.org/plink2) for SNP\n   thinning\n\nOn Mac:\n\n* Homebrew (http://brew.sh) to install gcc/g++ and boost\n* Eigen, as above\n* Set CXX to whatever g++ version you're using before calling make, e.g.:\n```\nexport CXX=/usr/local/bin/g++-4.7\n```\n\n### To install\n\nThe [Makefile](Makefile) contains three variables that need to be set according to where you have installed the Eigen\nheaders and Boost headers and libraries on your system. The default values for these are: \n   ```\n   EIGEN_INC=/usr/local/include/eigen\n   BOOST_INC=/usr/local/include/boost\n   BOOST_LIB=/usr/local/lib\n   ```\n   \n If your system has these libraries and header files in those locations, you can simply run make:\n   ```\n   cd flashpca\n   make all\n   ```\n   \n If not, you can override their values on the make command line. For example, if you have the Eigen source in `/opt/eigen-3.2.5` and Boost 1.59.0 installed into `/opt/boost-1.59.0`, you could run: \n   ```\n   cd flashpca\n   make all EIGEN_INC=/opt/eigen-3.2.5 BOOST_INC=/opt/boost-1.59.0/include BOOST_LIB=/opt/boost-1.59.0/lib\n   ```\n \nNote: the compilation process will first look for a local directory named\nEigen. It should contain the file signature_of_eigen3_matrix_library. Next,\nit will look for the directory /usr/include/eigen3 (Debian/Ubuntu location\nfor Eigen), although those available through apt-get tend to be older versions.\n\n## Quick start\n\nFirst thin the data by LD (highly recommend\n[plink2](https://www.cog-genomics.org/plink2) for this):\n   ```\n   plink --bfile data --indep-pairwise 1000 50 0.05 --exclude range exclusion_regions_hg19.txt\n   plink --bfile data --extract plink.prune.in --make-bed --out data_pruned\n   ```\nwhere [exclusion_regions_hg19.txt](exclusion_regions_hg19.txt) contains:\n   ```\n   5 44000000 51500000 r1\n   6 25000000 33500000 r2\n   8 8000000 12000000 r3\n   11 45000000 57000000 r4\n   ```\n(You may need to change the --indep-pairwise parameters to get a suitable\nnumber of SNPs for you dataset, 10,000-50,000 is usually enough.)\n\nTo run on the pruned dataset:\n   ```\n   ./flashpca --bfile data_pruned\n   ```\n\nWe highly recommend using multi-threading, to run in multi-threaded mode with 8 threads:\n   ```\n   ./flashpca --bfile data_pruned --numthreads 8\n   ```\n\nEigensoft-scaling of genotypes (default):\n   ```\n   ./flashpca --stand binom ...\n   ```\n\nTo use genotype centering (compatible with R prcomp):\n   ```\n   ./flashpca --stand center ...\n   ```\n\nTo use the low-memory version:\n   ```\n   ./flashpca --mem low ...\n   ```\n\nTo append a custom suffix '_mysuffix.txt' to all output files:\n   ```\n   ./flashpca --suffix _mysuffix.txt ...\n   ```\n\nTo see all options\n   ```\n   ./flashpca --help \n   ```\n\n## Output\n\nflashpca produces the following files:\n\n* `eigenvectors.txt`: the top k eigenvectors of the covariance\n   X X<sup>T</sup> / (n - 1), same as matrix U from the SVD of the genotype matrix\n   X=UDV<sup>T</sup>.\n* `pcs.txt`: the top k principal components (the projection of the data on the\neigenvectors, scaled by the eigenvalues,  same as XV (or UD). This is the file\nyou will want to plot the PCA plot from.\n* `eigenvalues.txt`: the top k eigenvalues of X X<sup>T</sup> / (n - 1). These are the\n    square of the singular values D (square of sdev from prcomp).\n* `pve.txt`: the proportion of total variance explained by *each of the top k*\n   eigenvectors (the total variance is given by the trace of the covariance\n   matrix X X<sup>T</sup> / (n - 1), which is the same as the sum of all eigenvalues).\n   To get the cumulative variance explained, simply\n   do the cumulative sum of the variances (`cumsum` in R).\n\n## Warning\n\nYou must perform quality control using PLINK (at least filter using --geno, --mind,\n--maf, --hwe) before running flashpca on your data. You will likely get\nspurious results otherwise.\n\n## Experimental features\n\n### <a name=\"kpca\"></a>Kernel PCA\n\n* flashpca now experimentally supports low-rank [**kernel\nPCA**](http://en.wikipedia.org/wiki/Kernel_principal_component_analysis) using an RBF\n(Gaussian) kernel K(x, x') = exp(-||x - x'||<sub>2</sub><sup>2</sup> / sigma<sup>2</sup>) (specify using `--kernel\nrbf`).\n* The kernel is double-centred.\n* The default kernel parameter sigma is the median of the pairwise Euclidean distances of a random subset\n   of samples (controlled by `--rbfsample`, default=min(1000, n)), and can also\n   be specified using `--sigma`.\n* The rest of the options are the same as for standard PCA.\n* Currently, the proportion of variation explained is not computed for kPCA.\n\n### <a name=\"scca\"></a>Sparse Canonical Correlation Analysis (SCCA)\n\n* flashpca now experimentally supports sparse CCA\n   ([Parkhomenko 2009](http://dx.doi.org/10.2202/1544-6115.1406),\n   [Witten 2009](http://dx.doi.org/10.1093/biostatistics/kxp008)),\n   between SNPs and multivariate phenotypes.\n* The phenotype file is the same as PLINK phenotype file:\n   `FID, IID, pheno1, pheno2, pheno3, ...`\n   except that there must be no header line. The phenotype file *must be in the same order as\n   the FAM file*.\n* The L1 penalty for the SNPs is `--lambda1` and for the phenotypes is\n `--lambda2`.\n* Two versions: low memory (`--mem low`, roughly 8 x \\#Samples x (\\#SNPs + \\#Phenotypes))\n   and high memory (`--mem high`, roughly 8bytes &times; \\#SNPs &times; \\#Phenotypes).\n\n#### Quick example\n   ```\n   ./flashpca --scca --bfile data --pheno pheno.txt \\\n   --lambda1 1e-3 --lambda2 1e-2 --ndim 10 --numthreads 8\n   ```\n\n* The file eigenvectorsX.txt are the left eigenvectors of X<sup>T</sup> Y, with size (number of\n  SNPs &times; number of dimensions), and eigenvectorsY.txt are the right\n  eigenvectors of X<sup>T</sup> Y, with size (number of phenotypes &\\times; number of\n  dimensions).\n\n#### Example scripts to tune the penalties via split validation\n\nWe optimise the penalties by finding the values that maximise the correlation\nof the canonical components cor(X U, Y V) in independent test data.\n\n* Wrapper script [scca.sh](scca.sh) ([GNU\n   parallel](http://www.gnu.org/software/parallel) is recommended)\n* R code for plotting the correlations [scca_pred.R](scca_pred.R)\n\n# <a name=\"R\"></a>flashpcaR: flashpca in R\n\nflashpca is now available as an independent R package.\n\n\n## Prebuilt R packages\n\nSsee [Releases](https://github.com/gabraham/flashpca/releases) for prebuilt\nMac/Windows binary packages and a source package for Linux.\n\n## Building from source\n\n### Requirements\n\n* R packages: Rcpp, RcppEigen, BH\n* C++ compiler\n\nAs of version v1.2.5, flashpcaR will compile on Mac with either clang++ or g++.\nHowever, OpenMP multi-threading won't work with clang (see\nhttps://github.com/gabraham/flashpca/issues/5).\n\n### Several ways to install from source:\n\n* If you downloaded the Release source code:\n   ```\n   R CMD INSTALL flashpcaR_1.2.5.tar.gz\n   ```\n\n* To install the latest (potentially unstable) version on Mac or Linux,\n   you can also use devtools::install_github:\n   ```\n   library(devtools)\n   install_github(\"gabraham/flashpca/flashpcaR\")\n   ```\n\n* Alternatively, after cloning the git archive, install using:\n   ```\n   R CMD INSTALL flashpcaR\n   ```\n\n\n## PCA\n\nExample usage, assuming `X` is a 100-sample by 1000-SNP matrix in dosage\ncoding (0, 1, 2) (an actual matrix, not a path to PLINK data)\n   ```\n   dim(X)\n   [1]  100 1000\n   library(flashpcaR)\n   r <- flashpca(X, do_loadings=TRUE, verbose=TRUE, stand=\"binom\", ndim=10,\n   nextra=100)\n   ```\n\nPLINK data can be loaded into R either by recoding the data into raw format (`recode A`) or using package [plink2R](https://github.com/gabraham/plink2R).\n\nOutput:\n   * `values`: eigenvalues\n   * `vectors`: eigenvectors\n   * `projection`: projection of sample onto eigenvectors (X V)\n   * `loadings`: SNP loadings, if using a linear kernel\n\n## Sparse CCA\n\nSparse CCA of matrices X and Y, with 5 components, penalties lambda1=0.1 and lambda2=0.1:\n\n   ```\n   dim(X)\n   [1]  100 1000\n   dim(Y)\n   [1]  100 50\n   r <- scca(X, Y, ndim=5, lambda1=0.1, lambda2=0.1)\n   ```\n\n# LD-pruned HapMap3 example data\n\nSee the [HapMap3](HapMap3) directory\n\n# Changelog (stable versions only)\n\nSee [CHANGELOG.txt](CHANGELOG.txt)\n\n", 
  "id": 16188965
}