{
  "README": "////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////  The  FEAST Eigenvalue Solver     ///////////////////////////\n//////////// ///////////////////////////////////////////////////////////////////////////////\nAuthor: Eric Polizzi  \n        Department of Electrical and Computer Engineering\n        University of Massachusetts, Amherst                           \nE-mail: polizzi@ecs.umass.edu (for FEAST related questions please use:  feastsolver@gmail.com)              \nweb   : http://www.ecs.umass.edu/~polizzi/feast  \n/////////////////////////////////////////////////////////////////////////////////////////////\n\n\nGeneral Description: Solving Eigenvalue Problem of form AX=eBX or AX=eX for\n                     obtaining eigenpairs within the search interval [Emin,Emax]\n\n\nReferences: \"Density-Matrix-Based Algorithm for Solving Eigenvalue Problems\"\n           E. Polizzi\n           Physical Review B, Vol. 79, 11512 (2009)     \n\n\n           \"Subspace Iteration with Approximate Spectral Projection\"\n            P. Tang, E. Polizzi\n            http://arxiv.org/abs/1302.0432\n                                                                       \n\n===================================================================================================\nVersion: 2.1   \nVersion Description: \n\n    * Solving Ax=ex or Ax=eBx, A is real symmetric or complex Hermitian, B is symmetric or Hermitian positive definite\n    * SMP version (one node) and MPI-version (multi-nodes).\n    * Source code and pre-compiled libraries provided for commun architectures The pre-compiled libraries do not require \n      any specific compilers (no runtime dependencies).\n    * All FEAST interfaces compatible with Fortran (77 and 90) and C,\n    * Reverse communication interfaces: Maximum flexibility for application-specific. Those are matrix format independent,\n      inner system solver independent, so users must provide their own linear system solvers (direct or iterative) and \n      mat-vec utility routines.\n    * Predefined driver interfaces for dense, banded, and sparse formats: Easy (\"plug and play\") and Optimized.\n    * All FEAST libraries require BLAS and LAPACK packages (not included),\n    * FEAST banded drivers use the SPIKE banded primitives (included)\n    * FEAST sparse drivers use the MKL-PARDISO solver (not included).\n    * FEAST dense drivers are not intended for performances using FEAST-SMP (scalability can be obtained using FEAST-MPI)\n    * Real/Complex and Single/Double precisions\n    * Examples and documentation included,\n    * Utility routines for sparse systems included: users can provide their sparse systems for quick testing, timing, etc. .\n ===================================================================================================\n\n\n\nLibrary: FEASTROOT (this directory)\n            |\n  ----------------------------------------------------\n    |       |       |        |        |        |\n   src     lib   include    doc    example     utility \n\n\n**********************************************************************************************\n**********************************************************************************************\n**************** In the following, we briefly address the  question: *************************\n****************         How should you use FEAST ?                   ************************\n**************** All Details can be found in the FEAST documentation *************************\n**********************************************************************************************\n**********************************************************************************************\n\n===================================================================================================\nATTENTION : It is recommended to define the Shell variable \"export FEASTROOT=\"path to this directory\"\n===================================================================================================\n\n\nLIBRARY PATH: (choose one)\n              -L/$(FEASTROOT)/lib/x64 (for 64 bits architectures)\n              -L/$(FEASTROOT)/lib/\"yourown\" (where \"yourown\" directory can contain the FEAST library\n                                             compiled for your own specific architectures and optionally \n                                              for FEAST-MPI your own MPI implementation)\n\nINCLUDE PATH: It is mandatory only for C codes along with instructions that need to be added in the header C file (all that apply):\n              #include \"feast.h\"\n              #include \"feast sparse.h\"\n              #include \"feast banded.h\"\n              #include \"feast dense.h\"\n\n\nCOMPILATION LINKS: (Example/ choose one)\n\t\t   -lfeast                (FEAST Reverse Communication Interfaces-kernel)\n                   -lfeast_dense  -lfeast (FEAST dense interfaces/drivers,  also includes -lfeast_rci)\n                   -lfeast_banded -lfeast (FEAST banded interfaces/drivers, also includes -lfeast_rci)\n                   -lfeast_sparse -lfeast (FEAST sparse interfaces/drivers, also includes -lfeast_rci)\n                   -In general: Any FEAST-drivers combinations follows by -lfeast \n                   \n\nDEPENDENCY:\n                   - the libraries LAPACK/BLAS (not provided) are needed\n                   - the library MKL-PARDISO (not provided) is only needed for -lfeast_sparse\n                   - the library SPIKE banded primitive (provided) is needed for -lfeast_banded\n                   - In general: FEAST can be linked with any linear system solvers, but BLAS/LAPACK are always needed \n              \n\nEXAMPLES of COMPILATION LINKS with DEPENDENCY: (Example/ choose one)\n                                               ATTENTION: <feast> is replaced by <pfeast> for FEAST-MPI\n\n             include dense drivers+rci        1/ -lfeast_dense  -lfeast -lapack -lblas\n             include banded drivers+rci       2/ -lfeast_banded -lfeast -lapack -lblas\n             include sparse drivers+rci       3/ -lfeast_sparse -lfeast -lpardiso -lapack -lblas\n             include rci alone                4/ -lfeast -lapack -lblas\n             (general use with rci)           5/ -l<myowncode> -lfeast -l<mylinearsolver> -lapack -blas\n               \n\nREVERSE COMMUNICATION INTERFACES (RCI): TFEAST_{S,H}RCI (\"T\" denotes S,D,C or Z)\n                    -routines are then called:\n                          SFEAST_SRCI, DFEAST_SRCI (Real Symmetric resp. single and double precision) \n                          CFEAST_HRCI, ZFEAST_HRCI (Complex Hermitian resp. single and double precison)\n                    -Matrix free format (FEAST is independent of the matrix data format) \n\t            -users must then provide their own direct/iterative solver for solving the linear \n                     system-type  MY =F\n                    -A preconditioner can be also used for iterative solver\n                    -user must provide his own mat-vec\n                    -for Complex systems, FEAST can be accelerated if user can provide a routine for\n                     solving the linear system-type  M^H Y=F (H for Hermitian) knowing only the \n                     factorization of M (case 21)\n\n               \nPREDEFINED DRIVER INTERFACES:  TFEAST_XYY \n                                          *\"T\"  denotes S or D for real single/double precision \n                                                        C or Z for complex single/double precision \n                                          *\"YY\" denotes GV for generalized eigenvalue problem\n                                                        EV for standart eigenvalue problem  \n                          \n                    - If \"X\"={SY,HE} :: Dense format  (ATTENTION: current version is not intended for obtaining performance)\n                      uses LAPACK inner system solver:\n                    - If \"X\"={SB,HB} :: Banded LAPACK Format  \n                      uses SPIKE primitives inner system solver (included)\n                    - If \"X\"={SCSR,HCSR} :: Sparse Format  \n                      uses PARDISO inner system solver (not included)\n\n\n\n\n", 
  "read_at": 1462544868, 
  "description": "Sparse eigensolver", 
  "id": 32774313
}