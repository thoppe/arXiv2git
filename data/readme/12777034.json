{
  "read_at": 1462549868, 
  "description": "Sampling and manipulating genome-wide ancestral recombination graphs (ARGs)", 
  "README.md": "ARGweaver\n=========\n\n*Sampling and manipulating genome-wide ancestral recombination graphs (ARGs).*  \n\nThe ARGweaver software package contains programs and libraries for\nsampling and manipulating ancestral recombination graphs (ARGs). An ARG\nis a rich data structure for representing the ancestry of DNA\nsequences undergoing coalescence and recombination.\n\n*ARGweaver citation:*\n[Matthew D. Rasmussen, Adam Siepel. Genome-wide inference of ancestral\nrecombination graphs. 2013. arXiv:1306.5110 [q-bio.PE]](http://arxiv.org/abs/1306.5110)\n\n\n## Download\n\nARGweaver can be [downloaded](http://mdrasmus.github.io/argweaver) or \n[forked](https://github.com/mdrasmus/argweaver/) from GitHub.\n\n\n## Documentation\n\nSee the [manual](http://mdrasmus.github.io/argweaver/doc/)\nfor documentation on the programs and file formats associated with ARGweaver.\n\n\n## Requirements\n\nThe following dependencies must be installed to compile and run\nARGweaver:\n\n- C++ compiler (e.g. [g++](http://gcc.gnu.org))\n- [Python](http://python.org)\n\n\n## Install\n\nARGweaver can be installed using any of the normal Python mechanisms.\nFor example, to install from [PyPI](https://pypi.python.org/pypi) you\ncan use [pip](https://github.com/pypa/pip) with the following command:\n\n```\npip install argweaver\n```\n\nAlternatively, ARGweaver can be install using the `setup.py` file:\n\n```\npython setup.py install\n```\n\nLastly, ARGweaver can be installed using the `Makefile`:\n\n```\nmake\n```\n\nOnce compiled, install the ARGweaver programs (default install in\n`/usr`) using:\n\n```\nmake install\n```\n\nBy default this will install all files into `/usr`, which may require \nsuper user permissions.  To specify your own installation path use:\n\n```\nmake install prefix=$HOME/local\n```\n\nIf you use this option, make sure `$HOME/local/bin` is in your `PATH` and\n`$HOME/local/lib/python2.X/site-packages` is in your `PYTHONPATH`.\n\nARGweaver can also run directly from the source directory.  Simply add the\n`bin/` directory to your `PATH` environment variable or create symlinks to the\nscripts within `bin/` to any directory on your `PATH`. Also add the\nargweaver source directory to your `PYTHONPATH`. See `examples/` for details.\n\n\n## Quick Start\n\nHere is a brief example of an ARG simulation and analysis.\nTo generate simulated data containing a set of DNA sequences and an\nARG describing their ancestry the following command can be used:\n\n```\narg-sim \\\n    -k 8 -L 100000 \\\n    -N 10000 -r 1.6e-8 -m 1.8e-8 \\\n    -o test1/test1\n```\n\nThis will create an ARG with 8 sequences each 100kb in length evolving in\na population of effective size 10,000 (diploid), with recombination rate\n1.6e-8 recombinations/site/generation and mutation rate 1.8e-8 \nmutations/generation/site. The output will be stored in the following files:\n\n```\ntest1/test1.arg   -- an ARG stored in *.arg format\ntest1/test1.sites -- sequences stored in *.sites format\n```\n\nTo infer an ARG from the simulated sequences, the following command \ncan be used:\n\n```\narg-sample \\\n    -s test1/test1.sites \\\n    -N 10000 -r 1.6e-8 -m 1.8e-8 \\\n    --ntimes 20 --maxtime 200e3 -c 10 -n 100 \\\n    -o test1/test1.sample/out\n```\n\nThis will use the sequences in `test1/test1.sites` and it assumes the\nsame population parameters as the simulation (i.e. `-N 10000 -r 1.6e-8\n-m 1.8e-8`).  Also several sampling specific options are given \n(i.e. 20 discretized time steps, a maximum time of 200,000 generations, \na compression of 10bp for the sequences, and 100 sampling iterations. \nAfter sampling the following files will be generated:\n\n```\ntest1/test1.sample/out.log\ntest1/test1.sample/out.stats\ntest1/test1.sample/out.0.smc.gz\ntest1/test1.sample/out.10.smc.gz\ntest1/test1.sample/out.20.smc.gz\n...\ntest1/test1.sample/out.100.smc.gz\n```\n\nThe file `out.log` contains a log of the sampling procedure,\n`out.stats` contains various ARG statistics (e.g. number of\nrecombinations, ARG posterior probability, etc), and `out.0.smc.gz`\nthrough `out.100.smc.gz` contain 11 samples of an ARG in *.smc file\nformat.\n\nTo estimate the time to most recent common ancestor (TMRCA) across\nthese samples, the following command can be used:\n\n```\narg-extract-tmrca test1/test1.sample/out.%d.smc.gz \\\n    > test1/test1.tmrca.txt\n```\n\nThis will create a tab-delimited text file containing six columns:\nchromosome, start, end, posterior mean TMRCA (generations),\nlower 2.5 percentile TMRCA, and upper 97.5 percentile TMRCA. The first\nfour columns define a track of TMRCA across the genomic region in\nBED file format.\n\nMany other statistics can be extracted from sampled ARGs. For more details\nsee `examples/`.\n\n\n## Development\n\nThe following Python libraries are needed for developing ARGweaver:\n\n```\nnose\npyflakes\npep8\n```\n\nThese dependencies can be installed using\n\n```sh\npip install -r requirements-dev.txt\n```\n\nThe python tests can be run either with nose or make:\n```sh\n# Run tests with nose\nnosetests test\n\n# Run tests with make\nmake test\n```\n\nThere are also C++ tests written using\n[googletest](http://code.google.com/p/googletest/), Google's\nunit-testing framework.  Googletest can either be installed system-wide or\nwithin the ARGweaver source tree.  For convenience, googletest can be installed\nin the source tree using\n```sh\nmake gtest\n```\n\nOnce installed, c++ unit tests can be run using\n```sh\nmake ctest\n```\n", 
  "id": 12777034
}