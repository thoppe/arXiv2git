{
  "read_at": 1462511483, 
  "description": "Chaos Based PRNG", 
  "README.md": "<center>\n##\"Drain Random from Chaos.\"\n##Breeze - a new family of fast CB-PRNG\n\n####Dr. Andreas Briese\n#####2014/11/1   \n#####eduToolbox@Bri-C GmbH, Sarstedt\n</center> \n  \n---\n\n<b>Breeze</b> represents a new family of deterministic random number generators aca pseudo random number generators (PRNGs) based on a combination of two or more \"logistic maps\" (LM) in chaotic state. \n\nSee https://github.com/AndreasBriese/breeze for **breeze** reference implementation in go/golang (x86 / Little-Endian). \n\n---\n\nWARNING: This code and documentation is written by a non-mathematician &amp; is eventually drawn up in lousy english.\n\n---\n\n<center>See <b>breeze.pdf</b> for a short description of the algorithm.</center>\n\n---\n\n**History**\n\n2nd revision (7/11/2014): \n  - Breeze32 / Breeze76 removed / replaced by Breeze128/Breeze256\n  - New Breeze128/Breeze256 structs to accept 128 bit / 256 bit seed/keys and use 6 / 12 logistic maps (LM) functions to produce 128 Byte / 256 Byte output on each roundTrip\n  - Name-scheme changed\n  - Seed processing reviewed / splitts uint64 bitwise in three parts: 2&times; 1<sup>21</sup>, 1&times;1<sup>22</sup>\n  - Breeze128 and Breeze256 are intended for use with up to 128bit/256bit input length i.e. with BLAKE2b, SHA2 or SHA3 Hashes; Breeze64_32 &amp; Breeze128_72 are proof of concept schemes (see _breeze._go).\n\n3rd revision (9/11/2014):\n  - added Breeze512 (16 LMs) to provide length of keyspace: 512bit.\n  - parenthesis in roundTrip() ()all functions corr; statenumbers corrected to fit the new scheme\n\n~~Note: Breeze512 is not NIST tested so far, will do in the next days and will provide testresults below.(Its the same new scheme of AIX - should pass) update: Breeze512 passed 2 of three NIST checks (failed once with 94/100 on NonOverlappingTemplate)~~ update: corrected for 1 bit shorter part of the Mantissa solved this NIST failures. (passed 12 NIST-Tests so far)  \n\n2014/11/09 20:00 Last revision ensured proper seeding input size for Breeze256/51. Make sure you have the current version running \n\nNote 2014/11/10 Experimental CSPRNG based on Breeze128 added: BreezeCS128. (re-)Seeds from crypto/rand. \n\n4th revision (stable) v.1.1.1:\n  - Breeze128/CS128/256/512 have number of LMs corresponding to their inner states: 6 / 6 / 12 / 24 (3 inner states from 1 uint64 word input) (This solved a problem of defining a minimum input length)\n  - Number of Mantissa bits used for output states allways equal or less than last 51 Mantissa bits (Little - Endian)\n\n---\n\n**Important Note 2014/11/7**:\n\nBreeze had not (jet) become analysed for cryptographic security (cryptoanalysed)! So far breeze should be considered UNSAFE and it's definitely NOT recommended to use Breeze in a security sensitive or cryptographic context.\n\nNonetheless Breeze output is intensivly tested for deterministic, uniform distributed random characteristics and all about 40 tested sequence sets (100 seq in set, randomly seeded) of up to 8,ooo.ooo bit length generated by Breeze128(n=20)/Breeze256(n=20) passed the NIST test suite for randomness (see below). \n\nUpdate 2014/11/10: First results for Breeze512 are incouraging.  \n\n---\n\n---\n\n###Composition:\n\nThe Breeze chaos-based pseudo random number generator CB-PRNG consists of four parts:\n\n1. Preparation of seed (Init)\n2. Initialization (seedr)\n3. Generator core (roundTrip)\n4. Composition of output (Byte, ByteMP, XOR, Hash) \n\nThe following documentation is intended to give an overview about the functionality of these parts - please inspect the code for more details. \n\n**1) Preparation of seed**\n\nBreeze128:\n\nThe Init() function takes a wide range of input types to processes an uint64-Array that is delivered to the Seedr() function.\n\n- int, uint8/16/32/64, int8/16/32/64 is typecasted and copied directly to seedr()\n- float32/64 are bitwise upshifted by 8/11 bits and feeded to seedr()\n- string/[]byte is processed by sipHash's (see sipHash.go) compression function returning two uint64\n\nBreeze256/Breeze512:\n\nThe Init() function takes a string/[]byte of length 8 Byte or an []uint64 of length 1 \n\nBreezeCS128:\n\nAutoseeds from go/golang crypto/rand XOR bytewise with time.Now().Nanosecond(). RoundTrip() will reseed from go/golang crypto/rand XOR bytewise with time.Now().Nanosecond() too.\n\n**2) Initialization**\n\nThe Seedr() function takes an []uint64 and splits each field into three fragments (2 &times; 21, 1 &times; 22), that are used to calculate three *startseeds* running with two logmap functions. Each *startseed* is limited to 0..1<<23 omitting \"pathological\" values and type-casted to float64 before inverted (1/startseed). The number of output states roughly determines the number of startrounds within initialization.  \n\n**3) Generator core**\n\nThe roundTrip() function calculates the next results of the two (or more) logistic map equations. Each equation x<sub>n</sub> = k &sdot; x<sub>n-1</sub> &sdot; (1 - x<sub>n-1</sub>) has a different k with  3.56995 &lt; k &lt; 3.82843 and 3.82843 &lt; k &lt;= 4.0 to generate a chaotic state with 0 &lt; x &lt; 1 (see: startseed preparation). The calculation results are mirrored at 1.0 (1-state) and interchanged within the inner states of the two (ore more) map functions. They form the actual two (or more) states of the generator. Their normalized mantissa (\"significand field\") is the source of entropy from which four (or more) uint64 fields derive, that form the byteregister of breeze. In between a bitshift variable is used to enhance variability of the byteregister-generation and furthermore the byte registers and inner states are transposed after each roundTrip to ensure that all registers profitize directly from the generator entropy. \n\nroundTrip() checks for pathological state == 0 and will in case automatically reseed from previous states. In BreezeCS128 CSPRNG roundTrip() will autoreseed from go/golang crypto/rand XORed bytewise with time.Now().Nanosecond() instead. (Probability for autoreseeding was about (6 LMs) 2:10^10 from emperical observations (18 in 100 within 10^9 roundTrips of 6 LMs)) \n\n**4) Composition of output (Byte, ByteMP, XOR, ShortHash)**\n\n<b>Breeze</b> provides examplary output formats for different purposes.\n\n- the Byte(&byt) function sets the variable byt to the next byte (uint8/byte) from breeze's byte register.\n- the ByteMP(&byt) function acts similar as Byte() but provides a mutex.Lock/Unlock to ensure thread-/multiprocessor-safety (about 4-5 times slower).\n- RandIntn() returns a random uint64 \n- RandDbl() returns a float64 (0,1] (uniform random distribution)\n- RandNorm() returns a float64 (0,1] (normal (gauss) distribution)\n- XOR(&out, &in, &key) seeds the breeze generator with the *key* bytes and bytes of *in* are xored with the generator bytes and an error.\n- ShortHash(&m, hashlen) returns a hash of length *hashlen* deriving from multiple roundsTrips and an error. \n\n<img src=\"https://github.com/AndreasBriese/breezeTests/blob/master/RandDbl.png\" width=\"350px\">\n<img src=\"https://github.com/AndreasBriese/breezeTests/blob/master/RandNorm.png\" width=\"350px\">\n<img src=\"https://github.com/AndreasBriese/breezeTests/blob/master/randPad.png\" width=\"700px\">\n[RandDbl()](https://github.com/AndreasBriese/breezeTests/blob/master/RandDbl.png)... [RandNorm()](https://github.com/AndreasBriese/breezeTests/blob/master/RandNorm.png)...\n[random Bytes (RGBA Alpha=4th Byte)](https://github.com/AndreasBriese/breezeTests/blob/master/randPad.png)\n\n**Note:** Byte / ByteMP do not check if breeze had been initialized! Make sure you did so, before calling!\n\n**Note:** RandIntn and RandDbl are thread/multiprocessing save (mutex.locked). Must be initialized before call. This comes at the cost of about 80 times slower number generation than Byte() and about 8 times (sic! from 8 bytes) slower than ByteMP(). \n\n**Note:** ShortHash is NOT intended to hash files - it is foremost a internal function to init breeze's PRNG for XOR. Hashes should be collisionresistent as far as the source and the hash output lies within the keyspace length. For any input longer than keyspace sipHash's fold&compress is used: the folding function derives directly from Dmitry Chestnykhs go implementation of SipHash-2-4 ( https://github.com/dchest/siphash ) \"a fast short-input PRF created by Jean-Philippe Aumasson and Daniel J. Bernstein\" ( https://131002.net/siphash/ ). The actual breeze code utilizes sipHash's fold/compressor to drains 2 &times; uint64 out of the []byte or string provided to seed the PRNG if the seed is longer than keyspace. It must be assumed therefore that ShortHash() produces collisions with longer inputs.   \n\n**Note:** XOR() and ShortHash() do NOT reset the generator function automatically. Make sure this is the desired state by your programming logic or use the Reset() function before calling XOR/ShortHash.\n\n\n####Breeze internals\n\n   | Breeze128 | Breeze256 | Breeze512 | BreezeCS128 |\n---|---|---|---|---|\nkeyspace |  [2]uint64 *128bit* | [4]uint64 *256bit* | [8]uint64 *512bit* | auto-/reseed crypto/rand *128bit* |\nno. of logistic maps (LM) | 6 LM | 12 LM | 24 LM | 6 LM |\nno. of internal LM states | 6 | 12 | 24 | 6 |\noutput states | [16]uint64 | [32]uint32 | [64]uint32 | [16]uint64 |\nused memory (struct) | ~186 Byte | ~362 Byte | ~715 Byte | ~186 Byte |\ntemp memory alloc | ~234 Byte | ~458 Byte | ~907 Byte | ~250 Byte | \n\n(temp memory alloc: estimation from roundTrip() mem use; actual use might be higher)\n\n\n####Tests\n\nThe testframework beside NIST statitical suite can be found her:\nhttps://github.com/AndreasBriese/breezeTests\n\n\n\n---\n\n---\n\n###Install and use\n\nPackage **breeze** has no external dependancies.\n\nInstall using go get.\n\n    go get github.com/AndreasBriese/breeze\n\nImport the module within the import header of your code:\n\n\tpackage main\n\n\timport \"github.com/AndreasBriese/breeze\"\n\timport (\n\t\t\"bytes\"     // byte comparison in the XOR exmaple\n\t\t\"fmt\"       // printout\n\t\t\"io/ioutil\" // readfile in the XOR example\n\t)\n\n\tfunc main() {\n\t\t//\n\t\t// drain 1000 random bytes from chaos\n\t\t//\n\n\t\tvar bmap128 breeze.Breeze128\n\t\terr := bmap128.Init(\"12345678\")\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\tresultI := make([]uint64, 1000)\n\t\tfor i, _ := range resultI {\n\t\t\tresultI[i] = bmap128.RandIntn()\n\t\t}\n\t\tfmt.Println(\"RandIntn\", resultI[0:20])\n\n\t\tvar bmap256 breeze.Breeze256\n\t\tbmap256.Init([]uint64{uint64(1234), uint64(12345), uint64(123456), uint64(1234567)})\n\t\tresultF := make([]float64, 1000)\n\t\tfor i, _ := range resultF {\n\t\t\tresultF[i] = bmap256.RandDbl()\n\t\t}\n\t\tfmt.Println(\"RandDbl\", resultF[0:20])\n\n\t\tvar bmap128_2 breeze.Breeze128\n\t\tbmap128_2.Init([]uint64{uint64(1<<64 - 1), uint64(1<<32 - 1)}) // []uint64 will be \"folded\"; effective keyspace = 64bit\n\t\t// resultF := make([]float64, 1000)\n\t\tfor i, _ := range resultF {\n\t\t\tresultF[i] = bmap128_2.RandNorm()\n\t\t}\n\t\tfmt.Println(\"RandNorm\", resultF[0:50])\n\n\t\t//\n\t\t// hash a string\n\t\t//\n\t\twordToHash := \"Alice and Bob are in love.\"\n\t\tvar hmap256 breeze.Breeze256\n\t\thash, err := hmap256.ShortHash(wordToHash, 32) // second parameter for length of hash in bytes\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\tfmt.Printf(\"\\nShortHash without Init() 32 Byte: %x\\n\", hash)\n\t\t// get the same hash result\n\t\thmap256.Reset()                               // will reset all internal states\n\t\thash, err = hmap256.ShortHash(wordToHash, 32) // second parameter for length of hash in bytes\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\tfmt.Printf(\"ShortHash Reset() & without Init() 32 Byte: %x\\n\", hash)\n\n\t\t// use hash with previous initialization results in different hash\n\t\tvar hhmap512 breeze.Breeze512\n\t\terr = hhmap512.Init(wordToHash) // Init() sets/changes all internal states and bitshift but without resetting !\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\thash, err = hhmap512.ShortHash(wordToHash, 32) // second parameter for length of hash in bytes\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\tfmt.Printf(\"ShortHash with Init() 32 Byte: %x\\n\", hash)\n\t\t// this will give you the same hash again\n\t\thhmap512.Reset()                // will reset all internal states\n\t\terr = hhmap512.Init(wordToHash) // Init() sets/changes all internal states and bitshift but without resetting !\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\thash, err = hhmap512.ShortHash(wordToHash, 32) // second parameter for length of hash in bytes\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\tfmt.Printf(\"ShortHash with Reset() & Init() 32 Byte: %x\\n\", hash)\n\n\t\terr = hhmap512.Init(wordToHash) // Init() sets/changes all internal states and bitshift but without resetting !\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\thash, err = hhmap512.ShortHash(wordToHash, 32) // second parameter for length of hash in bytes\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\tfmt.Printf(\"ShortHash Init() without Reset() will be different: %x\\n\", hash)\n\n\t\t//\n\t\t// XOR bytes from a file\n\t\t//\n\t\tin, err := ioutil.ReadFile(\"./tests.go\")\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\tout := make([]byte, len(in))\n\t\tkey := []byte(\"xor my file\")\n\n\t\tvar lmap128 breeze.Breeze128\n\t\terr = lmap128.XOR(&out, &in, &key)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\tfmt.Println(\"\\nencode XOR without Init(): in and out are the same:\", bytes.Equal(out, in)) // false\n\n\t\tlmap128.Reset()\n\t\tlmap128.XOR(&out, &out, &key)\n\t\tfmt.Println(\"decode XOR without Init(): in and out are the same again:\", bytes.Equal(out, in), \"\\n\") // true\n\n\t\t// Have in mind, using Init() before XOR will result in a totally different result\n\t\tvar lmap256 breeze.Breeze256\n\t\terr = lmap256.Init(wordToHash) // sets all internal states and bitshift but without resetting !\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tpanic(1)\n\t\t}\n\t\tlmap256.XOR(&out, &in, &key)\n\t\tfmt.Println(\"encode XOR with Init(): in and out are the same:\", bytes.Equal(out, in)) // false\n\n\t\tlmap256.Reset()\n\t\tlmap256.Init(wordToHash) // sets all internal states and bitshift but without resetting !\n\t\tlmap256.XOR(&out, &out, &key)\n\t\tfmt.Println(\"decode XOR with Init(): in and out are the same again:\", bytes.Equal(out, in)) // true\n\n\t\tlmap256.Reset()\n\t\tlmap256.Init(wordToHash)\n\t\tlmap256.XOR(&out, &in, &key)\n\t\tfmt.Println(\"\\nencode XOR with Init(): in and out are the same:\", bytes.Equal(out, in)) // false\n\n\t\tlmap256.Reset()\n\t\t// lmap256.Init(wordToHash) // leaving out Init() will break the xor decoding\n\t\tlmap256.XOR(&out, &out, &key)\n\t\tfmt.Println(\"decode XOR without Init() will fail: in and out are the same:\", bytes.Equal(out, in)) // false\n\t}\n\t\n\n                   \n---\n\n---\n\n###Speed\n\nThe primary aim of investigating into CB-PRNG was a need for a second PRNG of comparable speed beside Daniel J. Bernsteins Salsa20 in a bytewise XOR mixing scheme for steganography.  \n\nThe breeze candidates Breeze128, Breeze256, Breeze512 and BreezeCS128 were compared to Go's math.random, Go's crypto/rand, complimentary-multiply-with-carry (adapted from http://de.wikipedia.org/wiki/Multiply-with-carry) and salsa20 (https://code.google.com/p/go/source/browse/salsa20/salsa20.go?repo=crypto with an additional byte draining function) regarding their speed of random byte emission (10.000-10,000.000.000 byte) and with salsa20 about XORing speed of 100MB and 1GB files using Core2Duo, Xeon, i5 and i7 powered PCs and laptops with OSX 10.6-10.9. \n\nThis is the output from an Apple MBPro 2.4 GHz i7 8GB RAM running MacOSX 10.8.5; go1.3 darwin/amd64 compiled with i686-apple-darwin11-llvm-gcc-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00) using 1 CPU at runtime:\n\n\tStreamlength (bytes): 100000000\n\n\t Initialization timings\n\n\tcmwcRand.init 23175 ns/op\n\tsalsa.init 25473 ns/op\n\tbreeze128.init 17652 ns/op\n\tbreezeCS128.init 422651 ns/op\n\tbreeze256.init 22541 ns/op\n\tbreeze512.init 38263 ns/op\n\n\tTimings excl. initialisation\n\n\t round 0 \n\n\tcrypto/rand 66.91293224 ns/op\n\tmath/rand 33.64623132 ns/op\n\tbreeze128 5.24251114 ns/op\n\tbreezeCS128 4.94863994 ns/op\n\tbreeze256 5.19408767 ns/op\n\tbreeze512 5.21904625 ns/op\n\tcmwcRand 7.96650826 ns/op\n\tsalsa 10.92033298 ns/op\n\n\tbreeze128 mutex 21.09652961 ns/op\n\tbreeze256 mutex 21.16416018 ns/op\n\tbreeze512 mutex 21.13883682 ns/op\n\tcmwcRand mutex 23.15235098 ns/op\n\tsalsa mutex 25.36474519 ns/op\n\n\t round 1 \n\n\tcrypto/rand 66.37308781 ns/op\n\tmath/rand 33.74983039 ns/op\n\tbreeze128 5.30179365 ns/op\n\tbreezeCS128 4.91731842 ns/op\n\tbreeze256 5.25770132 ns/op\n\tbreeze512 5.3275761 ns/op\n\tcmwcRand 8.07043497 ns/op\n\tsalsa 8.32984127 ns/op\n\n\tbreeze128 mutex 21.34504535 ns/op\n\tbreeze256 mutex 21.62477203 ns/op\n\tbreeze512 mutex 21.46773236 ns/op\n\tcmwcRand mutex 23.47656207 ns/op\n\tsalsa mutex 25.79886328 ns/op\n\n\t round 2 \n\n\tcrypto/rand 66.27560318 ns/op\n\tmath/rand 33.65269396 ns/op\n\tbreeze128 5.21549991 ns/op\n\tbreezeCS128 4.85845871 ns/op\n\tbreeze256 5.20661327 ns/op\n\tbreeze512 5.21153689 ns/op\n\tcmwcRand 7.92343511 ns/op\n\tsalsa 8.26453883 ns/op\n\n\tbreeze128 mutex 21.10411362 ns/op\n\tbreeze256 mutex 21.24844821 ns/op\n\tbreeze512 mutex 21.10982657 ns/op\n\tcmwcRand mutex 23.27960155 ns/op\n\tsalsa mutex 25.33713722 ns/op\n\n\t file Xoring (1GB)\n\n\tBreeze128 XOR: 2.808338704 s/GB  1000000000\n\tin == out : false\n\tBreeze128 XOR: 2.816419428 s/GB\n\tin == out : true\n\tBreeze256 XOR: 2.778572044 s/GB  1000000000\n\tin == out : false\n\tBreeze256 XOR: 2.783461739 s/GB\n\tin == out : true\n\tBreeze512 XOR: 2.864301834 s/GB  1000000000\n\tin == out : false\n\tBreeze512 XOR: 2.860537387 s/GB\n\tin == out : true\n\tsalsa XOR: 4.728022675 s/GB  1000000000\n\tin == out : false\n\tsalsa XOR: 4.717172578 s/GB \n\tin == out : true\n\t\n\t hash timings ( n = 1000 )\n\t\n\tbreeze128 hash 1824.243 ns/op\n\tbreeze256 hash 4430.815 ns/op\n\tbreeze512 hash 14234.625 ns/op\n\tsipHash-2-4 148.467 ns/op\n\tmd5 hash 1954.732 ns/op\n\tsha256 hash 4051.646 ns/op\n\tsha512 hash 3243.129 ns/op\n   \n\nInitialization time of Breeze128/256/512 depends on the number of startrounds roundTrips() to shift through the internal byteregister once. XORing competes well with salsa20/8. Hash is slow because of much overhead - will be looked at in future.\n\n\n---\n\n---\n\n\n### The Breeze License\n####LICENSE  \nBreeze is published with a MIT-TYPE LICENSE with an ADDITIONAL RESTRICTIVE CLAUSE about Breeze implementations in hardware\n\nCopyright (c) 2014 Andreas Briese <ab@edutoolbox.de>, 31157 Sarstedt, Gernmany\n \nADDITIONAL RESTRICTIVE CLAUSE: Any use of this software, modifications of this software or modifications or extensions of the underlying principle of the Breeze RNG implemented IN HARDWARE needs to be explicitly licensed by the copyright holder Andreas Briese (contact: ab<at>edutoolbox.de).\n \nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n \nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n \n\n####Note:\nThe purpose of this modified MIT LICENSE with ADDITIONAL RESTRICTIVE CLAUSE shall allow a unrestricted use of Breeze by developers on any software platform. In case of the implementation of Breeze or it's underlying logic in RNG hardware (for example but not limited to encryption chips or PIN number generators) the producer of such hardware needs to document the proper implementation to become licensed. This takes into account that improper or wrong implementation of Breeze in hardware might decrease the quality of the the resulting random number stream. \n\n---\n\nFurthermore i'ld really appreciate to have less problems to feed my family in future :-))\n\n---\n\n---\n\n###Some background information about the evolution of breeze\n\n(Please refer to the warning in the site header!)\n\nThe **logistic map** (LM) seems to be a well studied phenomenom (https://en.wikipedia.org/wiki/Logistic_map for more information). The formula for the logistic map \n\nx<sub>n</sub> = kx<sub>n-1</sub>-x<sub>n-1</sub><sup>2</sup> = kx<sub>n-1</sub> &sdot; (1-x<sub>n-1</sub>) \n\nwill get (in theorie) into chaotic state at 0 &lt; x &lt; 1 and 3.56995 &lt; k &lt; 3.82843 and at 3.82843 &lt; k &lt;= 4.0 \n(https://en.wikipedia.org/wiki/Logistic_map) and (in a theoretically unfinite space of real numbers) all following results will be &gt; 0 and &lt; 1 and therefore conserve the chaotic state *ad infinitum*. It's  impossible to predict the next outcome from the input value. Furthermore one can not forcast if the next outcome will be larger or smaller than the input value without actually calculating. LM behaviour in chaotic state is consequently very \"randomnous\". \n\n---\n\nSounds interesting for random number generation? A number of attemps had been made to implement software PRNG based on the logistic map and such a  unpredictable behaviour might also qualify for cryptographic use in particular. \n\nComputational developements of such algorithms were referred to as \"chaos based pseudo random number generators\" or CB-PRNGs in literature (see below). \n\nIt turned out that mathematicians theoretical real numbers and float arithmetics in software differ radical. Computational resources are limited in practice and consequently real numbers need to become fitted to bits and bytes. Reals are usually implemented as floating point numbers defined by IEEE 754 (IEEE Standard for Floating-Point Arithmetic (IEEE 754)) (leaving beside relativly slow decimal floating point number formats) and floating point arithmentics are speeded up by proper maschine code. But these floats are not infinite and restricted to their properly rounded representation regulated by IEEE 754 to prevent under- or overflow the capacity of the given format. \n\nThe difficulties to deal with the restrictions of IEEE float format when calculating the logistic map are discussed in much detail in this publications: Shujun Li, 2008: \"When Chaos Meets Computers\" http://arxiv.org/abs/nlin/0405038v3 and more recent and discussing logistic map in particular: K. J. Persohn, R. J. Povinelli, 2012: Analyzing Logistic Map Pseudorandom Number Generators for Periodicity Induced by Finite Precision Floating-Point Representation http://povinelli.eece.mu.edu/publications/papers/chaos2012.pdf (Please refer to this text also to find references to important approaches to use chaotic states in PRNG until 2012).\n\nPersohn and Povinelli conclude in the above publication: ''Real number implementations in finite precision are detrimental to the periodicity of chaotic PRNGs. Ignoring this reality makes chaos-based PRNGs deceptively appealing for random applications. (Annot.: Their presented analysis package) FPPC algorithm can comprehensively analyze the periodicity of truncated real number series generated by a recurrence relation. Using these results one can make informed decisions about the appropriate use of a chaotic PRNG with respect to its conventional counterparts. The results revealed about the logistic map do not appear competitive with conventional PRNGs.''\n\n---\n\nSeems like computational representation of chaos-based models in general and logistic map (LM) for PRNGS in particular are dead - so what?\n\nThey are'nt dead anyway: \n\nSee below for a list of actual approaches to improve chaos based PRNG (CB-PRNG) period length is mixing CB-RNGs with multiple recursive generators (MRGs) to enhance period length and avoid the predictability of MRG output for use in cryptography:\n\n S. Shagufa and K. Geetha, 2013: \"Period Extension and Randomness Enhancement Using High-Throughput Reseeding-Mixing PRNG\" http://www.urpjournals.com/tocjnls/2_13v3i3_2.pdf ; \n \n M. K. Kumar, S. A. Hussain and S. F. Basha, 2013: \"A New Design for High Throughput Linear PRNG\" http://www.ijareeie.com/upload/2013/december/27_ANewDesign.pdf;\n \n S. D. Babu and P. M. Kumar, 2013: \"Design of a New Cryptography Algorithm using Reseeding-Mixing Pseudo Random Number Generator\" http://www.ijitee.org/attachments/File/v2i5/E0631032413.pdf\n \n S. Tazyeen, G.S. Biradar, M. Patil, 2014: \"DESIGN OF A NEW CRYPTOGRAPHIC ALGORITHM USING HIGH- THROUGHPUT RM-PRNG\" http://www.ijtre.com/manuscript/2014011017.pdf \n \n---\n\nOkay, but logistic maps (LM) alone won't do it. \n\nReally? \n\nNo, let's take a closer look. What are the central arguments against their use in computation of random numbers?\n\n1. LM produce short periods (resulting from float rounding)  \n2. There are 'pathological seeds' in LM that lead to fixed output\n\nLet's take an example:\n\nLogistic map with k = 4; 0 &lt; x &lt; 1 ==> x<sub>n</sub> = 4x<sub>n-1</sub>&sdot;(1 - x<sub>n-1</sub>) [1] \n\na.) Deadlocks are x = 1/4 and x = 3/4 leading to output: 0.75 .. 0.75 .. 0.75 ..\n\nset x<sub>n-1</sub> = 1/4 : results in 4 &sdot; 1/4 &sdot; (1 - 1/4) = 1 &sdot; 3/4 = 3/4 = 0.75 \n\nset x<sub>n-1</sub> = 3/4 : results in 4 &sdot; 3/4 &sdot; (1 - 3/4) = 3 &sdot; 1/4 = 3/4 = 0.75\n\nb.) Additionally a deadlock with x = 1/2 output is: 1.0 .. 0 .. 0 .. 0 ..\n\nset x<sub>n-1</sub> = 1/2 : results in 4 &sdot; 1/2 &sdot; (1 - 1/2) = 2 &sdot; 1/2 = 2/2 = 1.0 .. =&gt; 4 &sdot; 1 &sdot; (1 - 1) = 0\n\nc.) If x becomes very small, the float rounding might result in x = 0 which blocks the map function; \n\nd.) Empirically long sequences of rounded numbers show up with lim 1 or lim 0; if using the CB-PRNG as bit-emitter based on up-down or smaller/larger 0.5 this will result in disturbance of the random sequence by high repetition counts of 0000.. or 1111... \n\n*a.)*, *b.)* and *c.)* can be mastered by reseeding the map conditionally, but fighting *d.)* brings up a tautology: Since the map is in chaotic state, no prior indicator is given (as far as i know) before entering one of the above deadlocks or \"limited chaotic\" states caused by floating point arithmetics.  \n\n**Solution for *c.)***\n\n    (S1) Reseed the map if a map results in zero \n\n\n<center>... it took me some weeks to stare at floating point number sequences, reading and puzzling ...</center>\n   \n   \n   \n**This is my solution for *d.)*:**\n\nImplement another \"permanent reseeding\" of the logistic maps resulting in:\n \nx<sub>n</sub> = k&sdot;(1 - x<sub>n-1</sub>) &sdot;(1 - (1 - x<sub>n-1</sub>))\n\n    (S2) After each calculation reseed the map with 1-x (\"mirror x at 1\")\n\nThis approach would break the map in theoretical math, but if done in the computational universe of IEEE 754 floats each substraction step may or may not cause \"cancelation\" of LSB and provoce rounding errors --&gt; the computed map remains in chaotic state.\n\nHere i present a new mathematical 'dilemma' for IEEE 754 float arithmetics :-)\n\n    'IEEE 754 dilemma' for float numbers d with 0 < d < 1: mostly x != 1 - (1 - x) \n\tbut if and only if x can be represented exactly by 1/2 + 1/2^2+ .. + 1/2^len(mantissa) \n\tthen x == 1 - (1 - x)\n\t\n<center>... some more staring at floating point number sequences, reading and puzzling ...</center>\n\nAnother example:\n\nLogistic map with k = 3.9; 0 &lt; x &lt; 1 ==> x<sub>n</sub> = 3.9&sdot;x<sub>n-1</sub> &sdot;(1 - x<sub>n-1</sub>) [2]\n\na.) Yes, we have deadlocks but NOT x = 1/4 and x = 3/4 as in [1]\n\nset x<sub>n-1</sub> = 1/4 : results in 39/10 &sdot; 1/4 &sdot; (1 - 1/4) = 39/40 &sdot; 3/4 = **117/1600 != 0.75** \n\nset x<sub>n-1</sub> = 3/4 : results in 39/10 &sdot; 3/4 &sdot; (1 - 3/4) = 117/10 &sdot; 1/4 = **117/40 != 0.75**\n\nb.) No deadlock at x = 1/2 -&gt; output is NOT : 1.0 .. 0 .. 0 .. 0 .. as in [1]\n\nset x<sub>n-1</sub> = 1/2 : results in 39/10 &sdot; 1/2 &sdot; (1 - 1/2) = 39/10 &sdot; 1/2 = **39/20 != 1.0**\n\nc.) If x becomes very small, the float rounding might result in x = 0 ; solved by (S1)\n\nd.) Long sequences of rounded numbers with lim 1 or lim 0 ... ; solved by (S2)\n\n\n\n<center>... ding-dong ...</center>\n\n\n\n**And this is the solution for *a.)*, *b.)*:**\n\n    (S3) Combine two (or more) logistic map functions with different k-values \n\tby \"reseeding\" them from each other\n\n---\n\n###Expand the mining capacity of the logistic map (LM)\n\nSome approaches use LM by emitting one bit from each calculation result. This can be done by evaluating the difference to the preceeding result (higher/lower) or by evaluating x >= 0.5 (limis logmap results/length). Persohn and Povinelli (2012) resumed, CB-PRNG proved to be ineffective and slow compared to classical LCG - i guess, that is an appropriate resumee if looking at the above mentioned bit generation scheme.\n\nBut IEEE 754 double floating point values &gt;0 and &lt;1 can store more than one bit of entropy from chaos. **Breeze** uses 28 to 51 bits of the normalized mantissa (\"significand field\") of each logistic map output. Since this is smaller than uint64's capacity two (or more) map states are combined to compute output states using an ARX algorithm. \n\nIf i did not misunderstood the concept of entropy, this means Breeze is based on min. entropy of number-of-LM &times; 2<sup>28</sup> up to max. number-of-LM &times; 2<sup>50</sup> depending on roundTrips the internal state of *bitshift*.  \n\nBreeze(CS)128 / Breeze256 / Breeze 512 emit 16 / 32 / 64 uint64 (128 / 256 / 512 Bytes) deriving from each roundTrip results by permutative shifting and xoring (expanding) the last outputs from the logistic map functions. \n\n---\n\n###Preliminary assumptions regarding cryptographic qualities of Breeze\n\n**Important Note 2014/11/1**:\n\nBreeze had not (jet) become analysed for cryptographic security (cryptoanalysed) by the community! (I would very much appriciate, if you, the reader, would like to do some analysis) \n\n**So far breeze should be considered UNSAFE and it's definitely NOT recommended to use Breeze in a security sensitive or cryptographic context!**\n\n####- - -\n\nThe following aspects are discussed here now (will be extended):\n\n- Random properties of output \n- Input/Seed-recovery from output stream\n- Guessing the next output from previous output\n- Input/Seed-recovery with insights into all internal states\n- Calculate the next output with insights into all internal states\n\n\n**1.) Random properties of output**\n\nBreeze is designed to emit an stream with uniform random characteristics, that is indistinguishable from a uniform random function output. Following tests had been performed in the last weeks:\n\n+ Tests for randomness of the implementation of the logistic maps:\n\nSince Breeze LMs are deterministic regarding their seed value(s) the results (state) of each LM were recorded continously and checked for repetitions. This was performed with about 5000 sequences of up to 1,000,000.000 byte length (see breezetest.go for the test implementation). \n\n+ Tests for proper implementation of the output module(s): \n\nThe same was done for the output []uint64 and these were moreover checked for combination repetitions.\n\n+ Additional tests of the emitted bytes:\n\nBreeze emitted bytes were sorted into 256 baskets and the frequencies of values lower/higher than 128 were calculated (see breezetest.go for the test implementation).  \n\n+ NIST Test suite (v. sts-2.1.2 including changes of July 9, 2014)\n\nAbout 40 tested sequence sets (100 seq in set, randomly seeded) of up to 8,ooo.ooo bit length generated by Breeze128(n=20)/Breeze256(n=20) passed the NIST test suite for randomness (see below). Some sequences up to 1^10 byte were feeded into NIST statistical analysis, but the tests took hrs to days and therefore testing longer sequences with adequat setsize obviously overflows my computational capacities. (Feel free to contribute by testing :-)  \n\n**2.) Input/Seed-recovery from an output stream**\n\nBreeze is a deterministic RNG. That means, that any call of Breeze with the same seed (deriving from input) shall &amp; will produce exactly the same sequence of random bytes. With inits within the keyspace (see below) no collisions occur. And because these are deriving (deterministic) from the inner states of the LMs also the states at the x'th roundTrip should be exactly the same, if the same seed at call is used.\n\nThe important question from a cryptoanalytic view would be, if given an attacker has (a) a part or (b) even the whole sequence of output he could guess the (A) inner state or (B) the input or seed at initialization can be assessed by any means easier than brute force attack (100% of the keyspace).\n\nThe seed of the actually implemented Breeze128 is up to 128bit; Breeze256 uses up to 256bit and Breeze512 seeds from 512bit. This scheme can easily be extended.  \n\nBreezeCS128 seeds from 128bit urandom provided by go/golang crypt/random XORed with time.Now().Nanosecond() see csrand.go for details. If one of the states rounded to Zero, BreezeCS128 reseeds again from urandom.\n\nThat said, even if you can provide many types of even longer keys to breeze, Breeze128's internal keyspace is effectivly 128 bit and Breeze256 has a keyspace of 256 bit; Breeze512's keyspace is 512bit. Bruteforce would need at minimum 2<sup>128</sup> / 2<sup>256</sup> / 2 <sup>512</sup>  different calls of Breeze128 / Breeze256 / Breeze512 to recover an input/key from output, given the attacker has the full output and no additional (pre- or re-)seeding using the Init() function was done.\n\nBest practice for stream cipher use is twofold (i.e. Breeze128):\n\n1. seed breeze with a key within keyspace (i.e. Breeze128 []uint64{uint64, uint64}),\n2. XOR(in, out, key) with a key string | []byte of arbitrary length (best:==16 Bytes for low collision) or []uint64{uint64, uint64}\n\n\nState-recovery from output means to guess all internal LM states from the output bytes. This should be a 'hard problem' because the output bytes derive from three or more mixed internal states mantissa fragments (steared by the internal variable *bitshift* [0..23] and always less than 52 bits to ensure information loss from internal states within the process) that are combined by an ARX algorithm and xored with their previous states. Furthermore with each rountTrip the inner states and output states are alternated (state[0]<-state[1]; state[1]<-state[2] ... state[last]<-state[0]). \n\nBreezeCS128 follows the same logic as Breeze128 but uses Go/golangs interface to urandom (crypto/rand) XORed with time.Now().Nanosecond() for seeding as a CSPRNG instead. Auto-reseeding within roundTrip() uses the same approach (see module csrand.go). \n\n**3.) Guessing next output from previous**\n\nTaking into account the chaotic nature of logistic maps and the existings proves about breeze's uniform random output it should be a 'hard problem' to predict future output from breeze with a higher propability than 1:127 for each future byte. (Annot.: I would really like to have somebody else looking at this estimate; did i interprete the birthday paradox properly?)\n\n**4.) Input/Seed-recovery with insights into all internal states**\n\nEven if an attacker knows \n \n - all LMs k-values,\n - all actual LMs internal states, \n - the actual assignment of internal states to LMs (S3),  \n - internal bitshift-value (&sim; 1/3 number of roundTrips mod 23; -&gt; output composition).  \n\nThen the attacker will reach the point, that he cannot reverse calculate the preceeding state because of (S2) and the above 'IEEE 754 dilemma':\n\n    'IEEE 754 dilemma' for float numbers d with 0 < d < 1: mostly x != 1 - (1 - x) \n\tbut if and only if x can be represented exactly by 1/2 + 1/2^2+ .. + 1/2^len(mantissa) \n\tthen x == 1 - (1 - x)\n\n(S2) results in a \"hard to recover\" information loss each time of roundTrip. In this distinct the breeze algorithm is likely to be an \"one-way function\".  \n\n**5.) Calculate the next output with insights into all internal states**\n\nIf an attacker got all the above mentioned internal information he will be able to compute all future output.\n\nThis is not the case for BreezeCS128 that ocassionally autoreseeds from urandom (crypto/rand). Here an attacker would be able to calculate outputs until next autoreseeding is started because of a internal state was rounded to Zero (from observation once about 10^10 roundTrips).   \n \n---\n\nNIST sts-2.1.2 Breeze128\n\n\t100 samples with 8,000.000 bits (10**6 bytes) \n\n\t------------------------------------------------------------------------------\n\tRESULTS FOR THE UNIFORMITY OF P-VALUES AND THE PROPORTION OF PASSING SEQUENCES\n\t------------------------------------------------------------------------------\n\t   generator is <../128N_1823668462.bin>\n\t------------------------------------------------------------------------------\n\t C1  C2  C3  C4  C5  C6  C7  C8  C9 C10  P-VALUE  PROPORTION  STATISTICAL TEST\n\t------------------------------------------------------------------------------\n\t  9   8  14   9  14  10   7  15   7   7  0.437274    100/100     Frequency\n\t  9  10  13  12   8   7  12  10   8  11  0.935716     98/100     BlockFrequency\n\t  7   5   9   9  19  13   8  11   7  12  0.108791    100/100     CumulativeSums\n\t  9  10  12   7  13   1  16  17   8   7  0.016717    100/100     CumulativeSums\n\t 14   9   7   5  14  15  10   8  13   5  0.162606     99/100     Runs\n\t 12   8  12  11  13   8  12  11   6   7  0.779188    100/100     LongestRun\n\t 13  10   5  14   6  10  13  13  10   6  0.350485     99/100     Rank\n\t 11   8  12  12   5   8  11  12   9  12  0.816537     98/100     FFT\n\t  9  11  12  14   9  13   9   2  11  10  0.366918     97/100     NonOverlappingTemplate\n\t 13   6  10  10   9  10   7   9  12  14  0.779188     96/100     NonOverlappingTemplate\n\t  7  10  10   4  12  12  11  14  12   8  0.554420     98/100     NonOverlappingTemplate\n\t  8   7  10   9  11  17   7  13   8  10  0.474986    100/100     NonOverlappingTemplate\n\t  9  11  15  10   6   7  12  10   9  11  0.759756     99/100     NonOverlappingTemplate\n\t  4   7  14  11  11  11   7  10  12  13  0.474986    100/100     NonOverlappingTemplate\n\t 12   7  10  13  10   9   9  13   8   9  0.924076    100/100     NonOverlappingTemplate\n\t  9  15  13   4  11   9  11   7  12   9  0.455937    100/100     NonOverlappingTemplate\n\t 11  12  10  14   7  10   8  11   8   9  0.911413     99/100     NonOverlappingTemplate\n\t  9  12  14   8   9   6   9  13   9  11  0.798139    100/100     NonOverlappingTemplate\n\t 17   8  16   9  10   6   6  11  11   6  0.122325     99/100     NonOverlappingTemplate\n\t 12  10   5  12  11  17   6  11   5  11  0.181557     99/100     NonOverlappingTemplate\n\t 10  13   7   7  10  11  15   7   9  11  0.699313    100/100     NonOverlappingTemplate\n\t  8  12   8   7   8  13  13  10  12   9  0.851383     98/100     NonOverlappingTemplate\n\t  7  14   8  13  14   9   9  10   8   8  0.699313    100/100     NonOverlappingTemplate\n\t 10  10  11  13   8  12   9  13   5   9  0.798139     98/100     NonOverlappingTemplate\n\t  8  13   8  12   6  11  11  13   9   9  0.834308     98/100     NonOverlappingTemplate\n\t  6   7   8  14   9  11  16  15   4  10  0.108791     99/100     NonOverlappingTemplate\n\t  9   7   6   6  13  12  10   9  13  15  0.437274     99/100     NonOverlappingTemplate\n\t  6  15  10  11  13  11   5   8  12   9  0.474986    100/100     NonOverlappingTemplate\n\t 13   6  14  12  10  14   8   4   9  10  0.334538     99/100     NonOverlappingTemplate\n\t 11   9  18  11   5   9  15  12   5   5  0.045675     96/100     NonOverlappingTemplate\n\t 14  11   6  13  10  10  10   7  11   8  0.779188    100/100     NonOverlappingTemplate\n\t 10   9   6  10  15  15  10   9   7   9  0.554420     98/100     NonOverlappingTemplate\n\t 10  10  15  11  11   5   7  12  11   8  0.637119     99/100     NonOverlappingTemplate\n\t  7  15  12   8   9   7   9   4  14  15  0.162606     99/100     NonOverlappingTemplate\n\t 13   8   5   9  14   9  13   8  13   8  0.514124     99/100     NonOverlappingTemplate\n\t 10  10  10   3  16  12   6  13  13   7  0.153763     99/100     NonOverlappingTemplate\n\t  7   7  10  11   9  14  10  10  10  12  0.911413     99/100     NonOverlappingTemplate\n\t  8   8  16   9   7   8  12   9  11  12  0.657933    100/100     NonOverlappingTemplate\n\t 10   7   9  11   8  15   8  10  11  11  0.867692     98/100     NonOverlappingTemplate\n\t  7  11  11  10   6  14  10  12   9  10  0.851383    100/100     NonOverlappingTemplate\n\t  8  15  11  10  11   6  16  11   5   7  0.224821    100/100     NonOverlappingTemplate\n\t  8   9  10   8   5  10  17  13   8  12  0.350485    100/100     NonOverlappingTemplate\n\t 14   9  11  11   4   7  12  11  14   7  0.401199     98/100     NonOverlappingTemplate\n\t 12   4   9   9  12  11  13   5  13  12  0.401199    100/100     NonOverlappingTemplate\n\t  6  10   7   9  14   8  20  10   7   9  0.075719    100/100     NonOverlappingTemplate\n\t  8  13  10  12  11   7  12  13   7   7  0.759756    100/100     NonOverlappingTemplate\n\t 12  10  14   5  12  12  10  11   8   6  0.595549     99/100     NonOverlappingTemplate\n\t 12  10  13   4   7  10  13  16   7   8  0.236810    100/100     NonOverlappingTemplate\n\t 14  18  11   6   9  11   7   8   3  13  0.048716     97/100     NonOverlappingTemplate\n\t 10   9   9  12   9  11   9  12  10   9  0.997823     98/100     NonOverlappingTemplate\n\t 12  12  11  15   7  10  12   5   9   7  0.514124     98/100     NonOverlappingTemplate\n\t  9  14  18  12  10   5   8  10   8   6  0.145326    100/100     NonOverlappingTemplate\n\t 16  12   8  10  11  11   8  12   6   6  0.474986     99/100     NonOverlappingTemplate\n\t 12  13   8   9  10  16  11   8   5   8  0.455937    100/100     NonOverlappingTemplate\n\t  6  12  13   7   7  12   8   9  12  14  0.574903     99/100     NonOverlappingTemplate\n\t 13  11   8   7   7  12   8  12  13   9  0.798139     97/100     NonOverlappingTemplate\n\t 13  14   5   6  11  11  10   9  10  11  0.637119     98/100     NonOverlappingTemplate\n\t 10  14   7  15  12   7   8   8   6  13  0.383827     97/100     NonOverlappingTemplate\n\t  7  11  11  15   5   7   6  15  13  10  0.213309    100/100     NonOverlappingTemplate\n\t  8  11   5  11  10  11  11  13   9  11  0.883171     98/100     NonOverlappingTemplate\n\t  9   7  14  11  13   6   3  16  12   9  0.115387     98/100     NonOverlappingTemplate\n\t 12  10   4   7  18  10   6   8   7  18  0.014550     98/100     NonOverlappingTemplate\n\t 14   6   7  18  13  12   9   8   4   9  0.066882     99/100     NonOverlappingTemplate\n\t  6   9  11  11  11  14   8  15  10   5  0.437274    100/100     NonOverlappingTemplate\n\t  9  10  15   8   7   8  14  11   9   9  0.719747     99/100     NonOverlappingTemplate\n\t  8  15  12  12   5   9   7  12  10  10  0.574903     99/100     NonOverlappingTemplate\n\t 11   7  14   7   9  13   7  14  10   8  0.595549     98/100     NonOverlappingTemplate\n\t 10  16   8  11   8  10   9   9  11   8  0.816537     99/100     NonOverlappingTemplate\n\t 12   7  12   9  10   6  10   9  11  14  0.816537    100/100     NonOverlappingTemplate\n\t  9   8   6  13   9   9   9  15   6  16  0.275709    100/100     NonOverlappingTemplate\n\t 11  11   8  10  12   4   8  17   7  12  0.262249     99/100     NonOverlappingTemplate\n\t 15  11  10   7   7  13  14  12   7   4  0.224821     99/100     NonOverlappingTemplate\n\t 13  10   6   7  11  12  10   7  12  12  0.779188    100/100     NonOverlappingTemplate\n\t 17  10   7   7  10  12  10  13   7   7  0.366918     99/100     NonOverlappingTemplate\n\t 18   9   7   7  10   8  13  13   8   7  0.224821     98/100     NonOverlappingTemplate\n\t 16   9   9  10  10   9   6  12   6  13  0.494392     97/100     NonOverlappingTemplate\n\t  8   5  10  11  12  14  13   8  12   7  0.574903    100/100     NonOverlappingTemplate\n\t 11  14   6  13  12   2  11   9   9  13  0.202268     99/100     NonOverlappingTemplate\n\t 12  12   6  10   9  17   9  12   5   8  0.289667    100/100     NonOverlappingTemplate\n\t 11   5   6  10   8  13   8  14  12  13  0.455937    100/100     NonOverlappingTemplate\n\t  9   9  10   8  11   9  14  10  14   6  0.779188     97/100     NonOverlappingTemplate\n\t  9  15  12   9  12   8  10   8   8   9  0.851383     98/100     NonOverlappingTemplate\n\t  9  11  12  14   9  13   9   2  11  10  0.366918     97/100     NonOverlappingTemplate\n\t 11  14  12   6  16   9   8  13   4   7  0.153763     98/100     NonOverlappingTemplate\n\t  9  10  12   6  10  16  12  12   4   9  0.334538    100/100     NonOverlappingTemplate\n\t  7  10   9   7  13  12   7  12  13  10  0.798139    100/100     NonOverlappingTemplate\n\t 13   7  10  10  14  10  10   6  10  10  0.834308     99/100     NonOverlappingTemplate\n\t  6   3  12  12  16  11   5   6  13  16  0.020548     96/100     NonOverlappingTemplate\n\t  8  10  10   4  12  12  13  12   8  11  0.678686    100/100     NonOverlappingTemplate\n\t  8   8  11  11   8  11   7  11  12  13  0.924076     98/100     NonOverlappingTemplate\n\t  7   8  11  15  15  13   5   6   8  12  0.202268     99/100     NonOverlappingTemplate\n\t 10   9  11   9   9   9  12  11  10  10  0.999438     99/100     NonOverlappingTemplate\n\t  9  14  12  13   9  10  10   6   9   8  0.816537     98/100     NonOverlappingTemplate\n\t 11   9  12   7  10  10   8   9  16   8  0.739918     99/100     NonOverlappingTemplate\n\t  6   9  13   7  13  11   7  10  15   9  0.534146    100/100     NonOverlappingTemplate\n\t 10  10  13   6  15   5  13  12   9   7  0.366918     99/100     NonOverlappingTemplate\n\t 10  14   6   6  11  10  12  15  12   4  0.224821     97/100     NonOverlappingTemplate\n\t  6   7   7   7  13  14  15   6  11  14  0.181557    100/100     NonOverlappingTemplate\n\t 11  10   9  11   8   7  11  13   7  13  0.883171     99/100     NonOverlappingTemplate\n\t  9  11  11  10   8  13  11   5  13   9  0.816537    100/100     NonOverlappingTemplate\n\t  8  10  12  11   7  12  14   6   8  12  0.719747    100/100     NonOverlappingTemplate\n\t 13  10  11  12  10  10   6  13   6   9  0.779188     99/100     NonOverlappingTemplate\n\t  8   5  11   6  10  13  12  12  13  10  0.616305    100/100     NonOverlappingTemplate\n\t  9   4   6   5  12   7  14  18  12  13  0.030806    100/100     NonOverlappingTemplate\n\t 11   9  14   6   6   9   9  11  10  15  0.554420    100/100     NonOverlappingTemplate\n\t 13  11  12   3  13   9  15  11   4   9  0.137282    100/100     NonOverlappingTemplate\n\t  7   6   9  14  10  16   9  12  10   7  0.419021    100/100     NonOverlappingTemplate\n\t  9   9  11   8  12   7  17   8   5  14  0.249284     99/100     NonOverlappingTemplate\n\t  6  14  11   6   9   8  14   9  10  13  0.534146     99/100     NonOverlappingTemplate\n\t 12  12  13  13   6   9  10   8   9   8  0.816537     97/100     NonOverlappingTemplate\n\t 13  14  11  14   7   5  10  12   6   8  0.350485     98/100     NonOverlappingTemplate\n\t 11   8   7  14   8  11   5   7  16  13  0.249284    100/100     NonOverlappingTemplate\n\t 16   9  10  11   6  10   9  13   8   8  0.616305    100/100     NonOverlappingTemplate\n\t 11   9   7  10   6   8  16  11  12  10  0.616305    100/100     NonOverlappingTemplate\n\t  6   8   6  12   9  14  14  13  10   8  0.474986    100/100     NonOverlappingTemplate\n\t 13  11   5  14  10   6  14   7  10  10  0.419021     98/100     NonOverlappingTemplate\n\t 10   8  10   9   7   8  13  11  15   9  0.798139    100/100     NonOverlappingTemplate\n\t  8  12  15   6  14  12  10  13   5   5  0.171867    100/100     NonOverlappingTemplate\n\t  8   8  12  10  11   7  13  12   8  11  0.911413    100/100     NonOverlappingTemplate\n\t  8  11  11  16  14   9   7   7   8   9  0.514124    100/100     NonOverlappingTemplate\n\t 10  11  12   7  14   9  12  12   8   5  0.657933     98/100     NonOverlappingTemplate\n\t 10   5   8  11   8   9  13  14  13   9  0.637119     99/100     NonOverlappingTemplate\n\t 11  11   8  11  13  10  14   6   8   8  0.779188     99/100     NonOverlappingTemplate\n\t  2  10  14  11   8  11  12  10  13   9  0.350485    100/100     NonOverlappingTemplate\n\t 13   8  16   9   8  15  11   5   4  11  0.115387     98/100     NonOverlappingTemplate\n\t 10   5  12   8  21   6   9  12  15   2  0.001757     99/100     NonOverlappingTemplate\n\t 13  13  15   5   9  11   9   9   7   9  0.514124     98/100     NonOverlappingTemplate\n\t  9  12  10   8   7   9  14  12  12   7  0.816537    100/100     NonOverlappingTemplate\n\t  7  12  10   7   8  12   9  10  13  12  0.883171    100/100     NonOverlappingTemplate\n\t  7   8  15  11  10   8   8  14   8  11  0.657933     99/100     NonOverlappingTemplate\n\t 12   9  10   6  14   9   8  11  13   8  0.779188     98/100     NonOverlappingTemplate\n\t  7  11   8   9   8   5  13  13  12  14  0.514124     98/100     NonOverlappingTemplate\n\t 12   7  14  10   6  13   9  11  10   8  0.739918     99/100     NonOverlappingTemplate\n\t  9   6   9   8   7   7  13  17  11  13  0.289667     98/100     NonOverlappingTemplate\n\t  3  11  10  13  13  11   8  12  13   6  0.334538     99/100     NonOverlappingTemplate\n\t  9   9  12  12  12  11   5  11  11   8  0.867692    100/100     NonOverlappingTemplate\n\t 16  10   5  11   8  10  14   6  11   9  0.350485    100/100     NonOverlappingTemplate\n\t  6   8   8  11  12   7  11   5  18  14  0.108791     99/100     NonOverlappingTemplate\n\t  7  18   5   9  10  19   9  13   6   4  0.003996    100/100     NonOverlappingTemplate\n\t 15  11  14  12  17   6   3   8   6   8  0.030806     99/100     NonOverlappingTemplate\n\t 13  11  11  12  10  10   6  12   5  10  0.739918     99/100     NonOverlappingTemplate\n\t  9   8  13  11  16  13   8  10   7   5  0.366918    100/100     NonOverlappingTemplate\n\t 12  10  13   8  10  12   8   7   6  14  0.678686     98/100     NonOverlappingTemplate\n\t  8   8   7   5   7  10  14  14   9  18  0.096578     98/100     NonOverlappingTemplate\n\t  8   8  11   9  14   8   8  12  14   8  0.759756    100/100     NonOverlappingTemplate\n\t 11   7  12   6  13   6  12  12  12   9  0.657933     98/100     NonOverlappingTemplate\n\t  7   8   7   8  17  15   6   5  11  16  0.037566     99/100     NonOverlappingTemplate\n\t  8  16   6   7  11   9  13  14  10   6  0.289667    100/100     NonOverlappingTemplate\n\t 10  13  15  11   7   8   9   9   8  10  0.798139     98/100     NonOverlappingTemplate\n\t  9  11  12  11  15   9  10   5   9   9  0.739918     99/100     NonOverlappingTemplate\n\t 17  10   5   8   7   8  10  18   8   9  0.066882     99/100     NonOverlappingTemplate\n\t  5  10  13   8  12  10  12   5  14  11  0.455937    100/100     NonOverlappingTemplate\n\t  9  15   8  11  15  10   8  10   6   8  0.534146     99/100     NonOverlappingTemplate\n\t 11  14  11   9   9   7   9   6  14  10  0.719747    100/100     NonOverlappingTemplate\n\t 12   9   7   7  11  10  15   9   9  11  0.816537     99/100     NonOverlappingTemplate\n\t  9  15  12   9  12   8  10   8   8   9  0.851383     98/100     NonOverlappingTemplate\n\t 15  14   9  10   7  11  11   5   9   9  0.534146     99/100     OverlappingTemplate\n\t 10  11  12   5   9  11  11  11   9  11  0.935716     99/100     Universal\n\t 12  10  10  10   8   9  12   3  11  15  0.455937     99/100     ApproximateEntropy\n\t  9   4  12  10   8  13   7  11   6   7  0.381687     84/87      RandomExcursions\n\t  8  10   5  13   8   8   8   7  12   8  0.650132     87/87      RandomExcursions\n\t 12   6   6  10  11  11   6   9   7   9  0.676097     86/87      RandomExcursions\n\t  5  10  12  12  10   5   8   9   7   9  0.572333     87/87      RandomExcursions\n\t  5  14   9   6  11   5   6  11   8  12  0.206354     87/87      RandomExcursions\n\t 10  12   9   3   7   5  14  12  11   4  0.054923     86/87      RandomExcursions\n\t  8   7   7   9  11  10   7   8  14   6  0.624107     87/87      RandomExcursions\n\t 11   7   5   4  11  13   8   7  15   6  0.081137     87/87      RandomExcursions\n\t  8   9  10   8   8  12  10   8   5   9  0.885045     87/87      RandomExcursionsVariant\n\t  8   8  12   7  10  10   5   9  10   8  0.845066     87/87      RandomExcursionsVariant\n\t  9  10   7  13   6   9   8  10   5  10  0.676097     87/87      RandomExcursionsVariant\n\t 10  10  11   9  12  11   6   5   8   5  0.521600     86/87      RandomExcursionsVariant\n\t 10   9   7  13  11  12   6   7   5   7  0.448892     86/87      RandomExcursionsVariant\n\t  8   9   9  14  12  10  11   4   5   5  0.180322     85/87      RandomExcursionsVariant\n\t  7  14  11  10   9   9   7   5  11   4  0.284375     84/87      RandomExcursionsVariant\n\t 11   7   7  11   7  10   8   8   4  14  0.381687     84/87      RandomExcursionsVariant\n\t  7   8  12   7   8   8  11   5   9  12  0.676097     86/87      RandomExcursionsVariant\n\t  6  11  10  14   6   8   5  12   7   8  0.320988     85/87      RandomExcursionsVariant\n\t 12   9   7   6  13  10   7   7   6  10  0.572333     87/87      RandomExcursionsVariant\n\t 11   8   5  10  11   8   6   9  10   9  0.823278     86/87      RandomExcursionsVariant\n\t  8   7   9   8  13   9   7  11   5  10  0.701879     87/87      RandomExcursionsVariant\n\t 12   3  11  15   8  11   6   7   8   6  0.101765     86/87      RandomExcursionsVariant\n\t 11   7  13  11  10   6   8   6   5  10  0.472584     85/87      RandomExcursionsVariant\n\t 14  11   9   4  12   9   7   6   4  11  0.136304     84/87      RandomExcursionsVariant\n\t 12  20   4   7   8   5  11  10   5   5  0.001334     86/87      RandomExcursionsVariant\n\t 11  18  10   7   7   4   8   9   6   7  0.046794     85/87      RandomExcursionsVariant\n\t 14   6  15  16   4  10  12  10   6   7  0.071177     99/100     Serial\n\t 11  14  11   8   7  11   6  12  10  10  0.816537    100/100     Serial\n\t  9   9  11   6   9  13  11   8  17   7  0.419021     97/100     LinearComplexity\n\n\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\tThe minimum pass rate for each statistical test with the exception of the\n\trandom excursion (variant) test is approximately = 96 for a\n\tsample size = 100 binary sequences.\n\n\tThe minimum pass rate for the random excursion (variant) test\n\tis approximately = 83 for a sample size = 87 binary sequences.\n\n\tFor further guidelines construct a probability table using the MAPLE program\n\tprovided in the addendum section of the documentation.\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\n\t------------------------------------------------------------------------------\n\tRESULTS FOR THE UNIFORMITY OF P-VALUES AND THE PROPORTION OF PASSING SEQUENCES\n\t------------------------------------------------------------------------------\n\t   generator is <../128N_2142215326.bin>\n\t------------------------------------------------------------------------------\n\t C1  C2  C3  C4  C5  C6  C7  C8  C9 C10  P-VALUE  PROPORTION  STATISTICAL TEST\n\t------------------------------------------------------------------------------\n\t 11  10  12   8  11  10  14   9   6   9  0.883171    100/100     Frequency\n\t 10   8   8  14  11   8  11   9  11  10  0.955835     97/100     BlockFrequency\n\t 10  12  10  10  10  10  12  11   9   6  0.978072    100/100     CumulativeSums\n\t 11  11   8  11  10   9  12   9   7  12  0.978072     99/100     CumulativeSums\n\t  8   8   6   5  16  10  17  14   7   9  0.066882     99/100     Runs\n\t 16   7  11   7  12   6   9  11   9  12  0.514124     99/100     LongestRun\n\t  9  13   5  10   6   9   9  17  12  10  0.304126     99/100     Rank\n\t 11   9  14  10   7  12   9   7  12   9  0.867692    100/100     FFT\n\t 17  11   0   8  10  12   8  11  10  13  0.045675     99/100     NonOverlappingTemplate\n\t  9   9   7  16  11  12   8   9   9  10  0.759756    100/100     NonOverlappingTemplate\n\t 13   5  11   9  12  10   8  10  12  10  0.851383    100/100     NonOverlappingTemplate\n\t  3   9  12  10  13   9   6  10  15  13  0.249284    100/100     NonOverlappingTemplate\n\t 11   8   9  12  14   9  11  10   5  11  0.798139     99/100     NonOverlappingTemplate\n\t  7   8  11  14  10   6  12  12  13   7  0.616305    100/100     NonOverlappingTemplate\n\t  8  12  11  11  15  10  14   6   7   6  0.419021    100/100     NonOverlappingTemplate\n\t  5  13  12  10  13  10   6   7   7  17  0.162606    100/100     NonOverlappingTemplate\n\t 10  12  11   7   7  14   8   6  12  13  0.616305    100/100     NonOverlappingTemplate\n\t 12  12   8  11   5   9   8  12  15   8  0.574903     99/100     NonOverlappingTemplate\n\t 10   8  11  14   9   3   8  11  13  13  0.401199    100/100     NonOverlappingTemplate\n\t  9  11  10  11   9  11   7   8  11  13  0.971699    100/100     NonOverlappingTemplate\n\t  9  12  10  13   7  10   9   7  14   9  0.834308    100/100     NonOverlappingTemplate\n\t 13  11   7  14   3  10  11  17   8   6  0.080519     97/100     NonOverlappingTemplate\n\t  9  11  16   7  10   7  14   6  13   7  0.304126    100/100     NonOverlappingTemplate\n\t 10   7   8   9   7  10  12  12  12  13  0.883171    100/100     NonOverlappingTemplate\n\t 10  12  10  11   6   9  10  10  11  11  0.983453    100/100     NonOverlappingTemplate\n\t 16   5  14   7  11   8  13   8   8  10  0.289667     98/100     NonOverlappingTemplate\n\t 10   6   9  13  13  10   6  13   9  11  0.719747     99/100     NonOverlappingTemplate\n\t  9  13   6  13   7   9  19   8  10   6  0.102526     99/100     NonOverlappingTemplate\n\t 13  11   9   8  13   8   8  11  11   8  0.924076     97/100     NonOverlappingTemplate\n\t 14   7  12   9  11   5  12  12   7  11  0.595549     96/100     NonOverlappingTemplate\n\t 12  16   9   6   9   8  11  12   8   9  0.616305     99/100     NonOverlappingTemplate\n\t 12  10   6  12  12   8  14  12   7   7  0.637119     99/100     NonOverlappingTemplate\n\t 10   6   9  12   6   8  13  10  13  13  0.657933     99/100     NonOverlappingTemplate\n\t 11   7  10  11   9   9  12   8  10  13  0.964295     98/100     NonOverlappingTemplate\n\t  9  13  10  11  13   7  14   6  10   7  0.637119     99/100     NonOverlappingTemplate\n\t  8  14   8  10  13   9  11  12   8   7  0.816537     99/100     NonOverlappingTemplate\n\t  9  12  10   7  15  12   8   8   9  10  0.816537     98/100     NonOverlappingTemplate\n\t 11  10   7   3  14   8  10  14  11  12  0.350485     99/100     NonOverlappingTemplate\n\t 13   9  12   9   9  12   9  13   4  10  0.678686     99/100     NonOverlappingTemplate\n\t  8  15  10  10  12   9  12   7   8   9  0.816537     98/100     NonOverlappingTemplate\n\t  9  14  10  10  10   9  10   8  10  10  0.987896     99/100     NonOverlappingTemplate\n\t  7  12  11  11   9   9  10  12  11   8  0.978072    100/100     NonOverlappingTemplate\n\t 10  12   9  11   7  10  10  11   6  14  0.851383     98/100     NonOverlappingTemplate\n\t  6   8  10  11  12  14  10  12   8   9  0.834308    100/100     NonOverlappingTemplate\n\t  4  14  13   9   6  10  14  12   7  11  0.289667    100/100     NonOverlappingTemplate\n\t 10   7   8  15  10  11  11  11  11   6  0.759756     99/100     NonOverlappingTemplate\n\t 11   9  11   8  14   9   9   7   7  15  0.657933     98/100     NonOverlappingTemplate\n\t  8  11  10   8  14   9  11  12   9   8  0.935716    100/100     NonOverlappingTemplate\n\t  9  15  10   8  11  16   9   6   8   8  0.419021     99/100     NonOverlappingTemplate\n\t 15  10  10  11   7  12   2   8  16   9  0.108791     99/100     NonOverlappingTemplate\n\t  8  11  10   9  11  12   8  15  10   6  0.779188     99/100     NonOverlappingTemplate\n\t 18  12  12   4   9  10   7  10   7  11  0.171867    100/100     NonOverlappingTemplate\n\t 16   5  11  13  15   7   6   8  10   9  0.181557     98/100     NonOverlappingTemplate\n\t 10   9   8  11  12  18   8   9   5  10  0.319084    100/100     NonOverlappingTemplate\n\t  8   6  10   5  14  10   9  14  11  13  0.455937     99/100     NonOverlappingTemplate\n\t 13   7  16   9   6  13  12   9  11   4  0.202268     96/100     NonOverlappingTemplate\n\t 10   8  10   7   6  15  10  12  11  11  0.739918    100/100     NonOverlappingTemplate\n\t  9   9  14   8  14   4   8  12  11  11  0.494392     97/100     NonOverlappingTemplate\n\t  8   7   9   9  12   8  11  12  12  12  0.935716    100/100     NonOverlappingTemplate\n\t 14  13  13  11   7   5  15   7   9   6  0.213309    100/100     NonOverlappingTemplate\n\t  9  13  10  12  13   7   7   7  13   9  0.739918    100/100     NonOverlappingTemplate\n\t 11   8  11   9   8   9  12  10  13   9  0.978072    100/100     NonOverlappingTemplate\n\t 13  13   8  13  10  11  11   7  11   3  0.419021     97/100     NonOverlappingTemplate\n\t  8   8  16   3  13  11  10  11  10  10  0.319084    100/100     NonOverlappingTemplate\n\t 10  17  12   9   9   7  11   5   6  14  0.202268     99/100     NonOverlappingTemplate\n\t 15  11  10  14  10   9   2  12  10   7  0.213309     99/100     NonOverlappingTemplate\n\t  8  12   9  12   5   9  15  13  11   6  0.437274    100/100     NonOverlappingTemplate\n\t 11  11   6  13  14   7   6   9  13  10  0.554420     99/100     NonOverlappingTemplate\n\t  4   9  16  14  10   7  14   9  11   6  0.153763    100/100     NonOverlappingTemplate\n\t  8  11  11  12   6   9   8  16   9  10  0.657933    100/100     NonOverlappingTemplate\n\t 10   7   9  13   6  10   9  15  10  11  0.719747     99/100     NonOverlappingTemplate\n\t  8  12   9  13   7   8  10  11  10  12  0.935716     99/100     NonOverlappingTemplate\n\t 13  10   7   6  16   6  10  12  13   7  0.289667     99/100     NonOverlappingTemplate\n\t 13  11   4  11  11  11  12   8   8  11  0.719747     98/100     NonOverlappingTemplate\n\t 11  14  11  12   7   9   6  13   7  10  0.678686    100/100     NonOverlappingTemplate\n\t 13  13   9  10   6  10  12   6  12   9  0.739918     99/100     NonOverlappingTemplate\n\t  9   7  16   8  14   6   7   7  14  12  0.213309    100/100     NonOverlappingTemplate\n\t  8  14  15   9   8  13  12   5   7   9  0.366918     99/100     NonOverlappingTemplate\n\t 15   8   6   9  16   8   5  14   8  11  0.153763     99/100     NonOverlappingTemplate\n\t 13   9  11   6   9  12  13   7  10  10  0.834308     99/100     NonOverlappingTemplate\n\t  9   8   7  10   7   8  14  10   9  18  0.289667    100/100     NonOverlappingTemplate\n\t 15  12   7   8   7   5  12  10  12  12  0.455937    100/100     NonOverlappingTemplate\n\t 17  11   0   8  10  12   8  11  10  13  0.045675     99/100     NonOverlappingTemplate\n\t 10   8   8   7  12   7  15  11  12  10  0.739918    100/100     NonOverlappingTemplate\n\t 12   6   9   6   6  11  11  14   9  16  0.289667     99/100     NonOverlappingTemplate\n\t  8  16   7  10  12  12   7   7   8  13  0.455937     99/100     NonOverlappingTemplate\n\t 11   5  12   7  17   5   8  13   6  16  0.037566    100/100     NonOverlappingTemplate\n\t  9   7   6  14  11  12  11   9  11  10  0.834308     98/100     NonOverlappingTemplate\n\t 11   7   8  19   9   9  10   6  12   9  0.224821     98/100     NonOverlappingTemplate\n\t  8  16   9   4   9  10  14  13   6  11  0.213309     98/100     NonOverlappingTemplate\n\t  4   8   3  14  11   9  14  11  16  10  0.066882    100/100     NonOverlappingTemplate\n\t 13   9  12   8   6  13  11  10   7  11  0.798139     99/100     NonOverlappingTemplate\n\t 14  11   8   6   9   9  14  10   7  12  0.657933     97/100     NonOverlappingTemplate\n\t 10  13  15  13   8   7   7  11   8   8  0.595549    100/100     NonOverlappingTemplate\n\t 13   6   9  14  11   6  10   9  12  10  0.699313    100/100     NonOverlappingTemplate\n\t 10  13   6   8  10  11  15   9   8  10  0.739918    100/100     NonOverlappingTemplate\n\t 13   7  19   8   7  13   5   6  10  12  0.055361     98/100     NonOverlappingTemplate\n\t 11  15   8  11   7  12   9  10  10   7  0.798139     99/100     NonOverlappingTemplate\n\t 13  12   8   8  11   9   7  11   8  13  0.867692    100/100     NonOverlappingTemplate\n\t 13  12   8   9  11   8   9   7   9  14  0.834308     98/100     NonOverlappingTemplate\n\t  4  16  10   8  10  10  15   7   8  12  0.224821     99/100     NonOverlappingTemplate\n\t 11  16   9   7  10  13   7   9  10   8  0.637119     99/100     NonOverlappingTemplate\n\t  6  14  10  13   5  11  12   9  11   9  0.595549    100/100     NonOverlappingTemplate\n\t  9  11  10  12  15  10   6  10   8   9  0.816537     99/100     NonOverlappingTemplate\n\t 10   4  10  10  11   6  13  10  11  15  0.455937    100/100     NonOverlappingTemplate\n\t 11   5  11   7   4  16   6  16  14  10  0.040108    100/100     NonOverlappingTemplate\n\t 11  11  10  15  10   6   9  12   8   8  0.779188     99/100     NonOverlappingTemplate\n\t 11  10   5   9  14  10  10   9  12  10  0.851383    100/100     NonOverlappingTemplate\n\t  6  12  15  10  12   7   9   6  10  13  0.494392    100/100     NonOverlappingTemplate\n\t  6   8  11   9  14  11  14   9   6  12  0.574903     99/100     NonOverlappingTemplate\n\t  9  12   6   7  16  19   7   5  12   7  0.021999     99/100     NonOverlappingTemplate\n\t  7   8  14  11   7  11  12  12  12   6  0.657933    100/100     NonOverlappingTemplate\n\t 12   9   8  15   7  11   9  12  10   7  0.759756     99/100     NonOverlappingTemplate\n\t 11  13   9  11  10  12  12  12   2   8  0.419021    100/100     NonOverlappingTemplate\n\t  9   6  12  15  12   8   9  10  12   7  0.657933    100/100     NonOverlappingTemplate\n\t 10  11   7  12  14  12  12   7   8   7  0.739918     99/100     NonOverlappingTemplate\n\t  8   8  17   6  12  10  11  10   7  11  0.455937     99/100     NonOverlappingTemplate\n\t  8  14  10   9   9   7  16   9   8  10  0.616305     99/100     NonOverlappingTemplate\n\t 14  10   4   7   9  15  10  10  14   7  0.262249     98/100     NonOverlappingTemplate\n\t  6  13  18   9  11  14   8   6   6   9  0.108791    100/100     NonOverlappingTemplate\n\t 11  10  13  14  12   3  11   7  11   8  0.401199     99/100     NonOverlappingTemplate\n\t 16   8   5   6   9   6  10  15  13  12  0.137282     98/100     NonOverlappingTemplate\n\t 13  10   7  15  12   9   8   9   5  12  0.514124     98/100     NonOverlappingTemplate\n\t 12  11   4  11   9  17   8  10   8  10  0.350485     99/100     NonOverlappingTemplate\n\t  9  11   9  12   9  11   8   7  13  11  0.955835    100/100     NonOverlappingTemplate\n\t  6  13   9  11  10   7   8  16  12   8  0.494392     97/100     NonOverlappingTemplate\n\t 17  10   9  10  10   7  11   8   9   9  0.678686     96/100     NonOverlappingTemplate\n\t  9   7   9   8  11   7  16  15   7  11  0.383827    100/100     NonOverlappingTemplate\n\t 10  12  11   8  16   8   6  11   8  10  0.637119     99/100     NonOverlappingTemplate\n\t  4  13   8  15  10  12   9  12  12   5  0.262249    100/100     NonOverlappingTemplate\n\t  4  13  10   9   9  13   8   9  14  11  0.554420    100/100     NonOverlappingTemplate\n\t 15  11   8  10   5  14   5  15  12   5  0.090936     99/100     NonOverlappingTemplate\n\t 10  11   8   4  10  10  17   6  11  13  0.236810     99/100     NonOverlappingTemplate\n\t 10  11   9   8  10  14  14   7   4  13  0.419021    100/100     NonOverlappingTemplate\n\t 14   8  15   9   8   7   9   8   9  13  0.595549     97/100     NonOverlappingTemplate\n\t  7   6   8  13   7  12  13  13  10  11  0.637119    100/100     NonOverlappingTemplate\n\t  7   9  12  14  11   5  10   7  11  14  0.514124     97/100     NonOverlappingTemplate\n\t  8   6  10   9  11  12  12   8  15   9  0.739918     98/100     NonOverlappingTemplate\n\t 10   7  10   5  16  10  11   7   8  16  0.213309     99/100     NonOverlappingTemplate\n\t 14  11  10   8  12   9  10  10   9   7  0.935716     99/100     NonOverlappingTemplate\n\t  9  13  15  12  10   7  10   7   7  10  0.678686    100/100     NonOverlappingTemplate\n\t 12  12   7  10  10  10  12  11   9   7  0.955835     98/100     NonOverlappingTemplate\n\t  9   8  15  15   7   5  14   9  13   5  0.122325     99/100     NonOverlappingTemplate\n\t 10   8  11   6  14  11   6  12  13   9  0.657933    100/100     NonOverlappingTemplate\n\t  8   9  10  16   7  11  11   9   8  11  0.759756    100/100     NonOverlappingTemplate\n\t  9  12   7   6  11  10  13  12  10  10  0.883171     99/100     NonOverlappingTemplate\n\t 11   8  10  15   3   8   7  12  10  16  0.153763     99/100     NonOverlappingTemplate\n\t  9   7  13  11   9  17   3  11   9  11  0.202268     98/100     NonOverlappingTemplate\n\t  8  12   9   9   8  12  12   6  12  12  0.867692     99/100     NonOverlappingTemplate\n\t 11  16  11   7  12   5  11   8   9  10  0.514124     97/100     NonOverlappingTemplate\n\t 12   6   8  15  15   9  10   8  12   5  0.289667     99/100     NonOverlappingTemplate\n\t  7  14  14  10   7  11   9   7  10  11  0.719747     98/100     NonOverlappingTemplate\n\t  7   8  10  15   6  12  15  12   9   6  0.319084     99/100     NonOverlappingTemplate\n\t 11  12   9  11  17  11  10   3  10   6  0.202268    100/100     NonOverlappingTemplate\n\t 16   6   7  14   8   9  12  14   7   7  0.213309     99/100     NonOverlappingTemplate\n\t 15  12   7   8   7   5  12  10  12  12  0.455937    100/100     NonOverlappingTemplate\n\t 19  14   9  12   7  11   9   5   5   9  0.058984     99/100     OverlappingTemplate\n\t 12  11   6  10   6  15  10  10   9  11  0.699313     97/100     Universal\n\t  7  13  11  12  12   9   5  11   9  11  0.779188     97/100     ApproximateEntropy\n\t  8  13   9  10  11   9   6   4   8   9  0.572333     87/87      RandomExcursions\n\t  8  10   9  13   5  11   7   9  10   5  0.546791     86/87      RandomExcursions\n\t  8   6   8   6   7   7  14  12  13   6  0.250878     87/87      RandomExcursions\n\t 11   7  10   8   8   7   9   6  12   9  0.865697     87/87      RandomExcursions\n\t 13   7   5  10   7   7  10  10  10   8  0.676097     86/87      RandomExcursions\n\t  9  11  11  11   8   9   8   8   5   7  0.845066     84/87      RandomExcursions\n\t  6   7  13  13   6   9  10  11   5   7  0.320988     86/87      RandomExcursions\n\t 10   8  10   6   5   9  12   9  15   3  0.117948     85/87      RandomExcursions\n\t  9   4   6  12   4  12   6   7  12  15  0.043157     85/87      RandomExcursionsVariant\n\t  9   6   8   6   8   4  12  10   7  17  0.069538     85/87      RandomExcursionsVariant\n\t  7   8   9   8   4   6  12  14  12   7  0.250878     85/87      RandomExcursionsVariant\n\t  9   6   7   9   5  12   8  15   8   8  0.340461     85/87      RandomExcursionsVariant\n\t 11   4   7   6  11   9  16  11   7   5  0.081137     86/87      RandomExcursionsVariant\n\t 11   6   4  10  10  15  11   6   6   8  0.168344     86/87      RandomExcursionsVariant\n\t  9   9   2  12  11  11   5  10  12   6  0.157031     87/87      RandomExcursionsVariant\n\t  8  13   7   3   7  13   8  12   7   9  0.220448     87/87      RandomExcursionsVariant\n\t 11   5  11   6  11   9   7   5  10  12  0.448892     86/87      RandomExcursionsVariant\n\t 11   8   7  13   6  15   4   9   8   6  0.136304     85/87      RandomExcursionsVariant\n\t  5  15  10  11  11   6   6   7   9   7  0.250878     87/87      RandomExcursionsVariant\n\t  7  11   8  12   3  12  11   6   8   9  0.340461     87/87      RandomExcursionsVariant\n\t  6  11   9   7  10   6   8  12  12   6  0.598138     87/87      RandomExcursionsVariant\n\t  6  11  10  12   7   6   9   8  15   3  0.117948     87/87      RandomExcursionsVariant\n\t  7  11   8  11   8  11   9   7   6   9  0.885045     86/87      RandomExcursionsVariant\n\t  8   9  11  10  10   9  10   6   4  10  0.752361     86/87      RandomExcursionsVariant\n\t  7  11  14   6   5  10   9   8  11   6  0.381687     86/87      RandomExcursionsVariant\n\t  7  14  11   5   6   5  11   8  10  10  0.302291     87/87      RandomExcursionsVariant\n\t  8   8  12   9   7   9  10  16  11  10  0.739918     98/100     Serial\n\t  7  10   9   7   9  12  14   4  10  18  0.122325    100/100     Serial\n\t  8  13   9   9  11   8   9  11  15   7  0.779188    100/100     LinearComplexity\n\n\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\tThe minimum pass rate for each statistical test with the exception of the\n\trandom excursion (variant) test is approximately = 96 for a\n\tsample size = 100 binary sequences.\n\n\tThe minimum pass rate for the random excursion (variant) test\n\tis approximately = 83 for a sample size = 87 binary sequences.\n\n\tFor further guidelines construct a probability table using the MAPLE program\n\tprovided in the addendum section of the documentation.\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\n\n---\n\nNIST sts-2.1.2 Breeze256\n\n\t100 samples with 8,000.000 bits (10**6 bytes) \n\t\n\t------------------------------------------------------------------------------\n\tRESULTS FOR THE UNIFORMITY OF P-VALUES AND THE PROPORTION OF PASSING SEQUENCES\n\t------------------------------------------------------------------------------\n\t   generator is <../256N_292422974.bin>\n\t------------------------------------------------------------------------------\n\t C1  C2  C3  C4  C5  C6  C7  C8  C9 C10  P-VALUE  PROPORTION  STATISTICAL TEST\n\t------------------------------------------------------------------------------\n\t  7  11  10   8  10   7   9  10  12  16  0.699313     99/100     Frequency\n\t 11  13   6  10  10  13  13   9   7   8  0.759756     99/100     BlockFrequency\n\t 10   7   8   8  11  10   9   9  16  12  0.739918     98/100     CumulativeSums\n\t  9   8  10   9   8  10   8  15  10  13  0.851383     99/100     CumulativeSums\n\t  9   7  11  11  10  12  12  10   9   9  0.987896    100/100     Runs\n\t  7  12  18   5  12   7   7  11  10  11  0.181557    100/100     LongestRun\n\t  6  10  11  13   8  14  12  12   6   8  0.595549     98/100     Rank\n\t 11   6  13  11  10   8  18   7  10   6  0.213309     99/100     FFT\n\t 10  10   6   9  15  10   8  14   7  11  0.616305     99/100     NonOverlappingTemplate\n\t 16  11   9  10  14   5  12   7   7   9  0.334538     98/100     NonOverlappingTemplate\n\t  9   7   8  12   3  17  10  16   7  11  0.062821     98/100     NonOverlappingTemplate\n\t 11   6  10   9   6  16   8  12  10  12  0.514124     99/100     NonOverlappingTemplate\n\t 11  13   8   6  14   7  10  12   9  10  0.739918     99/100     NonOverlappingTemplate\n\t 12   8   6   9   9  10  18  13   7   8  0.262249     98/100     NonOverlappingTemplate\n\t  4  13  11   8  16  10  12   6  13   7  0.191687    100/100     NonOverlappingTemplate\n\t 10   7  16  12  11  13   6   7   6  12  0.319084     97/100     NonOverlappingTemplate\n\t  9   7   8  11   6  11  16  14   7  11  0.401199    100/100     NonOverlappingTemplate\n\t  6  11   5  14  11   9  12  15   9   8  0.401199     99/100     NonOverlappingTemplate\n\t 16   5   8  12   8   8  11   9   9  14  0.383827     99/100     NonOverlappingTemplate\n\t 14  10  13   5  15   9   6   9  10   9  0.401199     98/100     NonOverlappingTemplate\n\t  7  10  10  13  10  11  11  13   4  11  0.678686    100/100     NonOverlappingTemplate\n\t  9   9   8  10  15  11   5   9  10  14  0.595549    100/100     NonOverlappingTemplate\n\t  8  11  13  15   9  10   8   9   9   8  0.834308     98/100     NonOverlappingTemplate\n\t 10   8   9  16   9   6   9  13   9  11  0.637119     97/100     NonOverlappingTemplate\n\t 11  11   8  13   8  11  13   7  10   8  0.897763    100/100     NonOverlappingTemplate\n\t  5  10   5  13   8  15  13  13  10   8  0.275709     99/100     NonOverlappingTemplate\n\t  8   7  13  13  12  10  10  14   8   5  0.534146     99/100     NonOverlappingTemplate\n\t 11  11  12   9   9  10   5  13  11   9  0.883171     99/100     NonOverlappingTemplate\n\t 11  12   9  12   7   9  16   6   9   9  0.595549    100/100     NonOverlappingTemplate\n\t  8   8   9  14  10   4  15  14   9   9  0.319084     98/100     NonOverlappingTemplate\n\t  9  11   9  14  10  12   8   9   9   9  0.964295     99/100     NonOverlappingTemplate\n\t  7  11   9  11  10  12  11   6  11  12  0.924076    100/100     NonOverlappingTemplate\n\t 11  11   5  10  14  12   8  12  10   7  0.699313     99/100     NonOverlappingTemplate\n\t 12   7  11   7   9  11   8  12   8  15  0.719747     99/100     NonOverlappingTemplate\n\t 11  11  13  10  12   9   8   8   6  12  0.883171     98/100     NonOverlappingTemplate\n\t  7   7  14  13  14   9   5  14   8   9  0.304126    100/100     NonOverlappingTemplate\n\t 11  10  11   8  12   7   8   8  14  11  0.883171    100/100     NonOverlappingTemplate\n\t 11  13   6  11   9  10   9  12  12   7  0.867692     99/100     NonOverlappingTemplate\n\t 13   9   8  13   5  11  13  12   5  11  0.455937    100/100     NonOverlappingTemplate\n\t 11   6   9   8   7  10  12   8  16  13  0.494392     99/100     NonOverlappingTemplate\n\t 12   8   7   5   8   8  13  12  13  14  0.455937     99/100     NonOverlappingTemplate\n\t  9  10  11  11  12  14   8   5  10  10  0.816537     98/100     NonOverlappingTemplate\n\t  8  15  12  11   7   9   7  10   9  12  0.759756     99/100     NonOverlappingTemplate\n\t  9  10   8   9   9  10  10  15   9  11  0.946308     99/100     NonOverlappingTemplate\n\t  9  10  14  11   9   5  13   7  12  10  0.678686    100/100     NonOverlappingTemplate\n\t  6  11  19  11  12   2  14   4  11  10  0.008879    100/100     NonOverlappingTemplate\n\t 14   8  16   9   6   8  15  11   6   7  0.171867     99/100     NonOverlappingTemplate\n\t  8  10  12   7   8  14   7  10  11  13  0.779188     99/100     NonOverlappingTemplate\n\t  8   8  14  10   9  11   9   7  11  13  0.867692     98/100     NonOverlappingTemplate\n\t 14   6   8   6   7  11  13  15  10  10  0.383827     99/100     NonOverlappingTemplate\n\t 15  11   4  10   4  12  12  12  11   9  0.262249     97/100     NonOverlappingTemplate\n\t 11  12  11   9   8  11  10   7  11  10  0.987896     99/100     NonOverlappingTemplate\n\t  5   8  14   8  12  13  12  12   8   8  0.554420     98/100     NonOverlappingTemplate\n\t 12  11  11   8  13   7  13   8  10   7  0.834308     99/100     NonOverlappingTemplate\n\t 10   8   7   8  14   7  13  17   6  10  0.236810    100/100     NonOverlappingTemplate\n\t 12   4  11   8  14  12   6  13  11   9  0.419021     96/100     NonOverlappingTemplate\n\t  7   8   6  12  11  11  10   7  17  11  0.401199    100/100     NonOverlappingTemplate\n\t  5  18   9  13  16   7   5   6  12   9  0.025193    100/100     NonOverlappingTemplate\n\t 13  13   6   9   9  13  11  10   2  14  0.181557     99/100     NonOverlappingTemplate\n\t  6  15   9  11  13   8  12   7  12   7  0.514124    100/100     NonOverlappingTemplate\n\t  8  15   9   9  12   5  14  10   8  10  0.534146     98/100     NonOverlappingTemplate\n\t  8  20   8  11  10   6  11   6  11   9  0.108791    100/100     NonOverlappingTemplate\n\t  7  17   7   9   5  10  13  11  11  10  0.319084     98/100     NonOverlappingTemplate\n\t 10  13   5   7  11  14  14   8  11   7  0.437274     99/100     NonOverlappingTemplate\n\t  9  14  16  12   7   6  13   5   2  16  0.010237    100/100     NonOverlappingTemplate\n\t 12   9   9   9   7  10  11  13   8  12  0.946308    100/100     NonOverlappingTemplate\n\t 17  12   9   7   7  13  10   7  11   7  0.350485     97/100     NonOverlappingTemplate\n\t  9   6  11   7  11   8  12   9  16  11  0.595549    100/100     NonOverlappingTemplate\n\t 10   4  11  13   7  12  14   5  11  13  0.275709     99/100     NonOverlappingTemplate\n\t 11  10   6  14   9  12   8  14   6  10  0.595549     99/100     NonOverlappingTemplate\n\t 10  14  12   9  19  11   9   6   6   4  0.045675    100/100     NonOverlappingTemplate\n\t 11   7  12   7   9   8  10  14  12  10  0.851383     99/100     NonOverlappingTemplate\n\t  8  11  11   8  18   4   5  12  13  10  0.096578     98/100     NonOverlappingTemplate\n\t  8   9  14   6  12   5  13  13  10  10  0.494392     99/100     NonOverlappingTemplate\n\t 19   4  11   7   8  11  12  12   9   7  0.090936     99/100     NonOverlappingTemplate\n\t 13   6   8   5   6  15  11  17   8  11  0.090936     99/100     NonOverlappingTemplate\n\t 11   7  11   7  12  10  11  11   9  11  0.971699     98/100     NonOverlappingTemplate\n\t  5  12  12  12  10   9  12   7  10  11  0.816537    100/100     NonOverlappingTemplate\n\t 12   9   6  14  13  12   7   7   8  12  0.574903    100/100     NonOverlappingTemplate\n\t 10   7  16  11   7   6  13  10  14   6  0.262249     99/100     NonOverlappingTemplate\n\t 10  17  10   8   8   7   9  12  10   9  0.616305     99/100     NonOverlappingTemplate\n\t  5  13   6  13  13  16   8   8  10   8  0.236810    100/100     NonOverlappingTemplate\n\t 10  10   6   9  15  10   8  14   7  11  0.616305     99/100     NonOverlappingTemplate\n\t 12   9  13  10   8   7   5  14   9  13  0.554420    100/100     NonOverlappingTemplate\n\t  3  11   6  10   9   6  19  10  12  14  0.030806     99/100     NonOverlappingTemplate\n\t 10   6   7   8  13  16   7  10  11  12  0.455937     99/100     NonOverlappingTemplate\n\t  8  11   9  15   8   4   6   9  16  14  0.122325     98/100     NonOverlappingTemplate\n\t  5  12   5  13   6  16   8  14  13   8  0.096578    100/100     NonOverlappingTemplate\n\t  9  12   7   5   9  12  11  16  12   7  0.401199    100/100     NonOverlappingTemplate\n\t 10   9  13   8   8  12   5   9  10  16  0.494392     98/100     NonOverlappingTemplate\n\t 10   7  10   8  16  13   5  14  10   7  0.289667     98/100     NonOverlappingTemplate\n\t 10  12   7   8   2  18  10   8  15  10  0.042808     99/100     NonOverlappingTemplate\n\t  5  13  11   9   6  11  14  13   5  13  0.262249    100/100     NonOverlappingTemplate\n\t  8  10   6   9  13   9  12  11   9  13  0.867692    100/100     NonOverlappingTemplate\n\t  8  11   7  14  10   7   8  11  10  14  0.739918     99/100     NonOverlappingTemplate\n\t 11   9   8  12  14   5  16   8   6  11  0.289667     98/100     NonOverlappingTemplate\n\t 14  11   9  10  10   7   8  10  11  10  0.955835     99/100     NonOverlappingTemplate\n\t  6  15   7   9  10   7   8  11  13  14  0.437274    100/100     NonOverlappingTemplate\n\t 10   9  11  14   6   9  13   7  12   9  0.759756    100/100     NonOverlappingTemplate\n\t 10   7  14   7  12  16   9   7   8  10  0.455937     98/100     NonOverlappingTemplate\n\t  9  11  10  11   5   7  11  11  13  12  0.816537     97/100     NonOverlappingTemplate\n\t  8  14  11  13   7  11   9   4  10  13  0.474986    100/100     NonOverlappingTemplate\n\t  4   6  10  13  13  10   9  14   7  14  0.262249    100/100     NonOverlappingTemplate\n\t 10   8   7  11  11  15   6  11  13   8  0.637119     98/100     NonOverlappingTemplate\n\t 11  14   6   9  15   6  11  10  10   8  0.534146     98/100     NonOverlappingTemplate\n\t 12  10  11   6  11  14   6   7   9  14  0.534146     99/100     NonOverlappingTemplate\n\t 11  10  13  14   9  10   8  13   7   5  0.595549     98/100     NonOverlappingTemplate\n\t 17   5  10   6  12   8   8  10   8  16  0.115387     98/100     NonOverlappingTemplate\n\t 15   5  13   8   8  10  15   6   8  12  0.236810     98/100     NonOverlappingTemplate\n\t  7   5  16  11  12  12  14   6  10   7  0.213309     99/100     NonOverlappingTemplate\n\t 10  10  12   8  12  11   5   9   8  15  0.657933     99/100     NonOverlappingTemplate\n\t  6  10  12  14  10   7   9  13  11   8  0.739918    100/100     NonOverlappingTemplate\n\t 12   4  12  14  10  11  10   8   8  11  0.637119     97/100     NonOverlappingTemplate\n\t 14   4   7  10   7  12  10  14  10  12  0.401199    100/100     NonOverlappingTemplate\n\t 10  13  13  10   9   9  10  11   7   8  0.946308     98/100     NonOverlappingTemplate\n\t 12  13  11  16   8   7   9   6   5  13  0.249284     97/100     NonOverlappingTemplate\n\t 10  10  10   9  11   8   7  14  10  11  0.955835     97/100     NonOverlappingTemplate\n\t 13   9   7  12  16  11  12   6   4  10  0.236810     98/100     NonOverlappingTemplate\n\t  8   8  11   9   7  12   6  16  10  13  0.494392     98/100     NonOverlappingTemplate\n\t 11   4   7   8  12   7  13   9  15  14  0.249284    100/100     NonOverlappingTemplate\n\t 10  14  11  15   7  12   8   8   5  10  0.455937    100/100     NonOverlappingTemplate\n\t 12  10   8   7   5   9  12  11  15  11  0.595549     98/100     NonOverlappingTemplate\n\t  7  12  10   4   9  12  17  11   9   9  0.304126    100/100     NonOverlappingTemplate\n\t 11  14  11  12   5  10  10   7  12   8  0.699313     98/100     NonOverlappingTemplate\n\t 11  11  12   9   9   6  11  10   9  12  0.964295    100/100     NonOverlappingTemplate\n\t  6   9   3  14  10  16  12  15   8   7  0.066882    100/100     NonOverlappingTemplate\n\t  9  17   7   8  10   9   7  12   9  12  0.514124     99/100     NonOverlappingTemplate\n\t  6  13  14  16  12   4  10   8   6  11  0.129620    100/100     NonOverlappingTemplate\n\t 10  11  10  10  13  11   8   7  12   8  0.955835    100/100     NonOverlappingTemplate\n\t 13   9  13  12  12   8  10   3   8  12  0.455937     98/100     NonOverlappingTemplate\n\t 10   7  13  11  10   8   8   8  14  11  0.851383     98/100     NonOverlappingTemplate\n\t 14   8  10   4   6   9  13  10  15  11  0.289667     99/100     NonOverlappingTemplate\n\t  9   7  12  14  11  14   7   9   7  10  0.678686     99/100     NonOverlappingTemplate\n\t 15  10   8  12  12  10   9   8   9   7  0.816537     99/100     NonOverlappingTemplate\n\t  9  11  17   8  11   9   8  11   5  11  0.455937     98/100     NonOverlappingTemplate\n\t  3  12  18   5  17   9  13   4  12   7  0.002971    100/100     NonOverlappingTemplate\n\t 12  12  11  11   8   4   4  13   6  19  0.023545    100/100     NonOverlappingTemplate\n\t 10  10  11  12  14   5   6  10  13   9  0.616305    100/100     NonOverlappingTemplate\n\t  9  12  10  11   8   8  14   8  12   8  0.897763     99/100     NonOverlappingTemplate\n\t 15   9   9   4  10   7  11  15   8  12  0.304126     98/100     NonOverlappingTemplate\n\t  9   3  11  18  10  12   8  12  10   7  0.137282     99/100     NonOverlappingTemplate\n\t 15   5   9  11   7  11  12  11  10   9  0.657933    100/100     NonOverlappingTemplate\n\t 14   7   7   6   8  11  14   9  15   9  0.366918     99/100     NonOverlappingTemplate\n\t  5   8   5  15  11   8  11   6  15  16  0.062821    100/100     NonOverlappingTemplate\n\t 10  13   5  13  10   9   5  18   7  10  0.115387     99/100     NonOverlappingTemplate\n\t 12  11   8  10   9  12   9   6   4  19  0.096578     99/100     NonOverlappingTemplate\n\t 12  14   8  11   7  12   5   9  12  10  0.657933     99/100     NonOverlappingTemplate\n\t  9  15  15   4   6   6   8  16  12   9  0.058984     99/100     NonOverlappingTemplate\n\t 12  11  14   8   7  10  10   8   9  11  0.911413     98/100     NonOverlappingTemplate\n\t  9   8   9  11  13  12   4  16  13   5  0.181557     98/100     NonOverlappingTemplate\n\t  4  13  11   9   8   7   8  17  11  12  0.224821    100/100     NonOverlappingTemplate\n\t  8  12  11   9  13  12  14  10   6   5  0.534146     99/100     NonOverlappingTemplate\n\t 11  12  10  11   8   9  18   7   9   5  0.275709    100/100     NonOverlappingTemplate\n\t 15   9   5   7  10  13   6  12  16   7  0.145326     99/100     NonOverlappingTemplate\n\t  5   9   9   9  15   9  15  11  11   7  0.437274     99/100     NonOverlappingTemplate\n\t  5  13   6  13  12  17   8   8  10   8  0.191687    100/100     NonOverlappingTemplate\n\t 12   7  16  17   4  15   5   5   9  10  0.012650     99/100     OverlappingTemplate\n\t 11  12   9  11   6   8  11  12  10  10  0.955835     98/100     Universal\n\t  9   8  13  11  10  11   7  10   9  12  0.964295     98/100     ApproximateEntropy\n\t 12  12   5  13   9   8   8  10   8   4  0.284375     87/89      RandomExcursions\n\t 13   7  10  13  12   6   6  10   8   4  0.192984     88/89      RandomExcursions\n\t 14  15  12   6   7   6   8   5   6  10  0.069538     86/89      RandomExcursions\n\t 14   8   9   7  12   5  11  10   7   6  0.340461     87/89      RandomExcursions\n\t  6   6   9   8  14  12  15   6   4   9  0.059452     89/89      RandomExcursions\n\t  9   8   7   4  13  12   5  11  10  10  0.302291     86/89      RandomExcursions\n\t 15   8   8   8  13   8  12   8   6   3  0.094427     88/89      RandomExcursions\n\t  9  10  16   4  11  12   4   7   6  10  0.050710     88/89      RandomExcursions\n\t  9   8  11  13   5   8   8   6  11  10  0.572333     87/89      RandomExcursionsVariant\n\t 11   6  10  12   8   8   9  11   9   5  0.676097     87/89      RandomExcursionsVariant\n\t  9  13   5  13  10   9   9   5   7   9  0.381687     88/89      RandomExcursionsVariant\n\t 13   9  10   7  12  10  10   8   7   3  0.340461     88/89      RandomExcursionsVariant\n\t 14  12   6   5  15  10  10   7   6   4  0.036652     88/89      RandomExcursionsVariant\n\t 14  11   3  11  10  12   7   8   9   4  0.101765     88/89      RandomExcursionsVariant\n\t 15  10   8  10   3   9  17   5   6   6  0.007096     86/89      RandomExcursionsVariant\n\t 17   9   5   9   9   7   6   5   6  16  0.009284     87/89      RandomExcursionsVariant\n\t 15   4   8  11  11   8   9  11   7   5  0.168344     88/89      RandomExcursionsVariant\n\t 11   8   8  10   9  11   5   8   9  10  0.865697     87/89      RandomExcursionsVariant\n\t  7   7  11  12  12   6   6   9   4  15  0.101765     87/89      RandomExcursionsVariant\n\t  9   5  14  10  14  16   2  11   3   5  0.000749     86/89      RandomExcursionsVariant\n\t 10  13  13   8   8   8   4  13   8   4  0.126842     88/89      RandomExcursionsVariant\n\t 10  13  11  10   8   7   4  10   5  11  0.340461     88/89      RandomExcursionsVariant\n\t  8  11  14   8  16   8   2   9   4   9  0.015734     89/89      RandomExcursionsVariant\n\t  9  14   4  17  11   8   8   6   6   6  0.022187     89/89      RandomExcursionsVariant\n\t 12  11   5  14   7  10   9   9   3   9  0.168344     89/89      RandomExcursionsVariant\n\t 12   9   7   9  10  10  11   8   7   6  0.823278     89/89      RandomExcursionsVariant\n\t  9  10  15  11  12   5   9  11   9   9  0.739918     99/100     Serial\n\t 10  11  15   6   8  11   4  16  12   7  0.153763    100/100     Serial\n\t 12   6   7  15   9  11  11   9   9  11  0.739918     99/100     LinearComplexity\n\n\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\tThe minimum pass rate for each statistical test with the exception of the\n\trandom excursion (variant) test is approximately = 96 for a\n\tsample size = 100 binary sequences.\n\n\tThe minimum pass rate for the random excursion (variant) test\n\tis approximately = 85 for a sample size = 89 binary sequences.\n\n\tFor further guidelines construct a probability table using the MAPLE program\n\tprovided in the addendum section of the documentation.\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\n\t------------------------------------------------------------------------------\n\tRESULTS FOR THE UNIFORMITY OF P-VALUES AND THE PROPORTION OF PASSING SEQUENCES\n\t------------------------------------------------------------------------------\n\t   generator is <../256N_1763944745.bin>\n\t------------------------------------------------------------------------------\n\t C1  C2  C3  C4  C5  C6  C7  C8  C9 C10  P-VALUE  PROPORTION  STATISTICAL TEST\n\t------------------------------------------------------------------------------\n\t  4  10  12   4  11  13   6  10  15  15  0.085587     99/100     Frequency\n\t  6   8   9   9   9   8  13  12  11  15  0.678686     99/100     BlockFrequency\n\t  4   6  12  13   9  11  11  12  14   8  0.419021     99/100     CumulativeSums\n\t  9   4   9   6  14  14  11  13  10  10  0.383827     99/100     CumulativeSums\n\t 12  10  13   6   6  10  10  13   7  13  0.616305     98/100     Runs\n\t 13  11   4  13  10  12   3  11  11  12  0.249284     98/100     LongestRun\n\t 13  12  10  13  10  14   6   5  12   5  0.289667    100/100     Rank\n\t  8  10  12  11   5  16  15   8   7   8  0.262249     98/100     FFT\n\t 13   8   8   1  13  13   8   9  13  14  0.102526     96/100     NonOverlappingTemplate\n\t 10  10   6   8   8  10  14  11  12  11  0.867692     99/100     NonOverlappingTemplate\n\t  8  11   9  13  10  10   8  12   8  11  0.971699     99/100     NonOverlappingTemplate\n\t 12  13  11   4  11   8  10   9  11  11  0.759756    100/100     NonOverlappingTemplate\n\t  5  12  10  12  12   6  10   9  10  14  0.637119     99/100     NonOverlappingTemplate\n\t  7  14  10   7   9  12  12   8   9  12  0.816537    100/100     NonOverlappingTemplate\n\t 10   9  15   8   8   7  14   9   9  11  0.719747    100/100     NonOverlappingTemplate\n\t 15   9   9   9   6  13  14  10   7   8  0.514124     98/100     NonOverlappingTemplate\n\t 11  10   9   9   5  14  10  12   8  12  0.779188     98/100     NonOverlappingTemplate\n\t 10  11  11  14  10   9   6   8   9  12  0.883171    100/100     NonOverlappingTemplate\n\t 11   7  15  14   9   7   9  11   6  11  0.534146    100/100     NonOverlappingTemplate\n\t  6  10   6  11   9  12   7  14  10  15  0.455937    100/100     NonOverlappingTemplate\n\t  4  13  11   9  10  15  13   6   4  15  0.071177    100/100     NonOverlappingTemplate\n\t 11  15   6   9   9  13   8  12  11   6  0.554420     99/100     NonOverlappingTemplate\n\t  5   9  11  10  15  10  13   8  10   9  0.678686    100/100     NonOverlappingTemplate\n\t  5  11  17   8  11  11  14  12   5   6  0.115387    100/100     NonOverlappingTemplate\n\t  9   9   2   8  14  10  15  10  14   9  0.171867    100/100     NonOverlappingTemplate\n\t  9   8  13   9  10  11   9  14   9   8  0.924076     99/100     NonOverlappingTemplate\n\t  3  12   9  12  13  17   7   4  12  11  0.055361    100/100     NonOverlappingTemplate\n\t 11  10   9  13  10  12   6  11  12   6  0.816537     96/100     NonOverlappingTemplate\n\t 15   8   8  14  10   8  10  10   8   9  0.759756     97/100     NonOverlappingTemplate\n\t  8   7   4  14  10  11  19   5  12  10  0.040108    100/100     NonOverlappingTemplate\n\t 11  14  10   9   7   9   8   4  12  16  0.289667    100/100     NonOverlappingTemplate\n\t 12   8  12   5   8  14  10  14   8   9  0.554420     99/100     NonOverlappingTemplate\n\t  9   9   8  13  12  10   8  11   9  11  0.978072     99/100     NonOverlappingTemplate\n\t 10  10  11  12  15   5  12  12   8   5  0.419021     99/100     NonOverlappingTemplate\n\t  8   9  14  12   8  12  11   8  12   6  0.759756    100/100     NonOverlappingTemplate\n\t  5   9   7   8   9  10  10  11  20  11  0.115387    100/100     NonOverlappingTemplate\n\t 13  11  10   8  14   9  12   6   9   8  0.779188     99/100     NonOverlappingTemplate\n\t  7   4   7  14  16   8  12  11   9  12  0.213309     99/100     NonOverlappingTemplate\n\t 16   9  14  11   6  10   7  12  11   4  0.213309    100/100     NonOverlappingTemplate\n\t 11  10  10  11  12   9   7   8   9  13  0.964295     99/100     NonOverlappingTemplate\n\t  9   8  10  11   8   9   8  20  10   7  0.191687     98/100     NonOverlappingTemplate\n\t  6  13   7  13  10   8  11  16   8   8  0.419021    100/100     NonOverlappingTemplate\n\t 10   7  13  17   6  12   6   9  10  10  0.319084     99/100     NonOverlappingTemplate\n\t 12   8  12   9   7   8  10   9   8  17  0.534146     98/100     NonOverlappingTemplate\n\t 10   9   9  10   8   8  10  15  13   8  0.851383     98/100     NonOverlappingTemplate\n\t  8  13  11  13   9  12  15   2   7  10  0.181557    100/100     NonOverlappingTemplate\n\t  6  13  11   8  18   8  14   6   6  10  0.102526     99/100     NonOverlappingTemplate\n\t 13  13   6   8   9  15  12   8   8   8  0.534146    100/100     NonOverlappingTemplate\n\t  7   9   5   9   8   7  17  15  10  13  0.153763    100/100     NonOverlappingTemplate\n\t 15   6  11   6  15  10  10   8   8  11  0.419021     98/100     NonOverlappingTemplate\n\t 10  13   9   7   8  11  10  11  10  11  0.978072     98/100     NonOverlappingTemplate\n\t 12   8   8  10  11  13   9  10  11   8  0.971699     97/100     NonOverlappingTemplate\n\t  7  11   7  10  13  12   6   9  13  12  0.719747    100/100     NonOverlappingTemplate\n\t 15   9  10   5  14   7   8  12  12   8  0.419021    100/100     NonOverlappingTemplate\n\t 10  10  14   8  12  11   7   8   4  16  0.275709    100/100     NonOverlappingTemplate\n\t 21   5   9  14   8  10   8   7  10   8  0.030806     96/100     NonOverlappingTemplate\n\t  6   7  15   8  12  10   7  10  14  11  0.494392    100/100     NonOverlappingTemplate\n\t  7  11  12  16  11  10   7   5   9  12  0.437274     99/100     NonOverlappingTemplate\n\t  9  10  11  10   6  11  16   8   7  12  0.616305    100/100     NonOverlappingTemplate\n\t 10   9  10   5  18  14  11   6   9   8  0.171867    100/100     NonOverlappingTemplate\n\t 12   4  12  12  16  12   7  12   5   8  0.162606     99/100     NonOverlappingTemplate\n\t  8   9   4  14  11   9  10  16   9  10  0.383827     98/100     NonOverlappingTemplate\n\t  9  10   4  12  13   7   9  11  13  12  0.595549    100/100     NonOverlappingTemplate\n\t 15  11  11   8   6   9  11   8  10  11  0.798139    100/100     NonOverlappingTemplate\n\t 10  13  11   8   6   5  10  14  11  12  0.574903    100/100     NonOverlappingTemplate\n\t 13   8   9  11   8  14  11  11   4  11  0.595549    100/100     NonOverlappingTemplate\n\t 11   9  13  11   8  11   9   8  10  10  0.987896     98/100     NonOverlappingTemplate\n\t  3   6  13   9  15  10  14   7  16   7  0.048716     99/100     NonOverlappingTemplate\n\t 16   9   4   3  11  13  10  12   9  13  0.102526     97/100     NonOverlappingTemplate\n\t 13  14   7   9  11  11   8  14   4   9  0.401199     99/100     NonOverlappingTemplate\n\t  8  11  16  11  11  10   9   5  12   7  0.514124     99/100     NonOverlappingTemplate\n\t  9   8   5  10   7  12  16  14  10   9  0.383827    100/100     NonOverlappingTemplate\n\t 13   6   9   5  14  10  14   7  11  11  0.401199     99/100     NonOverlappingTemplate\n\t 11   7  14   9   9  13   7  11  10   9  0.851383     98/100     NonOverlappingTemplate\n\t  9  11   8   6  12   9   8   8  18  11  0.350485     99/100     NonOverlappingTemplate\n\t 15   7  11   8   5   8   9  13  13  11  0.455937    100/100     NonOverlappingTemplate\n\t  8   9  14  14  11  10  11   5   5  13  0.366918    100/100     NonOverlappingTemplate\n\t  8   7   5  10  10  10   6  16  14  14  0.202268     98/100     NonOverlappingTemplate\n\t 11  13   3   6  16   9  14  12   7   9  0.115387    100/100     NonOverlappingTemplate\n\t 12   8  13  11   7   6  12   8  12  11  0.779188    100/100     NonOverlappingTemplate\n\t 14   8  11  11  14  10   8   9   6   9  0.739918    100/100     NonOverlappingTemplate\n\t  6  11  11   9  15   7   7   8  10  16  0.334538     99/100     NonOverlappingTemplate\n\t 13   8   8   1  13  13   8   9  13  14  0.102526     96/100     NonOverlappingTemplate\n\t  9   8  17   8  12  11   7   7   9  12  0.474986     98/100     NonOverlappingTemplate\n\t  7  13   9  17   5   6   9   7  15  12  0.096578    100/100     NonOverlappingTemplate\n\t  8  13   2  10  11   8  15   7  17   9  0.055361    100/100     NonOverlappingTemplate\n\t  6  11  13   8  10  14   7  12   7  12  0.616305    100/100     NonOverlappingTemplate\n\t 11   9  12   8  11  13  11   8   8   9  0.964295     99/100     NonOverlappingTemplate\n\t 15  13   7  12   9   9   4  10  11  10  0.474986     99/100     NonOverlappingTemplate\n\t 10   7  10   9  12   9  13   8   8  14  0.851383     99/100     NonOverlappingTemplate\n\t 13  12   3  10   9  14  12  10   8   9  0.455937     99/100     NonOverlappingTemplate\n\t  9  14  10   6   7  13  11   7  13  10  0.637119     98/100     NonOverlappingTemplate\n\t 14   7  10  10  14   7  12   8  10   8  0.719747     99/100     NonOverlappingTemplate\n\t  6   5  11   6  12  15  13  11  10  11  0.366918     99/100     NonOverlappingTemplate\n\t  7   8   8  12   9  11  10  13  15   7  0.678686    100/100     NonOverlappingTemplate\n\t 10  14   4   6   6   8  14  12  15  11  0.145326    100/100     NonOverlappingTemplate\n\t  7  14   9   4  16   8  13   6  15   8  0.075719    100/100     NonOverlappingTemplate\n\t 12   7   9   7  14  12  14   9   9   7  0.637119     99/100     NonOverlappingTemplate\n\t 13  10  11  11   7  12   8   9   7  12  0.897763     99/100     NonOverlappingTemplate\n\t 13   6   8   8  11  15  10  13   8   8  0.574903     97/100     NonOverlappingTemplate\n\t 19   8   5  10  13  10   8   6  11  10  0.122325     98/100     NonOverlappingTemplate\n\t 10  12   9  15   7  10   7  10  12   8  0.779188    100/100     NonOverlappingTemplate\n\t 13   5  12   9  13  14   8   8   4  14  0.191687     99/100     NonOverlappingTemplate\n\t 11  13  10  10   9   7  14   7  12   7  0.759756     99/100     NonOverlappingTemplate\n\t  7   9  12  10  11   8   8   9  11  15  0.834308     99/100     NonOverlappingTemplate\n\t 11   6   7  15  15  12  11   5   3  15  0.035174    100/100     NonOverlappingTemplate\n\t 15  15   7  12  11  15  10   8   3   4  0.037566     99/100     NonOverlappingTemplate\n\t  6   7  12   9  10  14  12  12   7  11  0.699313    100/100     NonOverlappingTemplate\n\t  9  13   8  16   5   6  11   9  11  12  0.366918     99/100     NonOverlappingTemplate\n\t  7   9   8   5   7  15  12   8  16  13  0.181557    100/100     NonOverlappingTemplate\n\t 13   8  15   6   5  14   9  10   8  12  0.319084    100/100     NonOverlappingTemplate\n\t  9  11   9  13   7  11   9  14   9   8  0.883171    100/100     NonOverlappingTemplate\n\t 11   7  11  15   5   7  10  10  13  11  0.534146     99/100     NonOverlappingTemplate\n\t  8  12   1   3  15   8  15  12  14  12  0.010237    100/100     NonOverlappingTemplate\n\t  9  13   7   5  13  12  13   5  10  13  0.350485    100/100     NonOverlappingTemplate\n\t  6   8  10  14  13  14   5   9  10  11  0.455937    100/100     NonOverlappingTemplate\n\t 14  11   9   8   7  11  13  10  10   7  0.834308     99/100     NonOverlappingTemplate\n\t 10  10   7  10  12   9   7  11  14  10  0.911413    100/100     NonOverlappingTemplate\n\t  6   7  12   8  11  18  10  13  11   4  0.108791    100/100     NonOverlappingTemplate\n\t  8   9   6  11  12   9  10  10  12  13  0.911413    100/100     NonOverlappingTemplate\n\t 14  13   5  16  14   7   9   4   8  10  0.085587     98/100     NonOverlappingTemplate\n\t 15  13   7  12   8   6  10   8  10  11  0.616305     99/100     NonOverlappingTemplate\n\t 13  11   8  12   9   9  14  10   8   6  0.779188    100/100     NonOverlappingTemplate\n\t 11  16  11   9  11   5   7   9  12   9  0.534146    100/100     NonOverlappingTemplate\n\t  9  14  11   9   8   8   8  10   9  14  0.851383     99/100     NonOverlappingTemplate\n\t  6  10   8  16  18  11   9   4  11   7  0.051942     99/100     NonOverlappingTemplate\n\t  9  10  14   9  10   4   9   7  13  15  0.366918    100/100     NonOverlappingTemplate\n\t 18   5  10  12   5   8  13   6  15   8  0.040108     97/100     NonOverlappingTemplate\n\t 11   7   7   9  19  11   8   8  14   6  0.115387     99/100     NonOverlappingTemplate\n\t  6   9   8   8  11  14   6  15  10  13  0.419021    100/100     NonOverlappingTemplate\n\t  7   9  11   4   9  18  13  16   9   4  0.021999    100/100     NonOverlappingTemplate\n\t 12  16   6   4  11  14  11   6  12   8  0.145326     98/100     NonOverlappingTemplate\n\t 19  10   8  10   7   7   9   9  10  11  0.304126    100/100     NonOverlappingTemplate\n\t 12  17  10   8   6   9  11  10   6  11  0.419021    100/100     NonOverlappingTemplate\n\t  6   8  12  13   9  11  11  14   7   9  0.719747    100/100     NonOverlappingTemplate\n\t 17  10  13  13  10   4   8   9   6  10  0.191687    100/100     NonOverlappingTemplate\n\t 17  13   4   7  11   8  11  14   7   8  0.129620     98/100     NonOverlappingTemplate\n\t  9  10  11   9   7   9  12  12  11  10  0.987896    100/100     NonOverlappingTemplate\n\t 13  11  10  13   8   9  12   7   5  12  0.678686     99/100     NonOverlappingTemplate\n\t 12  14   5   4  10   8   8  12  11  16  0.162606     97/100     NonOverlappingTemplate\n\t  9   8   7   8   9  11   8  12  17  11  0.554420     99/100     NonOverlappingTemplate\n\t 11   9   9  12  13   8   9   5   9  15  0.616305     98/100     NonOverlappingTemplate\n\t  4  13  13   9   9  14  10   8  11   9  0.554420    100/100     NonOverlappingTemplate\n\t 17   9   8  12  11  11   8  12   4   8  0.289667     99/100     NonOverlappingTemplate\n\t 10  11   9   8  10  11  15  10   9   7  0.897763     99/100     NonOverlappingTemplate\n\t 10  17   8  10  11  15   5   8   9   7  0.224821    100/100     NonOverlappingTemplate\n\t 14   9   8   6   9   8  15  10  10  11  0.657933     98/100     NonOverlappingTemplate\n\t 10  10   8  11  12  13   9  12  10   5  0.851383    100/100     NonOverlappingTemplate\n\t  8  11   9  12  12  12  10  11  11   4  0.779188    100/100     NonOverlappingTemplate\n\t 11   9  11  13   9  10  10   8  13   6  0.897763     97/100     NonOverlappingTemplate\n\t  6   8  13   5  14  10   7   8  14  15  0.191687    100/100     NonOverlappingTemplate\n\t 11  15   5  11  10   7  10  12  10   9  0.678686    100/100     NonOverlappingTemplate\n\t 12  12  12   6   6  10   9  10  14   9  0.719747     98/100     NonOverlappingTemplate\n\t  7   8  13   7  13   6  12   6  18  10  0.122325    100/100     NonOverlappingTemplate\n\t  7   8  15   9   9  14  11  13   6   8  0.474986     98/100     NonOverlappingTemplate\n\t  6  11  11   9  15   7   7   8  10  16  0.334538     99/100     NonOverlappingTemplate\n\t 12  12   9  13   7  11   7   8  14   7  0.678686     99/100     OverlappingTemplate\n\t 13   9  16   9  11  12  11   6   9   4  0.304126     99/100     Universal\n\t 11   5   8  10  11  13  17  10   9   6  0.304126    100/100     ApproximateEntropy\n\t 10  16   5   8   9  10   3   8   6  13  0.048716     87/88      RandomExcursions\n\t  8   4   9  12   8   7  10   7   9  14  0.392456     88/88      RandomExcursions\n\t  4   9  12   4   7  11  10  12   6  13  0.141256     87/88      RandomExcursions\n\t  6   9  16   3   9   9   6  13  10   7  0.061841     88/88      RandomExcursions\n\t  5  11   7   9  10   9   8  10  10   9  0.894201     87/88      RandomExcursions\n\t 10  11  12   4  12   3   9  10  11   6  0.162606     88/88      RandomExcursions\n\t  6   8   9  13  12   8   5  10  10   7  0.534146     88/88      RandomExcursions\n\t  9  13   5   9   8   9   4   9   9  13  0.350485     87/88      RandomExcursions\n\t  6  11   6   5  11   5  14  14   9   7  0.098036     87/88      RandomExcursionsVariant\n\t  5  12   3   6  10  12  14   8   6  12  0.061841     87/88      RandomExcursionsVariant\n\t  7   7   5   7   6  13  18  10   9   6  0.027405     87/88      RandomExcursionsVariant\n\t  7   9   5   9   9   7  13  11   7  11  0.611108     88/88      RandomExcursionsVariant\n\t  7  10   7  10  10  10   6  10  10   8  0.927083     88/88      RandomExcursionsVariant\n\t  9   7   9   4  12   8  10   9   9  11  0.714660     88/88      RandomExcursionsVariant\n\t  9   7   3  11  11   9  11   6  11  10  0.437274     87/88      RandomExcursionsVariant\n\t  8   6  12   4   9   8   7  13  11  10  0.392456     88/88      RandomExcursionsVariant\n\t  5   7   8  13  13   6   4  14   9   9  0.098036     88/88      RandomExcursionsVariant\n\t  3  14  10   5  14   5   9   5   8  15  0.008120     87/88      RandomExcursionsVariant\n\t  7  13   8   7   8  12  13   3   6  11  0.151616     87/88      RandomExcursionsVariant\n\t  6  16   9   7   5  10   4   9  11  11  0.098036     86/88      RandomExcursionsVariant\n\t 11  10   6   7   7   9   8   8   6  16  0.275709     87/88      RandomExcursionsVariant\n\t 10   9   7   6  10   8   7  12   8  11  0.834308     87/88      RandomExcursionsVariant\n\t  9   4  12   7   9   7  14   7   5  14  0.098036     87/88      RandomExcursionsVariant\n\t  5   7  12   8  13   8   7  11   8   9  0.559523     87/88      RandomExcursionsVariant\n\t  5   7   6  13   9  15   8   9  11   5  0.141256     87/88      RandomExcursionsVariant\n\t  5   5  10   9  19  10   7   9   9   5  0.017912     87/88      RandomExcursionsVariant\n\t 10  17  10  10  10  10   9   8   8   8  0.719747     99/100     Serial\n\t 13  11  14   8   6  13   8   8  10   9  0.699313    100/100     Serial\n\t 15  12   8  14   8   6   6   5  19   7  0.017912     99/100     LinearComplexity\n\n\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\tThe minimum pass rate for each statistical test with the exception of the\n\trandom excursion (variant) test is approximately = 96 for a\n\tsample size = 100 binary sequences.\n\n\tThe minimum pass rate for the random excursion (variant) test\n\tis approximately = 84 for a sample size = 88 binary sequences.\n\n\tFor further guidelines construct a probability table using the MAPLE program\n\tprovided in the addendum section of the documentation.\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\n---\n\nNIST sts-2.1.2 Breeze256\n\n\t100 samples with 8,000.000 bits (10**6 bytes) \n\n\t------------------------------------------------------------------------------\n\tRESULTS FOR THE UNIFORMITY OF P-VALUES AND THE PROPORTION OF PASSING SEQUENCES\n\t------------------------------------------------------------------------------\n\t   generator is <../512N_449935155.bin>\n\t------------------------------------------------------------------------------\n\t C1  C2  C3  C4  C5  C6  C7  C8  C9 C10  P-VALUE  PROPORTION  STATISTICAL TEST\n\t------------------------------------------------------------------------------\n\t  7  10  16  13   8   8  12   7  12   7  0.455937    100/100     Frequency\n\t  7   8  12  10  14  11  10   6  16   6  0.334538    100/100     BlockFrequency\n\t 13   8   8  11  14   5  13  11   8   9  0.595549    100/100     CumulativeSums\n\t  7  14  18   9   6   7  10  12  11   6  0.137282     99/100     CumulativeSums\n\t 16  10   4  13  13  11   6  13   3  11  0.055361     97/100     Runs\n\t  8  15   7  14   8  10   6  10  17   5  0.096578    100/100     LongestRun\n\t  5  11  15  14  11   7   8   8   9  12  0.437274    100/100     Rank\n\t  9  14  10  13  13   5   9   8   7  12  0.554420     99/100     FFT\n\t  9  14   9  10  10   6   8  12  11  11  0.883171    100/100     NonOverlappingTemplate\n\t 10  14   9  14   3   8  12   6  14  10  0.202268    100/100     NonOverlappingTemplate\n\t  9   9   9   9   8   9  12   7  13  15  0.779188     99/100     NonOverlappingTemplate\n\t  7  10   9   9  11  13  12   8  13   8  0.897763     98/100     NonOverlappingTemplate\n\t 15  13   9   7   7   5  10  10  12  12  0.474986     98/100     NonOverlappingTemplate\n\t 11  11  10   6  11   8   6   8  12  17  0.383827     98/100     NonOverlappingTemplate\n\t 12   8  15  10   9  12   6  13   6   9  0.534146    100/100     NonOverlappingTemplate\n\t  6  11   9  12   6  11   6  11  12  16  0.383827     99/100     NonOverlappingTemplate\n\t 13  11  15   8   8  10   9   9   7  10  0.798139     98/100     NonOverlappingTemplate\n\t 12  11  11   8  12   9   5  10  13   9  0.834308    100/100     NonOverlappingTemplate\n\t 11  13   8   7   6  14   6  14  12   9  0.419021     98/100     NonOverlappingTemplate\n\t 11   9  10  11   8   7   6  12  12  14  0.779188     97/100     NonOverlappingTemplate\n\t  9  11  11  10   8   8  10  11  13   9  0.987896     98/100     NonOverlappingTemplate\n\t 10  11   8  10  10   9   8  14  10  10  0.978072     97/100     NonOverlappingTemplate\n\t  5   7  12  11  13   8   9  15  11   9  0.534146     99/100     NonOverlappingTemplate\n\t  5   7   8  11   9  14  13  13   8  12  0.514124     99/100     NonOverlappingTemplate\n\t  9  11   9  12   9  12  15   8   8   7  0.798139     99/100     NonOverlappingTemplate\n\t  9  12  13  11  11  11   8   8  10   7  0.946308     99/100     NonOverlappingTemplate\n\t 11  10  13   7   7  11   6   6  15  14  0.334538     98/100     NonOverlappingTemplate\n\t  8  11   6   9  12  10  10  12  12  10  0.946308     98/100     NonOverlappingTemplate\n\t 15   7  10  10  12  14   9   5   8  10  0.494392     99/100     NonOverlappingTemplate\n\t 13  13   9  12   7   8  11  10   8   9  0.897763     96/100     NonOverlappingTemplate\n\t 12   9   7   8   5   4   8  24  14   9  0.000513     99/100     NonOverlappingTemplate\n\t 15   7   6  12  10  15  14   3   9   9  0.102526    100/100     NonOverlappingTemplate\n\t  8   7  16  11   7  13   8  11   8  11  0.554420    100/100     NonOverlappingTemplate\n\t  9  12   9  13   9   4  13   8  15   8  0.401199    100/100     NonOverlappingTemplate\n\t  2  13   6  14  12  15  12   8   6  12  0.062821    100/100     NonOverlappingTemplate\n\t  6   9   9  10  11  11  14   9  10  11  0.924076    100/100     NonOverlappingTemplate\n\t  7   8  11  13  11   8  11   7  17   7  0.383827     98/100     NonOverlappingTemplate\n\t  9   4  13  10   7  15  17   9   9   7  0.122325    100/100     NonOverlappingTemplate\n\t 10   9  10   8   8  14   9   9   9  14  0.883171    100/100     NonOverlappingTemplate\n\t 11  11  12   5  15   9   4  11  10  12  0.366918     99/100     NonOverlappingTemplate\n\t 12   7   8  11   8  13   7  10  11  13  0.834308     99/100     NonOverlappingTemplate\n\t  7  10  10  12  13  12  12  15   6   3  0.213309     99/100     NonOverlappingTemplate\n\t 11   3  15   6  10  11  10  12  11  11  0.366918     98/100     NonOverlappingTemplate\n\t 10  12   6  14  13  11  11   8   3  12  0.319084     98/100     NonOverlappingTemplate\n\t  8   9  11  10  13   8   8  13  12   8  0.911413     99/100     NonOverlappingTemplate\n\t 12   6  14   6   6  10   7  14  11  14  0.275709    100/100     NonOverlappingTemplate\n\t 11  12  13   5  13  10  10  12   5   9  0.554420     99/100     NonOverlappingTemplate\n\t 20  13  10   6  10  11   7   6  10   7  0.066882     99/100     NonOverlappingTemplate\n\t  6  12   8  14  11  10   8  14   8   9  0.678686    100/100     NonOverlappingTemplate\n\t  9  14  11   9  11   9   8  13   8   8  0.897763     98/100     NonOverlappingTemplate\n\t  7  11   6  13  10  13  16  12   4   8  0.191687     99/100     NonOverlappingTemplate\n\t  7  11  10  14  12  12   8  12   8   6  0.719747     99/100     NonOverlappingTemplate\n\t  9  15   9   5   3  13  13   7  13  13  0.102526    100/100     NonOverlappingTemplate\n\t 14   7   9  11   8  14   6   8  11  12  0.616305    100/100     NonOverlappingTemplate\n\t 11  18  10   4   8  10  15   5   9  10  0.075719    100/100     NonOverlappingTemplate\n\t 12   7  12  15   7   6   8  10  11  12  0.574903     99/100     NonOverlappingTemplate\n\t 10  11  14  13   4   8   9  11  11   9  0.637119     98/100     NonOverlappingTemplate\n\t 12   8   7  13   9  12  12   7  10  10  0.883171     98/100     NonOverlappingTemplate\n\t 11   8  13  15  12   8   6   8  14   5  0.289667    100/100     NonOverlappingTemplate\n\t  6  11  10  10   8   9  11   9  14  12  0.883171    100/100     NonOverlappingTemplate\n\t  6  18   9  10   8   7   8   5  13  16  0.051942    100/100     NonOverlappingTemplate\n\t 10  11   6  16   9   5  13  13   8   9  0.334538     99/100     NonOverlappingTemplate\n\t  8  13  12   9  12   4  11   8  12  11  0.657933    100/100     NonOverlappingTemplate\n\t  8   8  10  10  16  14  13   6   5  10  0.275709     99/100     NonOverlappingTemplate\n\t  9  13  10   9  13   8   7  14   9   8  0.798139    100/100     NonOverlappingTemplate\n\t  9  11  11  10   7   8   6  12  16  10  0.616305    100/100     NonOverlappingTemplate\n\t  9   9  13   5   6   9  10  12  18   9  0.202268     99/100     NonOverlappingTemplate\n\t 14  12  10  11   7   7  10  13  11   5  0.595549     99/100     NonOverlappingTemplate\n\t 15   6   6  13   9   6  11   7  13  14  0.224821     98/100     NonOverlappingTemplate\n\t 11  11  15   9  10   5   6  11  11  11  0.616305     99/100     NonOverlappingTemplate\n\t  5   9  10   7   7  14  12  14  12  10  0.494392     98/100     NonOverlappingTemplate\n\t  7  12  10  16  12   9   6  12   8   8  0.514124     99/100     NonOverlappingTemplate\n\t 10   8   7  13   3  16  15  10   8  10  0.137282     99/100     NonOverlappingTemplate\n\t  6   8  16  10  11  12  15   5  10   7  0.213309    100/100     NonOverlappingTemplate\n\t  8   7  11  10  15   9  15   4  10  11  0.334538     98/100     NonOverlappingTemplate\n\t 10  12  13  16   8  11   4  12   6   8  0.249284     97/100     NonOverlappingTemplate\n\t 13   4  12   9  11  14  10  12  10   5  0.383827    100/100     NonOverlappingTemplate\n\t  7  13  13  13  11  15  10   8   4   6  0.224821    100/100     NonOverlappingTemplate\n\t  5  11   7   9   8  12   9  15   6  18  0.090936     99/100     NonOverlappingTemplate\n\t 12  16  11   7  11  10   5  10   7  11  0.474986    100/100     NonOverlappingTemplate\n\t  6   7  10  16  10   7  17  13   8   6  0.096578    100/100     NonOverlappingTemplate\n\t 16  11   9  10  10  10  10  10   7   7  0.779188     98/100     NonOverlappingTemplate\n\t  9  14   9  10  10   7   7  12  11  11  0.897763    100/100     NonOverlappingTemplate\n\t  9  10  13   6   8  16   6   6   8  18  0.055361    100/100     NonOverlappingTemplate\n\t  7  12   7  13   6  10  12   9   8  16  0.419021    100/100     NonOverlappingTemplate\n\t 13   2  13  12   8  11  12   8  11  10  0.350485     99/100     NonOverlappingTemplate\n\t 11  11   8  15  11   6   7  13  11   7  0.574903     97/100     NonOverlappingTemplate\n\t  8  15   7  17   5  11   9  10  11   7  0.191687    100/100     NonOverlappingTemplate\n\t 10   8   9   7  10  13  11  11  14   7  0.834308    100/100     NonOverlappingTemplate\n\t 10  15  12   7   4  13  18   6   7   8  0.040108     99/100     NonOverlappingTemplate\n\t  7   9  10  10   7   8  15   7  13  14  0.514124     99/100     NonOverlappingTemplate\n\t  7   5  15   7   8  11  12   9  11  15  0.319084     99/100     NonOverlappingTemplate\n\t 11  10   7   9  10  12  12  12   8   9  0.971699     99/100     NonOverlappingTemplate\n\t  8  12  17   8   9  10  13   8   7   8  0.455937    100/100     NonOverlappingTemplate\n\t 13   7   9  11   9  11   6  13  12   9  0.816537     98/100     NonOverlappingTemplate\n\t 15  10  10   9  13  10  13  11   1   8  0.162606     98/100     NonOverlappingTemplate\n\t 13  11   7   9   8   8  15   6  12  11  0.595549     96/100     NonOverlappingTemplate\n\t  6  17   8  12  13   5  12   6  10  11  0.171867    100/100     NonOverlappingTemplate\n\t  6   7   6  14   9   7  13  11  16  11  0.249284    100/100     NonOverlappingTemplate\n\t 11  13  13  16  10   7   6   9   5  10  0.304126    100/100     NonOverlappingTemplate\n\t 11   7   9   8  10   8   8  10  15  14  0.699313    100/100     NonOverlappingTemplate\n\t  9  11  15   7   4  11  13  12   7  11  0.383827     99/100     NonOverlappingTemplate\n\t 14   9   8  12   9  11   8  11   4  14  0.494392     99/100     NonOverlappingTemplate\n\t 10  10  14   6  13   7   8  14   9   9  0.616305    100/100     NonOverlappingTemplate\n\t 13  10  14   7  10   7  18   5  10   6  0.096578     98/100     NonOverlappingTemplate\n\t 10  17  11   8   7   8  11  11  12   5  0.366918     99/100     NonOverlappingTemplate\n\t 11  11  14  11  10  11   7   6   7  12  0.759756    100/100     NonOverlappingTemplate\n\t 12  10   9   9   9  12   9  12  10   8  0.991468     97/100     NonOverlappingTemplate\n\t  9   9  11   8  11  16   9  11  10   6  0.719747     98/100     NonOverlappingTemplate\n\t 11  13   6  10  11  10   6   7  14  12  0.616305     99/100     NonOverlappingTemplate\n\t 14   8  11   9   7  11   9   6  10  15  0.595549     99/100     NonOverlappingTemplate\n\t  6  12  10   8  12  16   6  17   6   7  0.080519    100/100     NonOverlappingTemplate\n\t  9  11  10   9  10  13  13   7   8  10  0.946308     99/100     NonOverlappingTemplate\n\t  9  14  10   9  14   9  10  14   8   3  0.319084    100/100     NonOverlappingTemplate\n\t 13  11  16  10  12   3  11   9  13   2  0.042808     99/100     NonOverlappingTemplate\n\t 12   7  12  17   6   9  14   8   6   9  0.213309     99/100     NonOverlappingTemplate\n\t 13  14   9  10   8   8  11   5  10  12  0.699313     97/100     NonOverlappingTemplate\n\t 12  10   8  10   8  11  13  10  13   5  0.779188    100/100     NonOverlappingTemplate\n\t 12   9  11  15  11  10   9  10   4   9  0.637119    100/100     NonOverlappingTemplate\n\t 10   7   7  10  10   9   6  12  19  10  0.213309     98/100     NonOverlappingTemplate\n\t  7   8  12  14   8  15  10  11  10   5  0.455937    100/100     NonOverlappingTemplate\n\t 12  13   6  10   9  10  12  10   8  10  0.924076     99/100     NonOverlappingTemplate\n\t  8   7  14   8  11  10   9  10  15   8  0.699313     99/100     NonOverlappingTemplate\n\t 10  15   6   8  11   9  11  12   9   9  0.798139     98/100     NonOverlappingTemplate\n\t  9  12  10   9  11   6  10  15   8  10  0.816537    100/100     NonOverlappingTemplate\n\t 11  17   9   7  14  13   6   5   8  10  0.162606     97/100     NonOverlappingTemplate\n\t 10   6   7   9  11  11   7  12  12  15  0.637119    100/100     NonOverlappingTemplate\n\t 13   6  12  14  10  11  10   8  10   6  0.678686    100/100     NonOverlappingTemplate\n\t 14  10  11   6  11   7  10  12   9  10  0.851383     99/100     NonOverlappingTemplate\n\t  3  14   9  10  11   7  14  10  10  12  0.383827    100/100     NonOverlappingTemplate\n\t 11   9   6   8  11  14  13  11   8   9  0.798139     99/100     NonOverlappingTemplate\n\t 13   8   7  13   4   9   8   9  17  12  0.181557     97/100     NonOverlappingTemplate\n\t  7   8  10  11   9  14  16   7   9   9  0.554420    100/100     NonOverlappingTemplate\n\t 15  10  13  11  12   7   7   9   9   7  0.657933     97/100     NonOverlappingTemplate\n\t 12   5   9  10  14   5  11   8  13  13  0.401199    100/100     NonOverlappingTemplate\n\t  7   9  13   7  12   9  10  12  13   8  0.834308     99/100     NonOverlappingTemplate\n\t  9  12   9   9   8  12   9  15   8   9  0.867692    100/100     NonOverlappingTemplate\n\t 13   8  12  10   4   7  13   9  14  10  0.455937    100/100     NonOverlappingTemplate\n\t  8  13  11  12  10  11  12   4  10   9  0.739918    100/100     NonOverlappingTemplate\n\t 11  12   7   7  12  11   8  12   9  11  0.924076     99/100     NonOverlappingTemplate\n\t 10  10   9  15  12   9  11  11   4   9  0.637119     96/100     NonOverlappingTemplate\n\t 12   9   6  12  13  14   6   7   9  12  0.534146     97/100     NonOverlappingTemplate\n\t  8  13  10  13  10  10   9   9   7  11  0.946308    100/100     NonOverlappingTemplate\n\t 12  11  12  10  14   9  11   7   6   8  0.779188     98/100     NonOverlappingTemplate\n\t 13  17  11   8   8  13  13  10   4   3  0.048716    100/100     NonOverlappingTemplate\n\t 10   8  11   9   6   7  11  13  13  12  0.798139    100/100     NonOverlappingTemplate\n\t  8   7  10  13  14   5  12   8  12  11  0.574903     99/100     NonOverlappingTemplate\n\t 15   8  14   6   6  12   7  11  10  11  0.419021    100/100     NonOverlappingTemplate\n\t 14  11  10   7  14   9   4   5  13  13  0.202268     98/100     NonOverlappingTemplate\n\t 13   6   7  11  16  10  10  10   5  12  0.350485     99/100     NonOverlappingTemplate\n\t  7  12   6  11  11  14  12   9   8  10  0.779188     99/100     NonOverlappingTemplate\n\t  9  10   5  11  14   8  10   9   8  16  0.455937     98/100     NonOverlappingTemplate\n\t 11  10  15  14   6   6   6  10  14   8  0.275709     96/100     NonOverlappingTemplate\n\t 10  10  10  14  12   8   9   9  12   6  0.867692     96/100     NonOverlappingTemplate\n\t 10  12  13  12  11  10   9   8   6   9  0.911413    100/100     NonOverlappingTemplate\n\t 16  11   9  10  10  10  10   9   8   7  0.816537     98/100     NonOverlappingTemplate\n\t 12  12  12   7   4  10  10  11  11  11  0.739918     99/100     OverlappingTemplate\n\t  5   7  11  13  10   6  11  16  14   7  0.202268    100/100     Universal\n\t 12  15   9  11   8  11   7   7   9  11  0.779188    100/100     ApproximateEntropy\n\t  7  11   8   7   9   7  16   9   9   3  0.162606     85/86      RandomExcursions\n\t 10  11   8   8   9   9   6   6   7  12  0.834308     85/86      RandomExcursions\n\t 11   6   6   8  12   6   6  12   7  12  0.414525     85/86      RandomExcursions\n\t  9  14   6   9   7   5   7   6  10  13  0.293235     85/86      RandomExcursions\n\t  8   7  10  13  10   5   9  11   7   6  0.611108     86/86      RandomExcursions\n\t 13  11   7   6   7   8   6  11  10   7  0.611108     85/86      RandomExcursions\n\t 13  12  11  12   8  10   3   4   5   8  0.090936     85/86      RandomExcursions\n\t 13   6   5  10  10   5   8   9   6  14  0.213309     84/86      RandomExcursions\n\t  5  11  10   7  10   9   8   6   9  11  0.811993     84/86      RandomExcursionsVariant\n\t  8   6  12   8   6  11   8  16   6   5  0.131500     85/86      RandomExcursionsVariant\n\t  9   6   7  11  11  13   3  11   7   8  0.311542     86/86      RandomExcursionsVariant\n\t 11   5   8   3  13  11  13   8   9   5  0.122325     85/86      RandomExcursionsVariant\n\t 10   9   3  11  11   8   8   6   9  11  0.559523     86/86      RandomExcursionsVariant\n\t 10   6   9  10   5   9   9  10   9   9  0.927083     85/86      RandomExcursionsVariant\n\t  9   8  10   8   6   6  11   8  11   9  0.911413     84/86      RandomExcursionsVariant\n\t 13   8   9   6  12  11   5   5   5  12  0.199580     84/86      RandomExcursionsVariant\n\t 18   7  11   6   4   5  12  10  10   3  0.005166     86/86      RandomExcursionsVariant\n\t  7   8   9   5   4  12   7  10  12  12  0.350485     85/86      RandomExcursionsVariant\n\t 11  14   4   5   7   7   8   5   9  16  0.032381     86/86      RandomExcursionsVariant\n\t 14   5   9   3   8   7   9  11  11   9  0.242986     85/86      RandomExcursionsVariant\n\t 14   5   7   5   3   8   6   7  14  17  0.002707     85/86      RandomExcursionsVariant\n\t 11   8   9   3  10   6  12  10   9   8  0.534146     85/86      RandomExcursionsVariant\n\t 14   8   6   9   9   2  11  10   4  13  0.057146     85/86      RandomExcursionsVariant\n\t 13   6   8   9   9  11   5   5  11   9  0.484646     85/86      RandomExcursionsVariant\n\t 12   8   7  10   7   6  11   6  10   9  0.788728     86/86      RandomExcursionsVariant\n\t 13   9   6   9   7   4  11   8   8  11  0.509162     86/86      RandomExcursionsVariant\n\t  8  13   8   9   9  13  11   9  10  10  0.964295     99/100     Serial\n\t  9   8   8  13   7  12  16   6   9  12  0.455937    100/100     Serial\n\t 11   9  10  11  12   7  14   7  11   8  0.867692     99/100     LinearComplexity\n\n\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\tThe minimum pass rate for each statistical test with the exception of the\n\trandom excursion (variant) test is approximately = 96 for a\n\tsample size = 100 binary sequences.\n\n\tThe minimum pass rate for the random excursion (variant) test\n\tis approximately = 82 for a sample size = 86 binary sequences.\n\n\tFor further guidelines construct a probability table using the MAPLE program\n\tprovided in the addendum section of the documentation.\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        \n\t------------------------------------------------------------------------------\n\tRESULTS FOR THE UNIFORMITY OF P-VALUES AND THE PROPORTION OF PASSING SEQUENCES\n\t------------------------------------------------------------------------------\n\t   generator is <../512N_730809286.bin>\n\t------------------------------------------------------------------------------\n\t C1  C2  C3  C4  C5  C6  C7  C8  C9 C10  P-VALUE  PROPORTION  STATISTICAL TEST\n\t------------------------------------------------------------------------------\n\t 10   8  10   7   9  11  12  12   6  15  0.699313     98/100     Frequency\n\t 12  12   9   8  11  10   4  11  12  11  0.779188     99/100     BlockFrequency\n\t 11  13   7  10   7   7   8  11  19   7  0.153763     98/100     CumulativeSums\n\t 12   7  10   7   9   9  15  14   6  11  0.514124     98/100     CumulativeSums\n\t 13  11  12  13  10   8  10   5  10   8  0.779188    100/100     Runs\n\t 12  15   9  12   8  10  13   2  14   5  0.085587    100/100     LongestRun\n\t 16   7   6  12  11  18   3  12  10   5  0.013569     97/100     Rank\n\t  8  15   6  11   9  11  11   9   7  13  0.657933    100/100     FFT\n\t  8  19   7   9  10  11   8  12  10   6  0.213309     99/100     NonOverlappingTemplate\n\t 15   4   9  12   7   7  14  10  11  11  0.334538     97/100     NonOverlappingTemplate\n\t 14   6  10   7  11   8  12  10   6  16  0.334538     98/100     NonOverlappingTemplate\n\t 11   5  13   9  10   7  10  13  13   9  0.699313    100/100     NonOverlappingTemplate\n\t  7  12   6  12  11  15   8   6  14   9  0.383827     99/100     NonOverlappingTemplate\n\t 13  11  11   5   9   9  11   9  13   9  0.834308     96/100     NonOverlappingTemplate\n\t  6  13  10   8   6   9  14   9  11  14  0.534146    100/100     NonOverlappingTemplate\n\t  7  11  11   5   7   6  12  10  15  16  0.181557     98/100     NonOverlappingTemplate\n\t  9  13  10  13   9  10   9   9  10   8  0.978072     98/100     NonOverlappingTemplate\n\t 11  10   9   9   5  13  21   5   9   8  0.026948     99/100     NonOverlappingTemplate\n\t  6   9  13   9   5  13  12   6   9  18  0.102526    100/100     NonOverlappingTemplate\n\t 12  12   6   8  14   9   8  15   8   8  0.514124    100/100     NonOverlappingTemplate\n\t  8   8   8  15  11   9  12   9  11   9  0.867692    100/100     NonOverlappingTemplate\n\t 13  13   8   8   9  12   5  11   8  13  0.637119     99/100     NonOverlappingTemplate\n\t 11  11  10   8   7   9   7  15  13   9  0.739918    100/100     NonOverlappingTemplate\n\t 12  10   7  12   9   6   9  14   8  13  0.699313     99/100     NonOverlappingTemplate\n\t 10   7  11   6   9  12  14  11   8  12  0.779188    100/100     NonOverlappingTemplate\n\t  5  16  16   8   7   8   8   8  12  12  0.162606    100/100     NonOverlappingTemplate\n\t 10  10  11  10   9   8  10  16   8   8  0.834308    100/100     NonOverlappingTemplate\n\t  7  15   6   9  11  11  11   5  13  12  0.419021     98/100     NonOverlappingTemplate\n\t  7   9  15   9   9  10  11  10   8  12  0.867692    100/100     NonOverlappingTemplate\n\t 11  10   8   8  14   7   8  12  12  10  0.867692     99/100     NonOverlappingTemplate\n\t 10   8  10   9   9  13   8   8  12  13  0.935716     99/100     NonOverlappingTemplate\n\t  8  13   7  12   8   7  11  14   7  13  0.595549    100/100     NonOverlappingTemplate\n\t  4  13  11  17  11  10   9   8   6  11  0.224821     99/100     NonOverlappingTemplate\n\t 13   5  16   6   6  20   8  10   7   9  0.010237     98/100     NonOverlappingTemplate\n\t  5  18  11   5   9  12  14   8   8  10  0.108791    100/100     NonOverlappingTemplate\n\t 12   9   7  12  12   9  11   8  16   4  0.350485     98/100     NonOverlappingTemplate\n\t  7  16  10   8  13   9  12  10   6   9  0.534146     98/100     NonOverlappingTemplate\n\t 10   7  11  15   9   8   8   7  13  12  0.678686     99/100     NonOverlappingTemplate\n\t 11   9   9  11  12   4   8  15   7  14  0.366918    100/100     NonOverlappingTemplate\n\t 10  13   5  12  10  12  12  10  10   6  0.719747    100/100     NonOverlappingTemplate\n\t  6  12  13   9  14  11  12   9   3  11  0.334538     99/100     NonOverlappingTemplate\n\t 12  12  11  13   8  13   9  11   6   5  0.595549     98/100     NonOverlappingTemplate\n\t  9  16  13   8  10  10  12   8   8   6  0.554420    100/100     NonOverlappingTemplate\n\t 17   8   5  11   9  11  11  12   9   7  0.383827     97/100     NonOverlappingTemplate\n\t  9  14   9   9  10  10  11  11   6  11  0.924076    100/100     NonOverlappingTemplate\n\t 12  10   7   7  11  11   6  13  13  10  0.759756     98/100     NonOverlappingTemplate\n\t 10   9  13  11   7  12  10   6   8  14  0.739918     99/100     NonOverlappingTemplate\n\t  4  11  10  19   5  12  11  12   9   7  0.062821     99/100     NonOverlappingTemplate\n\t 15  13  11  12  12  11  10   5   4   7  0.249284     99/100     NonOverlappingTemplate\n\t 14  13   8  17  12  10  11   5   6   4  0.066882     99/100     NonOverlappingTemplate\n\t  9   7  12  11  11  10  12   8  10  10  0.983453    100/100     NonOverlappingTemplate\n\t  8   9  15  12  10   6  11  11   6  12  0.616305     98/100     NonOverlappingTemplate\n\t 14   9  10  10  11   6   5  13  12  10  0.616305    100/100     NonOverlappingTemplate\n\t 10  16   2  10   7   8  16  12   9  10  0.080519    100/100     NonOverlappingTemplate\n\t 10   9   7   8  17   7  11  13   9   9  0.494392     99/100     NonOverlappingTemplate\n\t  6  11  12   6  10  11  11  11   7  15  0.595549     99/100     NonOverlappingTemplate\n\t  7  10  12  12   7  10  11  15   7   9  0.719747    100/100     NonOverlappingTemplate\n\t 11  10  10  12   8  10  12  12   7   8  0.964295     99/100     NonOverlappingTemplate\n\t  9   9  12   9   7  11  12   9   9  13  0.955835    100/100     NonOverlappingTemplate\n\t  8  14   8   9  10  12  13   7   8  11  0.816537     98/100     NonOverlappingTemplate\n\t  9   6  14  14   6   6   6   9  16  14  0.090936    100/100     NonOverlappingTemplate\n\t 10  12   8   9   6  11  15  11   8  10  0.779188     99/100     NonOverlappingTemplate\n\t  8  12  13   9   6   9  14   6  11  12  0.616305    100/100     NonOverlappingTemplate\n\t 13   9  12  11  14   9   7  12   8   5  0.595549     98/100     NonOverlappingTemplate\n\t  4  14   8  10  15  12  10   5  12  10  0.249284    100/100     NonOverlappingTemplate\n\t 14  12   9  11   6  10   6  10  14   8  0.595549     98/100     NonOverlappingTemplate\n\t  6  14   8   9   9  13  10  11   9  11  0.834308     99/100     NonOverlappingTemplate\n\t 10  12   9  10  12  12   6   6  12  11  0.834308    100/100     NonOverlappingTemplate\n\t  6  12   5  12  11   8  15   9  12  10  0.494392    100/100     NonOverlappingTemplate\n\t  8   8  11   8  12   8  15  14   7   9  0.616305     98/100     NonOverlappingTemplate\n\t 10  12  14   6  13  14   5  11   9   6  0.319084     98/100     NonOverlappingTemplate\n\t  7   6  11  12   9   9  15   8   9  14  0.554420     99/100     NonOverlappingTemplate\n\t 16  10   9  10   3  11   6   9  14  12  0.191687    100/100     NonOverlappingTemplate\n\t  7   7  11   9  10  12  13  10  10  11  0.946308    100/100     NonOverlappingTemplate\n\t 14  12   6   5   6  16   9  12  12   8  0.181557     98/100     NonOverlappingTemplate\n\t 10   9   8  10  11   8  13   6  12  13  0.851383    100/100     NonOverlappingTemplate\n\t 13   9   5  10   8   9  13   7  14  12  0.554420     99/100     NonOverlappingTemplate\n\t  5   7   9   9  10  11   4  18  15  12  0.055361     99/100     NonOverlappingTemplate\n\t 13   9   8  11   7  14   7  12   9  10  0.798139    100/100     NonOverlappingTemplate\n\t 11  11   9   8   8  13  13  11   9   7  0.911413    100/100     NonOverlappingTemplate\n\t  9   7   8   9   8  13   9  12  10  15  0.759756     99/100     NonOverlappingTemplate\n\t 15   9  12   6   7  11  11  12   8   9  0.678686     99/100     NonOverlappingTemplate\n\t  8  19   7   9  10  11   8  12  10   6  0.213309     99/100     NonOverlappingTemplate\n\t  8  11   8   9  12   5  13  12  10  12  0.779188     98/100     NonOverlappingTemplate\n\t 10   5  11  10  11   7  13  14  10   9  0.719747    100/100     NonOverlappingTemplate\n\t  9  10  14   6   8  11  10   8  14  10  0.759756    100/100     NonOverlappingTemplate\n\t  6  15   8  12  11  13   7   9   7  12  0.514124     97/100     NonOverlappingTemplate\n\t 11   9  10   9   7  12  10  11   8  13  0.964295     98/100     NonOverlappingTemplate\n\t 10   8  11  16   8  12   9  10   5  11  0.574903     99/100     NonOverlappingTemplate\n\t 12  16  16   9  10   4   9   9   6   9  0.153763    100/100     NonOverlappingTemplate\n\t 10  13  10   9   8   7  13  13   9   8  0.867692    100/100     NonOverlappingTemplate\n\t  8   8   6  13   9  12   9  10  14  11  0.779188     99/100     NonOverlappingTemplate\n\t  8  12  10   8  14  10   9  10  12   7  0.897763    100/100     NonOverlappingTemplate\n\t 12  13   4  13  11   9   6  14   8  10  0.383827     99/100     NonOverlappingTemplate\n\t 13   9   5  12  11   5   6  14  13  12  0.275709     99/100     NonOverlappingTemplate\n\t  6  12   6  14   9   6  14  13  14   6  0.181557     98/100     NonOverlappingTemplate\n\t  8  12  13   9  11   7  16   7   8   9  0.554420     98/100     NonOverlappingTemplate\n\t  6  10  11   9   9  10  15  10   8  12  0.816537    100/100     NonOverlappingTemplate\n\t  9  11  11  13   8  10   9  12  10   7  0.964295     99/100     NonOverlappingTemplate\n\t  4  12  12  15  12  10   8   7   9  11  0.455937     99/100     NonOverlappingTemplate\n\t 10  14   9   7  11  10  13   9   8   9  0.897763     98/100     NonOverlappingTemplate\n\t  7  15  11  11   9  13   9  11   8   6  0.657933    100/100     NonOverlappingTemplate\n\t 12  12   8   9   9  14   3  13  14   6  0.213309     98/100     NonOverlappingTemplate\n\t  7  14  14  14   7   9   9   8   6  12  0.419021     99/100     NonOverlappingTemplate\n\t 13  10  10  14   9   9   7  10  10   8  0.911413    100/100     NonOverlappingTemplate\n\t 13  12   9   9   7  10  10  12  10   8  0.955835    100/100     NonOverlappingTemplate\n\t 13  10   7  13   7  11   4  11  13  11  0.494392     99/100     NonOverlappingTemplate\n\t 15   9  17   5   8   6   4  11  11  14  0.042808     99/100     NonOverlappingTemplate\n\t  5  15  14  10   6  11  13   9  13   4  0.129620    100/100     NonOverlappingTemplate\n\t 12  11   6   8  14  13  11   5   7  13  0.401199     99/100     NonOverlappingTemplate\n\t  9   8   9  10   6  13  15  13  11   6  0.514124    100/100     NonOverlappingTemplate\n\t 11  11   9  11   7  11   7  10  18   5  0.262249     99/100     NonOverlappingTemplate\n\t  9   6  11   7   7   9   7  15  12  17  0.191687    100/100     NonOverlappingTemplate\n\t  4  16   8  11  10   9   4  15  14   9  0.075719    100/100     NonOverlappingTemplate\n\t 12   7  16   8  13   7   7  11   8  11  0.474986     99/100     NonOverlappingTemplate\n\t  6  10  11  11  14  12   7   4  14  11  0.350485     99/100     NonOverlappingTemplate\n\t 14   7  10   7  10   9  11  10  10  12  0.911413    100/100     NonOverlappingTemplate\n\t  4   9  14  16  13   7  13   7   6  11  0.115387     99/100     NonOverlappingTemplate\n\t 14   5  11  13   7  11   8  16   8   7  0.249284     99/100     NonOverlappingTemplate\n\t  8  14   8  14   4   7  11  11  12  11  0.419021    100/100     NonOverlappingTemplate\n\t 13  10   9   8   7   8  11  15  11   8  0.759756     99/100     NonOverlappingTemplate\n\t  9  16   8  14   4   8  15   8  10   8  0.162606    100/100     NonOverlappingTemplate\n\t 11   7  13   7  10  15  12   9   7   9  0.657933     98/100     NonOverlappingTemplate\n\t 10   8  20  16   9   9   6   8   8   6  0.032923     99/100     NonOverlappingTemplate\n\t  6  10   7  13  11  13  11  14   9   6  0.554420    100/100     NonOverlappingTemplate\n\t  5   9  10  14  11  12  12   8   6  13  0.534146    100/100     NonOverlappingTemplate\n\t 10   7  12   8  12   5  10  11  11  14  0.699313    100/100     NonOverlappingTemplate\n\t  8  12  12  13  10   9  11   5  11   9  0.834308    100/100     NonOverlappingTemplate\n\t  8   9   9   7  13  12   9   9   8  16  0.637119    100/100     NonOverlappingTemplate\n\t  7   9  10   6   6  14  16  12  11   9  0.350485    100/100     NonOverlappingTemplate\n\t  7   8  12  10  10   8   9  16  10  10  0.759756     98/100     NonOverlappingTemplate\n\t 10   6  10   9   9  14   9  13   9  11  0.867692     99/100     NonOverlappingTemplate\n\t  4   6  11   7   8  11  16  14  17   6  0.030806     99/100     NonOverlappingTemplate\n\t 16   8   6   8   5  13   4  20  14   6  0.001895    100/100     NonOverlappingTemplate\n\t  8   6   8   9  11  12   7  16   9  14  0.419021    100/100     NonOverlappingTemplate\n\t  8   6  15  11  15  12   8   9   7   9  0.437274    100/100     NonOverlappingTemplate\n\t  6  13   8  10   9  17  16   7   4  10  0.066882     99/100     NonOverlappingTemplate\n\t 10   9  12  11  12   4  11   7  12  12  0.699313    100/100     NonOverlappingTemplate\n\t  8   9   9   7  11  10   7  15  11  13  0.739918    100/100     NonOverlappingTemplate\n\t 10  20  12  10   9   7  13   8   4   7  0.045675     98/100     NonOverlappingTemplate\n\t 15   4   9   9   9  13  11   9   9  12  0.534146     98/100     NonOverlappingTemplate\n\t 16   7  10   8   7  11  14   5  10  12  0.319084     98/100     NonOverlappingTemplate\n\t 10   7   8  11   9   3  17  13  11  11  0.191687     98/100     NonOverlappingTemplate\n\t 13  12   9   9   6  10  10  10  10  11  0.955835     99/100     NonOverlappingTemplate\n\t  7  12   9   5   9  11  11  12   9  15  0.616305     99/100     NonOverlappingTemplate\n\t 11  10  12  12   7   2  13  10  13  10  0.350485    100/100     NonOverlappingTemplate\n\t  5  12   9   6  14   9   6  12  11  16  0.213309    100/100     NonOverlappingTemplate\n\t  6  17  14   9  13  13   2   9   7  10  0.042808     99/100     NonOverlappingTemplate\n\t  5  16  11   4  16  10  11   9  13   5  0.048716     98/100     NonOverlappingTemplate\n\t 11   5   9  11   5  16   8  13  12  10  0.304126     99/100     NonOverlappingTemplate\n\t  8  11  14   9  11  13   6  15   9   4  0.275709     99/100     NonOverlappingTemplate\n\t 13  12   7  12   8  13   6  10   7  12  0.657933     99/100     NonOverlappingTemplate\n\t 11  11   9   8  11   7  15   8   9  11  0.851383     96/100     NonOverlappingTemplate\n\t  6  12   8   6   9  18   9   9  12  11  0.262249     98/100     NonOverlappingTemplate\n\t 10   9  12   8  13  14  10  11   5   8  0.699313     99/100     NonOverlappingTemplate\n\t 15   9  12   6   7  11  11  12   8   9  0.678686     99/100     NonOverlappingTemplate\n\t 15   6  12   8  10  11   9   6  11  12  0.616305     97/100     OverlappingTemplate\n\t  7  11   9  11   8  10  11  16  10   7  0.719747     99/100     Universal\n\t 15   9  17   9   4   7  11  12  10   6  0.115387     98/100     ApproximateEntropy\n\t 11   8   9   9   8   3  13   8   8  11  0.460664     87/88      RandomExcursions\n\t 11   7  10  11   6  10   7   8   5  13  0.509162     88/88      RandomExcursions\n\t  9   6  10   8  11  10   8  11   9   6  0.875539     85/88      RandomExcursions\n\t 10   6   7  10   7  10   8  10  12   8  0.855534     87/88      RandomExcursions\n\t 10  12  12   5   6   7   8   8  11   9  0.585209     85/88      RandomExcursions\n\t 10   8   7   7   9  14   9  12   6   6  0.484646     87/88      RandomExcursions\n\t 15   4  12   8   9  11   6   9  10   4  0.105618     87/88      RandomExcursions\n\t  8  10  10   4  11  14   4  10  11   6  0.174249     87/88      RandomExcursions\n\t  9  10   9   6   7   8   7   9  11  12  0.855534     87/88      RandomExcursionsVariant\n\t 10   9  11   4   9   6   6  16   9   8  0.162606     87/88      RandomExcursionsVariant\n\t 11   8   8   8  11   7   8  13   9   5  0.663130     87/88      RandomExcursionsVariant\n\t 10   9   9  13  11   7   8  10   5   6  0.611108     87/88      RandomExcursionsVariant\n\t 11   5  12  12  13   8   8   4  10   5  0.162606     86/88      RandomExcursionsVariant\n\t 10   9   4   9  11  18   8   6   9   4  0.025193     86/88      RandomExcursionsVariant\n\t 11   3  10   7   8   9  10   8  10  12  0.534146     85/88      RandomExcursionsVariant\n\t 10   8  11   8   8   6   8   7  12  10  0.855534     86/88      RandomExcursionsVariant\n\t  8  11  13   8  11   9   8   7   4   9  0.559523     86/88      RandomExcursionsVariant\n\t  9   8   9   4   7  10  14   8  14   5  0.162606     85/88      RandomExcursionsVariant\n\t 13   6  11   6   8   4   6  11  12  11  0.213309     87/88      RandomExcursionsVariant\n\t 14  10   6   6   9   7   7  12   8   9  0.484646     87/88      RandomExcursionsVariant\n\t 14   7   7  10   7  12  12   8   6   5  0.275709     85/88      RandomExcursionsVariant\n\t 17   6   5  10   5  14   9  10   3   9  0.009706     86/88      RandomExcursionsVariant\n\t 16   8   7   6  10   8   5   8   7  13  0.141256     85/88      RandomExcursionsVariant\n\t 15   4  12   9   9   5   7  11   9   7  0.162606     85/88      RandomExcursionsVariant\n\t 12  10   9  10  12   7   6   3   8  11  0.350485     86/88      RandomExcursionsVariant\n\t 13   7  11  12   7   7   7  11   1  12  0.066882     86/88      RandomExcursionsVariant\n\t 10   9   7  14  14  11  10   7  12   6  0.616305    100/100     Serial\n\t 11   9   9   9  13  11   7  13   7  11  0.897763    100/100     Serial\n\t  9   6  11  12  11   8  13  10  11   9  0.924076     99/100     LinearComplexity\n\n\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\tThe minimum pass rate for each statistical test with the exception of the\n\trandom excursion (variant) test is approximately = 96 for a\n\tsample size = 100 binary sequences.\n\n\tThe minimum pass rate for the random excursion (variant) test\n\tis approximately = 84 for a sample size = 88 binary sequences.\n\n\tFor further guidelines construct a probability table using the MAPLE program\n\tprovided in the addendum section of the documentation.\n\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\n\n---\n\n<center>*.. an amazonian butterfly flaps his wings ..*</center>", 
  "id": 25984115
}