{
  "read_at": 1462551217, 
  "description": "An active probing tool for estimating traffic correlations", 
  "README.md": "H-probe (Ver. 1.1)\n==================\n\n\nOverview\n--------\n\nH-probe is an online active probing tool for estimating traffic correlations from end-to-end measurements. H-probe does not rely on a receiver as it uses ICMP echo packets. It uses libpcap to capture returning ICMP echo replies. From the timing information H-probe is able to estimate the correlation (covariance) of the cross traffic sharing the end-to-end path with the probing traffic. For Internet aggregate traffic it is known [Leland et al. '94] that it is long range dependent (LRD) with Hurst parameter H. The Hurst parameter can be estimated from the covariance slope that is given by 2H-2. H-probe also implements the aggregate variance method known from [Taqqu et al. '95], which is more robust than the covariance, for estimating H. \n\nH-probe uses sampling methodology that is described in\n\"[Estimating traffic correlations from sampling and active network probing](http://ieeexplore.ieee.org/xpl/abstractReferences.jsp?tp=&arnumber=6663503)\", by A. Rizk, Z. Bozakov and M. Fidler. IFIP Networking Conference 2013, pp.1,9, 22-24 May 2013\n\nA technical report \"H-Probe: Estimating Traffic Correlations from Sampling and Active Network Probing\" is available at [arXiv](http://arxiv.org/abs/1208.2870).\n\nH-Probe injects ICMP echo request probes from the sender to the target and captures the corresponding round trip times (RTT) using libpcap. Using the RTTs H-probe estimates the traffic correlations on the end-to-end path. Details of the algorithm are given the paper mentioned above.\n\n\n\nRequirements\n------------\n\n1. Linux operating system \n2. root privileges to use libpcap for packet capture\n3. python version 2.6 or 2.7 including the following required python packages: pypcap, numpy, libdnet, dpkt. Additionally the following optional python packages will be used if installed: affinity (pypi), progressbar. To use the live plotting functionality gnuplot is must also be installed. \n\nIn Debian based distributions you should be able to install all necessary packages using:\n\n    sudo apt-get install python-pypcap python-dumbnet python-numpy \n    sudo apt-get install python-dev python-setuptools python-progressbar \n    sudo apt-get install gnuplot \n    \n    sudo easy_install affinity\n\nThe software has been extensively tested under Linux (specifically Ubuntu 12.04 using python 2.6.5). The software has not been tested on Windows and OS X - feedback is appreciated.\n    \n\nInstallation\n------------\n\nYou can obtain the latest version of the software from GitHub using:\n\n    git clone https://github.com/bozakov/H-probe.git\n    \nYou can also download and uncompress a zip archive with the most recent source files: \n    \n    wget https://github.com/bozakov/H-probe/zipball/master\n    gunzip bozakov-H-probe*.zip\n\nAfter changing to the extracted directory you can immediately start using H-probe: \n\n    sudo ./h-probe www.nasa.gov\n\nThis will start an online estimation run which will display and periodically update a plot of the aggregate variance of the network path from your host to www.nasa.gov. Alternately, you can run a headless session and save all measurement results into a \"dumpfile\" which  can be loaded and parsed at any time using the `--dump` option.\n\n    sudo ./h-probe www.nasa.gov --dump \n\nThe command line options are given below\n    \n    ./h-probe [options] host [savefile]\n\n    Options:\n      --version             show program's version number and exit\n      -h, --help            show this help message and exit\n      -n PNUM, --probe-num=PNUM\n                            total number of probes (default: 100000)\n      -d DELTA, --delta=DELTA\n                            min. time in seconds between probes (default: 1e-3)\n      -r RATE, --rate=RATE  mean probing intensity between 0 and 1 (default: 0.1)\n      -s PLEN, --psize=PLEN\n                            total probe packet size in bytes (default: 64)\n      -L L, --lag=L         maximum lag in seconds (default: 10.0 s)\n      -M M, --agg-level=M   min/max aggregation range in seconds for aggregate\n                            variance method (default: [0.1, 100.0] s)\n      --in-slots            maximum lag and the aggregation levels are given in\n                            slots rather than absolute time\n      -t MIN_RTT, --min-rtt=MIN_RTT\n                            specify the minimum RTT used to detect a busy beriod\n      --no-plot             disable visualization (default: False)\n      --fps=FPS             frames per second for plotting (default: 1.0)\n      --aggvar              estimate aggregate variance (default)\n      --xcov                estimate path covariance\n      --hist                generate a histogram of the RTTs\n      --dump                dump the captured RTTs to a file for post-processing\n      --load=LOADDUMP       load a dump of captured RTTs\n      --tag=TAG             optional tag appended to save filename (default: )\n      --verbose             print additional info\n\n\nOutput\n------\n\n1.  Covariance method (`--xcov` option): calculates and plots the covariance versus the time lag in seconds on a log-log scale. For LRD traffic the covariance decays as \\tau^{2H-2}. This results into a slope on a log-log scale as 2H-2.\n\n2.  Aggregate variance method (`--aggvar` option): generates a plot depicting the aggregate variance versus the aggregation level M. On a log-log scale the aggregate variance decays with M as a straight line with a slope of 2H-2. This is the default estimation method.\n\n3.  After a predefined number of probes has been collected (`-n` option) the measurement terminates and the current plot (either covariance or aggregate variance) is saved under the following name:\n\n        [savefile]_<tag>_[method].eps\n\n    \n    or, if no savefile was specified:\n    \n        [host]_[date]_[time]_<tag>_[method].eps\n        \n * [host] is the target host name\n * [date] is the current date (YYYYMMDD)\n * [time] is the measurement completion time (HHMM)\n * <tag>  is an optional user defined tag (`--tag` option)\n * [method] is the estimation method: av for aggregate variance, xc for covariance plot\n\n  \n    Additionally the estimate raw data is saved as a .dat file which can be imported and analyzed in other tools. The file name format is identical to the EPS file but has a .dat extension. The file contains a new line for each received probe with the format `YY [XX]` where:\n    \n    * YY    is the y-coordinate value (i.e. aggregated variance, or covariance)\n    * [XX]  is the (optional) x-coordinate value (i.e. aggregation level or lag)\n    \n\n4.  H-probe can save the measurement results into a dump file for subsequent analysis using the '--dump' option. The default dump file is saved as:\n\n         [savefile]_<tag>_[method].dump\n    \n    or, if no savefile was specified:\n    \n         [host]_[date]_[tag]_[time].dump\n    \n    The dumpfile contains a single line for each measured RTT using a\n    three column, white space delimited format `AA BB CCCCC`\n\n   * AA     is the integer probe sequence number\n   * BB     is the integer slot number of the probe (each slot is Delta wide)\n   * CCCCC  is the measured RTT in seconds\n\n\nContact\n-------\n\n<zb@ikt.uni-hannover.de>\n\n<amr.rizk@ikt.uni-hannover.de>\n\nYou can find the project page [here](http://www.ikt.uni-hannover.de/h-probe).\n\nLicense\n-------\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; see the file COPYING.  If not, write to\nthe Free Software Foundation, Inc., 59 Temple Place - Suite 330,\nBoston, MA 02111-1307, USA.\n\n\n\n\n\n\n\n\n\n\n\n\n\n", 
  "id": 5203661
}