{
  "read_at": 1462554031, 
  "description": "Emmanoulopoulos style lightcurve simulation", 
  "README.md": "# Emmanoulopoulos Lightcurve Simulation\n\n#### Python version of the Emmanoulopoulos light curve simulation algorithm.\n##### As according to [Emmanoulopoulos et al 2013, Monthly Notices of the Royal Astronomical Society, 433, 907](http://adsabs.harvard.edu/abs/2013MNRAS.433..907E)\n\n##### The code is citable via the Astronomical Source Code Library ID number *1602.012*\n\ne.g. as Connolly, S. D., 2016, Astrophysics Source Code Library, record ascl:1602.012\n\nThe code's entry in the ASCL is available here:\n\n [http://ascl.net/1602.012](http://ascl.net/1602.012)\n\n(A very short research note on the creation of this code has also been published on ArXiv here: [http://arxiv.org/abs/1503.06676](http://arxiv.org/abs/1503.06676) )\n\n##### Full documentation of classes and methods is given in the code.\n\n#####  If you have questions, suggestions, problems etc. please email me at sdc1g08@soton.ac.uk\n(Though please note that I am not paid to maintain or update this code, so I may not be\navailable or able to help you in all cases and will be doing so in my own time)\n\nNote that the main purpose of this code is the simulation of lightcurves using the Emmanoulopoulos\nmethod with known parameters for the PSD and PDF of the desired lightcurve - functions related to \nfitting these distributions are added for convenience, but the results should always be checked,  \nas these will not always give the best fit to the data, especially with the default parameters, \nand may not work at all in some cases. The use of these functions is NOT essential to simulating\nlightcurves, as best fit paramaters to any distribution using other tools can always be used instead.\n\n### Installation:\n\nTo install this module, download this repository by clicking 'download zip' on the right --->'\n\n- unzip the file\n\n- run the install script in the top-level directory:\n```csh\npython setup.py install\n```\n\nThis will install the code as a module so that it can be imported in any working directory, e.g. with the command:\n```python\nfrom DELCgen import *\n```\n\n### Description:\n\n#### Lightcurve Objects\n\nThe code uses a 'Lightcurve' class which contains all of the data and functions necessary\nfor simulation of artificial version, and for plotting and saving. Lightcurve objects\ncan be easily created from data using the following command:\n\n```python\nlc = Load_Lightcurve(fileroute,tbin)\n```\n\nThey can also be created manually:\n```python\nlc = Lightcurve(time,flux,errors=None,tbin)\n```\n\nWhere 'time' and 'flux' are data arrays of the lightcurve. 'Errors' is an optional array of\nerrors on the fluxes in the lightcurve, not used for simulation. 'tbin' is the sample rate\nof the lightcurve, which *is* used in simulation.\n\n**The input file must be a text file with three columns of time, flux and the error \non the flux. The lightcurve must also be binned at regular intervals.** Headers, footers etc. are handled.\n\n#### Simulating lightcurves without existing data/with known PSD and PDF parameters\n\nThe code can be used to produce lightcurves with any given PSD, PDF, mean and standard deviation\nby passing these to a single command, e.g.:\n\n```python\ndelc = Simulate_DE_Lightcurve(PSDmodel,PSDparams,PDFmodel, PDFparams,\n\t\t\t\ttbin = 1, LClength = 1000, mean = 1, std = 0.1)\n```\nwhere 'PSDmodel' and 'PDFmodel' can be any function giving the distribution\nof the PSD and PDF, and, 'PSDparams' and 'PDFparams' are tuples containing\nthe parameters for these distributions, e.g.:\n\n```python\ndelc = Simulate_DE_Lightcurve(BendingPL, (1.0,300,2.1,2.3,0.1),\n\t\t\t\tscipy.stats.lognorm,(0.3, 0.0, 7.4),\n                                  tbin = 1, LClength = 1000, mean = 1, std = 0.1)\n```\n\nThe result is a Lightcurve object and can therefore easily be plotted, saved etc.\n\n#### Simulating lightcurves with a data lightcurve\n\nArtificial lightcurves can be produced with the same PSD and PDF as a data lightcurve using the following command:\n```python\ndelc = datalc.Simulate_DE_Lightcurve()\n```\n\nHowever, this will use the default PSD and PDF distributions and starting parameters for automatic fits,\nwhich may not be the best choice in many cases.\n\nLightcurves can therefore be simulated for any specific given PSD and PDF model using:\n\n##### Timmer & Koenig (1995) method\nFrom Timmer & Koenig, 1995, Astronomy & Astrophysics, 300, 707.\n```python\ntklc = Simulate_TK_Lightcurve(datalc,PSDfunction, PSDparams, RedNoiseL, aliasTbin, RandomSeed)\n```\n\n##### Emmanoulopoulos (2013) method\nFrom Emmanoulopoulos et al., 2013, Monthly Notices of the Royal Astronomical Society, 433, 907.\n\n```python\ndelc = Simulate_DE_Lightcurve(datalc,PSDfunction, PSDparams, PDFfunction, PDFparams)\n```\n\nThe lightcurve's length, mean and standard deviation of the simulated lightcurve can be changed from\nthat of the data lightcurve by providing these values as in the example of simulating without data above.\n\n### Distributions and functions \nAny function can be used for the PSD and PDF, however it is highly recommended\nto use a scipy.stats random variate distribution for the PDF, as this allows \ninverse transfer sampling as opposed to rejection sampling, the latter of which\nis *much* slower. In the case that a scipy RV function is used, however, care \nshould be taken with the parameters, as they may not be what you expect (see\nbelow). In addition, the following functions exist in the module:\n\n##### PSDs\n* BendingPL(v,A,v_bend,a_low,a_high,c) - Bending power law\n\n\n#### General/PDF:\n* MixtureDist(functions,n_args,frozen=None) - Mixture distribution CLASS for creating \n  an object which can calculate a value from or sample a mixture of any set of functions.\n  The number of arguments of each function must be specified. Specific parameters can\n  also be frozen at a given value for each function, such that the resultant function\n  does not take this parameter as an argument.\n\n  e.g. mix_model = Mixture_Dist([st.gamma,st.lognorm],[3,3],[[[2],[0]],[[2],[0],]])\n  produces a mixture distribution consisting of a gamma distribution and a lognormal\n  distribution, both of which have their 3rd parameter frozen at 0. The resultant\n  function will therefore require 4 parameters (two for the gamma distribution and\n  two for the lognormal distribution) **plus the weights of each**.\n  \n  The value of this function at a given value of 'x' for a given set of parameters can \n  then be obtained using mix_model.Value(x,params), where 'params' is a list of the\n  parameters followed by the weights of each function in the mixture distribution, e.g.\n  [f1_p1,f1_p2,f2_p1,f2_p1,w1,w2] in this case.\n  \n  The function can also be randomly sampled using mix_model.Sample(params,length=1),\n  where 'params' is the function parameters given as described above and 'length'\n  is the length of the resultant sample array, i.e. the number of samples drawn\n  from the distribution.\n\n#### Scipy random variate distributions\nA large number of these distributions are available and are genericised such\nthat each can be described with three arguments: shape, loc (location) and scale.\nAs a result, some of the parameters aren't what you might expect, and each\nof these three parameters are needed when using a scipy RV function in this code.\nThese can be used in mixture distributions in the code, shown in examples below.\nThe scipy documentation is the best place to check this, but below are examples\nof this in the form of the Gamma and lognormal distributions which can describe\nAGN PDFs well:\n\n* For a log normal distribution with a given mean and sigma (standard deviation):\n```python\n\tscipy.stats.lognorm.pdf(x, shape=sigma,loc=0,scale=np.exp(mean))\n```\n* For a gamma distribution with a given kappa and theta:\n```python\n\tscipy.stats.pdf(x, kappa,loc=0, scale=theta)\n```\n\nhttp://docs.scipy.org/doc/scipy-0.14.0/reference/stats.html\n\n### Fitting Models\nThe following commands are methods of the Lightcurve class:\n* Fit_PSD() - Fit the lightcurve's periodogram with a given PSD model.\n* Fit_PDF() - Fit the lightcurve with a given PDF model\n\n### Simulating Light Curves\nThe following commands are methods of the Lightcurve class:\n* delc = datalc.Simulate_DE_Lightcurve() - Simulate a lightcurve with \nthe same PSD and PDF as the data lightcurve, using the Emmanoulopoulos method.\n\n\nThe following commands require a model and best-fit parameters as inputs:\n* tklc = Simulate_TK_Lightcurve(datalc,PSDfunction, PSDparams, RedNoiseL, aliasTbin, RandomSeed) - Simulate a lightcurve with a given PSD and PDF, using the Emmanoulopoulos method\n* delc = Simulate_DE_Lightcurve(datalc,PSDfunction, PSDparams, PDFfunction, PDFparams) - Simulate a lightcurve with a given PSD and PDF, using the Timmer and Koenig method.\n\n### Plotting \nThe following commands are methods of the Lightcurve class:\n* Plot_Lightcurve()       - Plot the lightcurve\n* Plot_Periodogram()      - Plot the lightcurve's periodogram, and PSD model if fitted\n* Plot_PDF()              - Plot the lightcurve's probability density function, and PDF model if fitted\n* Plot_Stats()            - Plot the lightcurve, its periodogram and PDF, and PSD and PDF models if fitted\n\nThe following commands take Lightcurve objects as inputs:\n* Comparison_Plots(lightcurves,bins=25,norm=True) - Plot multiple lightcurves and their PSDs & PDFs\n\n### Saving \nThe following commands are methods of the Lightcurve class:\n* Save_Lightcurve(filename)  - Save the lightcurve (time and flux) as a text file\n* Save_Periodogram(filename) - Plot the periodogram (frequency and power) as a text file\n                                                   \n### Other Attributes of the Lightcurve class \n* time            - The lightcurve's time array\n* flux            - The lightcurve's flux array\n* errors          - The lightcurve's flux error array\n* length          - The lightcurve's length\n* freq            - The lightcurve's periodogram's frequency array\n* periodogram     - The lightcurve's periodogram (if calculated)\n* mean            - The lightcurve's mean flux\n* std             - The lightcurve's standard deviation\n* std_est         - The lightcurve's estimated underlying SD (if calculated)\n* tbin            - The lightcurve's time bin size\n* fft             - The lightcurve's Fourier transform (if calculated)\n* psdModel        - The model used in fitting the lightcurve's periodogram\n* psdFit          - The fit outcome from fitting the lightcurve's PDF, including the best fitting parameters \n* pdfModel        - The model used in fitting the lightcurve's probability density function \n* pdfFit          - The fit outcome from fitting the lightcurve's PSD, including the best fitting parameters\n\n##### Other Methods (functions)\nThe following commands are methods of the Lightcurve class:\n* STD_Estimate() \t\t    - Calculate the estimate of the underlying\n                                    standard deviation (without Poisson noise),\n                                    which is used in simulations if present\n* Fourier_Transform()               - Calculate the lightcurve's Fourier transform\n                                    (calculated automatically if required by another function)\n* Periodogram()                     - Calculate the lightcurve's periodogram\n                                    (calculated automatically if required by another function)\n\nThe following commands are global methods:\n\n* RandAnyDist(f,args,a,b) - Generate random values from the distribution 'f' with parameters 'args', between 'a' and 'b'\n* OptBins(data) - Calculate the optimum number of bins  to describe the PDF of a data set, using the method of Knuth et al. 2006.\n\n## Example usage:\n\n```python\n#------- Input parameters -------\n\nfrom DELCgen.DELCgen import *\nimport scipy.stats as st\n\n# File Route\nroute = \"/route/to/your/data/\"\ndatfile = \"NGC4051.dat\"\n\n# Bending power law params\nA,v_bend,a_low,a_high,c = 0.03, 2.3e-4, 1.1, 2.2, 0 \n# Probability density function params\nkappa,theta,lnmu,lnsig,weight = 5.67, 5.96, 2.14, 0.31,0.82\n# Simulation params\nRedNoiseL,RandomSeed,aliasTbin, tbin = 100,12,1,100 \n\n#--------- Commands ---------------\n\n# load data lightcurve\ndatalc = Load_Lightcurve(route+datfile,tbin)\n\n# plot the data lightcurve and its PDF and PSD\ndatalc.Plot_Lightcurve()\n```\n\n![alt tag] (https://raw.githubusercontent.com/samconnolly/DELightcurveSimulation/master/LC.png)\n\n```python\n# estimate underlying variance od data light curve\ndatalc.STD_Estimate()\n\n\n# simulate artificial light curve with Emmanoulopoulos method, using the PSD and PDF of the data\ndelc = datalc..Simulate_DE_Lightcurve() # defaults to bending PL and mix of gamma and lognormal dist.\n\n# simulate artificial light curve with Timmer & Koenig method\ntklc = Simulate_TK_Lightcurve(datalc,BendingPL, (A,v_bend,a_low,a_high,c),\n                                RedNoiseL,aliasTbin,RandomSeed)\n\n# simulate artificial light curve with Emmanoulopoulos method, scipy distribution\ndelc2 = Simulate_DE_Lightcurve(datalc,BendingPL, (A,v_bend,a_low,a_high,c),\n                                ([st.gamma,st.lognorm],[[kappa,0, theta],\\\n                                    [lnsig,0, np.exp(lnmu)]],[weight,1-weight]))\n\n# simulate artificial light curve with Emmanoulopoulos method, custom distribution\ndelc3 = Simulate_DE_Lightcurve(datalc,BendingPL, (A,v_bend,a_low,a_high,c),\n                                ([[Gamma,LogNormal],[[kappa, theta],\\\n                                  [lnmu, lnsig]],[weight,1-weight]]),MixtureDist)                                \n\n# plot lightcurves and their PSDs ands PDFs for comparison\nComparison_Plots([datalc,tklc,delc])\n```\n\n![alt tag] (https://raw.githubusercontent.com/samconnolly/DELightcurveSimulation/master/ComparisonPlots.png)\n\n```python\n\n# Save lightcurve and Periodogram as text files\ndelc.Save_Lightcurve('lightcurve.dat')\ndelc.Save_Periodogram('periodogram.dat')\n\n```\n", 
  "id": 26908924
}