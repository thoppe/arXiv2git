{
  "README": "-- Hybrid System Simulator --\n\nEach folder contains the implementation of an example in Section V in\n[1], as detailed below.\n\n\n- Forced Linear Oscillator with Stop\n\nThe folder 'mass_wall' contains a Matlab implementation of the\nalgorithm from Fig. 9 in [1], and the forced oscillator in Section V-A\nin [1].\n\nTo generate the Figures 10d-f in [1] just type:\n>> plot_comp\n\nTo generate Figure 10b, first type:\n>> fmw_iterate\nthen type:\n>> plot_grnd( grnd_trjs, user, 1 )\n\nTo generate Figure 10c, first type:\n>> fmw_zeno\nthen type:\n>> plot_grnd( grnd_trjs, user, 0 )\n\nTo implement your own version of the forced linear oscillator with\nstop, you will need to begin by setting your own simulation parameters\nas is done on lines 6-11 of 'fmw_iterate.m'. After setting up these\nparameters you can load the forced linear oscillator with stop model\nas is done on line 14 of 'fmw_iterate.m'. \n\nDifferent parameters for the force linear oscillator with stop, as in\nTable 1 in [1], can be setup using the code on lines 17-30 of\n'fmw_iterate.m'. Our simulation algorithm is then called using the\n'fwd_RK2.m' file as is done on line 49 of 'fmw_iterate.m'. If you want\nto call the PS method, use the 'PS_method.m' file as is done on line\n56 of 'fmw_iterate.m'.\n\nThis code was tested on Matlab R2011b and R2013a.\n\n\n- Verification of a Navigation Hybrid System\n\nThe folder 'navigation' contains a Matlab implementation of the\nalgorithm from Fig. 9 in [1], and the navigation benchmark in Section\nV-B in [1].\n\nFigures 11a-c were generated using randomly sampled trajectories but\nwe have code to generate figures similar to them.\n\nTo generate Figures 11a type:\n>> nav_example\nand then run:\n>> plot_navbox( user, 4 )\n\nTo generate Figures 11b type:\n>> nav_infexample\nand then run:\n>> plot_navbox( user, 4 )\n\nTo generate Figures 11c type:\n>> nav_zenoexample\nand then run:\n>> plot_navbox( user, 4 )\n\nTo implement your own version of the verification task, you will need\nto begin by setting your own simulation parameters as is done on lines\n4-9 of 'nav_example.m'. After setting up these parameters you can load\nthe navigation model as is done on line 12 of 'nav_example.m'.\n\nDifferent parameters for the navigation model can be setup using the\ncode on lines 18-19 of 'nav_example.m'. Our simulation algorithm is\nthen called using the 'fwd_RK2.m' file as is done on line 47 of\n'nav_example.m'.\n\nThe code was tested on Matlab R2011b and R2013a.\n\n\n- Polyped Locomotion Hybrid System Model\n\nThis folder contains a Python implementation of the algorithm from\nFig. 9 in [1], and the multi-legged locomotion example from Section\nV-C in [1].\n\nThe following commands will generate Figs. 12 & 13 from [1]:\n$ python sch.py pronk.cfg\n$ python seq.py pronk.cfg\n    \nThe figures are saved in both .pdf and .eps format in the 'fig' and\n'seq' subdirectories, respectively.\n\nThe numerical simulation algorithm from Fig. 9 in [1] is implemented\nin the Euler function in the 'relax.py' module. Users who wish to\nsimulate their own hybrid system can subclass the \"hybrid dynamical\nsystem\" HDS class from 'relax.py'.\n\nA particularly simple example to start from is the bouncing ball 'BB'\nclass in 'relax.py'. To simulate this model and generate a plot\ncontaining a phase portrait and energy exchange versus time, simply\nrun 'relax.py' from iPython:\n$ run relax.py\n\nTo modify the initial conditions or parameters for the polyped\nlocomotion simulation simply change the 'x0' and 'p0' variables in\n'pronk.cfg'.\n\nThis code was tested on Python 2.7, NumPy 1.7, SciPy 0.12 (GCC 4.7),\nMatplotlib 1.2, and iPython 0.13.\n\n\n- References\n\n[1] S.A. Burden, H. Gonzalez, R. Vasudevan, R. Bajcsy, and\nS.S. Sastry, \"Metrization and Simulation of Controlled Hybrid\nSystems\".  arXiv:1302.4402\n", 
  "read_at": 1462551486, 
  "description": "Hybrid System Simulator", 
  "id": 15372440
}