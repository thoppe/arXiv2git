{
  "read_at": 1462551828, 
  "description": "Joachim Kopp's hybrid 3x3 real-symmetric eigenvector & value solver in ispc", 
  "README.md": "eigen\\_vec3.ispc\n---\nThis is a port of Joachim Kopp's excellent hybrid 3x3 real-symmetric eigenvector and eigenvalue solver\nover to ispc. This version uses [ispc](https://ispc.github.io/) to solve systems in parallel.\n\nAll credit for the implementation should go to the original author who introduced the hybrid method in:\n\nJoachim Kopp,\n**Efficient numerical diagonalization of hermitian 3x3 matrices**,\nInt. J. Mod. Phys. C 19 (2008) 523-548,\narXiv.org: [physics/0610206](http://arxiv.org/abs/physics/0610206)\n\nThe source for the various methods discussed in the paper is provided [online](http://www.mpi-hd.mpg.de/personalhomes/globes/3x3/)\nand is LGPL v2 licensed.\n\nIf you require a fast double precision implementation Kopp's C or FORTRAN version is likely a better\nchoice, at the time of writing double precision doesn't perform very well in ispc. However if you\ndon't need perfect accuracy on some (admittedly non-rigourous) benchmarks I found that the single\nprecision ispc version can compute eigenvectors and eigenvalues within 0.00005 of Kopp's double precision C version\nabout 99.7% of the time for vectors and 99.38% for eigenvalues (see error\\_bench.c).\nTo run some performance demos and see an example of usage from C see demo.c.\n\nUsage\n---\nThe ispc source eigen\\_vec3.ispc exports a single function which compiles to:\n```c\nextern void eigen_vec3(const float * matrices, float * vecs,\n\t\tfloat * vals, const int32_t num_mats);\n```\nFor usage from C++ the function will be placed in the ispc namespace and can be called as `ispc::eigen_vec3`.\n`matrices` should contain `num_mats * 9` floats and be the 3x3 matrices to be solved. `vecs` will store\nthe computed eigenvectors in row-major order with vectors stored in the columns and should also have\nstorage for `num_mats * 9` floats. `vals` will contain the eigenvalues for each eigenvector and should have\nroom for `num_mats * 3` floats.\n\nYou can also configure whether or not to fallback to QL iteration if it looks like there will be\nlarge error in the calculation by setting `ANALYTIC_ONLY` to 1 (no fallback) or 0 (use fallback). The\ndefine is set on line 9 of eigen\\_vec3.ispc.\n\n", 
  "id": 30035873
}