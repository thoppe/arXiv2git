{
  "id": 26008186, 
  "read_at": 1462509973, 
  "README.rst": "LHCO_reader \n***********\n\n============\nIntroduction\n============\n\n:mod:`LHCO_reader` is a Python module for reading `LHCO files <http://madgraph.phys.ucl.ac.be/Manual/lhco.html>`_ from detector simulators such as `PGS <http://www.physics.ucdavis.edu/~conway/research/software/pgs/pgs4-general.htm>`_ into a Python class, with useful functions for implementing an analysis. It can also read ROOT files from `Delphes <https://cp3.irmp.ucl.ac.be/projects/delphes>`_, by immediately converting them to LHCO files. :mod:`LHCO_reader` can calculate :math:`\\alpha_T` and razor variables, and :math:`M_{T2}` and :math:`M_{T2}^W` variables are included by linking :mod:`LHCO_reader` with external libraries.\n\nFor the full documentation, `read the online docs <http://lhco-reader.readthedocs.org/>`_. For a tutorial and further background information, see the manual at `arXiv:1510.07319 <http://arxiv.org/abs/1510.07319>`_.\n\nSubmit any bugs or issues at the `git-hub issues page <https://github.com/innisfree/LHCO_reader/issues>`_.\n\n=========\nReference\n=========\n\nIf you use :mod:`LHCO_reader`, please cite `arXiv:1510.07319 <http://arxiv.org/abs/1510.07319>`_:: \n\n    @article{Fowlie:2015dga,\n        author         = \"Fowlie, Andrew\",\n        title          = \"{LHCO_reader: A new code for reading and analyzing\n                        detector-level events stored in LHCO format}\",\n        year           = \"2015\",\n        eprint         = \"1510.07319\",\n        archivePrefix  = \"arXiv\",\n        primaryClass   = \"hep-ph\",\n        reportNumber   = \"COEPP-MN-15-10\",\n        SLACcitation   = \"%%CITATION = ARXIV:1510.07319;%%\"\n    }\n    \n============\nInstallation\n============\n\nThe module does not require complicated installation. Simply::\n\n    pip install LHCO_reader\n\nor clone the module for the very-latest version::\n\n    git clone https://github.com/innisfree/LHCO_reader.git\n\nor `download it via a web browser <https://github.com/innisfree/LHCO_reader/archive/master.zip>`_.\n\n===========\nQuick-start\n===========\n\nTo load the module :mod:`LHCO_reader` and look at an LHCO file, simply::\n\n    from LHCO_reader import LHCO_reader\n    events = LHCO_reader.Events(f_name=\"example.lhco\")\n    print events\n\nThe :class:`Events` object in the above code is a list-like object. Cuts can be implemented with lambda-functions, e.g. to cut events with one tau-lepton::\n\n    tau = lambda event: event.number()[\"tau\"] == 1\n    events.cut(tau)\n     \nTo test the module::\n\n    python LHCO_reader.py -v\n\nThe module requires some common modules that you might need to install separately, the most obscure of which is :mod:`prettytable`, see  `here for installation <https://code.google.com/p/prettytable/wiki/Installation>`_.\n\n===================\nStructure of events\n===================\n\nThe code is object-oriented. A LHCO file is parsed into several objects. \nThe :class:`Events` object is structured as follows:\n\n- :class:`Events` - A list of all events in the LHCO file\n\n- :class:`Events[0]` - The zeroth event in the LHCO file. The :class:`Events` can be looped with e.g.:\n\n.. code-block:: python\n\n    for event in events:\n      ... scrutinize an event ...\n \nbut beware that altering list-type objects in a loop can be problematic. The best way to cut :class:`Events` is with the :func:`Events.cut` function.\n    \n- :class:`Events[0][\"electron\"]` - A list of all electrons in the zeroth event in the LHCO file. For ordinary LHCO files, the possible keys are :literal:`electron`, :literal:`muon`, :literal:`tau`, :literal:`jet`, :literal:`MET` and :literal:`photon`.\n\n- :class:`Events[0][\"electron\"][0]` - The zeroth electron in the zeroth event in the LHCO file.\n  \n- :class:`Events[0][\"electron\"][0][\"PT\"]` - The transverse momentum of the zeroth electron in the zeroth event in the LHCO file. The other possible keys are :literal:`event,` :literal:`type`, :literal:`eta`, :literal:`phi`, :literal:`PT`, :literal:`jmass`, :literal:`ntrk`, :literal:`btag` and :literal:`hadem`.\n \nThere are many useful functions, including printing in LHCO format (:func:`LHCO`), plotting (:func:`plot`), sorting (:func:`order`) and cutting events (:func:`cut`), manipulating four-momenta with boosts (:func:`vector`), counting the numbers of types of object in an event (:func:`number`), angular separation (:func:`delta_R`), that should make implementing an analysis easy.\n\nDictionary keys\n===============\n\nThe :class:`Event` dictionary's keys are\n\n- :literal:`electron`\n- :literal:`muon`\n- :literal:`tau`\n- :literal:`jet`\n- :literal:`MET` (missing transverse energy)\n- :literal:`photon`\n\nThe :class:`Object` dictionary's keys from the LHCO file are\n\n- :literal:`event`\n- :literal:`type`\n- :literal:`eta`\n- :literal:`phi`\n- :literal:`PT`\n- :literal:`jmass`\n- :literal:`ntrk`\n- :literal:`btag`\n- :literal:`hadem`\n\nevent and type are integers, and other properties are floats.\n\nWe add various additional properties, including a function :func:`vector()`,\nwhich returns a four-momentum object.\n\nKinematic variables\n===================\n\nComplicated kinematic variables could be included from the Oxbridge kinetics\nlibrary.\n\n>>> object_1 = events[0][\"jet\"][0]\n>>> object_2 = events[0][\"jet\"][1]\n>>> MET = events[0][\"MET\"][0]\n>>> from oxbridge_kinetics import MT2\n>>> MT2(object_1, object_2, MET)\n53.305931964300186\n\n====\nROOT\n====\n\nROOT files can be converted into LHCO files with :mod:`root2lhco` in `Delphes <https://cp3.irmp.ucl.ac.be/projects/delphes>`_, which can be linked with and called from within :mod:`LHCO_reader` via :mod:`LHCO_converter`, i.e. you can load a ROOT file, which will be immediately converted into an LHCO file and parsed. If you wish to use ROOT files::\n\n    export DELPHES=MY/PATH/TO/DELPHES   \n", 
  "description": "Read LHCO files into a Python class"
}