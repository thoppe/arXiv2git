{
  "read_at": 1462550798, 
  "description": "Implementation of Modularity Clustering for Symmetric Graphs/Matrices", 
  "README.md": "#Modularity Clustering#\nA version of modularity clustering algorithm by Newman Phys Rev E 69, 066133 PDF Here: \n\nhttp://arxiv.org/pdf/cond-mat/0309508.pdf\n\nSmall presentation going over the algorithm/use case is in the folder ```presentations```. Presented at Data Rave April 2014.\n\nTo run it via python import it as a module (you'll want to make sure the correct folder is in your ```sys.path```):\n```python\nfrom modularity_clustering import modularity_cluster\n```\n\nSee file:\n```bash\nexamples/exampleModularityClustering.py\n```\nFor more information see comments in ```examples/exmapleModularityClustering.py``` .\n\nOutput will be of three types: \n  1.  A JSON file which includes the different clusters and the modularity values for each cluster. \n  ```json \n  {\n      \"0\": {\n          \"a\": 0.3, \n          \"e\": {\n              \"0\": 0.1, \n              \"1\": 0.0001\n          }, \n          \"members\": [\n              \"myNodeName1\", \n              \"myNodeName2\"\n          ]\n      }, \n      \"1\": {\n          \"a\": 0.4, \n          \"e\": {\n              \"0\": 0.001, \n              \"1\": 0.3\n          }, \n          \"members\": [\n              \"myNodeName3\", \n              \"myNodeName4\",\n              \"myNodeName5\"\n          ]\n      }\n  }\n  ```\n\n  2.  A five column filename where you can make a pretty gnuplot correlation plot.\n      To plot, open gnuplot and use following commands:\n      \n      ```bash\n      $set pm3d map; unset key\n      $splot \"myDataOutput.dat\" u 3:4:5\n      $set terminal pngcairo size 640,640 enhanced font 'Verdana,10'\n      $set border 3 back; set bmargin 10; set lmargin 10; set border\n      $set output \"myOutputPlot.png\"\n      $replot; unset out; exit\n      ```\n\n  3.  And a file useful for making a scala map which takes the feature and points to it's cluster ID with the following format ```bash \"stringID\" -> clusterID``` -- ie:\n  \n  ```bash\n  \"myNodeName\" -> 0\n  \"otherNodeName\" -> 0\n  \"yetAnotherNodeName\" -> 1\n  ```\n\nYou can run it on the data provided (3 Column CSV of format Node,Node,EdgeWeight)\n```bash\nkarate.csv\n```\nThis is the famous \"Zachary's Karate Club\" data from 1977.\n\nHere's a good example of how to use the module:\n\n```python\nfrom modularity_clustering import modularity_cluster\nmc = modularity_cluster()\nmc.loadEdges(\"karate.csv\")\nmc.findCommunities()\nmc.printClustersJSON(\"karate.json\")\n```\n\n", 
  "id": 19085538
}