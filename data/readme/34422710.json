{
  "README": "\\*! \\file\n * \\mainpage Introduction \n */\n========================================================================\n1. System requirements \n========================================================================\nLinux/Unix environment\n64-bit processors\nGNU GCC (4.2.1 or above)\nMPICH 3.0.4 (http://www.mpich.org/); we also test in version 1.5\nEigen (http://eigen.tuxfamily.org) for PLMA GP regression, Eigen (version 3.2.3) is already included under lib/\n\n========================================================================\n2. Compile  \n========================================================================\nTo compile all the applications, enter the command:\n\n  make all\n\nAll applications will be automatically generated in folder demo.  In\naddition, it's also supported to compile each individual application.\nFor example, to compile the application that prepares data (training\ndata, test data etc.) for experiments\n  \n  make prep\n\nFor the demonstration of different Gaussian process regression (GPR),\nyou can use command\n\n  make fgp\n\nto compile the application that demonstrates full Gaussian process\nregression;\n\n  make pitc \n\nto compile the application that demonstrates PITC GP regression; \n\n  make ppitc \n\nto compile the application that demonstrates parallel PITC GP\nregression; \n\n  make pic\n\nto compile the application that demonstrates PIC GP regression; \n\n  make ppic\n\nto compile the application that demonstrates PLMA GP regression;\n  make plma\n\nto compile the application that demonstrates PICF-based GP regression.\nTo clean the compilation environment, use the command:\n\n  make clean\n\n========================================================================\n3. Demonstrations\n========================================================================\nA bash script can be used to run all applications, using command\n\n  cd demo && bash bat_demo.sh\n\nBasically, the script first prepares all necessary files (training data,\n    test data, support set, and hyperparameter file) for experiments;\nThen, different GPR algorithms are run sequentially and output the\nresults (i.e., incurred time, root mean square error (RMSE) and mean\n    negative log probability (MNLP) ). For more information about the\narguments of applications, please refer to the comments in the bash\nscript. \n\nNote when setting the bandwidth to be 0, PLMA would be the same as PPIC.\nThe results may be different because of different clustering algorithms.\nWhen setting the bandwidth to be the maximum vale (blk - 1), PLMA would be\nequal to the FGP.\n\n========================================================================\n4. Documentation\n========================================================================\nTo compile the documentation, the documentation generation tool doxygen \n(http://www.doxygen.org) needs to be installed. Then, enter the home \ndirectory of our source code and run the command\t\n\t\n\tmake doc\n\nYou can refer to the html version documentation by\n\n\tcd doc/html \n\nand use any browser to open index.html; In addition, the pdf version can be \naccessed by\n\n\tcd doc/latex && make\n\nand use any pdf viewer to open refman.pdf.\n\n\n", 
  "read_at": 1462511830, 
  "description": "The implementation of parallel Gaussian process (GP) regression is based on the following publications:  Parallel Gaussian Process Regression with Low-Rank Covariance Matrix Approximations (UAI 2013)  and Parallel Gaussian Process Regression for Big Data: Low-Rank Representation Meets Markov Approximation (AAAI 2015).", 
  "README.md": "Introduction                         {#mainpage}\n========================================================================\n0. About this code\n------------------------------------------------------------------------\nThe implementation of parallel Gaussian process (GP) regression is based on the following publication:\n\n1. Jie Chen, Nannan Cao, Kian Hsiang Low, Ruofei Ouyang, Colin Keng-Yan Tan & Patrick Jaillet. Parallel Gaussian Process Regression with Low-Rank Covariance Matrix Approximations. In Proceedings of the 29th Conference on Uncertainty in Artificial Intelligence (UAI 2013), Bellevue, WA, Jul 11-15, 2013. It can be found at http://arxiv.org/abs/1305.5826 or http://www.comp.nus.edu.sg/~lowkh/pubs/uai2013.pdf.\n\n2. Kian Hsiang Low, Jiangbo Yu, Jie Chen and Patrick Jaillet. Parallel Gaussian Process Regression for Big Data: Low-Rank Representation Meets Markov Approximation. In Proceedings of the 29th AAAI Conference on Artificial Intelligence (AAAI-15), Austin, TX, Jan 25-29, 2015. It can be found at http://www.comp.nus.edu.sg/~lowkh/pubs/aaai2015.pdf or http://arxiv.org/abs/1411.4510.\n\n1. System requirements \n------------------------------------------------------------------------\nLinux/Unix/MacOS X environment\n\n64-bit processors\n\nGNU GCC (4.2.1 or above)\n\nMPICH 3.0.4 (http://www.mpich.org/); we also test in version 1.5\n\nEigen (http://eigen.tuxfamily.org) for PLMA GP regression, Eigen (version 3.2.3) is already included under lib/\n\n2. Compile  \n------------------------------------------------------------------------\nTo compile all the applications, enter the command:\n\n    make all\n\nAll applications will be automatically generated in folder demo.  In\naddition, it's also supported to compile each individual application.\nFor example, to compile the application that prepares data (training\ndata, test data etc.) for experiments\n  \n   make prep\n\nFor the demonstration of different Gaussian process regression (GPR),\nyou can use command\n\n    make fgp\n\nto compile the application that demonstrates full Gaussian process\nregression;\n\n    make pitc \n\nto compile the application that demonstrates PITC GP regression; \n\n    make ppitc \n\nto compile the application that demonstrates parallel PITC GP\nregression; \n\n    make pic\n\nto compile the application that demonstrates PIC GP regression; \n\n    make ppic\n\t\nto compile the application that demonstrates PLMA GP regression, \n  make plma\n\nto compile the application that demonstrates PICF-based GP regression.\nTo clean the compilation environment, use the command:\n\n    make clean\n\n\n\n3. Demonstrations\n------------------------------------------------------------------------\nA bash script can be used to run all applications, using command\n\n    cd demo && bash bat_demo.sh\n\nBasically, the script first prepares all necessary files (training data,\n    test data, support set, and hyperparameter file) for experiments;\nThen, different GPR algorithms are run sequentially and output the\nresults (i.e., incurred time, root mean square error (RMSE) and mean\n    negative log probability (MNLP) ). For more information about the\narguments of applications, please refer to the comments in the bash\nscript.\n\nNote when setting the bandwidth to be 0, PLMA would be the same as PPIC.\nThe results may be different because of different clustering algorithms.\nWhen setting the bandwidth to be the maximum vale (blk - 1), PLMA would be\nequal to the FGP.\n\n\n4. Documentation\n------------------------------------------------------------------------\nTo compile the documentation, the documentation generation tool doxygen \n(http://www.doxygen.org) needs to be installed. Then, enter the home \ndirectory of our source code and run the command\t\n\t\n\tmake doc\n\nYou can refer to the html version documentation by\n\n\tcd doc/html \n\nand use any browser to open index.html; In addition, the pdf version can be \naccessed by\n\n\tcd doc/latex && make\n\nand use any pdf viewer to open refman.pdf.\n\n\n", 
  "id": 34422710
}