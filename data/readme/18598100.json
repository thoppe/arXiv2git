{
  "read_at": 1462550775, 
  "description": "Median Filter", 
  "README.md": "Median Filter\n=============\n\n(a.k.a. **sliding window median**, **running median filter**,\nand **rolling median filter**)\n\nBenchmarking median filter algorithms,\nsee: http://arxiv.org/abs/1406.1717\n\n\nNews\n----\n\nIf you are looking for a practical median filter algorithm\nfor 1D and 2D data, see: https://github.com/suomela/mf2d\n\n\nProblem\n-------\n\nInput:\n\n  - vector x with n elements\n  - window size k\n\nOutput:\n\n  - vector y with n-k+1 elements\n  - y[i] is the median of x[i], x[i+1], ..., x[i+k-1].\n\nSee: http://en.wikipedia.org/wiki/Median_filter\n\n\nAlgorithms\n----------\n\n  - \"sort\": O(n log k): sort blocks, do linear-time post-processing\n\n  - \"heap\": O(n log k): maintain a maxheap + minheap pair\n\n  - \"tree\": O(n log k): maintain balanced search trees\n\n  - \"move\": O(n k): maintain a sorted vector\n\n\n### Sort algorithm\n\nThis algorithm is described here:\n\n  - http://arxiv.org/abs/1406.1717\n\n\n### Heap algorithm\n\nThe basic idea is to maintain a maxheap + minheap pair, see:\n\n  - http://dx.doi.org/10.1109/29.17539\n  - http://dx.doi.org/10.1109/78.80784\n  - http://dx.doi.org/10.2307/2986349\n\nThe present implementation is by AShelly:\n\n  - http://stackoverflow.com/a/5970314/383299\n  - https://gist.github.com/ashelly/5665911\n\nIt was further adapted by Colin Raffel, and this is the version that\nwe use (almost verbatim):\n\n  - https://github.com/craffel/median-filter\n\n\nCompilation\n-----------\n\nThe software is written in C++11. To compile it, you will need a\nrecent C++ compiler. For example, the following compilers should\nwork fine:\n\n  - g++ (GCC 4.7.3 or later). Tested with these versions:\n\n        g++-4.7 (Ubuntu/Linaro 4.7.3-2ubuntu1~12.04) 4.7.3\n        g++-4.8 (GCC) 4.8.2\n        g++-4.9 (GCC) 4.9.0\n\n  - clang++ (LLVM 3.4 or later). Tested with these versions:\n\n        Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)\n\nFor OS X 10.9.2, you can get the right versions of the compilers\nfrom the following sources:\n\n  - clang++: from Apple\n  - g++-4.9: from Homebrew (\"brew install gcc49\")\n\nDepending on your C++ compiler and operating system, use one of\nthe following scripts to compile this software.\n\n**OS X**:\n\n  - \"bin/build-clang\": compiles with \"clang++\"\n  - \"bin/build-gcc-4.8-osx\": compiles with \"g++-4.8\"\n  - \"bin/build-gcc-4.9-osx\": compiles with \"g++-4.9\"\n\n**Linux**:\n\n  - \"bin/build-gcc\": compiles with \"g++\"\n  - \"bin/build-gcc-4.7\": compiles with \"g++-4.7\"\n  - \"bin/build-gcc-4.8\": compiles with \"g++-4.8\"\n  - \"bin/build-gcc-4.9\": compiles with \"g++-4.9\"\n\nYou can also try to use \"scons\" to compile everything. The build\nscripts are configured for OS X platforms that have both clang++\nand g++-4.9 installed. You can get both scons and g++-4.9 from\nHomebrew.\n\n\nVersions\n--------\n\n  - build-clang-short: compiled with Clang, 32-bit data\n  - build-clang-long: compiled with Clang, 64-bit data\n  - build-gcc-short: compiled with GCC, 32-bit data\n  - build-gcc-long: compiled with GCC, 64-bit data\n\n\nTools\n-----\n\n**verify**: does some sanity-checking and makes sure that all three\nalgorithms produce the same output. Use the command line parameter\nfor larger tests, and another parameter to skip the slowest\nalgorithm. Examples:\n\n    build-gcc-short/verify\n    build-gcc-short/verify 10\n    build-gcc-short/verify 100 x\n\n**tester**: benchmarking with different parameter values and\ndifferent input data generators. Run without command line parameters\nfor brief usage instructions.\n\n\nExamples\n--------\n\nSee \"bin/examples\"\n\nOutput (fastest algorithms marked with a star):\n\n    sort    10      500000   r-asc     1     0.37903\n    heap    10      500000   r-asc     1     0.33694 *\n    tree    10      500000   r-asc     1     1.92399\n    move    10      500000   r-asc     1     0.61234\n    sort    10      500000   r-large   1     0.40114\n    heap    10      500000   r-large   1     0.33726 *\n    tree    10      500000   r-large   1     1.97069\n    move    10      500000   r-large   1     0.59606\n\n    sort    100000       5   r-asc     1     0.08125 *\n    heap    100000       5   r-asc     1     0.23712\n    tree    100000       5   r-asc     1     0.66017\n    move    100000       5   r-asc     1    26.93506\n    sort    100000       5   r-large   1     0.08979 *\n    heap    100000       5   r-large   1     0.09957\n    tree    100000       5   r-large   1     1.53184\n    move    100000       5   r-large   1     9.01672\n\n    sort    1000000      5   r-asc     1     0.91729 *\n    heap    1000000      5   r-asc     1     3.73655\n    tree    1000000      5   r-asc     1     8.75793\n    sort    1000000      5   r-large   1     1.48117\n    heap    1000000      5   r-large   1     1.32437 *\n    tree    1000000      5   r-large   1    29.67124\n\n    sort    10000000     5   r-asc     1     9.27875 *\n    heap    10000000     5   r-asc     1    44.77312\n    tree    10000000     5   r-asc     1    95.78014\n    sort    10000000     5   r-large   1    23.72148\n    heap    10000000     5   r-large   1    14.37096 *\n    tree    10000000     5   r-large   1   441.65488\n\n\nColumns:\n\n  - algorithm\n  - h, the half-window size\n  - b, the number of blocks\n  - input data generator\n  - random seed\n  - time in seconds\n\nHere window size is k = 2h + 1.\nInput data is a vector with n = bk elements.\n\nIn this example we used the following generators:\n\n  - \"r-asc\": monotonically incresing sequence + random noise\n  - \"r-large\": large random numbers\n\n\nPlots\n-----\n\n  - x axis: half-window size\n  - y axis: running time\n  - blue: \"sort\" algorithm\n  - green: \"heap\" algorithm\n  - red: \"tree\" algorithm\n  - black: \"move\" algorithm\n  - solid curve = median\n  - shaded area = 10% ... 90% region\n\n\nLicense\n-------\n\n### Other parts\n\nCopyright (c) 2014, Jukka Suomela.\n\nYou can distribute and use this software under the MIT license:\nhttp://opensource.org/licenses/MIT\n\nTo contact the author, see http://users.ics.aalto.fi/suomela/\n\n\n### HeapMedian.cc\n\nBased on: https://github.com/craffel/median-filter (file Mediator.h)\n\n    Sliding median filter\n    Created 2012 by Colin Raffel\n    Portions Copyright (c) 2011 ashelly.myopenid.com under\n    <http://www.opensource.org/licenses/mit-license>\n\n\nAcknowledgements\n----------------\n\nComputer resources were provided by the Aalto University\nSchool of Science \"Science-IT\" project.\n\nThanks to David Eppstein, Geoffrey Irving, Pat Morin, and Saeed\nfor comments and discussions here:\n\n  - http://cstheory.stackexchange.com/q/21730/74\n  - https://plus.google.com/+JukkaSuomela/posts/JWtBkytfJsA\n\n", 
  "id": 18598100
}