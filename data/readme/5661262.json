{
  "README.markdown": "# JooFlux: a Java agent for dynamic aspect-oriented middlewares\n\nJooFlux a JVM agent that allows both the dynamic replacement of method implementations and the\napplication of aspect advices. Compared to existing approaches, JooFlux takes a novel route by\ntaking advantage of the new `invokedynamic` instruction added in Java SE 7. The runtime overhead of\nJooFlux is marginal for method invocations, and fairly limited when aspects are being injected. In\nany case, JooFlux shows interesting performance compared to related approaches such as AOP tools or\ndynamic languages that rely on dynamic dispatch. More interestingly, JooFlux does not involve\nreloading whole classes on either method replacement or advice injection, which keeps a large range\nof just-in-time compilation optimizations valid.\n\nJooFlux is being developed as part of a [larger academic research group](http://dynamid.citi-lab.fr/)\nthat focuses on the design and implementation of middlewares for dynamic environments.\n\n## Current status\n\nThe current iteration of the source code is only a proof-of-concept of leveraging `invokedynamic`\nfor aspect-oriented programming and live code patching. **It is not production-ready**, and\nfurther developments need to be made to turn JooFlux into a usable product.\n\nWhile it is our intention to turn it into something easier to use, we opted to release the initial\ndevelopments source code to support the reproducibility and dissemination of our research results.\n\nPlease pardon the raw state of JooFlux, but the system we are in pushes us to publish research papers\nfirst before focusing on the technology transfer of prototypes :-)\n\n## Funding the JooFlux development\n\nOur very own ability to progress on dynamic code replacement and aspect injection with JooFlux\ndepends on funding.\n\nWe have no external funding for the JooFlux project at the moment, so if you feel like sustaining\nour research on this project, feel-free to contact us!\n\n## Publications\n\n* Julien Ponge and Frederic Le Mouel. JooFlux : modification de code a chaud et injection d'aspects\n  directement dans une JVM 7. In Proceedings of Conference d'informatique en Parallelisme, Architecture\n  et Systeme (ComPAS) - Conference Francaise en Systemes d'Exploitation (CFSE). Grenoble, January 2013.\n  [HAL INRIA entry](http://hal.inria.fr/hal-00759402).\n* Julien Ponge and Frederic Le Mouel. JooFlux: Hijacking Java 7 InvokeDynamic To Support Live Code Modifications. 2012. [Research report on arXiv](http://fr.arxiv.org/abs/1210.1039)\n* We demonstrated initial developments of JooFlux at the [Devoxx France 2012 conference](http://www.devoxx.fr/).\n\n## License\n\nThe initial work was conducted at [INSA-Lyon](http://www.insa-lyon.fr/) in the\n[CITI laboratory](http://www.citi-lab.fr/).\n\nJooFlux is made available under the terms of the\n[Mozilla Public License, v 2.0](http://mozilla.org/MPL/2.0/).\n\n### Header notice\n\nAny source file must carry the following header:\n\n    JooFlux\n    \n    Copyright (c) 2012 Institut National des Sciences Appliquees de Lyon (INSA-Lyon)\n    Copyright (c) 2012 Julien Ponge, INSA-Lyon\n    Copyright (c) 2012 Frederic Le Mouel, INSA-Lyon\n\n    This Source Code Form is subject to the terms of the Mozilla Public\n    License, v. 2.0. If a copy of the MPL was not distributed with this\n    file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n### Third-party dependencies\n\nJooFlux embeds the following libraries:\n\n* [ASM](http://asm.ow2.org/), [BSD-style licensed](http://asm.ow2.org/license.html)\n* [Tinylog](http://www.tinylog.org/), [Apache 2.0 licensed](http://www.tinylog.org/license)\n\n## Contact\n\nYou may contact us using our INSA-Lyon email addresses (see the `AUTHORS` file).\n\nIf you would like to report issues, please do so with the\n[issue tracker on GitHub](https://github.com/dynamid/jooflux/issues).\n\n## Contributing\n\nWe welcome contributions, see `CONTRIBUTING.markdown` for instructions.\n\n## Building and dependencies\n\nJooFlux requires:\n\n* Java SE 7+\n* [Gradle](https://www.gradle.org/)\n\nBuilding JooFlux is straightforward using Gradle :\n\n    gradle clean build\n\nWe also have a bunch of custom tasks for testing purposes, e.g.:\n\n    gradle test_fibonacci\n    gradle test_counterloop\n    (...)\n\nTo display the entire list, run `gradle tasks`.\n\n## Running JooFlux\n\nJooFlux needs to be attached to a JVM like any other regular agent. JooFlux transforms bytecode\nin a way that sometimes breaks the bytecode verifier expectations. Nevertheless, the transformed\nbytecode remains correct at runtime, so it is *best* to run JooFlux while disabling the bytecode\nverifier (`-noverify` flag). Other JVM agents sometimes ask you to do the same, too.\n\nHere is how you could run a Java application with JooFlux wired into the JVM:\n\n    java -noverify -javaagent:jooflux-{version}.jar -classpath lib1.jar:lib2.jar:lib3.jar some.Main\n\nJooFlux uses [Tinylog](http://www.tinylog.org) as its logging framework. You may tweak the configuration\n[by passing flags as documented](http://www.tinylog.org/user-manual). For instance, `-Dtinylog.level=ERROR`\nfilters most logs bar errors. You may also conveniently redirect the output to files.\n\nInteractions with JooFlux currently happen through a JMX agent:\n`fr.insalyon.telecom.jooflux.internal.jmx.JooFluxManagement`. It offers methods to get metrics,\nupdate methods and apply aspects. While the interface is a bit raw at the moment, see the `demoing/`\nfolder for examples of valid parameters to perform demonstrations of JooFlux.\n    \n## Backlog towards turning JooFlux into a product\n\nHere are the items that need to be addressed.\n\n### Improving the code base\n\nThe source code went through scattered burst of interrupted developments. We had to show the\nfeasibility of our approach first and foremost while having few allocatable time, hence we did not\ncover all corner cases and sometimes had to favor working code over cleaner code.\n\nThis is a general effort that any software project faces.\n\n### Corner cases\n\nThe bytecode transformations made by JooFlux are not trivial. We are well aware that it breaks\nsome bytecode sequences, resulting in invalid stack frames (*a fancy expression for \"crash\"*).\n\nWe would greatly appreciate if you could isolate pathological corner cases so that we can\naddress those in subsequent releases, and eventually turn JooFlux into a tool usable on a larger\nset of JVM applications.\n\nOf course if you can both isolate corner cases *and* offer a fix, feel-free to do so!\n\n### Thread safety\n\nOur implementation is weak with respect to thread safety. More tests and fixes need to be made\nin multi-threading settings.\n\n### Memory leaks\n\nWe keep track of call sites in a registry. However, we keep references to the call sites *forever*,\nhence call sites cannot be garbage collected. This is problematic, and we need to turn to weak\nreferences and find the appropriate spot to occasionally remove expired entries from the registry.\n\n### Management\n\nJooFlux is currently manageable using JMX. This makes requesting operations such as patching\na method tedious using tools such as `jconsole`.\n\nInstead, we should design a (TCP?) protocol for external interactions with scripts / tools.\nAlso, it should be possible to perform batches of operations (e.g., apply advice `foo` to all\nthe classes implementing `SomeInterface`, update all methods of class `Foo` with those from\n`Foo` in `foo-1.1.jar`, etc).\n\n### Classpath injection\n\nWhen one applies an advice or patches a method, the corresponding class needs to be visible from\nthe JooFlux agent classpath. While this works fine for our demos, this is clearly not satisfying.\n\nWe need to be able to order the agent to resolve classes using dynamic classloaders.\n\n### Hooks\n\nCertain classes of applications may take advantage of JooFlux event notifications, for instance\nto react to a class being patched and perform various operations such as additional housekeeping.\n\n", 
  "read_at": 1462557308, 
  "description": "JooFlux is a Java agent for dynamic aspect-oriented middlewares.", 
  "id": 5661262
}