{
  "read_at": 1462557994, 
  "description": "Several algorithm for accurately and efficiently summing n floating point numbers", 
  "README.md": "Sparse SuperAccumulator\n=======================\n\nThis project provides different algorithms for exactly and efficiently\nsumming n floating point numbers. The main challenge is to ensure a correct\nrounding of the true sum of the input numbers. This cannot be trivially done\nusing a standard double-precision floating-point accumulator as its precision\nis limited and it carries out a rounding step with every addition operation.\nWith a huge list of numbers, these errors might propagate causing a significant\nround-off error. Currently, it contains mainly three implementations:\n\n+ **Sparse SuperAccumulator:**\n  This algorithm creates a superaccumulator which consists of several chunks\n  that cover all the significant digits of the double-precision floating-point\n  domain as defined by [IEEE 754 standard]\n  (https://en.wikipedia.org/wiki/IEEE_floating_point).\n  This superaccumulator is designed with a logic that completely avoids the\n  propagation of carry bits making it more suitable for parallel architectures.\n+ **Small SuperAccumulator:**\n  This algorithm creates a superaccumulator which consists of several\n  /overlapping/ chunks that cover all significant digits. The overlap is\n  designed to minimize the propagation of carry bits without completely\n  avoiding it.\n+ **iFastSum:**\n  The iFastSum is an inherently sequential algorithm that sums n-floating point\n  numbers by accumulating numbers and corresponding errors.\n\nThe output of all these algorithms is a single standard double-precision\nfloating point number that represent the correct-rounding of the true sum of\nthe input dataset.\n\nCompiling\n=========\n\nThe source code is in Java and can be compiled using [Maven]\n(http://maven.apache.org/). Once you have JDK, and Maven installed, you need\nto type the following command to build the code.\n\n    mvn install\n\nRandom Generator\n================\n\nThis project also contains a random generator that can be used to generate\nlarge datasets for testing. It generates four types of datasets:\n\n1. Well-conditioned data with all positive numbers.\n2. A mix of positive and negative random numbers.\n3. Anderson's ill-conditioned data which generates a set of numbers and then\n   subtracts their arithmetic mean from each number.\n4. An extremely ill-conditioned data where the sum is equal to zero.\n\nIn all these datasets, an additional parameter (&#x3B4;) can be configured which\ndefines the range of exponents for all the generated numbers.\n\nDriver\n======\n\nTo be able to run some experiments on large datasets, we included a driver that\nexecutes the following.\n\n1. Loads a dataset from disk and runs the sequential iFastSum algorithm on it.\n2. Loads a dataset from disk and runs the sparse superaccumulator algorithm in\n   parallel using the available cores in the machine.\n3. A MapReduce implementation of the sparse superaccumulator algorithm that\n   uses Spark to sum each block separately, and then sums up all the results\n   on a single machine.\n4. A similar MapReduce implementation that uses small suepraccumulator instead\n   of sparse superaccumulator.\n\nAcknowledgement\n===============\n\nThe idea of the sparse superaccumulator algorithm was designed by\n[Michael T. Goodrich](http://www.ics.uci.edu/~goodrich/) from\n[University of California, Irvine](http://www.uci.edu/) and\n[Ahmed Eldawy](http://www-users.cs.umn.edu/~eldawy/) from\n[University of Minnesota, Twin Cities](http://twin-cities.umn.edu/).\n\nThe small superaccumulator algorithm was designed by\n[Radford M. Neal](http://www.cs.toronto.edu/~radford/) from\n[University of Toronto](http://www.utoronto.ca/). The provided Java algorithm\nis a direct translation of the C code snippets that appeared in the following\npaper.\n\nR. M. Neal, Fast Exact Summation using Small and Large Superaccumulators.\narXiv ePrint,abs/1505.05571, 2015.\n\nWe had to expand those snippets to add carry-propagation logic, addition of\ntwo small superaccumulators, and converting the small superaccumulator into\na correctly-rounded double-precision value.\n\nThe iFastSum algorithm was originally invented by Yong-Kang Zhu and\n[Wayne B. Hayes](http://www.ics.uci.edu/~wayne)\nfrom [University of California, Irvine](http://www.uci.edu/).\nThe provided Java implementation is a direct translation of the original\nC++ code provided as a supplementary material to the following paper.\n\nY. K. Zhu and W. B. Hayes. Algorithm 908: Online Exact Summation of Floating-\nPoint Streams. ACM Transactions on Mathematical Software (ACM TOMS),\n37(3):37:1-37:13, September 2010.\nDOI=http://dx.doi.org/10.1145/1824801.1824815\n", 
  "id": 51100857
}