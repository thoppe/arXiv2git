{
  "read_at": 1462547091, 
  "description": "The modular galaxy image simulation toolkit", 
  "README.md": "@mainpage\n\nGalSim: The modular galaxy image simulation toolkit\n===================================================\n\nGalSim is open-source software for simulating images of astronomical objects\n(stars, galaxies) in a variety of ways.  The bulk of the calculations are\ncarried out in C++, and the user interface is in python.  In addition, the code\ncan operate directly on \"config\" files, for those users who prefer not to work\nin python.  The impetus for the software package was a weak lensing community\ndata challenge, called GREAT3:\n\n    http://great3challenge.info/\n\nHowever, the code has numerous additional capabilities beyond those needed for\nthe challenge, and has been useful for a number of projects that needed to\nsimulate high-fidelity galaxy images with accurate sizes and shears.  At the\nend of this file, there is a list of the code capabilities and plans for future\ndevelopment.  For details of algorithms and code validation, please see\n\n    http://arxiv.org/abs/1407.7676\n\n\nDistribution\n------------\n\nThe current released version of GalSim is version 1.3.  To get the code, you\ncan grab the tarball (or zip file) from\n\n    https://github.com/GalSim-developers/GalSim/releases/tag/v1.3.0\n\nAlso, feel free to fork the repository:\n\n    https://github.com/GalSim-developers/GalSim/fork\n\nOr clone the repository with either of the following:\n\n    git clone git@github.com:GalSim-developers/GalSim.git\n    git clone https://github.com/GalSim-developers/GalSim.git\n\nalthough after doing so, if you are not a developer, you should probably\ncheckout the latest release tag, rather than use the master branch:\n\n    git checkout v1.3.0\n\nThe code is also distributed via Fink, Macports, and Homebrew for Mac users.\nSee INSTALL.md for more information.\n\nThe code is licensed under a BSD-style license.  See the file LICENSE for more\ndetails.\n\n\nKeeping up-to-date with GalSim\n------------------------------\n\nThere is a GalSim mailing list, organized through the Google Group\ngalsim-announce.  Members of the group will receive news and updates about the\nGalSim code, including notifications of major version releases, new features\nand bugfixes.\n\nYou do not need a Google Account to subscribe to the group, simply send any\nemail to\n\n    galsim-announce+subscribe@googlegroups.com\n\nIf you receive a confirmation request (check junk mail filters!) simply reply\ndirectly to that email, with anything, to confirm.  You may also click the link\nin the confirmation request, but you may be asked for a Google Account login.\n\nTo unsubscribe, simply send any email to\n\n    galsim-announce+unsubscribe@googlegroups.com\n\nYou should receive notification that your unsubscription was successful.\n\n\nHow to communicate with the GalSim developers\n---------------------------------------------\n\nIf you have a question about how to use GalSim, a good place to ask it is at\nStackOverflow:\n\n    http://stackoverflow.com/\n\nSome of the GalSim developers have alerts set up to be automatically notified\nabout questions with the 'galsim' tag, so there is a good chance that your\nquestion will be answered.\n\nIf you find something that you think is a bug, or if you have a suggestion\nfor a new feature, please open up an Issue on our GitHub repository:\n\n    https://github.com/GalSim-developers/GalSim/issues?state=open\n\n\nInstallation\n------------\n\nFor installation instructions, please see the file `INSTALL.md` in the main\nrepository directory.\n\nThere are tagged versions of the code corresponding to specific project\nreleases and development milestones. (For more info, see the \"Tagged versions\"\nsection below, and `devel/git.txt`)\n\n\nGetting started\n---------------\n\n* Install the code as in `INSTALL.md`.\n\n* Optional, but recommended whenever you try a new version of the code: run the\n  unit tests to make sure that there are no errors.  You can do this by running\n  `scons tests`.  If there are any issues, please open an Issue on our GitHub\n  page.\n\n* Optional: run `doxygen` to generate documentation, using `Doxyfile` in the\n  main repository directory to specify all doxygen settings.  Alternatively,\n  you can view the documentation online at\n\n      http://galsim-developers.github.io/GalSim/\n\n\nReference documentation\n-----------------------\n\nFor an overview of GalSim workflow and python tools, please see the file\n`doc/GalSim_Quick_Reference.pdf` in the GalSim repository.  A guide to using\nthe configuration files to generate simulations, a FAQ for installation issues,\nand other useful references can be found on the GalSim wiki,\n\n    https://github.com/GalSim-developers/GalSim/wiki\n\nMore thorough documentation for all parts of the code can be found in the\ndoxygen documentation mentioned in the previous section, or in the python\ndocstrings in `galsim/*.py`.\n\n\nRepository directory structure\n------------------------------\n\nThe repository has a number of subdirectories. Below is a guide to their\ncontents:\n\n* bin/ :      executables (after the compilation procedure is done).\n* devel/ :    an assortment of developer tools.\n* doc/ :      documentation, including a `Quick Reference` guide and, if the\n              user generates doxygen documentation using Doxyfile, the outputs\n              will also go in this directory.\n* examples/ : example scripts (see the following section).\n* galsim/ :   the python code for GalSim (which is what most end-users interact\n              with).\n* include/ :  the .h header files for the C++ parts of GalSim.\n* lib/ :      compiled libraries (after the compilation procedure is done).\n* pysrc/ :    the code that makes the purely C++ parts of GalSim accessible to\n              the python layer of GalSim.\n* src/ :      the source code for the purely C++ parts of GalSim.\n* tests/ :    unit tests.\n\n\nDemonstration scripts\n---------------------\n\nThere are a number of scripts in `examples/` that demonstrate how the code can\nbe used.  These are called `demo1.py`...`demo13.py`.  You can run them by\ntyping (e.g.) `python demo1.py` while sitting in `examples/`, All demo scripts\nare designed to be run in the `examples/` directory.  Some of them access\nfiles in subdirectories of the `examples/` directory, so they would not work\ncorrectly from other locations.\n\nA completely parallel sequence of configuration files, called `demo1.yaml`...\n`demo11.yaml`, demonstrates how to make the same set of simulations using\nconfig files that are parsed by the executable `bin/galsim`.  (There are no\ncorresponding .yaml files for demo12 and demo13 yet, because some of the\nfunctionality cannot yet be carried out using config files.)\n\nAs the project develops through further versions, and adds further\ncapabilities to the software, more demo scripts may be added to `examples/`\nto illustrate what GalSim can do.\n\n\nTagged versions\n---------------\n\nEach GalSim release is tagged in git with the tag name `vX.X.X`.  You can see\nthe available tags using the command\n\n    git tag -l\n\nat a terminal from within the repository.  In addition to the official\nreleases, we also have tags for various other milestones that were important\nat one time or another.\n\nThe version of the code at any given snapshot can be downloaded from our\nGitHub webpage, or checked out from the repository using the tag name, e.g.:\n\n    git checkout v1.3.0\n\nThis will then update your directory tree to the snapshot of the code at the\nmilestone requested.  (You will also get a message about being in a \"detached\"\nHEAD state.  That is normal.)\n\nFor a version history and a description of how the current version of the code\ndiffers from the last tagged version, see HISTORY.md and CHANGELOG.md\n(respectively).  These files are found in the main GalSim directory, and are\nalso displayed on our wiki which is linked above.\n\n\nSummary of current capabilities\n-------------------------------\n\nCurrently, GalSim has the following capabilities:\n\n* Can generate PSFs from a variety of simple parametric models such as Moffat,\n  Kolmogorov, and Airy, as well as an optical PSF model that includes Zernike\n  aberrations up to spherical, and an optional central obscuration and\n  struts.\n\n* Can simulate galaxies from a variety of simple parametric models as well as\n  from real HST data.  For information about downloading a suite of COSMOS\n  images, see\n\n      https://github.com/GalSim-developers/GalSim/wiki/RealGalaxy%20Data\n\n* Can make the images either via i) Fourier transform, ii) real-space\n  convolution (real-space being occasionally faster than Fourier), or\n  iii) photon-shooting.  The exception is that objects that include a\n  deconvolution (such as RealGalaxy objects) must be carried out using Fourier\n  methods only.\n\n* Can handle wavelength-dependent profiles and integrate over filter\n  bandpasses appropriately.\n\n* Can apply shear, magnification, dilation, or rotation to a galaxy profile\n  including lensing-based models from a power spectrum or NFW halo profile.\n\n* Can draw galaxy images into arbitrary locations within a larger image.\n\n* Can add noise using a variety of noise models, including correlated noise.\n\n* Can whiten or apply N-fold symmetry to existing correlated noise that is \n  already in an image.\n\n* Can read in input values from a catalog, a dictionary file (such as a JSON\n  or YAML file), or a fits header.\n\n* Can write images in a variety of formats: regular FITS files, FITS data\n  cubes, or multi-extension FITS files.  It can also compress the output files\n  using various compressions including gzip, bzip2, and rice.\n\n* Can carry out nearly any simulation that a user might want using two parallel\n  methods: directly using python code, or by specifying the simulation\n  properties in an input configuration script.  See the demo scripts in\n  the examples/ directory for examples of each.\n\n* Supports a variety of possible WCS options from a simple pixel scale factor\n  of arcsec/pixel to affine transforms to arbitrary functions of (x,y),\n  including a variety of common FITS WCS specifications.\n\n* Can include a range of simple detector effects such as nonlinearity,\n  brighter-fatter effect, etc.\n\n* Has a module that is particularly meant to simulate images for the WFIRST\n  survey.\n\n\nSummary of planned future development\n-------------------------------------\n\nWe plan to add the following additional capabilities in future versions of\nGalSim:\n\n* PSFs from stochastic atmosphere models.\n  (cf. `devel/modules/atmos_factfinding.pdf`)\n\n* Simulating more sophisticated detector defects and image artifacts.\n\n* Support for flexion.  (cf. Issue #361)\n\nThere are many others as well.  Please see\n\n    https://github.com/GalSim-developers/GalSim/issues\n\nfor a list of the current open issues.  And feel free to add an issue if there\nis something useful that you think should be possible, but is not currently\nimplemented.\n", 
  "id": 3510804
}